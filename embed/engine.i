/* 09112024: Auto-generated file. Do not edit */ 
typedef void (*GLADapiproc)(void);
typedef GLADapiproc (*GLADloadfunc)(const char *name);
typedef GLADapiproc (*GLADuserptrloadfunc)(void *userptr, const char *name);
typedef void (*GLADprecallback)(const char *name, GLADapiproc apiproc, int len_args, ...);
typedef void (*GLADpostcallback)(void *ret, const char *name, GLADapiproc apiproc, int len_args, ...);
typedef __int32                 khronos_int32_t;
typedef unsigned __int32        khronos_uint32_t;
typedef __int64                 khronos_int64_t;
typedef unsigned __int64        khronos_uint64_t;
typedef signed   char          khronos_int8_t;
typedef unsigned char          khronos_uint8_t;
typedef signed   short int     khronos_int16_t;
typedef unsigned short int     khronos_uint16_t;
typedef signed   long long int khronos_intptr_t;
typedef unsigned long long int khronos_uintptr_t;
typedef signed   long long int khronos_ssize_t;
typedef unsigned long long int khronos_usize_t;
typedef          float         khronos_float_t;
typedef khronos_uint64_t       khronos_utime_nanoseconds_t;
typedef khronos_int64_t        khronos_stime_nanoseconds_t;
typedef enum {
    KHRONOS_FALSE = 0,
    KHRONOS_TRUE  = 1,
    KHRONOS_BOOLEAN_ENUM_FORCE_SIZE = 0x7FFFFFFF
} khronos_boolean_enum_t;
typedef unsigned int GLenum;
typedef unsigned char GLboolean;
typedef unsigned int GLbitfield;
typedef void GLvoid;
typedef khronos_int8_t GLbyte;
typedef khronos_uint8_t GLubyte;
typedef khronos_int16_t GLshort;
typedef khronos_uint16_t GLushort;
typedef int GLint;
typedef unsigned int GLuint;
typedef khronos_int32_t GLclampx;
typedef int GLsizei;
typedef khronos_float_t GLfloat;
typedef khronos_float_t GLclampf;
typedef double GLdouble;
typedef double GLclampd;
typedef void *GLeglClientBufferEXT;
typedef void *GLeglImageOES;
typedef char GLchar;
typedef char GLcharARB;
typedef unsigned int GLhandleARB;
typedef khronos_uint16_t GLhalf;
typedef khronos_uint16_t GLhalfARB;
typedef khronos_int32_t GLfixed;
typedef khronos_intptr_t GLintptr;
typedef khronos_intptr_t GLintptrARB;
typedef khronos_ssize_t GLsizeiptr;
typedef khronos_ssize_t GLsizeiptrARB;
typedef khronos_int64_t GLint64;
typedef khronos_int64_t GLint64EXT;
typedef khronos_uint64_t GLuint64;
typedef khronos_uint64_t GLuint64EXT;
typedef struct __GLsync *GLsync;
struct _cl_context;
struct _cl_event;
typedef void (__stdcall *GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void (__stdcall *GLDEBUGPROCARB)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void (__stdcall *GLDEBUGPROCKHR)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void (__stdcall *GLDEBUGPROCAMD)(GLuint id,GLenum category,GLenum severity,GLsizei length,const GLchar *message,void *userParam);
typedef unsigned short GLhalfNV;
typedef GLintptr GLvdpauSurfaceNV;
typedef void (__stdcall *GLVULKANPROCNV)(void);
extern int GLAD_GL_VERSION_1_0;
extern int GLAD_GL_VERSION_1_1;
extern int GLAD_GL_VERSION_1_2;
extern int GLAD_GL_VERSION_1_3;
extern int GLAD_GL_VERSION_1_4;
extern int GLAD_GL_VERSION_1_5;
extern int GLAD_GL_VERSION_2_0;
extern int GLAD_GL_VERSION_2_1;
extern int GLAD_GL_VERSION_3_0;
extern int GLAD_GL_VERSION_3_1;
extern int GLAD_GL_VERSION_3_2;
extern int GLAD_GL_VERSION_3_3;
extern int GLAD_GL_ARB_ES2_compatibility;
extern int GLAD_GL_ARB_ES3_1_compatibility;
extern int GLAD_GL_ARB_ES3_2_compatibility;
extern int GLAD_GL_ARB_ES3_compatibility;
extern int GLAD_GL_ARB_arrays_of_arrays;
extern int GLAD_GL_ARB_base_instance;
extern int GLAD_GL_ARB_bindless_texture;
extern int GLAD_GL_ARB_blend_func_extended;
extern int GLAD_GL_ARB_buffer_storage;
extern int GLAD_GL_ARB_cl_event;
extern int GLAD_GL_ARB_clear_buffer_object;
extern int GLAD_GL_ARB_clear_texture;
extern int GLAD_GL_ARB_clip_control;
extern int GLAD_GL_ARB_color_buffer_float;
extern int GLAD_GL_ARB_compatibility;
extern int GLAD_GL_ARB_compressed_texture_pixel_storage;
extern int GLAD_GL_ARB_compute_shader;
extern int GLAD_GL_ARB_compute_variable_group_size;
extern int GLAD_GL_ARB_conditional_render_inverted;
extern int GLAD_GL_ARB_conservative_depth;
extern int GLAD_GL_ARB_copy_buffer;
extern int GLAD_GL_ARB_copy_image;
extern int GLAD_GL_ARB_cull_distance;
extern int GLAD_GL_ARB_debug_output;
extern int GLAD_GL_ARB_depth_buffer_float;
extern int GLAD_GL_ARB_depth_clamp;
extern int GLAD_GL_ARB_depth_texture;
extern int GLAD_GL_ARB_derivative_control;
extern int GLAD_GL_ARB_direct_state_access;
extern int GLAD_GL_ARB_draw_buffers;
extern int GLAD_GL_ARB_draw_buffers_blend;
extern int GLAD_GL_ARB_draw_elements_base_vertex;
extern int GLAD_GL_ARB_draw_indirect;
extern int GLAD_GL_ARB_draw_instanced;
extern int GLAD_GL_ARB_enhanced_layouts;
extern int GLAD_GL_ARB_explicit_attrib_location;
extern int GLAD_GL_ARB_explicit_uniform_location;
extern int GLAD_GL_ARB_fragment_coord_conventions;
extern int GLAD_GL_ARB_fragment_layer_viewport;
extern int GLAD_GL_ARB_fragment_program;
extern int GLAD_GL_ARB_fragment_program_shadow;
extern int GLAD_GL_ARB_fragment_shader;
extern int GLAD_GL_ARB_fragment_shader_interlock;
extern int GLAD_GL_ARB_framebuffer_no_attachments;
extern int GLAD_GL_ARB_framebuffer_object;
extern int GLAD_GL_ARB_framebuffer_sRGB;
extern int GLAD_GL_ARB_geometry_shader4;
extern int GLAD_GL_ARB_get_program_binary;
extern int GLAD_GL_ARB_get_texture_sub_image;
extern int GLAD_GL_ARB_gl_spirv;
extern int GLAD_GL_ARB_gpu_shader5;
extern int GLAD_GL_ARB_gpu_shader_fp64;
extern int GLAD_GL_ARB_gpu_shader_int64;
extern int GLAD_GL_ARB_half_float_pixel;
extern int GLAD_GL_ARB_half_float_vertex;
extern int GLAD_GL_ARB_imaging;
extern int GLAD_GL_ARB_indirect_parameters;
extern int GLAD_GL_ARB_instanced_arrays;
extern int GLAD_GL_ARB_internalformat_query;
extern int GLAD_GL_ARB_internalformat_query2;
extern int GLAD_GL_ARB_invalidate_subdata;
extern int GLAD_GL_ARB_map_buffer_alignment;
extern int GLAD_GL_ARB_map_buffer_range;
extern int GLAD_GL_ARB_matrix_palette;
extern int GLAD_GL_ARB_multi_bind;
extern int GLAD_GL_ARB_multi_draw_indirect;
extern int GLAD_GL_ARB_multisample;
extern int GLAD_GL_ARB_multitexture;
extern int GLAD_GL_ARB_occlusion_query;
extern int GLAD_GL_ARB_occlusion_query2;
extern int GLAD_GL_ARB_parallel_shader_compile;
extern int GLAD_GL_ARB_pipeline_statistics_query;
extern int GLAD_GL_ARB_pixel_buffer_object;
extern int GLAD_GL_ARB_point_parameters;
extern int GLAD_GL_ARB_point_sprite;
extern int GLAD_GL_ARB_polygon_offset_clamp;
extern int GLAD_GL_ARB_post_depth_coverage;
extern int GLAD_GL_ARB_program_interface_query;
extern int GLAD_GL_ARB_provoking_vertex;
extern int GLAD_GL_ARB_query_buffer_object;
extern int GLAD_GL_ARB_robust_buffer_access_behavior;
extern int GLAD_GL_ARB_robustness;
extern int GLAD_GL_ARB_robustness_isolation;
extern int GLAD_GL_ARB_sample_locations;
extern int GLAD_GL_ARB_sample_shading;
extern int GLAD_GL_ARB_sampler_objects;
extern int GLAD_GL_ARB_seamless_cube_map;
extern int GLAD_GL_ARB_seamless_cubemap_per_texture;
extern int GLAD_GL_ARB_separate_shader_objects;
extern int GLAD_GL_ARB_shader_atomic_counter_ops;
extern int GLAD_GL_ARB_shader_atomic_counters;
extern int GLAD_GL_ARB_shader_ballot;
extern int GLAD_GL_ARB_shader_bit_encoding;
extern int GLAD_GL_ARB_shader_clock;
extern int GLAD_GL_ARB_shader_draw_parameters;
extern int GLAD_GL_ARB_shader_group_vote;
extern int GLAD_GL_ARB_shader_image_load_store;
extern int GLAD_GL_ARB_shader_image_size;
extern int GLAD_GL_ARB_shader_objects;
extern int GLAD_GL_ARB_shader_precision;
extern int GLAD_GL_ARB_shader_stencil_export;
extern int GLAD_GL_ARB_shader_storage_buffer_object;
extern int GLAD_GL_ARB_shader_subroutine;
extern int GLAD_GL_ARB_shader_texture_image_samples;
extern int GLAD_GL_ARB_shader_texture_lod;
extern int GLAD_GL_ARB_shader_viewport_layer_array;
extern int GLAD_GL_ARB_shading_language_100;
extern int GLAD_GL_ARB_shading_language_420pack;
extern int GLAD_GL_ARB_shading_language_include;
extern int GLAD_GL_ARB_shading_language_packing;
extern int GLAD_GL_ARB_shadow;
extern int GLAD_GL_ARB_shadow_ambient;
extern int GLAD_GL_ARB_sparse_buffer;
extern int GLAD_GL_ARB_sparse_texture;
extern int GLAD_GL_ARB_sparse_texture2;
extern int GLAD_GL_ARB_sparse_texture_clamp;
extern int GLAD_GL_ARB_spirv_extensions;
extern int GLAD_GL_ARB_stencil_texturing;
extern int GLAD_GL_ARB_sync;
extern int GLAD_GL_ARB_tessellation_shader;
extern int GLAD_GL_ARB_texture_barrier;
extern int GLAD_GL_ARB_texture_border_clamp;
extern int GLAD_GL_ARB_texture_buffer_object;
extern int GLAD_GL_ARB_texture_buffer_object_rgb32;
extern int GLAD_GL_ARB_texture_buffer_range;
extern int GLAD_GL_ARB_texture_compression;
extern int GLAD_GL_ARB_texture_compression_bptc;
extern int GLAD_GL_ARB_texture_compression_rgtc;
extern int GLAD_GL_ARB_texture_cube_map;
extern int GLAD_GL_ARB_texture_cube_map_array;
extern int GLAD_GL_ARB_texture_env_add;
extern int GLAD_GL_ARB_texture_env_combine;
extern int GLAD_GL_ARB_texture_env_crossbar;
extern int GLAD_GL_ARB_texture_env_dot3;
extern int GLAD_GL_ARB_texture_filter_anisotropic;
extern int GLAD_GL_ARB_texture_filter_minmax;
extern int GLAD_GL_ARB_texture_float;
extern int GLAD_GL_ARB_texture_gather;
extern int GLAD_GL_ARB_texture_mirror_clamp_to_edge;
extern int GLAD_GL_ARB_texture_mirrored_repeat;
extern int GLAD_GL_ARB_texture_multisample;
extern int GLAD_GL_ARB_texture_non_power_of_two;
extern int GLAD_GL_ARB_texture_query_levels;
extern int GLAD_GL_ARB_texture_query_lod;
extern int GLAD_GL_ARB_texture_rectangle;
extern int GLAD_GL_ARB_texture_rg;
extern int GLAD_GL_ARB_texture_rgb10_a2ui;
extern int GLAD_GL_ARB_texture_stencil8;
extern int GLAD_GL_ARB_texture_storage;
extern int GLAD_GL_ARB_texture_storage_multisample;
extern int GLAD_GL_ARB_texture_swizzle;
extern int GLAD_GL_ARB_texture_view;
extern int GLAD_GL_ARB_timer_query;
extern int GLAD_GL_ARB_transform_feedback2;
extern int GLAD_GL_ARB_transform_feedback3;
extern int GLAD_GL_ARB_transform_feedback_instanced;
extern int GLAD_GL_ARB_transform_feedback_overflow_query;
extern int GLAD_GL_ARB_transpose_matrix;
extern int GLAD_GL_ARB_uniform_buffer_object;
extern int GLAD_GL_ARB_vertex_array_bgra;
extern int GLAD_GL_ARB_vertex_array_object;
extern int GLAD_GL_ARB_vertex_attrib_64bit;
extern int GLAD_GL_ARB_vertex_attrib_binding;
extern int GLAD_GL_ARB_vertex_blend;
extern int GLAD_GL_ARB_vertex_buffer_object;
extern int GLAD_GL_ARB_vertex_program;
extern int GLAD_GL_ARB_vertex_shader;
extern int GLAD_GL_ARB_vertex_type_10f_11f_11f_rev;
extern int GLAD_GL_ARB_vertex_type_2_10_10_10_rev;
extern int GLAD_GL_ARB_viewport_array;
extern int GLAD_GL_ARB_window_pos;
extern int GLAD_GL_KHR_blend_equation_advanced;
extern int GLAD_GL_KHR_blend_equation_advanced_coherent;
extern int GLAD_GL_KHR_context_flush_control;
extern int GLAD_GL_KHR_debug;
extern int GLAD_GL_KHR_no_error;
extern int GLAD_GL_KHR_parallel_shader_compile;
extern int GLAD_GL_KHR_robust_buffer_access_behavior;
extern int GLAD_GL_KHR_robustness;
extern int GLAD_GL_KHR_shader_subgroup;
extern int GLAD_GL_KHR_texture_compression_astc_hdr;
extern int GLAD_GL_KHR_texture_compression_astc_ldr;
extern int GLAD_GL_KHR_texture_compression_astc_sliced_3d;
typedef void (__stdcall *PFNGLACCUMPROC)(GLenum op, GLfloat value);
typedef void (__stdcall *PFNGLACTIVESHADERPROGRAMPROC)(GLuint pipeline, GLuint program);
typedef void (__stdcall *PFNGLACTIVETEXTUREPROC)(GLenum texture);
typedef void (__stdcall *PFNGLACTIVETEXTUREARBPROC)(GLenum texture);
typedef void (__stdcall *PFNGLALPHAFUNCPROC)(GLenum func, GLfloat ref);
typedef GLboolean (__stdcall *PFNGLARETEXTURESRESIDENTPROC)(GLsizei n, const GLuint * textures, GLboolean * residences);
typedef void (__stdcall *PFNGLARRAYELEMENTPROC)(GLint i);
typedef void (__stdcall *PFNGLATTACHOBJECTARBPROC)(GLhandleARB containerObj, GLhandleARB obj);
typedef void (__stdcall *PFNGLATTACHSHADERPROC)(GLuint program, GLuint shader);
typedef void (__stdcall *PFNGLBEGINPROC)(GLenum mode);
typedef void (__stdcall *PFNGLBEGINCONDITIONALRENDERPROC)(GLuint id, GLenum mode);
typedef void (__stdcall *PFNGLBEGINQUERYPROC)(GLenum target, GLuint id);
typedef void (__stdcall *PFNGLBEGINQUERYARBPROC)(GLenum target, GLuint id);
typedef void (__stdcall *PFNGLBEGINQUERYINDEXEDPROC)(GLenum target, GLuint index, GLuint id);
typedef void (__stdcall *PFNGLBEGINTRANSFORMFEEDBACKPROC)(GLenum primitiveMode);
typedef void (__stdcall *PFNGLBINDATTRIBLOCATIONPROC)(GLuint program, GLuint index, const GLchar * name);
typedef void (__stdcall *PFNGLBINDATTRIBLOCATIONARBPROC)(GLhandleARB programObj, GLuint index, const GLcharARB * name);
typedef void (__stdcall *PFNGLBINDBUFFERPROC)(GLenum target, GLuint buffer);
typedef void (__stdcall *PFNGLBINDBUFFERARBPROC)(GLenum target, GLuint buffer);
typedef void (__stdcall *PFNGLBINDBUFFERBASEPROC)(GLenum target, GLuint index, GLuint buffer);
typedef void (__stdcall *PFNGLBINDBUFFERRANGEPROC)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (__stdcall *PFNGLBINDBUFFERSBASEPROC)(GLenum target, GLuint first, GLsizei count, const GLuint * buffers);
typedef void (__stdcall *PFNGLBINDBUFFERSRANGEPROC)(GLenum target, GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizeiptr * sizes);
typedef void (__stdcall *PFNGLBINDFRAGDATALOCATIONPROC)(GLuint program, GLuint color, const GLchar * name);
typedef void (__stdcall *PFNGLBINDFRAGDATALOCATIONINDEXEDPROC)(GLuint program, GLuint colorNumber, GLuint index, const GLchar * name);
typedef void (__stdcall *PFNGLBINDFRAMEBUFFERPROC)(GLenum target, GLuint framebuffer);
typedef void (__stdcall *PFNGLBINDIMAGETEXTUREPROC)(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
typedef void (__stdcall *PFNGLBINDIMAGETEXTURESPROC)(GLuint first, GLsizei count, const GLuint * textures);
typedef void (__stdcall *PFNGLBINDPROGRAMARBPROC)(GLenum target, GLuint program);
typedef void (__stdcall *PFNGLBINDPROGRAMPIPELINEPROC)(GLuint pipeline);
typedef void (__stdcall *PFNGLBINDRENDERBUFFERPROC)(GLenum target, GLuint renderbuffer);
typedef void (__stdcall *PFNGLBINDSAMPLERPROC)(GLuint unit, GLuint sampler);
typedef void (__stdcall *PFNGLBINDSAMPLERSPROC)(GLuint first, GLsizei count, const GLuint * samplers);
typedef void (__stdcall *PFNGLBINDTEXTUREPROC)(GLenum target, GLuint texture);
typedef void (__stdcall *PFNGLBINDTEXTUREUNITPROC)(GLuint unit, GLuint texture);
typedef void (__stdcall *PFNGLBINDTEXTURESPROC)(GLuint first, GLsizei count, const GLuint * textures);
typedef void (__stdcall *PFNGLBINDTRANSFORMFEEDBACKPROC)(GLenum target, GLuint id);
typedef void (__stdcall *PFNGLBINDVERTEXARRAYPROC)(GLuint array);
typedef void (__stdcall *PFNGLBINDVERTEXBUFFERPROC)(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
typedef void (__stdcall *PFNGLBINDVERTEXBUFFERSPROC)(GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizei * strides);
typedef void (__stdcall *PFNGLBITMAPPROC)(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte * bitmap);
typedef void (__stdcall *PFNGLBLENDBARRIERPROC)(void);
typedef void (__stdcall *PFNGLBLENDBARRIERKHRPROC)(void);
typedef void (__stdcall *PFNGLBLENDCOLORPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void (__stdcall *PFNGLBLENDEQUATIONPROC)(GLenum mode);
typedef void (__stdcall *PFNGLBLENDEQUATIONSEPARATEPROC)(GLenum modeRGB, GLenum modeAlpha);
typedef void (__stdcall *PFNGLBLENDEQUATIONSEPARATEIPROC)(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
typedef void (__stdcall *PFNGLBLENDEQUATIONSEPARATEIARBPROC)(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
typedef void (__stdcall *PFNGLBLENDEQUATIONIPROC)(GLuint buf, GLenum mode);
typedef void (__stdcall *PFNGLBLENDEQUATIONIARBPROC)(GLuint buf, GLenum mode);
typedef void (__stdcall *PFNGLBLENDFUNCPROC)(GLenum sfactor, GLenum dfactor);
typedef void (__stdcall *PFNGLBLENDFUNCSEPARATEPROC)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
typedef void (__stdcall *PFNGLBLENDFUNCSEPARATEIPROC)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
typedef void (__stdcall *PFNGLBLENDFUNCSEPARATEIARBPROC)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
typedef void (__stdcall *PFNGLBLENDFUNCIPROC)(GLuint buf, GLenum src, GLenum dst);
typedef void (__stdcall *PFNGLBLENDFUNCIARBPROC)(GLuint buf, GLenum src, GLenum dst);
typedef void (__stdcall *PFNGLBLITFRAMEBUFFERPROC)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
typedef void (__stdcall *PFNGLBLITNAMEDFRAMEBUFFERPROC)(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
typedef void (__stdcall *PFNGLBUFFERDATAPROC)(GLenum target, GLsizeiptr size, const void * data, GLenum usage);
typedef void (__stdcall *PFNGLBUFFERDATAARBPROC)(GLenum target, GLsizeiptrARB size, const void * data, GLenum usage);
typedef void (__stdcall *PFNGLBUFFERPAGECOMMITMENTARBPROC)(GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit);
typedef void (__stdcall *PFNGLBUFFERSTORAGEPROC)(GLenum target, GLsizeiptr size, const void * data, GLbitfield flags);
typedef void (__stdcall *PFNGLBUFFERSUBDATAPROC)(GLenum target, GLintptr offset, GLsizeiptr size, const void * data);
typedef void (__stdcall *PFNGLBUFFERSUBDATAARBPROC)(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const void * data);
typedef void (__stdcall *PFNGLCALLLISTPROC)(GLuint list);
typedef void (__stdcall *PFNGLCALLLISTSPROC)(GLsizei n, GLenum type, const void * lists);
typedef GLenum (__stdcall *PFNGLCHECKFRAMEBUFFERSTATUSPROC)(GLenum target);
typedef GLenum (__stdcall *PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC)(GLuint framebuffer, GLenum target);
typedef void (__stdcall *PFNGLCLAMPCOLORPROC)(GLenum target, GLenum clamp);
typedef void (__stdcall *PFNGLCLAMPCOLORARBPROC)(GLenum target, GLenum clamp);
typedef void (__stdcall *PFNGLCLEARPROC)(GLbitfield mask);
typedef void (__stdcall *PFNGLCLEARACCUMPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void (__stdcall *PFNGLCLEARBUFFERDATAPROC)(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void * data);
typedef void (__stdcall *PFNGLCLEARBUFFERSUBDATAPROC)(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data);
typedef void (__stdcall *PFNGLCLEARBUFFERFIPROC)(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
typedef void (__stdcall *PFNGLCLEARBUFFERFVPROC)(GLenum buffer, GLint drawbuffer, const GLfloat * value);
typedef void (__stdcall *PFNGLCLEARBUFFERIVPROC)(GLenum buffer, GLint drawbuffer, const GLint * value);
typedef void (__stdcall *PFNGLCLEARBUFFERUIVPROC)(GLenum buffer, GLint drawbuffer, const GLuint * value);
typedef void (__stdcall *PFNGLCLEARCOLORPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void (__stdcall *PFNGLCLEARDEPTHPROC)(GLdouble depth);
typedef void (__stdcall *PFNGLCLEARDEPTHFPROC)(GLfloat d);
typedef void (__stdcall *PFNGLCLEARINDEXPROC)(GLfloat c);
typedef void (__stdcall *PFNGLCLEARNAMEDBUFFERDATAPROC)(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void * data);
typedef void (__stdcall *PFNGLCLEARNAMEDBUFFERSUBDATAPROC)(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data);
typedef void (__stdcall *PFNGLCLEARNAMEDFRAMEBUFFERFIPROC)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
typedef void (__stdcall *PFNGLCLEARNAMEDFRAMEBUFFERFVPROC)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat * value);
typedef void (__stdcall *PFNGLCLEARNAMEDFRAMEBUFFERIVPROC)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint * value);
typedef void (__stdcall *PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint * value);
typedef void (__stdcall *PFNGLCLEARSTENCILPROC)(GLint s);
typedef void (__stdcall *PFNGLCLEARTEXIMAGEPROC)(GLuint texture, GLint level, GLenum format, GLenum type, const void * data);
typedef void (__stdcall *PFNGLCLEARTEXSUBIMAGEPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * data);
typedef void (__stdcall *PFNGLCLIENTACTIVETEXTUREPROC)(GLenum texture);
typedef void (__stdcall *PFNGLCLIENTACTIVETEXTUREARBPROC)(GLenum texture);
typedef GLenum (__stdcall *PFNGLCLIENTWAITSYNCPROC)(GLsync sync, GLbitfield flags, GLuint64 timeout);
typedef void (__stdcall *PFNGLCLIPCONTROLPROC)(GLenum origin, GLenum depth);
typedef void (__stdcall *PFNGLCLIPPLANEPROC)(GLenum plane, const GLdouble * equation);
typedef void (__stdcall *PFNGLCOLOR3BPROC)(GLbyte red, GLbyte green, GLbyte blue);
typedef void (__stdcall *PFNGLCOLOR3BVPROC)(const GLbyte * v);
typedef void (__stdcall *PFNGLCOLOR3DPROC)(GLdouble red, GLdouble green, GLdouble blue);
typedef void (__stdcall *PFNGLCOLOR3DVPROC)(const GLdouble * v);
typedef void (__stdcall *PFNGLCOLOR3FPROC)(GLfloat red, GLfloat green, GLfloat blue);
typedef void (__stdcall *PFNGLCOLOR3FVPROC)(const GLfloat * v);
typedef void (__stdcall *PFNGLCOLOR3IPROC)(GLint red, GLint green, GLint blue);
typedef void (__stdcall *PFNGLCOLOR3IVPROC)(const GLint * v);
typedef void (__stdcall *PFNGLCOLOR3SPROC)(GLshort red, GLshort green, GLshort blue);
typedef void (__stdcall *PFNGLCOLOR3SVPROC)(const GLshort * v);
typedef void (__stdcall *PFNGLCOLOR3UBPROC)(GLubyte red, GLubyte green, GLubyte blue);
typedef void (__stdcall *PFNGLCOLOR3UBVPROC)(const GLubyte * v);
typedef void (__stdcall *PFNGLCOLOR3UIPROC)(GLuint red, GLuint green, GLuint blue);
typedef void (__stdcall *PFNGLCOLOR3UIVPROC)(const GLuint * v);
typedef void (__stdcall *PFNGLCOLOR3USPROC)(GLushort red, GLushort green, GLushort blue);
typedef void (__stdcall *PFNGLCOLOR3USVPROC)(const GLushort * v);
typedef void (__stdcall *PFNGLCOLOR4BPROC)(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);
typedef void (__stdcall *PFNGLCOLOR4BVPROC)(const GLbyte * v);
typedef void (__stdcall *PFNGLCOLOR4DPROC)(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
typedef void (__stdcall *PFNGLCOLOR4DVPROC)(const GLdouble * v);
typedef void (__stdcall *PFNGLCOLOR4FPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void (__stdcall *PFNGLCOLOR4FVPROC)(const GLfloat * v);
typedef void (__stdcall *PFNGLCOLOR4IPROC)(GLint red, GLint green, GLint blue, GLint alpha);
typedef void (__stdcall *PFNGLCOLOR4IVPROC)(const GLint * v);
typedef void (__stdcall *PFNGLCOLOR4SPROC)(GLshort red, GLshort green, GLshort blue, GLshort alpha);
typedef void (__stdcall *PFNGLCOLOR4SVPROC)(const GLshort * v);
typedef void (__stdcall *PFNGLCOLOR4UBPROC)(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
typedef void (__stdcall *PFNGLCOLOR4UBVPROC)(const GLubyte * v);
typedef void (__stdcall *PFNGLCOLOR4UIPROC)(GLuint red, GLuint green, GLuint blue, GLuint alpha);
typedef void (__stdcall *PFNGLCOLOR4UIVPROC)(const GLuint * v);
typedef void (__stdcall *PFNGLCOLOR4USPROC)(GLushort red, GLushort green, GLushort blue, GLushort alpha);
typedef void (__stdcall *PFNGLCOLOR4USVPROC)(const GLushort * v);
typedef void (__stdcall *PFNGLCOLORMASKPROC)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
typedef void (__stdcall *PFNGLCOLORMASKIPROC)(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
typedef void (__stdcall *PFNGLCOLORMATERIALPROC)(GLenum face, GLenum mode);
typedef void (__stdcall *PFNGLCOLORP3UIPROC)(GLenum type, GLuint color);
typedef void (__stdcall *PFNGLCOLORP3UIVPROC)(GLenum type, const GLuint * color);
typedef void (__stdcall *PFNGLCOLORP4UIPROC)(GLenum type, GLuint color);
typedef void (__stdcall *PFNGLCOLORP4UIVPROC)(GLenum type, const GLuint * color);
typedef void (__stdcall *PFNGLCOLORPOINTERPROC)(GLint size, GLenum type, GLsizei stride, const void * pointer);
typedef void (__stdcall *PFNGLCOLORSUBTABLEPROC)(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void * data);
typedef void (__stdcall *PFNGLCOLORTABLEPROC)(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void * table);
typedef void (__stdcall *PFNGLCOLORTABLEPARAMETERFVPROC)(GLenum target, GLenum pname, const GLfloat * params);
typedef void (__stdcall *PFNGLCOLORTABLEPARAMETERIVPROC)(GLenum target, GLenum pname, const GLint * params);
typedef void (__stdcall *PFNGLCOMPILESHADERPROC)(GLuint shader);
typedef void (__stdcall *PFNGLCOMPILESHADERARBPROC)(GLhandleARB shaderObj);
typedef void (__stdcall *PFNGLCOMPILESHADERINCLUDEARBPROC)(GLuint shader, GLsizei count, const GLchar *const* path, const GLint * length);
typedef void (__stdcall *PFNGLCOMPRESSEDTEXIMAGE1DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * data);
typedef void (__stdcall *PFNGLCOMPRESSEDTEXIMAGE1DARBPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * data);
typedef void (__stdcall *PFNGLCOMPRESSEDTEXIMAGE2DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * data);
typedef void (__stdcall *PFNGLCOMPRESSEDTEXIMAGE2DARBPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * data);
typedef void (__stdcall *PFNGLCOMPRESSEDTEXIMAGE3DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data);
typedef void (__stdcall *PFNGLCOMPRESSEDTEXIMAGE3DARBPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data);
typedef void (__stdcall *PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data);
typedef void (__stdcall *PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data);
typedef void (__stdcall *PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data);
typedef void (__stdcall *PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data);
typedef void (__stdcall *PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data);
typedef void (__stdcall *PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data);
typedef void (__stdcall *PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC)(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data);
typedef void (__stdcall *PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data);
typedef void (__stdcall *PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data);
typedef void (__stdcall *PFNGLCONVOLUTIONFILTER1DPROC)(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void * image);
typedef void (__stdcall *PFNGLCONVOLUTIONFILTER2DPROC)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * image);
typedef void (__stdcall *PFNGLCONVOLUTIONPARAMETERFPROC)(GLenum target, GLenum pname, GLfloat params);
typedef void (__stdcall *PFNGLCONVOLUTIONPARAMETERFVPROC)(GLenum target, GLenum pname, const GLfloat * params);
typedef void (__stdcall *PFNGLCONVOLUTIONPARAMETERIPROC)(GLenum target, GLenum pname, GLint params);
typedef void (__stdcall *PFNGLCONVOLUTIONPARAMETERIVPROC)(GLenum target, GLenum pname, const GLint * params);
typedef void (__stdcall *PFNGLCOPYBUFFERSUBDATAPROC)(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
typedef void (__stdcall *PFNGLCOPYCOLORSUBTABLEPROC)(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
typedef void (__stdcall *PFNGLCOPYCOLORTABLEPROC)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
typedef void (__stdcall *PFNGLCOPYCONVOLUTIONFILTER1DPROC)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
typedef void (__stdcall *PFNGLCOPYCONVOLUTIONFILTER2DPROC)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (__stdcall *PFNGLCOPYIMAGESUBDATAPROC)(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
typedef void (__stdcall *PFNGLCOPYNAMEDBUFFERSUBDATAPROC)(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
typedef void (__stdcall *PFNGLCOPYPIXELSPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);
typedef void (__stdcall *PFNGLCOPYTEXIMAGE1DPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
typedef void (__stdcall *PFNGLCOPYTEXIMAGE2DPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
typedef void (__stdcall *PFNGLCOPYTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void (__stdcall *PFNGLCOPYTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (__stdcall *PFNGLCOPYTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (__stdcall *PFNGLCOPYTEXTURESUBIMAGE1DPROC)(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void (__stdcall *PFNGLCOPYTEXTURESUBIMAGE2DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (__stdcall *PFNGLCOPYTEXTURESUBIMAGE3DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (__stdcall *PFNGLCREATEBUFFERSPROC)(GLsizei n, GLuint * buffers);
typedef void (__stdcall *PFNGLCREATEFRAMEBUFFERSPROC)(GLsizei n, GLuint * framebuffers);
typedef GLuint (__stdcall *PFNGLCREATEPROGRAMPROC)(void);
typedef GLhandleARB (__stdcall *PFNGLCREATEPROGRAMOBJECTARBPROC)(void);
typedef void (__stdcall *PFNGLCREATEPROGRAMPIPELINESPROC)(GLsizei n, GLuint * pipelines);
typedef void (__stdcall *PFNGLCREATEQUERIESPROC)(GLenum target, GLsizei n, GLuint * ids);
typedef void (__stdcall *PFNGLCREATERENDERBUFFERSPROC)(GLsizei n, GLuint * renderbuffers);
typedef void (__stdcall *PFNGLCREATESAMPLERSPROC)(GLsizei n, GLuint * samplers);
typedef GLuint (__stdcall *PFNGLCREATESHADERPROC)(GLenum type);
typedef GLhandleARB (__stdcall *PFNGLCREATESHADEROBJECTARBPROC)(GLenum shaderType);
typedef GLuint (__stdcall *PFNGLCREATESHADERPROGRAMVPROC)(GLenum type, GLsizei count, const GLchar *const* strings);
typedef GLsync (__stdcall *PFNGLCREATESYNCFROMCLEVENTARBPROC)(struct _cl_context * context, struct _cl_event * event, GLbitfield flags);
typedef void (__stdcall *PFNGLCREATETEXTURESPROC)(GLenum target, GLsizei n, GLuint * textures);
typedef void (__stdcall *PFNGLCREATETRANSFORMFEEDBACKSPROC)(GLsizei n, GLuint * ids);
typedef void (__stdcall *PFNGLCREATEVERTEXARRAYSPROC)(GLsizei n, GLuint * arrays);
typedef void (__stdcall *PFNGLCULLFACEPROC)(GLenum mode);
typedef void (__stdcall *PFNGLCURRENTPALETTEMATRIXARBPROC)(GLint index);
typedef void (__stdcall *PFNGLDEBUGMESSAGECALLBACKPROC)(GLDEBUGPROC callback, const void * userParam);
typedef void (__stdcall *PFNGLDEBUGMESSAGECALLBACKARBPROC)(GLDEBUGPROCARB callback, const void * userParam);
typedef void (__stdcall *PFNGLDEBUGMESSAGECONTROLPROC)(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled);
typedef void (__stdcall *PFNGLDEBUGMESSAGECONTROLARBPROC)(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled);
typedef void (__stdcall *PFNGLDEBUGMESSAGEINSERTPROC)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf);
typedef void (__stdcall *PFNGLDEBUGMESSAGEINSERTARBPROC)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf);
typedef void (__stdcall *PFNGLDELETEBUFFERSPROC)(GLsizei n, const GLuint * buffers);
typedef void (__stdcall *PFNGLDELETEBUFFERSARBPROC)(GLsizei n, const GLuint * buffers);
typedef void (__stdcall *PFNGLDELETEFRAMEBUFFERSPROC)(GLsizei n, const GLuint * framebuffers);
typedef void (__stdcall *PFNGLDELETELISTSPROC)(GLuint list, GLsizei range);
typedef void (__stdcall *PFNGLDELETENAMEDSTRINGARBPROC)(GLint namelen, const GLchar * name);
typedef void (__stdcall *PFNGLDELETEOBJECTARBPROC)(GLhandleARB obj);
typedef void (__stdcall *PFNGLDELETEPROGRAMPROC)(GLuint program);
typedef void (__stdcall *PFNGLDELETEPROGRAMPIPELINESPROC)(GLsizei n, const GLuint * pipelines);
typedef void (__stdcall *PFNGLDELETEPROGRAMSARBPROC)(GLsizei n, const GLuint * programs);
typedef void (__stdcall *PFNGLDELETEQUERIESPROC)(GLsizei n, const GLuint * ids);
typedef void (__stdcall *PFNGLDELETEQUERIESARBPROC)(GLsizei n, const GLuint * ids);
typedef void (__stdcall *PFNGLDELETERENDERBUFFERSPROC)(GLsizei n, const GLuint * renderbuffers);
typedef void (__stdcall *PFNGLDELETESAMPLERSPROC)(GLsizei count, const GLuint * samplers);
typedef void (__stdcall *PFNGLDELETESHADERPROC)(GLuint shader);
typedef void (__stdcall *PFNGLDELETESYNCPROC)(GLsync sync);
typedef void (__stdcall *PFNGLDELETETEXTURESPROC)(GLsizei n, const GLuint * textures);
typedef void (__stdcall *PFNGLDELETETRANSFORMFEEDBACKSPROC)(GLsizei n, const GLuint * ids);
typedef void (__stdcall *PFNGLDELETEVERTEXARRAYSPROC)(GLsizei n, const GLuint * arrays);
typedef void (__stdcall *PFNGLDEPTHFUNCPROC)(GLenum func);
typedef void (__stdcall *PFNGLDEPTHMASKPROC)(GLboolean flag);
typedef void (__stdcall *PFNGLDEPTHRANGEPROC)(GLdouble n, GLdouble f);
typedef void (__stdcall *PFNGLDEPTHRANGEARRAYDVNVPROC)(GLuint first, GLsizei count, const GLdouble * v);
typedef void (__stdcall *PFNGLDEPTHRANGEARRAYVPROC)(GLuint first, GLsizei count, const GLdouble * v);
typedef void (__stdcall *PFNGLDEPTHRANGEINDEXEDPROC)(GLuint index, GLdouble n, GLdouble f);
typedef void (__stdcall *PFNGLDEPTHRANGEINDEXEDDNVPROC)(GLuint index, GLdouble n, GLdouble f);
typedef void (__stdcall *PFNGLDEPTHRANGEFPROC)(GLfloat n, GLfloat f);
typedef void (__stdcall *PFNGLDETACHOBJECTARBPROC)(GLhandleARB containerObj, GLhandleARB attachedObj);
typedef void (__stdcall *PFNGLDETACHSHADERPROC)(GLuint program, GLuint shader);
typedef void (__stdcall *PFNGLDISABLEPROC)(GLenum cap);
typedef void (__stdcall *PFNGLDISABLECLIENTSTATEPROC)(GLenum array);
typedef void (__stdcall *PFNGLDISABLEVERTEXARRAYATTRIBPROC)(GLuint vaobj, GLuint index);
typedef void (__stdcall *PFNGLDISABLEVERTEXATTRIBARRAYPROC)(GLuint index);
typedef void (__stdcall *PFNGLDISABLEVERTEXATTRIBARRAYARBPROC)(GLuint index);
typedef void (__stdcall *PFNGLDISABLEIPROC)(GLenum target, GLuint index);
typedef void (__stdcall *PFNGLDISPATCHCOMPUTEPROC)(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
typedef void (__stdcall *PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC)(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z);
typedef void (__stdcall *PFNGLDISPATCHCOMPUTEINDIRECTPROC)(GLintptr indirect);
typedef void (__stdcall *PFNGLDRAWARRAYSPROC)(GLenum mode, GLint first, GLsizei count);
typedef void (__stdcall *PFNGLDRAWARRAYSINDIRECTPROC)(GLenum mode, const void * indirect);
typedef void (__stdcall *PFNGLDRAWARRAYSINSTANCEDPROC)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount);
typedef void (__stdcall *PFNGLDRAWARRAYSINSTANCEDARBPROC)(GLenum mode, GLint first, GLsizei count, GLsizei primcount);
typedef void (__stdcall *PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance);
typedef void (__stdcall *PFNGLDRAWBUFFERPROC)(GLenum buf);
typedef void (__stdcall *PFNGLDRAWBUFFERSPROC)(GLsizei n, const GLenum * bufs);
typedef void (__stdcall *PFNGLDRAWBUFFERSARBPROC)(GLsizei n, const GLenum * bufs);
typedef void (__stdcall *PFNGLDRAWELEMENTSPROC)(GLenum mode, GLsizei count, GLenum type, const void * indices);
typedef void (__stdcall *PFNGLDRAWELEMENTSBASEVERTEXPROC)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLint basevertex);
typedef void (__stdcall *PFNGLDRAWELEMENTSINDIRECTPROC)(GLenum mode, GLenum type, const void * indirect);
typedef void (__stdcall *PFNGLDRAWELEMENTSINSTANCEDPROC)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount);
typedef void (__stdcall *PFNGLDRAWELEMENTSINSTANCEDARBPROC)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei primcount);
typedef void (__stdcall *PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLuint baseinstance);
typedef void (__stdcall *PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex);
typedef void (__stdcall *PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance);
typedef void (__stdcall *PFNGLDRAWPIXELSPROC)(GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels);
typedef void (__stdcall *PFNGLDRAWRANGEELEMENTSPROC)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices);
typedef void (__stdcall *PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices, GLint basevertex);
typedef void (__stdcall *PFNGLDRAWTRANSFORMFEEDBACKPROC)(GLenum mode, GLuint id);
typedef void (__stdcall *PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC)(GLenum mode, GLuint id, GLsizei instancecount);
typedef void (__stdcall *PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC)(GLenum mode, GLuint id, GLuint stream);
typedef void (__stdcall *PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC)(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount);
typedef void (__stdcall *PFNGLEDGEFLAGPROC)(GLboolean flag);
typedef void (__stdcall *PFNGLEDGEFLAGPOINTERPROC)(GLsizei stride, const void * pointer);
typedef void (__stdcall *PFNGLEDGEFLAGVPROC)(const GLboolean * flag);
typedef void (__stdcall *PFNGLENABLEPROC)(GLenum cap);
typedef void (__stdcall *PFNGLENABLECLIENTSTATEPROC)(GLenum array);
typedef void (__stdcall *PFNGLENABLEVERTEXARRAYATTRIBPROC)(GLuint vaobj, GLuint index);
typedef void (__stdcall *PFNGLENABLEVERTEXATTRIBARRAYPROC)(GLuint index);
typedef void (__stdcall *PFNGLENABLEVERTEXATTRIBARRAYARBPROC)(GLuint index);
typedef void (__stdcall *PFNGLENABLEIPROC)(GLenum target, GLuint index);
typedef void (__stdcall *PFNGLENDPROC)(void);
typedef void (__stdcall *PFNGLENDCONDITIONALRENDERPROC)(void);
typedef void (__stdcall *PFNGLENDLISTPROC)(void);
typedef void (__stdcall *PFNGLENDQUERYPROC)(GLenum target);
typedef void (__stdcall *PFNGLENDQUERYARBPROC)(GLenum target);
typedef void (__stdcall *PFNGLENDQUERYINDEXEDPROC)(GLenum target, GLuint index);
typedef void (__stdcall *PFNGLENDTRANSFORMFEEDBACKPROC)(void);
typedef void (__stdcall *PFNGLEVALCOORD1DPROC)(GLdouble u);
typedef void (__stdcall *PFNGLEVALCOORD1DVPROC)(const GLdouble * u);
typedef void (__stdcall *PFNGLEVALCOORD1FPROC)(GLfloat u);
typedef void (__stdcall *PFNGLEVALCOORD1FVPROC)(const GLfloat * u);
typedef void (__stdcall *PFNGLEVALCOORD2DPROC)(GLdouble u, GLdouble v);
typedef void (__stdcall *PFNGLEVALCOORD2DVPROC)(const GLdouble * u);
typedef void (__stdcall *PFNGLEVALCOORD2FPROC)(GLfloat u, GLfloat v);
typedef void (__stdcall *PFNGLEVALCOORD2FVPROC)(const GLfloat * u);
typedef void (__stdcall *PFNGLEVALMESH1PROC)(GLenum mode, GLint i1, GLint i2);
typedef void (__stdcall *PFNGLEVALMESH2PROC)(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);
typedef void (__stdcall *PFNGLEVALPOINT1PROC)(GLint i);
typedef void (__stdcall *PFNGLEVALPOINT2PROC)(GLint i, GLint j);
typedef void (__stdcall *PFNGLEVALUATEDEPTHVALUESARBPROC)(void);
typedef void (__stdcall *PFNGLFEEDBACKBUFFERPROC)(GLsizei size, GLenum type, GLfloat * buffer);
typedef GLsync (__stdcall *PFNGLFENCESYNCPROC)(GLenum condition, GLbitfield flags);
typedef void (__stdcall *PFNGLFINISHPROC)(void);
typedef void (__stdcall *PFNGLFLUSHPROC)(void);
typedef void (__stdcall *PFNGLFLUSHMAPPEDBUFFERRANGEPROC)(GLenum target, GLintptr offset, GLsizeiptr length);
typedef void (__stdcall *PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC)(GLuint buffer, GLintptr offset, GLsizeiptr length);
typedef void (__stdcall *PFNGLFOGCOORDPOINTERPROC)(GLenum type, GLsizei stride, const void * pointer);
typedef void (__stdcall *PFNGLFOGCOORDDPROC)(GLdouble coord);
typedef void (__stdcall *PFNGLFOGCOORDDVPROC)(const GLdouble * coord);
typedef void (__stdcall *PFNGLFOGCOORDFPROC)(GLfloat coord);
typedef void (__stdcall *PFNGLFOGCOORDFVPROC)(const GLfloat * coord);
typedef void (__stdcall *PFNGLFOGFPROC)(GLenum pname, GLfloat param);
typedef void (__stdcall *PFNGLFOGFVPROC)(GLenum pname, const GLfloat * params);
typedef void (__stdcall *PFNGLFOGIPROC)(GLenum pname, GLint param);
typedef void (__stdcall *PFNGLFOGIVPROC)(GLenum pname, const GLint * params);
typedef void (__stdcall *PFNGLFRAMEBUFFERPARAMETERIPROC)(GLenum target, GLenum pname, GLint param);
typedef void (__stdcall *PFNGLFRAMEBUFFERRENDERBUFFERPROC)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
typedef void (__stdcall *PFNGLFRAMEBUFFERSAMPLELOCATIONSFVARBPROC)(GLenum target, GLuint start, GLsizei count, const GLfloat * v);
typedef void (__stdcall *PFNGLFRAMEBUFFERTEXTUREPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level);
typedef void (__stdcall *PFNGLFRAMEBUFFERTEXTURE1DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (__stdcall *PFNGLFRAMEBUFFERTEXTURE2DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (__stdcall *PFNGLFRAMEBUFFERTEXTURE3DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
typedef void (__stdcall *PFNGLFRAMEBUFFERTEXTUREARBPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level);
typedef void (__stdcall *PFNGLFRAMEBUFFERTEXTUREFACEARBPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
typedef void (__stdcall *PFNGLFRAMEBUFFERTEXTURELAYERPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef void (__stdcall *PFNGLFRAMEBUFFERTEXTURELAYERARBPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef void (__stdcall *PFNGLFRONTFACEPROC)(GLenum mode);
typedef void (__stdcall *PFNGLFRUSTUMPROC)(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
typedef void (__stdcall *PFNGLGENBUFFERSPROC)(GLsizei n, GLuint * buffers);
typedef void (__stdcall *PFNGLGENBUFFERSARBPROC)(GLsizei n, GLuint * buffers);
typedef void (__stdcall *PFNGLGENFRAMEBUFFERSPROC)(GLsizei n, GLuint * framebuffers);
typedef GLuint (__stdcall *PFNGLGENLISTSPROC)(GLsizei range);
typedef void (__stdcall *PFNGLGENPROGRAMPIPELINESPROC)(GLsizei n, GLuint * pipelines);
typedef void (__stdcall *PFNGLGENPROGRAMSARBPROC)(GLsizei n, GLuint * programs);
typedef void (__stdcall *PFNGLGENQUERIESPROC)(GLsizei n, GLuint * ids);
typedef void (__stdcall *PFNGLGENQUERIESARBPROC)(GLsizei n, GLuint * ids);
typedef void (__stdcall *PFNGLGENRENDERBUFFERSPROC)(GLsizei n, GLuint * renderbuffers);
typedef void (__stdcall *PFNGLGENSAMPLERSPROC)(GLsizei count, GLuint * samplers);
typedef void (__stdcall *PFNGLGENTEXTURESPROC)(GLsizei n, GLuint * textures);
typedef void (__stdcall *PFNGLGENTRANSFORMFEEDBACKSPROC)(GLsizei n, GLuint * ids);
typedef void (__stdcall *PFNGLGENVERTEXARRAYSPROC)(GLsizei n, GLuint * arrays);
typedef void (__stdcall *PFNGLGENERATEMIPMAPPROC)(GLenum target);
typedef void (__stdcall *PFNGLGENERATETEXTUREMIPMAPPROC)(GLuint texture);
typedef void (__stdcall *PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC)(GLuint program, GLuint bufferIndex, GLenum pname, GLint * params);
typedef void (__stdcall *PFNGLGETACTIVEATTRIBPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name);
typedef void (__stdcall *PFNGLGETACTIVEATTRIBARBPROC)(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei * length, GLint * size, GLenum * type, GLcharARB * name);
typedef void (__stdcall *PFNGLGETACTIVESUBROUTINENAMEPROC)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name);
typedef void (__stdcall *PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name);
typedef void (__stdcall *PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC)(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint * values);
typedef void (__stdcall *PFNGLGETACTIVEUNIFORMPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name);
typedef void (__stdcall *PFNGLGETACTIVEUNIFORMARBPROC)(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei * length, GLint * size, GLenum * type, GLcharARB * name);
typedef void (__stdcall *PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC)(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformBlockName);
typedef void (__stdcall *PFNGLGETACTIVEUNIFORMBLOCKIVPROC)(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint * params);
typedef void (__stdcall *PFNGLGETACTIVEUNIFORMNAMEPROC)(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformName);
typedef void (__stdcall *PFNGLGETACTIVEUNIFORMSIVPROC)(GLuint program, GLsizei uniformCount, const GLuint * uniformIndices, GLenum pname, GLint * params);
typedef void (__stdcall *PFNGLGETATTACHEDOBJECTSARBPROC)(GLhandleARB containerObj, GLsizei maxCount, GLsizei * count, GLhandleARB * obj);
typedef void (__stdcall *PFNGLGETATTACHEDSHADERSPROC)(GLuint program, GLsizei maxCount, GLsizei * count, GLuint * shaders);
typedef GLint (__stdcall *PFNGLGETATTRIBLOCATIONPROC)(GLuint program, const GLchar * name);
typedef GLint (__stdcall *PFNGLGETATTRIBLOCATIONARBPROC)(GLhandleARB programObj, const GLcharARB * name);
typedef void (__stdcall *PFNGLGETBOOLEANI_VPROC)(GLenum target, GLuint index, GLboolean * data);
typedef void (__stdcall *PFNGLGETBOOLEANVPROC)(GLenum pname, GLboolean * data);
typedef void (__stdcall *PFNGLGETBUFFERPARAMETERI64VPROC)(GLenum target, GLenum pname, GLint64 * params);
typedef void (__stdcall *PFNGLGETBUFFERPARAMETERIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (__stdcall *PFNGLGETBUFFERPARAMETERIVARBPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (__stdcall *PFNGLGETBUFFERPOINTERVPROC)(GLenum target, GLenum pname, void ** params);
typedef void (__stdcall *PFNGLGETBUFFERPOINTERVARBPROC)(GLenum target, GLenum pname, void ** params);
typedef void (__stdcall *PFNGLGETBUFFERSUBDATAPROC)(GLenum target, GLintptr offset, GLsizeiptr size, void * data);
typedef void (__stdcall *PFNGLGETBUFFERSUBDATAARBPROC)(GLenum target, GLintptrARB offset, GLsizeiptrARB size, void * data);
typedef void (__stdcall *PFNGLGETCLIPPLANEPROC)(GLenum plane, GLdouble * equation);
typedef void (__stdcall *PFNGLGETCOLORTABLEPROC)(GLenum target, GLenum format, GLenum type, void * table);
typedef void (__stdcall *PFNGLGETCOLORTABLEPARAMETERFVPROC)(GLenum target, GLenum pname, GLfloat * params);
typedef void (__stdcall *PFNGLGETCOLORTABLEPARAMETERIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (__stdcall *PFNGLGETCOMPRESSEDTEXIMAGEPROC)(GLenum target, GLint level, void * img);
typedef void (__stdcall *PFNGLGETCOMPRESSEDTEXIMAGEARBPROC)(GLenum target, GLint level, void * img);
typedef void (__stdcall *PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC)(GLuint texture, GLint level, GLsizei bufSize, void * pixels);
typedef void (__stdcall *PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void * pixels);
typedef void (__stdcall *PFNGLGETCONVOLUTIONFILTERPROC)(GLenum target, GLenum format, GLenum type, void * image);
typedef void (__stdcall *PFNGLGETCONVOLUTIONPARAMETERFVPROC)(GLenum target, GLenum pname, GLfloat * params);
typedef void (__stdcall *PFNGLGETCONVOLUTIONPARAMETERIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef GLuint (__stdcall *PFNGLGETDEBUGMESSAGELOGPROC)(GLuint count, GLsizei bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog);
typedef GLuint (__stdcall *PFNGLGETDEBUGMESSAGELOGARBPROC)(GLuint count, GLsizei bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog);
typedef void (__stdcall *PFNGLGETDOUBLEI_VPROC)(GLenum target, GLuint index, GLdouble * data);
typedef void (__stdcall *PFNGLGETDOUBLEVPROC)(GLenum pname, GLdouble * data);
typedef GLenum (__stdcall *PFNGLGETERRORPROC)(void);
typedef void (__stdcall *PFNGLGETFLOATI_VPROC)(GLenum target, GLuint index, GLfloat * data);
typedef void (__stdcall *PFNGLGETFLOATVPROC)(GLenum pname, GLfloat * data);
typedef GLint (__stdcall *PFNGLGETFRAGDATAINDEXPROC)(GLuint program, const GLchar * name);
typedef GLint (__stdcall *PFNGLGETFRAGDATALOCATIONPROC)(GLuint program, const GLchar * name);
typedef void (__stdcall *PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC)(GLenum target, GLenum attachment, GLenum pname, GLint * params);
typedef void (__stdcall *PFNGLGETFRAMEBUFFERPARAMETERIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef GLenum (__stdcall *PFNGLGETGRAPHICSRESETSTATUSPROC)(void);
typedef GLenum (__stdcall *PFNGLGETGRAPHICSRESETSTATUSARBPROC)(void);
typedef GLhandleARB (__stdcall *PFNGLGETHANDLEARBPROC)(GLenum pname);
typedef void (__stdcall *PFNGLGETHISTOGRAMPROC)(GLenum target, GLboolean reset, GLenum format, GLenum type, void * values);
typedef void (__stdcall *PFNGLGETHISTOGRAMPARAMETERFVPROC)(GLenum target, GLenum pname, GLfloat * params);
typedef void (__stdcall *PFNGLGETHISTOGRAMPARAMETERIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef GLuint64 (__stdcall *PFNGLGETIMAGEHANDLEARBPROC)(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format);
typedef void (__stdcall *PFNGLGETINFOLOGARBPROC)(GLhandleARB obj, GLsizei maxLength, GLsizei * length, GLcharARB * infoLog);
typedef void (__stdcall *PFNGLGETINTEGER64I_VPROC)(GLenum target, GLuint index, GLint64 * data);
typedef void (__stdcall *PFNGLGETINTEGER64VPROC)(GLenum pname, GLint64 * data);
typedef void (__stdcall *PFNGLGETINTEGERI_VPROC)(GLenum target, GLuint index, GLint * data);
typedef void (__stdcall *PFNGLGETINTEGERVPROC)(GLenum pname, GLint * data);
typedef void (__stdcall *PFNGLGETINTERNALFORMATI64VPROC)(GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint64 * params);
typedef void (__stdcall *PFNGLGETINTERNALFORMATIVPROC)(GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint * params);
typedef void (__stdcall *PFNGLGETLIGHTFVPROC)(GLenum light, GLenum pname, GLfloat * params);
typedef void (__stdcall *PFNGLGETLIGHTIVPROC)(GLenum light, GLenum pname, GLint * params);
typedef void (__stdcall *PFNGLGETMAPDVPROC)(GLenum target, GLenum query, GLdouble * v);
typedef void (__stdcall *PFNGLGETMAPFVPROC)(GLenum target, GLenum query, GLfloat * v);
typedef void (__stdcall *PFNGLGETMAPIVPROC)(GLenum target, GLenum query, GLint * v);
typedef void (__stdcall *PFNGLGETMATERIALFVPROC)(GLenum face, GLenum pname, GLfloat * params);
typedef void (__stdcall *PFNGLGETMATERIALIVPROC)(GLenum face, GLenum pname, GLint * params);
typedef void (__stdcall *PFNGLGETMINMAXPROC)(GLenum target, GLboolean reset, GLenum format, GLenum type, void * values);
typedef void (__stdcall *PFNGLGETMINMAXPARAMETERFVPROC)(GLenum target, GLenum pname, GLfloat * params);
typedef void (__stdcall *PFNGLGETMINMAXPARAMETERIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (__stdcall *PFNGLGETMULTISAMPLEFVPROC)(GLenum pname, GLuint index, GLfloat * val);
typedef void (__stdcall *PFNGLGETNAMEDBUFFERPARAMETERI64VPROC)(GLuint buffer, GLenum pname, GLint64 * params);
typedef void (__stdcall *PFNGLGETNAMEDBUFFERPARAMETERIVPROC)(GLuint buffer, GLenum pname, GLint * params);
typedef void (__stdcall *PFNGLGETNAMEDBUFFERPOINTERVPROC)(GLuint buffer, GLenum pname, void ** params);
typedef void (__stdcall *PFNGLGETNAMEDBUFFERSUBDATAPROC)(GLuint buffer, GLintptr offset, GLsizeiptr size, void * data);
typedef void (__stdcall *PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC)(GLuint framebuffer, GLenum attachment, GLenum pname, GLint * params);
typedef void (__stdcall *PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC)(GLuint framebuffer, GLenum pname, GLint * param);
typedef void (__stdcall *PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC)(GLuint renderbuffer, GLenum pname, GLint * params);
typedef void (__stdcall *PFNGLGETNAMEDSTRINGARBPROC)(GLint namelen, const GLchar * name, GLsizei bufSize, GLint * stringlen, GLchar * string);
typedef void (__stdcall *PFNGLGETNAMEDSTRINGIVARBPROC)(GLint namelen, const GLchar * name, GLenum pname, GLint * params);
typedef void (__stdcall *PFNGLGETOBJECTLABELPROC)(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei * length, GLchar * label);
typedef void (__stdcall *PFNGLGETOBJECTPARAMETERFVARBPROC)(GLhandleARB obj, GLenum pname, GLfloat * params);
typedef void (__stdcall *PFNGLGETOBJECTPARAMETERIVARBPROC)(GLhandleARB obj, GLenum pname, GLint * params);
typedef void (__stdcall *PFNGLGETOBJECTPTRLABELPROC)(const void * ptr, GLsizei bufSize, GLsizei * length, GLchar * label);
typedef void (__stdcall *PFNGLGETPIXELMAPFVPROC)(GLenum map, GLfloat * values);
typedef void (__stdcall *PFNGLGETPIXELMAPUIVPROC)(GLenum map, GLuint * values);
typedef void (__stdcall *PFNGLGETPIXELMAPUSVPROC)(GLenum map, GLushort * values);
typedef void (__stdcall *PFNGLGETPOINTERVPROC)(GLenum pname, void ** params);
typedef void (__stdcall *PFNGLGETPOLYGONSTIPPLEPROC)(GLubyte * mask);
typedef void (__stdcall *PFNGLGETPROGRAMBINARYPROC)(GLuint program, GLsizei bufSize, GLsizei * length, GLenum * binaryFormat, void * binary);
typedef void (__stdcall *PFNGLGETPROGRAMENVPARAMETERDVARBPROC)(GLenum target, GLuint index, GLdouble * params);
typedef void (__stdcall *PFNGLGETPROGRAMENVPARAMETERFVARBPROC)(GLenum target, GLuint index, GLfloat * params);
typedef void (__stdcall *PFNGLGETPROGRAMINFOLOGPROC)(GLuint program, GLsizei bufSize, GLsizei * length, GLchar * infoLog);
typedef void (__stdcall *PFNGLGETPROGRAMINTERFACEIVPROC)(GLuint program, GLenum programInterface, GLenum pname, GLint * params);
typedef void (__stdcall *PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC)(GLenum target, GLuint index, GLdouble * params);
typedef void (__stdcall *PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC)(GLenum target, GLuint index, GLfloat * params);
typedef void (__stdcall *PFNGLGETPROGRAMPIPELINEINFOLOGPROC)(GLuint pipeline, GLsizei bufSize, GLsizei * length, GLchar * infoLog);
typedef void (__stdcall *PFNGLGETPROGRAMPIPELINEIVPROC)(GLuint pipeline, GLenum pname, GLint * params);
typedef GLuint (__stdcall *PFNGLGETPROGRAMRESOURCEINDEXPROC)(GLuint program, GLenum programInterface, const GLchar * name);
typedef GLint (__stdcall *PFNGLGETPROGRAMRESOURCELOCATIONPROC)(GLuint program, GLenum programInterface, const GLchar * name);
typedef GLint (__stdcall *PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC)(GLuint program, GLenum programInterface, const GLchar * name);
typedef void (__stdcall *PFNGLGETPROGRAMRESOURCENAMEPROC)(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name);
typedef void (__stdcall *PFNGLGETPROGRAMRESOURCEIVPROC)(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum * props, GLsizei count, GLsizei * length, GLint * params);
typedef void (__stdcall *PFNGLGETPROGRAMSTAGEIVPROC)(GLuint program, GLenum shadertype, GLenum pname, GLint * values);
typedef void (__stdcall *PFNGLGETPROGRAMSTRINGARBPROC)(GLenum target, GLenum pname, void * string);
typedef void (__stdcall *PFNGLGETPROGRAMIVPROC)(GLuint program, GLenum pname, GLint * params);
typedef void (__stdcall *PFNGLGETPROGRAMIVARBPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (__stdcall *PFNGLGETQUERYBUFFEROBJECTI64VPROC)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
typedef void (__stdcall *PFNGLGETQUERYBUFFEROBJECTIVPROC)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
typedef void (__stdcall *PFNGLGETQUERYBUFFEROBJECTUI64VPROC)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
typedef void (__stdcall *PFNGLGETQUERYBUFFEROBJECTUIVPROC)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
typedef void (__stdcall *PFNGLGETQUERYINDEXEDIVPROC)(GLenum target, GLuint index, GLenum pname, GLint * params);
typedef void (__stdcall *PFNGLGETQUERYOBJECTI64VPROC)(GLuint id, GLenum pname, GLint64 * params);
typedef void (__stdcall *PFNGLGETQUERYOBJECTIVPROC)(GLuint id, GLenum pname, GLint * params);
typedef void (__stdcall *PFNGLGETQUERYOBJECTIVARBPROC)(GLuint id, GLenum pname, GLint * params);
typedef void (__stdcall *PFNGLGETQUERYOBJECTUI64VPROC)(GLuint id, GLenum pname, GLuint64 * params);
typedef void (__stdcall *PFNGLGETQUERYOBJECTUIVPROC)(GLuint id, GLenum pname, GLuint * params);
typedef void (__stdcall *PFNGLGETQUERYOBJECTUIVARBPROC)(GLuint id, GLenum pname, GLuint * params);
typedef void (__stdcall *PFNGLGETQUERYIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (__stdcall *PFNGLGETQUERYIVARBPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (__stdcall *PFNGLGETRENDERBUFFERPARAMETERIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (__stdcall *PFNGLGETSAMPLERPARAMETERIIVPROC)(GLuint sampler, GLenum pname, GLint * params);
typedef void (__stdcall *PFNGLGETSAMPLERPARAMETERIUIVPROC)(GLuint sampler, GLenum pname, GLuint * params);
typedef void (__stdcall *PFNGLGETSAMPLERPARAMETERFVPROC)(GLuint sampler, GLenum pname, GLfloat * params);
typedef void (__stdcall *PFNGLGETSAMPLERPARAMETERIVPROC)(GLuint sampler, GLenum pname, GLint * params);
typedef void (__stdcall *PFNGLGETSEPARABLEFILTERPROC)(GLenum target, GLenum format, GLenum type, void * row, void * column, void * span);
typedef void (__stdcall *PFNGLGETSHADERINFOLOGPROC)(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * infoLog);
typedef void (__stdcall *PFNGLGETSHADERPRECISIONFORMATPROC)(GLenum shadertype, GLenum precisiontype, GLint * range, GLint * precision);
typedef void (__stdcall *PFNGLGETSHADERSOURCEPROC)(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * source);
typedef void (__stdcall *PFNGLGETSHADERSOURCEARBPROC)(GLhandleARB obj, GLsizei maxLength, GLsizei * length, GLcharARB * source);
typedef void (__stdcall *PFNGLGETSHADERIVPROC)(GLuint shader, GLenum pname, GLint * params);
typedef const GLubyte * (__stdcall *PFNGLGETSTRINGPROC)(GLenum name);
typedef const GLubyte * (__stdcall *PFNGLGETSTRINGIPROC)(GLenum name, GLuint index);
typedef GLuint (__stdcall *PFNGLGETSUBROUTINEINDEXPROC)(GLuint program, GLenum shadertype, const GLchar * name);
typedef GLint (__stdcall *PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC)(GLuint program, GLenum shadertype, const GLchar * name);
typedef void (__stdcall *PFNGLGETSYNCIVPROC)(GLsync sync, GLenum pname, GLsizei count, GLsizei * length, GLint * values);
typedef void (__stdcall *PFNGLGETTEXENVFVPROC)(GLenum target, GLenum pname, GLfloat * params);
typedef void (__stdcall *PFNGLGETTEXENVIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (__stdcall *PFNGLGETTEXGENDVPROC)(GLenum coord, GLenum pname, GLdouble * params);
typedef void (__stdcall *PFNGLGETTEXGENFVPROC)(GLenum coord, GLenum pname, GLfloat * params);
typedef void (__stdcall *PFNGLGETTEXGENIVPROC)(GLenum coord, GLenum pname, GLint * params);
typedef void (__stdcall *PFNGLGETTEXIMAGEPROC)(GLenum target, GLint level, GLenum format, GLenum type, void * pixels);
typedef void (__stdcall *PFNGLGETTEXLEVELPARAMETERFVPROC)(GLenum target, GLint level, GLenum pname, GLfloat * params);
typedef void (__stdcall *PFNGLGETTEXLEVELPARAMETERIVPROC)(GLenum target, GLint level, GLenum pname, GLint * params);
typedef void (__stdcall *PFNGLGETTEXPARAMETERIIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (__stdcall *PFNGLGETTEXPARAMETERIUIVPROC)(GLenum target, GLenum pname, GLuint * params);
typedef void (__stdcall *PFNGLGETTEXPARAMETERFVPROC)(GLenum target, GLenum pname, GLfloat * params);
typedef void (__stdcall *PFNGLGETTEXPARAMETERIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef GLuint64 (__stdcall *PFNGLGETTEXTUREHANDLEARBPROC)(GLuint texture);
typedef void (__stdcall *PFNGLGETTEXTUREIMAGEPROC)(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * pixels);
typedef void (__stdcall *PFNGLGETTEXTURELEVELPARAMETERFVPROC)(GLuint texture, GLint level, GLenum pname, GLfloat * params);
typedef void (__stdcall *PFNGLGETTEXTURELEVELPARAMETERIVPROC)(GLuint texture, GLint level, GLenum pname, GLint * params);
typedef void (__stdcall *PFNGLGETTEXTUREPARAMETERIIVPROC)(GLuint texture, GLenum pname, GLint * params);
typedef void (__stdcall *PFNGLGETTEXTUREPARAMETERIUIVPROC)(GLuint texture, GLenum pname, GLuint * params);
typedef void (__stdcall *PFNGLGETTEXTUREPARAMETERFVPROC)(GLuint texture, GLenum pname, GLfloat * params);
typedef void (__stdcall *PFNGLGETTEXTUREPARAMETERIVPROC)(GLuint texture, GLenum pname, GLint * params);
typedef GLuint64 (__stdcall *PFNGLGETTEXTURESAMPLERHANDLEARBPROC)(GLuint texture, GLuint sampler);
typedef void (__stdcall *PFNGLGETTEXTURESUBIMAGEPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void * pixels);
typedef void (__stdcall *PFNGLGETTRANSFORMFEEDBACKVARYINGPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name);
typedef void (__stdcall *PFNGLGETTRANSFORMFEEDBACKI64_VPROC)(GLuint xfb, GLenum pname, GLuint index, GLint64 * param);
typedef void (__stdcall *PFNGLGETTRANSFORMFEEDBACKI_VPROC)(GLuint xfb, GLenum pname, GLuint index, GLint * param);
typedef void (__stdcall *PFNGLGETTRANSFORMFEEDBACKIVPROC)(GLuint xfb, GLenum pname, GLint * param);
typedef GLuint (__stdcall *PFNGLGETUNIFORMBLOCKINDEXPROC)(GLuint program, const GLchar * uniformBlockName);
typedef void (__stdcall *PFNGLGETUNIFORMINDICESPROC)(GLuint program, GLsizei uniformCount, const GLchar *const* uniformNames, GLuint * uniformIndices);
typedef GLint (__stdcall *PFNGLGETUNIFORMLOCATIONPROC)(GLuint program, const GLchar * name);
typedef GLint (__stdcall *PFNGLGETUNIFORMLOCATIONARBPROC)(GLhandleARB programObj, const GLcharARB * name);
typedef void (__stdcall *PFNGLGETUNIFORMSUBROUTINEUIVPROC)(GLenum shadertype, GLint location, GLuint * params);
typedef void (__stdcall *PFNGLGETUNIFORMDVPROC)(GLuint program, GLint location, GLdouble * params);
typedef void (__stdcall *PFNGLGETUNIFORMFVPROC)(GLuint program, GLint location, GLfloat * params);
typedef void (__stdcall *PFNGLGETUNIFORMFVARBPROC)(GLhandleARB programObj, GLint location, GLfloat * params);
typedef void (__stdcall *PFNGLGETUNIFORMI64VARBPROC)(GLuint program, GLint location, GLint64 * params);
typedef void (__stdcall *PFNGLGETUNIFORMIVPROC)(GLuint program, GLint location, GLint * params);
typedef void (__stdcall *PFNGLGETUNIFORMIVARBPROC)(GLhandleARB programObj, GLint location, GLint * params);
typedef void (__stdcall *PFNGLGETUNIFORMUI64VARBPROC)(GLuint program, GLint location, GLuint64 * params);
typedef void (__stdcall *PFNGLGETUNIFORMUIVPROC)(GLuint program, GLint location, GLuint * params);
typedef void (__stdcall *PFNGLGETVERTEXARRAYINDEXED64IVPROC)(GLuint vaobj, GLuint index, GLenum pname, GLint64 * param);
typedef void (__stdcall *PFNGLGETVERTEXARRAYINDEXEDIVPROC)(GLuint vaobj, GLuint index, GLenum pname, GLint * param);
typedef void (__stdcall *PFNGLGETVERTEXARRAYIVPROC)(GLuint vaobj, GLenum pname, GLint * param);
typedef void (__stdcall *PFNGLGETVERTEXATTRIBIIVPROC)(GLuint index, GLenum pname, GLint * params);
typedef void (__stdcall *PFNGLGETVERTEXATTRIBIUIVPROC)(GLuint index, GLenum pname, GLuint * params);
typedef void (__stdcall *PFNGLGETVERTEXATTRIBLDVPROC)(GLuint index, GLenum pname, GLdouble * params);
typedef void (__stdcall *PFNGLGETVERTEXATTRIBLUI64VARBPROC)(GLuint index, GLenum pname, GLuint64EXT * params);
typedef void (__stdcall *PFNGLGETVERTEXATTRIBPOINTERVPROC)(GLuint index, GLenum pname, void ** pointer);
typedef void (__stdcall *PFNGLGETVERTEXATTRIBPOINTERVARBPROC)(GLuint index, GLenum pname, void ** pointer);
typedef void (__stdcall *PFNGLGETVERTEXATTRIBDVPROC)(GLuint index, GLenum pname, GLdouble * params);
typedef void (__stdcall *PFNGLGETVERTEXATTRIBDVARBPROC)(GLuint index, GLenum pname, GLdouble * params);
typedef void (__stdcall *PFNGLGETVERTEXATTRIBFVPROC)(GLuint index, GLenum pname, GLfloat * params);
typedef void (__stdcall *PFNGLGETVERTEXATTRIBFVARBPROC)(GLuint index, GLenum pname, GLfloat * params);
typedef void (__stdcall *PFNGLGETVERTEXATTRIBIVPROC)(GLuint index, GLenum pname, GLint * params);
typedef void (__stdcall *PFNGLGETVERTEXATTRIBIVARBPROC)(GLuint index, GLenum pname, GLint * params);
typedef void (__stdcall *PFNGLGETNCOLORTABLEARBPROC)(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * table);
typedef void (__stdcall *PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC)(GLenum target, GLint lod, GLsizei bufSize, void * img);
typedef void (__stdcall *PFNGLGETNCONVOLUTIONFILTERARBPROC)(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * image);
typedef void (__stdcall *PFNGLGETNHISTOGRAMARBPROC)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values);
typedef void (__stdcall *PFNGLGETNMAPDVARBPROC)(GLenum target, GLenum query, GLsizei bufSize, GLdouble * v);
typedef void (__stdcall *PFNGLGETNMAPFVARBPROC)(GLenum target, GLenum query, GLsizei bufSize, GLfloat * v);
typedef void (__stdcall *PFNGLGETNMAPIVARBPROC)(GLenum target, GLenum query, GLsizei bufSize, GLint * v);
typedef void (__stdcall *PFNGLGETNMINMAXARBPROC)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values);
typedef void (__stdcall *PFNGLGETNPIXELMAPFVARBPROC)(GLenum map, GLsizei bufSize, GLfloat * values);
typedef void (__stdcall *PFNGLGETNPIXELMAPUIVARBPROC)(GLenum map, GLsizei bufSize, GLuint * values);
typedef void (__stdcall *PFNGLGETNPIXELMAPUSVARBPROC)(GLenum map, GLsizei bufSize, GLushort * values);
typedef void (__stdcall *PFNGLGETNPOLYGONSTIPPLEARBPROC)(GLsizei bufSize, GLubyte * pattern);
typedef void (__stdcall *PFNGLGETNSEPARABLEFILTERARBPROC)(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void * row, GLsizei columnBufSize, void * column, void * span);
typedef void (__stdcall *PFNGLGETNTEXIMAGEARBPROC)(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * img);
typedef void (__stdcall *PFNGLGETNUNIFORMDVARBPROC)(GLuint program, GLint location, GLsizei bufSize, GLdouble * params);
typedef void (__stdcall *PFNGLGETNUNIFORMFVPROC)(GLuint program, GLint location, GLsizei bufSize, GLfloat * params);
typedef void (__stdcall *PFNGLGETNUNIFORMFVARBPROC)(GLuint program, GLint location, GLsizei bufSize, GLfloat * params);
typedef void (__stdcall *PFNGLGETNUNIFORMI64VARBPROC)(GLuint program, GLint location, GLsizei bufSize, GLint64 * params);
typedef void (__stdcall *PFNGLGETNUNIFORMIVPROC)(GLuint program, GLint location, GLsizei bufSize, GLint * params);
typedef void (__stdcall *PFNGLGETNUNIFORMIVARBPROC)(GLuint program, GLint location, GLsizei bufSize, GLint * params);
typedef void (__stdcall *PFNGLGETNUNIFORMUI64VARBPROC)(GLuint program, GLint location, GLsizei bufSize, GLuint64 * params);
typedef void (__stdcall *PFNGLGETNUNIFORMUIVPROC)(GLuint program, GLint location, GLsizei bufSize, GLuint * params);
typedef void (__stdcall *PFNGLGETNUNIFORMUIVARBPROC)(GLuint program, GLint location, GLsizei bufSize, GLuint * params);
typedef void (__stdcall *PFNGLHINTPROC)(GLenum target, GLenum mode);
typedef void (__stdcall *PFNGLHISTOGRAMPROC)(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
typedef void (__stdcall *PFNGLINDEXMASKPROC)(GLuint mask);
typedef void (__stdcall *PFNGLINDEXPOINTERPROC)(GLenum type, GLsizei stride, const void * pointer);
typedef void (__stdcall *PFNGLINDEXDPROC)(GLdouble c);
typedef void (__stdcall *PFNGLINDEXDVPROC)(const GLdouble * c);
typedef void (__stdcall *PFNGLINDEXFPROC)(GLfloat c);
typedef void (__stdcall *PFNGLINDEXFVPROC)(const GLfloat * c);
typedef void (__stdcall *PFNGLINDEXIPROC)(GLint c);
typedef void (__stdcall *PFNGLINDEXIVPROC)(const GLint * c);
typedef void (__stdcall *PFNGLINDEXSPROC)(GLshort c);
typedef void (__stdcall *PFNGLINDEXSVPROC)(const GLshort * c);
typedef void (__stdcall *PFNGLINDEXUBPROC)(GLubyte c);
typedef void (__stdcall *PFNGLINDEXUBVPROC)(const GLubyte * c);
typedef void (__stdcall *PFNGLINITNAMESPROC)(void);
typedef void (__stdcall *PFNGLINTERLEAVEDARRAYSPROC)(GLenum format, GLsizei stride, const void * pointer);
typedef void (__stdcall *PFNGLINVALIDATEBUFFERDATAPROC)(GLuint buffer);
typedef void (__stdcall *PFNGLINVALIDATEBUFFERSUBDATAPROC)(GLuint buffer, GLintptr offset, GLsizeiptr length);
typedef void (__stdcall *PFNGLINVALIDATEFRAMEBUFFERPROC)(GLenum target, GLsizei numAttachments, const GLenum * attachments);
typedef void (__stdcall *PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC)(GLuint framebuffer, GLsizei numAttachments, const GLenum * attachments);
typedef void (__stdcall *PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC)(GLuint framebuffer, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (__stdcall *PFNGLINVALIDATESUBFRAMEBUFFERPROC)(GLenum target, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (__stdcall *PFNGLINVALIDATETEXIMAGEPROC)(GLuint texture, GLint level);
typedef void (__stdcall *PFNGLINVALIDATETEXSUBIMAGEPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);
typedef GLboolean (__stdcall *PFNGLISBUFFERPROC)(GLuint buffer);
typedef GLboolean (__stdcall *PFNGLISBUFFERARBPROC)(GLuint buffer);
typedef GLboolean (__stdcall *PFNGLISENABLEDPROC)(GLenum cap);
typedef GLboolean (__stdcall *PFNGLISENABLEDIPROC)(GLenum target, GLuint index);
typedef GLboolean (__stdcall *PFNGLISFRAMEBUFFERPROC)(GLuint framebuffer);
typedef GLboolean (__stdcall *PFNGLISIMAGEHANDLERESIDENTARBPROC)(GLuint64 handle);
typedef GLboolean (__stdcall *PFNGLISLISTPROC)(GLuint list);
typedef GLboolean (__stdcall *PFNGLISNAMEDSTRINGARBPROC)(GLint namelen, const GLchar * name);
typedef GLboolean (__stdcall *PFNGLISPROGRAMPROC)(GLuint program);
typedef GLboolean (__stdcall *PFNGLISPROGRAMARBPROC)(GLuint program);
typedef GLboolean (__stdcall *PFNGLISPROGRAMPIPELINEPROC)(GLuint pipeline);
typedef GLboolean (__stdcall *PFNGLISQUERYPROC)(GLuint id);
typedef GLboolean (__stdcall *PFNGLISQUERYARBPROC)(GLuint id);
typedef GLboolean (__stdcall *PFNGLISRENDERBUFFERPROC)(GLuint renderbuffer);
typedef GLboolean (__stdcall *PFNGLISSAMPLERPROC)(GLuint sampler);
typedef GLboolean (__stdcall *PFNGLISSHADERPROC)(GLuint shader);
typedef GLboolean (__stdcall *PFNGLISSYNCPROC)(GLsync sync);
typedef GLboolean (__stdcall *PFNGLISTEXTUREPROC)(GLuint texture);
typedef GLboolean (__stdcall *PFNGLISTEXTUREHANDLERESIDENTARBPROC)(GLuint64 handle);
typedef GLboolean (__stdcall *PFNGLISTRANSFORMFEEDBACKPROC)(GLuint id);
typedef GLboolean (__stdcall *PFNGLISVERTEXARRAYPROC)(GLuint array);
typedef void (__stdcall *PFNGLLIGHTMODELFPROC)(GLenum pname, GLfloat param);
typedef void (__stdcall *PFNGLLIGHTMODELFVPROC)(GLenum pname, const GLfloat * params);
typedef void (__stdcall *PFNGLLIGHTMODELIPROC)(GLenum pname, GLint param);
typedef void (__stdcall *PFNGLLIGHTMODELIVPROC)(GLenum pname, const GLint * params);
typedef void (__stdcall *PFNGLLIGHTFPROC)(GLenum light, GLenum pname, GLfloat param);
typedef void (__stdcall *PFNGLLIGHTFVPROC)(GLenum light, GLenum pname, const GLfloat * params);
typedef void (__stdcall *PFNGLLIGHTIPROC)(GLenum light, GLenum pname, GLint param);
typedef void (__stdcall *PFNGLLIGHTIVPROC)(GLenum light, GLenum pname, const GLint * params);
typedef void (__stdcall *PFNGLLINESTIPPLEPROC)(GLint factor, GLushort pattern);
typedef void (__stdcall *PFNGLLINEWIDTHPROC)(GLfloat width);
typedef void (__stdcall *PFNGLLINKPROGRAMPROC)(GLuint program);
typedef void (__stdcall *PFNGLLINKPROGRAMARBPROC)(GLhandleARB programObj);
typedef void (__stdcall *PFNGLLISTBASEPROC)(GLuint base);
typedef void (__stdcall *PFNGLLOADIDENTITYPROC)(void);
typedef void (__stdcall *PFNGLLOADMATRIXDPROC)(const GLdouble * m);
typedef void (__stdcall *PFNGLLOADMATRIXFPROC)(const GLfloat * m);
typedef void (__stdcall *PFNGLLOADNAMEPROC)(GLuint name);
typedef void (__stdcall *PFNGLLOADTRANSPOSEMATRIXDPROC)(const GLdouble * m);
typedef void (__stdcall *PFNGLLOADTRANSPOSEMATRIXDARBPROC)(const GLdouble * m);
typedef void (__stdcall *PFNGLLOADTRANSPOSEMATRIXFPROC)(const GLfloat * m);
typedef void (__stdcall *PFNGLLOADTRANSPOSEMATRIXFARBPROC)(const GLfloat * m);
typedef void (__stdcall *PFNGLLOGICOPPROC)(GLenum opcode);
typedef void (__stdcall *PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC)(GLuint64 handle);
typedef void (__stdcall *PFNGLMAKEIMAGEHANDLERESIDENTARBPROC)(GLuint64 handle, GLenum access);
typedef void (__stdcall *PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC)(GLuint64 handle);
typedef void (__stdcall *PFNGLMAKETEXTUREHANDLERESIDENTARBPROC)(GLuint64 handle);
typedef void (__stdcall *PFNGLMAP1DPROC)(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble * points);
typedef void (__stdcall *PFNGLMAP1FPROC)(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat * points);
typedef void (__stdcall *PFNGLMAP2DPROC)(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble * points);
typedef void (__stdcall *PFNGLMAP2FPROC)(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat * points);
typedef void * (__stdcall *PFNGLMAPBUFFERPROC)(GLenum target, GLenum access);
typedef void * (__stdcall *PFNGLMAPBUFFERARBPROC)(GLenum target, GLenum access);
typedef void * (__stdcall *PFNGLMAPBUFFERRANGEPROC)(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
typedef void (__stdcall *PFNGLMAPGRID1DPROC)(GLint un, GLdouble u1, GLdouble u2);
typedef void (__stdcall *PFNGLMAPGRID1FPROC)(GLint un, GLfloat u1, GLfloat u2);
typedef void (__stdcall *PFNGLMAPGRID2DPROC)(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
typedef void (__stdcall *PFNGLMAPGRID2FPROC)(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
typedef void * (__stdcall *PFNGLMAPNAMEDBUFFERPROC)(GLuint buffer, GLenum access);
typedef void * (__stdcall *PFNGLMAPNAMEDBUFFERRANGEPROC)(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
typedef void (__stdcall *PFNGLMATERIALFPROC)(GLenum face, GLenum pname, GLfloat param);
typedef void (__stdcall *PFNGLMATERIALFVPROC)(GLenum face, GLenum pname, const GLfloat * params);
typedef void (__stdcall *PFNGLMATERIALIPROC)(GLenum face, GLenum pname, GLint param);
typedef void (__stdcall *PFNGLMATERIALIVPROC)(GLenum face, GLenum pname, const GLint * params);
typedef void (__stdcall *PFNGLMATRIXINDEXPOINTERARBPROC)(GLint size, GLenum type, GLsizei stride, const void * pointer);
typedef void (__stdcall *PFNGLMATRIXINDEXUBVARBPROC)(GLint size, const GLubyte * indices);
typedef void (__stdcall *PFNGLMATRIXINDEXUIVARBPROC)(GLint size, const GLuint * indices);
typedef void (__stdcall *PFNGLMATRIXINDEXUSVARBPROC)(GLint size, const GLushort * indices);
typedef void (__stdcall *PFNGLMATRIXMODEPROC)(GLenum mode);
typedef void (__stdcall *PFNGLMAXSHADERCOMPILERTHREADSARBPROC)(GLuint count);
typedef void (__stdcall *PFNGLMAXSHADERCOMPILERTHREADSKHRPROC)(GLuint count);
typedef void (__stdcall *PFNGLMEMORYBARRIERPROC)(GLbitfield barriers);
typedef void (__stdcall *PFNGLMEMORYBARRIERBYREGIONPROC)(GLbitfield barriers);
typedef void (__stdcall *PFNGLMINSAMPLESHADINGPROC)(GLfloat value);
typedef void (__stdcall *PFNGLMINSAMPLESHADINGARBPROC)(GLfloat value);
typedef void (__stdcall *PFNGLMINMAXPROC)(GLenum target, GLenum internalformat, GLboolean sink);
typedef void (__stdcall *PFNGLMULTMATRIXDPROC)(const GLdouble * m);
typedef void (__stdcall *PFNGLMULTMATRIXFPROC)(const GLfloat * m);
typedef void (__stdcall *PFNGLMULTTRANSPOSEMATRIXDPROC)(const GLdouble * m);
typedef void (__stdcall *PFNGLMULTTRANSPOSEMATRIXDARBPROC)(const GLdouble * m);
typedef void (__stdcall *PFNGLMULTTRANSPOSEMATRIXFPROC)(const GLfloat * m);
typedef void (__stdcall *PFNGLMULTTRANSPOSEMATRIXFARBPROC)(const GLfloat * m);
typedef void (__stdcall *PFNGLMULTIDRAWARRAYSPROC)(GLenum mode, const GLint * first, const GLsizei * count, GLsizei drawcount);
typedef void (__stdcall *PFNGLMULTIDRAWARRAYSINDIRECTPROC)(GLenum mode, const void * indirect, GLsizei drawcount, GLsizei stride);
typedef void (__stdcall *PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC)(GLenum mode, const void * indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
typedef void (__stdcall *PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC)(GLenum mode, const void * indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
typedef void (__stdcall *PFNGLMULTIDRAWELEMENTSPROC)(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei drawcount);
typedef void (__stdcall *PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC)(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei drawcount, const GLint * basevertex);
typedef void (__stdcall *PFNGLMULTIDRAWELEMENTSINDIRECTPROC)(GLenum mode, GLenum type, const void * indirect, GLsizei drawcount, GLsizei stride);
typedef void (__stdcall *PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC)(GLenum mode, GLenum type, const void * indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
typedef void (__stdcall *PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC)(GLenum mode, GLenum type, const void * indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
typedef void (__stdcall *PFNGLMULTITEXCOORD1DPROC)(GLenum target, GLdouble s);
typedef void (__stdcall *PFNGLMULTITEXCOORD1DARBPROC)(GLenum target, GLdouble s);
typedef void (__stdcall *PFNGLMULTITEXCOORD1DVPROC)(GLenum target, const GLdouble * v);
typedef void (__stdcall *PFNGLMULTITEXCOORD1DVARBPROC)(GLenum target, const GLdouble * v);
typedef void (__stdcall *PFNGLMULTITEXCOORD1FPROC)(GLenum target, GLfloat s);
typedef void (__stdcall *PFNGLMULTITEXCOORD1FARBPROC)(GLenum target, GLfloat s);
typedef void (__stdcall *PFNGLMULTITEXCOORD1FVPROC)(GLenum target, const GLfloat * v);
typedef void (__stdcall *PFNGLMULTITEXCOORD1FVARBPROC)(GLenum target, const GLfloat * v);
typedef void (__stdcall *PFNGLMULTITEXCOORD1IPROC)(GLenum target, GLint s);
typedef void (__stdcall *PFNGLMULTITEXCOORD1IARBPROC)(GLenum target, GLint s);
typedef void (__stdcall *PFNGLMULTITEXCOORD1IVPROC)(GLenum target, const GLint * v);
typedef void (__stdcall *PFNGLMULTITEXCOORD1IVARBPROC)(GLenum target, const GLint * v);
typedef void (__stdcall *PFNGLMULTITEXCOORD1SPROC)(GLenum target, GLshort s);
typedef void (__stdcall *PFNGLMULTITEXCOORD1SARBPROC)(GLenum target, GLshort s);
typedef void (__stdcall *PFNGLMULTITEXCOORD1SVPROC)(GLenum target, const GLshort * v);
typedef void (__stdcall *PFNGLMULTITEXCOORD1SVARBPROC)(GLenum target, const GLshort * v);
typedef void (__stdcall *PFNGLMULTITEXCOORD2DPROC)(GLenum target, GLdouble s, GLdouble t);
typedef void (__stdcall *PFNGLMULTITEXCOORD2DARBPROC)(GLenum target, GLdouble s, GLdouble t);
typedef void (__stdcall *PFNGLMULTITEXCOORD2DVPROC)(GLenum target, const GLdouble * v);
typedef void (__stdcall *PFNGLMULTITEXCOORD2DVARBPROC)(GLenum target, const GLdouble * v);
typedef void (__stdcall *PFNGLMULTITEXCOORD2FPROC)(GLenum target, GLfloat s, GLfloat t);
typedef void (__stdcall *PFNGLMULTITEXCOORD2FARBPROC)(GLenum target, GLfloat s, GLfloat t);
typedef void (__stdcall *PFNGLMULTITEXCOORD2FVPROC)(GLenum target, const GLfloat * v);
typedef void (__stdcall *PFNGLMULTITEXCOORD2FVARBPROC)(GLenum target, const GLfloat * v);
typedef void (__stdcall *PFNGLMULTITEXCOORD2IPROC)(GLenum target, GLint s, GLint t);
typedef void (__stdcall *PFNGLMULTITEXCOORD2IARBPROC)(GLenum target, GLint s, GLint t);
typedef void (__stdcall *PFNGLMULTITEXCOORD2IVPROC)(GLenum target, const GLint * v);
typedef void (__stdcall *PFNGLMULTITEXCOORD2IVARBPROC)(GLenum target, const GLint * v);
typedef void (__stdcall *PFNGLMULTITEXCOORD2SPROC)(GLenum target, GLshort s, GLshort t);
typedef void (__stdcall *PFNGLMULTITEXCOORD2SARBPROC)(GLenum target, GLshort s, GLshort t);
typedef void (__stdcall *PFNGLMULTITEXCOORD2SVPROC)(GLenum target, const GLshort * v);
typedef void (__stdcall *PFNGLMULTITEXCOORD2SVARBPROC)(GLenum target, const GLshort * v);
typedef void (__stdcall *PFNGLMULTITEXCOORD3DPROC)(GLenum target, GLdouble s, GLdouble t, GLdouble r);
typedef void (__stdcall *PFNGLMULTITEXCOORD3DARBPROC)(GLenum target, GLdouble s, GLdouble t, GLdouble r);
typedef void (__stdcall *PFNGLMULTITEXCOORD3DVPROC)(GLenum target, const GLdouble * v);
typedef void (__stdcall *PFNGLMULTITEXCOORD3DVARBPROC)(GLenum target, const GLdouble * v);
typedef void (__stdcall *PFNGLMULTITEXCOORD3FPROC)(GLenum target, GLfloat s, GLfloat t, GLfloat r);
typedef void (__stdcall *PFNGLMULTITEXCOORD3FARBPROC)(GLenum target, GLfloat s, GLfloat t, GLfloat r);
typedef void (__stdcall *PFNGLMULTITEXCOORD3FVPROC)(GLenum target, const GLfloat * v);
typedef void (__stdcall *PFNGLMULTITEXCOORD3FVARBPROC)(GLenum target, const GLfloat * v);
typedef void (__stdcall *PFNGLMULTITEXCOORD3IPROC)(GLenum target, GLint s, GLint t, GLint r);
typedef void (__stdcall *PFNGLMULTITEXCOORD3IARBPROC)(GLenum target, GLint s, GLint t, GLint r);
typedef void (__stdcall *PFNGLMULTITEXCOORD3IVPROC)(GLenum target, const GLint * v);
typedef void (__stdcall *PFNGLMULTITEXCOORD3IVARBPROC)(GLenum target, const GLint * v);
typedef void (__stdcall *PFNGLMULTITEXCOORD3SPROC)(GLenum target, GLshort s, GLshort t, GLshort r);
typedef void (__stdcall *PFNGLMULTITEXCOORD3SARBPROC)(GLenum target, GLshort s, GLshort t, GLshort r);
typedef void (__stdcall *PFNGLMULTITEXCOORD3SVPROC)(GLenum target, const GLshort * v);
typedef void (__stdcall *PFNGLMULTITEXCOORD3SVARBPROC)(GLenum target, const GLshort * v);
typedef void (__stdcall *PFNGLMULTITEXCOORD4DPROC)(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
typedef void (__stdcall *PFNGLMULTITEXCOORD4DARBPROC)(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
typedef void (__stdcall *PFNGLMULTITEXCOORD4DVPROC)(GLenum target, const GLdouble * v);
typedef void (__stdcall *PFNGLMULTITEXCOORD4DVARBPROC)(GLenum target, const GLdouble * v);
typedef void (__stdcall *PFNGLMULTITEXCOORD4FPROC)(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
typedef void (__stdcall *PFNGLMULTITEXCOORD4FARBPROC)(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
typedef void (__stdcall *PFNGLMULTITEXCOORD4FVPROC)(GLenum target, const GLfloat * v);
typedef void (__stdcall *PFNGLMULTITEXCOORD4FVARBPROC)(GLenum target, const GLfloat * v);
typedef void (__stdcall *PFNGLMULTITEXCOORD4IPROC)(GLenum target, GLint s, GLint t, GLint r, GLint q);
typedef void (__stdcall *PFNGLMULTITEXCOORD4IARBPROC)(GLenum target, GLint s, GLint t, GLint r, GLint q);
typedef void (__stdcall *PFNGLMULTITEXCOORD4IVPROC)(GLenum target, const GLint * v);
typedef void (__stdcall *PFNGLMULTITEXCOORD4IVARBPROC)(GLenum target, const GLint * v);
typedef void (__stdcall *PFNGLMULTITEXCOORD4SPROC)(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
typedef void (__stdcall *PFNGLMULTITEXCOORD4SARBPROC)(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
typedef void (__stdcall *PFNGLMULTITEXCOORD4SVPROC)(GLenum target, const GLshort * v);
typedef void (__stdcall *PFNGLMULTITEXCOORD4SVARBPROC)(GLenum target, const GLshort * v);
typedef void (__stdcall *PFNGLMULTITEXCOORDP1UIPROC)(GLenum texture, GLenum type, GLuint coords);
typedef void (__stdcall *PFNGLMULTITEXCOORDP1UIVPROC)(GLenum texture, GLenum type, const GLuint * coords);
typedef void (__stdcall *PFNGLMULTITEXCOORDP2UIPROC)(GLenum texture, GLenum type, GLuint coords);
typedef void (__stdcall *PFNGLMULTITEXCOORDP2UIVPROC)(GLenum texture, GLenum type, const GLuint * coords);
typedef void (__stdcall *PFNGLMULTITEXCOORDP3UIPROC)(GLenum texture, GLenum type, GLuint coords);
typedef void (__stdcall *PFNGLMULTITEXCOORDP3UIVPROC)(GLenum texture, GLenum type, const GLuint * coords);
typedef void (__stdcall *PFNGLMULTITEXCOORDP4UIPROC)(GLenum texture, GLenum type, GLuint coords);
typedef void (__stdcall *PFNGLMULTITEXCOORDP4UIVPROC)(GLenum texture, GLenum type, const GLuint * coords);
typedef void (__stdcall *PFNGLNAMEDBUFFERDATAPROC)(GLuint buffer, GLsizeiptr size, const void * data, GLenum usage);
typedef void (__stdcall *PFNGLNAMEDBUFFERPAGECOMMITMENTARBPROC)(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit);
typedef void (__stdcall *PFNGLNAMEDBUFFERPAGECOMMITMENTEXTPROC)(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit);
typedef void (__stdcall *PFNGLNAMEDBUFFERSTORAGEPROC)(GLuint buffer, GLsizeiptr size, const void * data, GLbitfield flags);
typedef void (__stdcall *PFNGLNAMEDBUFFERSUBDATAPROC)(GLuint buffer, GLintptr offset, GLsizeiptr size, const void * data);
typedef void (__stdcall *PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC)(GLuint framebuffer, GLenum buf);
typedef void (__stdcall *PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC)(GLuint framebuffer, GLsizei n, const GLenum * bufs);
typedef void (__stdcall *PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC)(GLuint framebuffer, GLenum pname, GLint param);
typedef void (__stdcall *PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC)(GLuint framebuffer, GLenum src);
typedef void (__stdcall *PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC)(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
typedef void (__stdcall *PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARBPROC)(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat * v);
typedef void (__stdcall *PFNGLNAMEDFRAMEBUFFERTEXTUREPROC)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
typedef void (__stdcall *PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef void (__stdcall *PFNGLNAMEDRENDERBUFFERSTORAGEPROC)(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (__stdcall *PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC)(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (__stdcall *PFNGLNAMEDSTRINGARBPROC)(GLenum type, GLint namelen, const GLchar * name, GLint stringlen, const GLchar * string);
typedef void (__stdcall *PFNGLNEWLISTPROC)(GLuint list, GLenum mode);
typedef void (__stdcall *PFNGLNORMAL3BPROC)(GLbyte nx, GLbyte ny, GLbyte nz);
typedef void (__stdcall *PFNGLNORMAL3BVPROC)(const GLbyte * v);
typedef void (__stdcall *PFNGLNORMAL3DPROC)(GLdouble nx, GLdouble ny, GLdouble nz);
typedef void (__stdcall *PFNGLNORMAL3DVPROC)(const GLdouble * v);
typedef void (__stdcall *PFNGLNORMAL3FPROC)(GLfloat nx, GLfloat ny, GLfloat nz);
typedef void (__stdcall *PFNGLNORMAL3FVPROC)(const GLfloat * v);
typedef void (__stdcall *PFNGLNORMAL3IPROC)(GLint nx, GLint ny, GLint nz);
typedef void (__stdcall *PFNGLNORMAL3IVPROC)(const GLint * v);
typedef void (__stdcall *PFNGLNORMAL3SPROC)(GLshort nx, GLshort ny, GLshort nz);
typedef void (__stdcall *PFNGLNORMAL3SVPROC)(const GLshort * v);
typedef void (__stdcall *PFNGLNORMALP3UIPROC)(GLenum type, GLuint coords);
typedef void (__stdcall *PFNGLNORMALP3UIVPROC)(GLenum type, const GLuint * coords);
typedef void (__stdcall *PFNGLNORMALPOINTERPROC)(GLenum type, GLsizei stride, const void * pointer);
typedef void (__stdcall *PFNGLOBJECTLABELPROC)(GLenum identifier, GLuint name, GLsizei length, const GLchar * label);
typedef void (__stdcall *PFNGLOBJECTPTRLABELPROC)(const void * ptr, GLsizei length, const GLchar * label);
typedef void (__stdcall *PFNGLORTHOPROC)(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
typedef void (__stdcall *PFNGLPASSTHROUGHPROC)(GLfloat token);
typedef void (__stdcall *PFNGLPATCHPARAMETERFVPROC)(GLenum pname, const GLfloat * values);
typedef void (__stdcall *PFNGLPATCHPARAMETERIPROC)(GLenum pname, GLint value);
typedef void (__stdcall *PFNGLPAUSETRANSFORMFEEDBACKPROC)(void);
typedef void (__stdcall *PFNGLPIXELMAPFVPROC)(GLenum map, GLsizei mapsize, const GLfloat * values);
typedef void (__stdcall *PFNGLPIXELMAPUIVPROC)(GLenum map, GLsizei mapsize, const GLuint * values);
typedef void (__stdcall *PFNGLPIXELMAPUSVPROC)(GLenum map, GLsizei mapsize, const GLushort * values);
typedef void (__stdcall *PFNGLPIXELSTOREFPROC)(GLenum pname, GLfloat param);
typedef void (__stdcall *PFNGLPIXELSTOREIPROC)(GLenum pname, GLint param);
typedef void (__stdcall *PFNGLPIXELTRANSFERFPROC)(GLenum pname, GLfloat param);
typedef void (__stdcall *PFNGLPIXELTRANSFERIPROC)(GLenum pname, GLint param);
typedef void (__stdcall *PFNGLPIXELZOOMPROC)(GLfloat xfactor, GLfloat yfactor);
typedef void (__stdcall *PFNGLPOINTPARAMETERFPROC)(GLenum pname, GLfloat param);
typedef void (__stdcall *PFNGLPOINTPARAMETERFARBPROC)(GLenum pname, GLfloat param);
typedef void (__stdcall *PFNGLPOINTPARAMETERFVPROC)(GLenum pname, const GLfloat * params);
typedef void (__stdcall *PFNGLPOINTPARAMETERFVARBPROC)(GLenum pname, const GLfloat * params);
typedef void (__stdcall *PFNGLPOINTPARAMETERIPROC)(GLenum pname, GLint param);
typedef void (__stdcall *PFNGLPOINTPARAMETERIVPROC)(GLenum pname, const GLint * params);
typedef void (__stdcall *PFNGLPOINTSIZEPROC)(GLfloat size);
typedef void (__stdcall *PFNGLPOLYGONMODEPROC)(GLenum face, GLenum mode);
typedef void (__stdcall *PFNGLPOLYGONOFFSETPROC)(GLfloat factor, GLfloat units);
typedef void (__stdcall *PFNGLPOLYGONOFFSETCLAMPPROC)(GLfloat factor, GLfloat units, GLfloat clamp);
typedef void (__stdcall *PFNGLPOLYGONSTIPPLEPROC)(const GLubyte * mask);
typedef void (__stdcall *PFNGLPOPATTRIBPROC)(void);
typedef void (__stdcall *PFNGLPOPCLIENTATTRIBPROC)(void);
typedef void (__stdcall *PFNGLPOPDEBUGGROUPPROC)(void);
typedef void (__stdcall *PFNGLPOPMATRIXPROC)(void);
typedef void (__stdcall *PFNGLPOPNAMEPROC)(void);
typedef void (__stdcall *PFNGLPRIMITIVEBOUNDINGBOXPROC)(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW);
typedef void (__stdcall *PFNGLPRIMITIVEBOUNDINGBOXARBPROC)(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW);
typedef void (__stdcall *PFNGLPRIMITIVERESTARTINDEXPROC)(GLuint index);
typedef void (__stdcall *PFNGLPRIORITIZETEXTURESPROC)(GLsizei n, const GLuint * textures, const GLfloat * priorities);
typedef void (__stdcall *PFNGLPROGRAMBINARYPROC)(GLuint program, GLenum binaryFormat, const void * binary, GLsizei length);
typedef void (__stdcall *PFNGLPROGRAMENVPARAMETER4DARBPROC)(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (__stdcall *PFNGLPROGRAMENVPARAMETER4DVARBPROC)(GLenum target, GLuint index, const GLdouble * params);
typedef void (__stdcall *PFNGLPROGRAMENVPARAMETER4FARBPROC)(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (__stdcall *PFNGLPROGRAMENVPARAMETER4FVARBPROC)(GLenum target, GLuint index, const GLfloat * params);
typedef void (__stdcall *PFNGLPROGRAMLOCALPARAMETER4DARBPROC)(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (__stdcall *PFNGLPROGRAMLOCALPARAMETER4DVARBPROC)(GLenum target, GLuint index, const GLdouble * params);
typedef void (__stdcall *PFNGLPROGRAMLOCALPARAMETER4FARBPROC)(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (__stdcall *PFNGLPROGRAMLOCALPARAMETER4FVARBPROC)(GLenum target, GLuint index, const GLfloat * params);
typedef void (__stdcall *PFNGLPROGRAMPARAMETERIPROC)(GLuint program, GLenum pname, GLint value);
typedef void (__stdcall *PFNGLPROGRAMPARAMETERIARBPROC)(GLuint program, GLenum pname, GLint value);
typedef void (__stdcall *PFNGLPROGRAMSTRINGARBPROC)(GLenum target, GLenum format, GLsizei len, const void * string);
typedef void (__stdcall *PFNGLPROGRAMUNIFORM1DPROC)(GLuint program, GLint location, GLdouble v0);
typedef void (__stdcall *PFNGLPROGRAMUNIFORM1DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble * value);
typedef void (__stdcall *PFNGLPROGRAMUNIFORM1FPROC)(GLuint program, GLint location, GLfloat v0);
typedef void (__stdcall *PFNGLPROGRAMUNIFORM1FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat * value);
typedef void (__stdcall *PFNGLPROGRAMUNIFORM1IPROC)(GLuint program, GLint location, GLint v0);
typedef void (__stdcall *PFNGLPROGRAMUNIFORM1I64ARBPROC)(GLuint program, GLint location, GLint64 x);
typedef void (__stdcall *PFNGLPROGRAMUNIFORM1I64VARBPROC)(GLuint program, GLint location, GLsizei count, const GLint64 * value);
typedef void (__stdcall *PFNGLPROGRAMUNIFORM1IVPROC)(GLuint program, GLint location, GLsizei count, const GLint * value);
typedef void (__stdcall *PFNGLPROGRAMUNIFORM1UIPROC)(GLuint program, GLint location, GLuint v0);
typedef void (__stdcall *PFNGLPROGRAMUNIFORM1UI64ARBPROC)(GLuint program, GLint location, GLuint64 x);
typedef void (__stdcall *PFNGLPROGRAMUNIFORM1UI64VARBPROC)(GLuint program, GLint location, GLsizei count, const GLuint64 * value);
typedef void (__stdcall *PFNGLPROGRAMUNIFORM1UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint * value);
typedef void (__stdcall *PFNGLPROGRAMUNIFORM2DPROC)(GLuint program, GLint location, GLdouble v0, GLdouble v1);
typedef void (__stdcall *PFNGLPROGRAMUNIFORM2DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble * value);
typedef void (__stdcall *PFNGLPROGRAMUNIFORM2FPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1);
typedef void (__stdcall *PFNGLPROGRAMUNIFORM2FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat * value);
typedef void (__stdcall *PFNGLPROGRAMUNIFORM2IPROC)(GLuint program, GLint location, GLint v0, GLint v1);
typedef void (__stdcall *PFNGLPROGRAMUNIFORM2I64ARBPROC)(GLuint program, GLint location, GLint64 x, GLint64 y);
typedef void (__stdcall *PFNGLPROGRAMUNIFORM2I64VARBPROC)(GLuint program, GLint location, GLsizei count, const GLint64 * value);
typedef void (__stdcall *PFNGLPROGRAMUNIFORM2IVPROC)(GLuint program, GLint location, GLsizei count, const GLint * value);
typedef void (__stdcall *PFNGLPROGRAMUNIFORM2UIPROC)(GLuint program, GLint location, GLuint v0, GLuint v1);
typedef void (__stdcall *PFNGLPROGRAMUNIFORM2UI64ARBPROC)(GLuint program, GLint location, GLuint64 x, GLuint64 y);
typedef void (__stdcall *PFNGLPROGRAMUNIFORM2UI64VARBPROC)(GLuint program, GLint location, GLsizei count, const GLuint64 * value);
typedef void (__stdcall *PFNGLPROGRAMUNIFORM2UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint * value);
typedef void (__stdcall *PFNGLPROGRAMUNIFORM3DPROC)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);
typedef void (__stdcall *PFNGLPROGRAMUNIFORM3DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble * value);
typedef void (__stdcall *PFNGLPROGRAMUNIFORM3FPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void (__stdcall *PFNGLPROGRAMUNIFORM3FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat * value);
typedef void (__stdcall *PFNGLPROGRAMUNIFORM3IPROC)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
typedef void (__stdcall *PFNGLPROGRAMUNIFORM3I64ARBPROC)(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z);
typedef void (__stdcall *PFNGLPROGRAMUNIFORM3I64VARBPROC)(GLuint program, GLint location, GLsizei count, const GLint64 * value);
typedef void (__stdcall *PFNGLPROGRAMUNIFORM3IVPROC)(GLuint program, GLint location, GLsizei count, const GLint * value);
typedef void (__stdcall *PFNGLPROGRAMUNIFORM3UIPROC)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
typedef void (__stdcall *PFNGLPROGRAMUNIFORM3UI64ARBPROC)(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z);
typedef void (__stdcall *PFNGLPROGRAMUNIFORM3UI64VARBPROC)(GLuint program, GLint location, GLsizei count, const GLuint64 * value);
typedef void (__stdcall *PFNGLPROGRAMUNIFORM3UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint * value);
typedef void (__stdcall *PFNGLPROGRAMUNIFORM4DPROC)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
typedef void (__stdcall *PFNGLPROGRAMUNIFORM4DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble * value);
typedef void (__stdcall *PFNGLPROGRAMUNIFORM4FPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void (__stdcall *PFNGLPROGRAMUNIFORM4FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat * value);
typedef void (__stdcall *PFNGLPROGRAMUNIFORM4IPROC)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void (__stdcall *PFNGLPROGRAMUNIFORM4I64ARBPROC)(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w);
typedef void (__stdcall *PFNGLPROGRAMUNIFORM4I64VARBPROC)(GLuint program, GLint location, GLsizei count, const GLint64 * value);
typedef void (__stdcall *PFNGLPROGRAMUNIFORM4IVPROC)(GLuint program, GLint location, GLsizei count, const GLint * value);
typedef void (__stdcall *PFNGLPROGRAMUNIFORM4UIPROC)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
typedef void (__stdcall *PFNGLPROGRAMUNIFORM4UI64ARBPROC)(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w);
typedef void (__stdcall *PFNGLPROGRAMUNIFORM4UI64VARBPROC)(GLuint program, GLint location, GLsizei count, const GLuint64 * value);
typedef void (__stdcall *PFNGLPROGRAMUNIFORM4UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint * value);
typedef void (__stdcall *PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC)(GLuint program, GLint location, GLuint64 value);
typedef void (__stdcall *PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC)(GLuint program, GLint location, GLsizei count, const GLuint64 * values);
typedef void (__stdcall *PFNGLPROGRAMUNIFORMMATRIX2DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (__stdcall *PFNGLPROGRAMUNIFORMMATRIX2FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (__stdcall *PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (__stdcall *PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (__stdcall *PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (__stdcall *PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (__stdcall *PFNGLPROGRAMUNIFORMMATRIX3DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (__stdcall *PFNGLPROGRAMUNIFORMMATRIX3FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (__stdcall *PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (__stdcall *PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (__stdcall *PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (__stdcall *PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (__stdcall *PFNGLPROGRAMUNIFORMMATRIX4DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (__stdcall *PFNGLPROGRAMUNIFORMMATRIX4FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (__stdcall *PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (__stdcall *PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (__stdcall *PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (__stdcall *PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (__stdcall *PFNGLPROVOKINGVERTEXPROC)(GLenum mode);
typedef void (__stdcall *PFNGLPUSHATTRIBPROC)(GLbitfield mask);
typedef void (__stdcall *PFNGLPUSHCLIENTATTRIBPROC)(GLbitfield mask);
typedef void (__stdcall *PFNGLPUSHDEBUGGROUPPROC)(GLenum source, GLuint id, GLsizei length, const GLchar * message);
typedef void (__stdcall *PFNGLPUSHMATRIXPROC)(void);
typedef void (__stdcall *PFNGLPUSHNAMEPROC)(GLuint name);
typedef void (__stdcall *PFNGLQUERYCOUNTERPROC)(GLuint id, GLenum target);
typedef void (__stdcall *PFNGLRASTERPOS2DPROC)(GLdouble x, GLdouble y);
typedef void (__stdcall *PFNGLRASTERPOS2DVPROC)(const GLdouble * v);
typedef void (__stdcall *PFNGLRASTERPOS2FPROC)(GLfloat x, GLfloat y);
typedef void (__stdcall *PFNGLRASTERPOS2FVPROC)(const GLfloat * v);
typedef void (__stdcall *PFNGLRASTERPOS2IPROC)(GLint x, GLint y);
typedef void (__stdcall *PFNGLRASTERPOS2IVPROC)(const GLint * v);
typedef void (__stdcall *PFNGLRASTERPOS2SPROC)(GLshort x, GLshort y);
typedef void (__stdcall *PFNGLRASTERPOS2SVPROC)(const GLshort * v);
typedef void (__stdcall *PFNGLRASTERPOS3DPROC)(GLdouble x, GLdouble y, GLdouble z);
typedef void (__stdcall *PFNGLRASTERPOS3DVPROC)(const GLdouble * v);
typedef void (__stdcall *PFNGLRASTERPOS3FPROC)(GLfloat x, GLfloat y, GLfloat z);
typedef void (__stdcall *PFNGLRASTERPOS3FVPROC)(const GLfloat * v);
typedef void (__stdcall *PFNGLRASTERPOS3IPROC)(GLint x, GLint y, GLint z);
typedef void (__stdcall *PFNGLRASTERPOS3IVPROC)(const GLint * v);
typedef void (__stdcall *PFNGLRASTERPOS3SPROC)(GLshort x, GLshort y, GLshort z);
typedef void (__stdcall *PFNGLRASTERPOS3SVPROC)(const GLshort * v);
typedef void (__stdcall *PFNGLRASTERPOS4DPROC)(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (__stdcall *PFNGLRASTERPOS4DVPROC)(const GLdouble * v);
typedef void (__stdcall *PFNGLRASTERPOS4FPROC)(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (__stdcall *PFNGLRASTERPOS4FVPROC)(const GLfloat * v);
typedef void (__stdcall *PFNGLRASTERPOS4IPROC)(GLint x, GLint y, GLint z, GLint w);
typedef void (__stdcall *PFNGLRASTERPOS4IVPROC)(const GLint * v);
typedef void (__stdcall *PFNGLRASTERPOS4SPROC)(GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (__stdcall *PFNGLRASTERPOS4SVPROC)(const GLshort * v);
typedef void (__stdcall *PFNGLREADBUFFERPROC)(GLenum src);
typedef void (__stdcall *PFNGLREADPIXELSPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void * pixels);
typedef void (__stdcall *PFNGLREADNPIXELSPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data);
typedef void (__stdcall *PFNGLREADNPIXELSARBPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data);
typedef void (__stdcall *PFNGLRECTDPROC)(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);
typedef void (__stdcall *PFNGLRECTDVPROC)(const GLdouble * v1, const GLdouble * v2);
typedef void (__stdcall *PFNGLRECTFPROC)(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);
typedef void (__stdcall *PFNGLRECTFVPROC)(const GLfloat * v1, const GLfloat * v2);
typedef void (__stdcall *PFNGLRECTIPROC)(GLint x1, GLint y1, GLint x2, GLint y2);
typedef void (__stdcall *PFNGLRECTIVPROC)(const GLint * v1, const GLint * v2);
typedef void (__stdcall *PFNGLRECTSPROC)(GLshort x1, GLshort y1, GLshort x2, GLshort y2);
typedef void (__stdcall *PFNGLRECTSVPROC)(const GLshort * v1, const GLshort * v2);
typedef void (__stdcall *PFNGLRELEASESHADERCOMPILERPROC)(void);
typedef GLint (__stdcall *PFNGLRENDERMODEPROC)(GLenum mode);
typedef void (__stdcall *PFNGLRENDERBUFFERSTORAGEPROC)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (__stdcall *PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (__stdcall *PFNGLRESETHISTOGRAMPROC)(GLenum target);
typedef void (__stdcall *PFNGLRESETMINMAXPROC)(GLenum target);
typedef void (__stdcall *PFNGLRESUMETRANSFORMFEEDBACKPROC)(void);
typedef void (__stdcall *PFNGLROTATEDPROC)(GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
typedef void (__stdcall *PFNGLROTATEFPROC)(GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
typedef void (__stdcall *PFNGLSAMPLECOVERAGEPROC)(GLfloat value, GLboolean invert);
typedef void (__stdcall *PFNGLSAMPLECOVERAGEARBPROC)(GLfloat value, GLboolean invert);
typedef void (__stdcall *PFNGLSAMPLEMASKIPROC)(GLuint maskNumber, GLbitfield mask);
typedef void (__stdcall *PFNGLSAMPLERPARAMETERIIVPROC)(GLuint sampler, GLenum pname, const GLint * param);
typedef void (__stdcall *PFNGLSAMPLERPARAMETERIUIVPROC)(GLuint sampler, GLenum pname, const GLuint * param);
typedef void (__stdcall *PFNGLSAMPLERPARAMETERFPROC)(GLuint sampler, GLenum pname, GLfloat param);
typedef void (__stdcall *PFNGLSAMPLERPARAMETERFVPROC)(GLuint sampler, GLenum pname, const GLfloat * param);
typedef void (__stdcall *PFNGLSAMPLERPARAMETERIPROC)(GLuint sampler, GLenum pname, GLint param);
typedef void (__stdcall *PFNGLSAMPLERPARAMETERIVPROC)(GLuint sampler, GLenum pname, const GLint * param);
typedef void (__stdcall *PFNGLSCALEDPROC)(GLdouble x, GLdouble y, GLdouble z);
typedef void (__stdcall *PFNGLSCALEFPROC)(GLfloat x, GLfloat y, GLfloat z);
typedef void (__stdcall *PFNGLSCISSORPROC)(GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (__stdcall *PFNGLSCISSORARRAYVPROC)(GLuint first, GLsizei count, const GLint * v);
typedef void (__stdcall *PFNGLSCISSORINDEXEDPROC)(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
typedef void (__stdcall *PFNGLSCISSORINDEXEDVPROC)(GLuint index, const GLint * v);
typedef void (__stdcall *PFNGLSECONDARYCOLOR3BPROC)(GLbyte red, GLbyte green, GLbyte blue);
typedef void (__stdcall *PFNGLSECONDARYCOLOR3BVPROC)(const GLbyte * v);
typedef void (__stdcall *PFNGLSECONDARYCOLOR3DPROC)(GLdouble red, GLdouble green, GLdouble blue);
typedef void (__stdcall *PFNGLSECONDARYCOLOR3DVPROC)(const GLdouble * v);
typedef void (__stdcall *PFNGLSECONDARYCOLOR3FPROC)(GLfloat red, GLfloat green, GLfloat blue);
typedef void (__stdcall *PFNGLSECONDARYCOLOR3FVPROC)(const GLfloat * v);
typedef void (__stdcall *PFNGLSECONDARYCOLOR3IPROC)(GLint red, GLint green, GLint blue);
typedef void (__stdcall *PFNGLSECONDARYCOLOR3IVPROC)(const GLint * v);
typedef void (__stdcall *PFNGLSECONDARYCOLOR3SPROC)(GLshort red, GLshort green, GLshort blue);
typedef void (__stdcall *PFNGLSECONDARYCOLOR3SVPROC)(const GLshort * v);
typedef void (__stdcall *PFNGLSECONDARYCOLOR3UBPROC)(GLubyte red, GLubyte green, GLubyte blue);
typedef void (__stdcall *PFNGLSECONDARYCOLOR3UBVPROC)(const GLubyte * v);
typedef void (__stdcall *PFNGLSECONDARYCOLOR3UIPROC)(GLuint red, GLuint green, GLuint blue);
typedef void (__stdcall *PFNGLSECONDARYCOLOR3UIVPROC)(const GLuint * v);
typedef void (__stdcall *PFNGLSECONDARYCOLOR3USPROC)(GLushort red, GLushort green, GLushort blue);
typedef void (__stdcall *PFNGLSECONDARYCOLOR3USVPROC)(const GLushort * v);
typedef void (__stdcall *PFNGLSECONDARYCOLORP3UIPROC)(GLenum type, GLuint color);
typedef void (__stdcall *PFNGLSECONDARYCOLORP3UIVPROC)(GLenum type, const GLuint * color);
typedef void (__stdcall *PFNGLSECONDARYCOLORPOINTERPROC)(GLint size, GLenum type, GLsizei stride, const void * pointer);
typedef void (__stdcall *PFNGLSELECTBUFFERPROC)(GLsizei size, GLuint * buffer);
typedef void (__stdcall *PFNGLSEPARABLEFILTER2DPROC)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * row, const void * column);
typedef void (__stdcall *PFNGLSHADEMODELPROC)(GLenum mode);
typedef void (__stdcall *PFNGLSHADERBINARYPROC)(GLsizei count, const GLuint * shaders, GLenum binaryformat, const void * binary, GLsizei length);
typedef void (__stdcall *PFNGLSHADERSOURCEPROC)(GLuint shader, GLsizei count, const GLchar *const* string, const GLint * length);
typedef void (__stdcall *PFNGLSHADERSOURCEARBPROC)(GLhandleARB shaderObj, GLsizei count, const GLcharARB ** string, const GLint * length);
typedef void (__stdcall *PFNGLSHADERSTORAGEBLOCKBINDINGPROC)(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding);
typedef void (__stdcall *PFNGLSPECIALIZESHADERPROC)(GLuint shader, const GLchar * pEntryPoint, GLuint numSpecializationConstants, const GLuint * pConstantIndex, const GLuint * pConstantValue);
typedef void (__stdcall *PFNGLSPECIALIZESHADERARBPROC)(GLuint shader, const GLchar * pEntryPoint, GLuint numSpecializationConstants, const GLuint * pConstantIndex, const GLuint * pConstantValue);
typedef void (__stdcall *PFNGLSTENCILFUNCPROC)(GLenum func, GLint ref, GLuint mask);
typedef void (__stdcall *PFNGLSTENCILFUNCSEPARATEPROC)(GLenum face, GLenum func, GLint ref, GLuint mask);
typedef void (__stdcall *PFNGLSTENCILMASKPROC)(GLuint mask);
typedef void (__stdcall *PFNGLSTENCILMASKSEPARATEPROC)(GLenum face, GLuint mask);
typedef void (__stdcall *PFNGLSTENCILOPPROC)(GLenum fail, GLenum zfail, GLenum zpass);
typedef void (__stdcall *PFNGLSTENCILOPSEPARATEPROC)(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
typedef void (__stdcall *PFNGLTEXBUFFERPROC)(GLenum target, GLenum internalformat, GLuint buffer);
typedef void (__stdcall *PFNGLTEXBUFFERARBPROC)(GLenum target, GLenum internalformat, GLuint buffer);
typedef void (__stdcall *PFNGLTEXBUFFERRANGEPROC)(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (__stdcall *PFNGLTEXCOORD1DPROC)(GLdouble s);
typedef void (__stdcall *PFNGLTEXCOORD1DVPROC)(const GLdouble * v);
typedef void (__stdcall *PFNGLTEXCOORD1FPROC)(GLfloat s);
typedef void (__stdcall *PFNGLTEXCOORD1FVPROC)(const GLfloat * v);
typedef void (__stdcall *PFNGLTEXCOORD1IPROC)(GLint s);
typedef void (__stdcall *PFNGLTEXCOORD1IVPROC)(const GLint * v);
typedef void (__stdcall *PFNGLTEXCOORD1SPROC)(GLshort s);
typedef void (__stdcall *PFNGLTEXCOORD1SVPROC)(const GLshort * v);
typedef void (__stdcall *PFNGLTEXCOORD2DPROC)(GLdouble s, GLdouble t);
typedef void (__stdcall *PFNGLTEXCOORD2DVPROC)(const GLdouble * v);
typedef void (__stdcall *PFNGLTEXCOORD2FPROC)(GLfloat s, GLfloat t);
typedef void (__stdcall *PFNGLTEXCOORD2FVPROC)(const GLfloat * v);
typedef void (__stdcall *PFNGLTEXCOORD2IPROC)(GLint s, GLint t);
typedef void (__stdcall *PFNGLTEXCOORD2IVPROC)(const GLint * v);
typedef void (__stdcall *PFNGLTEXCOORD2SPROC)(GLshort s, GLshort t);
typedef void (__stdcall *PFNGLTEXCOORD2SVPROC)(const GLshort * v);
typedef void (__stdcall *PFNGLTEXCOORD3DPROC)(GLdouble s, GLdouble t, GLdouble r);
typedef void (__stdcall *PFNGLTEXCOORD3DVPROC)(const GLdouble * v);
typedef void (__stdcall *PFNGLTEXCOORD3FPROC)(GLfloat s, GLfloat t, GLfloat r);
typedef void (__stdcall *PFNGLTEXCOORD3FVPROC)(const GLfloat * v);
typedef void (__stdcall *PFNGLTEXCOORD3IPROC)(GLint s, GLint t, GLint r);
typedef void (__stdcall *PFNGLTEXCOORD3IVPROC)(const GLint * v);
typedef void (__stdcall *PFNGLTEXCOORD3SPROC)(GLshort s, GLshort t, GLshort r);
typedef void (__stdcall *PFNGLTEXCOORD3SVPROC)(const GLshort * v);
typedef void (__stdcall *PFNGLTEXCOORD4DPROC)(GLdouble s, GLdouble t, GLdouble r, GLdouble q);
typedef void (__stdcall *PFNGLTEXCOORD4DVPROC)(const GLdouble * v);
typedef void (__stdcall *PFNGLTEXCOORD4FPROC)(GLfloat s, GLfloat t, GLfloat r, GLfloat q);
typedef void (__stdcall *PFNGLTEXCOORD4FVPROC)(const GLfloat * v);
typedef void (__stdcall *PFNGLTEXCOORD4IPROC)(GLint s, GLint t, GLint r, GLint q);
typedef void (__stdcall *PFNGLTEXCOORD4IVPROC)(const GLint * v);
typedef void (__stdcall *PFNGLTEXCOORD4SPROC)(GLshort s, GLshort t, GLshort r, GLshort q);
typedef void (__stdcall *PFNGLTEXCOORD4SVPROC)(const GLshort * v);
typedef void (__stdcall *PFNGLTEXCOORDP1UIPROC)(GLenum type, GLuint coords);
typedef void (__stdcall *PFNGLTEXCOORDP1UIVPROC)(GLenum type, const GLuint * coords);
typedef void (__stdcall *PFNGLTEXCOORDP2UIPROC)(GLenum type, GLuint coords);
typedef void (__stdcall *PFNGLTEXCOORDP2UIVPROC)(GLenum type, const GLuint * coords);
typedef void (__stdcall *PFNGLTEXCOORDP3UIPROC)(GLenum type, GLuint coords);
typedef void (__stdcall *PFNGLTEXCOORDP3UIVPROC)(GLenum type, const GLuint * coords);
typedef void (__stdcall *PFNGLTEXCOORDP4UIPROC)(GLenum type, GLuint coords);
typedef void (__stdcall *PFNGLTEXCOORDP4UIVPROC)(GLenum type, const GLuint * coords);
typedef void (__stdcall *PFNGLTEXCOORDPOINTERPROC)(GLint size, GLenum type, GLsizei stride, const void * pointer);
typedef void (__stdcall *PFNGLTEXENVFPROC)(GLenum target, GLenum pname, GLfloat param);
typedef void (__stdcall *PFNGLTEXENVFVPROC)(GLenum target, GLenum pname, const GLfloat * params);
typedef void (__stdcall *PFNGLTEXENVIPROC)(GLenum target, GLenum pname, GLint param);
typedef void (__stdcall *PFNGLTEXENVIVPROC)(GLenum target, GLenum pname, const GLint * params);
typedef void (__stdcall *PFNGLTEXGENDPROC)(GLenum coord, GLenum pname, GLdouble param);
typedef void (__stdcall *PFNGLTEXGENDVPROC)(GLenum coord, GLenum pname, const GLdouble * params);
typedef void (__stdcall *PFNGLTEXGENFPROC)(GLenum coord, GLenum pname, GLfloat param);
typedef void (__stdcall *PFNGLTEXGENFVPROC)(GLenum coord, GLenum pname, const GLfloat * params);
typedef void (__stdcall *PFNGLTEXGENIPROC)(GLenum coord, GLenum pname, GLint param);
typedef void (__stdcall *PFNGLTEXGENIVPROC)(GLenum coord, GLenum pname, const GLint * params);
typedef void (__stdcall *PFNGLTEXIMAGE1DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels);
typedef void (__stdcall *PFNGLTEXIMAGE2DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels);
typedef void (__stdcall *PFNGLTEXIMAGE2DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
typedef void (__stdcall *PFNGLTEXIMAGE3DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels);
typedef void (__stdcall *PFNGLTEXIMAGE3DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
typedef void (__stdcall *PFNGLTEXPAGECOMMITMENTARBPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit);
typedef void (__stdcall *PFNGLTEXPARAMETERIIVPROC)(GLenum target, GLenum pname, const GLint * params);
typedef void (__stdcall *PFNGLTEXPARAMETERIUIVPROC)(GLenum target, GLenum pname, const GLuint * params);
typedef void (__stdcall *PFNGLTEXPARAMETERFPROC)(GLenum target, GLenum pname, GLfloat param);
typedef void (__stdcall *PFNGLTEXPARAMETERFVPROC)(GLenum target, GLenum pname, const GLfloat * params);
typedef void (__stdcall *PFNGLTEXPARAMETERIPROC)(GLenum target, GLenum pname, GLint param);
typedef void (__stdcall *PFNGLTEXPARAMETERIVPROC)(GLenum target, GLenum pname, const GLint * params);
typedef void (__stdcall *PFNGLTEXSTORAGE1DPROC)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
typedef void (__stdcall *PFNGLTEXSTORAGE2DPROC)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (__stdcall *PFNGLTEXSTORAGE2DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
typedef void (__stdcall *PFNGLTEXSTORAGE3DPROC)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
typedef void (__stdcall *PFNGLTEXSTORAGE3DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
typedef void (__stdcall *PFNGLTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels);
typedef void (__stdcall *PFNGLTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels);
typedef void (__stdcall *PFNGLTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels);
typedef void (__stdcall *PFNGLTEXTUREBARRIERPROC)(void);
typedef void (__stdcall *PFNGLTEXTUREBUFFERPROC)(GLuint texture, GLenum internalformat, GLuint buffer);
typedef void (__stdcall *PFNGLTEXTUREBUFFERRANGEPROC)(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (__stdcall *PFNGLTEXTUREPARAMETERIIVPROC)(GLuint texture, GLenum pname, const GLint * params);
typedef void (__stdcall *PFNGLTEXTUREPARAMETERIUIVPROC)(GLuint texture, GLenum pname, const GLuint * params);
typedef void (__stdcall *PFNGLTEXTUREPARAMETERFPROC)(GLuint texture, GLenum pname, GLfloat param);
typedef void (__stdcall *PFNGLTEXTUREPARAMETERFVPROC)(GLuint texture, GLenum pname, const GLfloat * param);
typedef void (__stdcall *PFNGLTEXTUREPARAMETERIPROC)(GLuint texture, GLenum pname, GLint param);
typedef void (__stdcall *PFNGLTEXTUREPARAMETERIVPROC)(GLuint texture, GLenum pname, const GLint * param);
typedef void (__stdcall *PFNGLTEXTURESTORAGE1DPROC)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width);
typedef void (__stdcall *PFNGLTEXTURESTORAGE2DPROC)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (__stdcall *PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC)(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
typedef void (__stdcall *PFNGLTEXTURESTORAGE3DPROC)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
typedef void (__stdcall *PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC)(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
typedef void (__stdcall *PFNGLTEXTURESUBIMAGE1DPROC)(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels);
typedef void (__stdcall *PFNGLTEXTURESUBIMAGE2DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels);
typedef void (__stdcall *PFNGLTEXTURESUBIMAGE3DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels);
typedef void (__stdcall *PFNGLTEXTUREVIEWPROC)(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);
typedef void (__stdcall *PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC)(GLuint xfb, GLuint index, GLuint buffer);
typedef void (__stdcall *PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC)(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (__stdcall *PFNGLTRANSFORMFEEDBACKVARYINGSPROC)(GLuint program, GLsizei count, const GLchar *const* varyings, GLenum bufferMode);
typedef void (__stdcall *PFNGLTRANSLATEDPROC)(GLdouble x, GLdouble y, GLdouble z);
typedef void (__stdcall *PFNGLTRANSLATEFPROC)(GLfloat x, GLfloat y, GLfloat z);
typedef void (__stdcall *PFNGLUNIFORM1DPROC)(GLint location, GLdouble x);
typedef void (__stdcall *PFNGLUNIFORM1DVPROC)(GLint location, GLsizei count, const GLdouble * value);
typedef void (__stdcall *PFNGLUNIFORM1FPROC)(GLint location, GLfloat v0);
typedef void (__stdcall *PFNGLUNIFORM1FARBPROC)(GLint location, GLfloat v0);
typedef void (__stdcall *PFNGLUNIFORM1FVPROC)(GLint location, GLsizei count, const GLfloat * value);
typedef void (__stdcall *PFNGLUNIFORM1FVARBPROC)(GLint location, GLsizei count, const GLfloat * value);
typedef void (__stdcall *PFNGLUNIFORM1IPROC)(GLint location, GLint v0);
typedef void (__stdcall *PFNGLUNIFORM1I64ARBPROC)(GLint location, GLint64 x);
typedef void (__stdcall *PFNGLUNIFORM1I64VARBPROC)(GLint location, GLsizei count, const GLint64 * value);
typedef void (__stdcall *PFNGLUNIFORM1IARBPROC)(GLint location, GLint v0);
typedef void (__stdcall *PFNGLUNIFORM1IVPROC)(GLint location, GLsizei count, const GLint * value);
typedef void (__stdcall *PFNGLUNIFORM1IVARBPROC)(GLint location, GLsizei count, const GLint * value);
typedef void (__stdcall *PFNGLUNIFORM1UIPROC)(GLint location, GLuint v0);
typedef void (__stdcall *PFNGLUNIFORM1UI64ARBPROC)(GLint location, GLuint64 x);
typedef void (__stdcall *PFNGLUNIFORM1UI64VARBPROC)(GLint location, GLsizei count, const GLuint64 * value);
typedef void (__stdcall *PFNGLUNIFORM1UIVPROC)(GLint location, GLsizei count, const GLuint * value);
typedef void (__stdcall *PFNGLUNIFORM2DPROC)(GLint location, GLdouble x, GLdouble y);
typedef void (__stdcall *PFNGLUNIFORM2DVPROC)(GLint location, GLsizei count, const GLdouble * value);
typedef void (__stdcall *PFNGLUNIFORM2FPROC)(GLint location, GLfloat v0, GLfloat v1);
typedef void (__stdcall *PFNGLUNIFORM2FARBPROC)(GLint location, GLfloat v0, GLfloat v1);
typedef void (__stdcall *PFNGLUNIFORM2FVPROC)(GLint location, GLsizei count, const GLfloat * value);
typedef void (__stdcall *PFNGLUNIFORM2FVARBPROC)(GLint location, GLsizei count, const GLfloat * value);
typedef void (__stdcall *PFNGLUNIFORM2IPROC)(GLint location, GLint v0, GLint v1);
typedef void (__stdcall *PFNGLUNIFORM2I64ARBPROC)(GLint location, GLint64 x, GLint64 y);
typedef void (__stdcall *PFNGLUNIFORM2I64VARBPROC)(GLint location, GLsizei count, const GLint64 * value);
typedef void (__stdcall *PFNGLUNIFORM2IARBPROC)(GLint location, GLint v0, GLint v1);
typedef void (__stdcall *PFNGLUNIFORM2IVPROC)(GLint location, GLsizei count, const GLint * value);
typedef void (__stdcall *PFNGLUNIFORM2IVARBPROC)(GLint location, GLsizei count, const GLint * value);
typedef void (__stdcall *PFNGLUNIFORM2UIPROC)(GLint location, GLuint v0, GLuint v1);
typedef void (__stdcall *PFNGLUNIFORM2UI64ARBPROC)(GLint location, GLuint64 x, GLuint64 y);
typedef void (__stdcall *PFNGLUNIFORM2UI64VARBPROC)(GLint location, GLsizei count, const GLuint64 * value);
typedef void (__stdcall *PFNGLUNIFORM2UIVPROC)(GLint location, GLsizei count, const GLuint * value);
typedef void (__stdcall *PFNGLUNIFORM3DPROC)(GLint location, GLdouble x, GLdouble y, GLdouble z);
typedef void (__stdcall *PFNGLUNIFORM3DVPROC)(GLint location, GLsizei count, const GLdouble * value);
typedef void (__stdcall *PFNGLUNIFORM3FPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void (__stdcall *PFNGLUNIFORM3FARBPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void (__stdcall *PFNGLUNIFORM3FVPROC)(GLint location, GLsizei count, const GLfloat * value);
typedef void (__stdcall *PFNGLUNIFORM3FVARBPROC)(GLint location, GLsizei count, const GLfloat * value);
typedef void (__stdcall *PFNGLUNIFORM3IPROC)(GLint location, GLint v0, GLint v1, GLint v2);
typedef void (__stdcall *PFNGLUNIFORM3I64ARBPROC)(GLint location, GLint64 x, GLint64 y, GLint64 z);
typedef void (__stdcall *PFNGLUNIFORM3I64VARBPROC)(GLint location, GLsizei count, const GLint64 * value);
typedef void (__stdcall *PFNGLUNIFORM3IARBPROC)(GLint location, GLint v0, GLint v1, GLint v2);
typedef void (__stdcall *PFNGLUNIFORM3IVPROC)(GLint location, GLsizei count, const GLint * value);
typedef void (__stdcall *PFNGLUNIFORM3IVARBPROC)(GLint location, GLsizei count, const GLint * value);
typedef void (__stdcall *PFNGLUNIFORM3UIPROC)(GLint location, GLuint v0, GLuint v1, GLuint v2);
typedef void (__stdcall *PFNGLUNIFORM3UI64ARBPROC)(GLint location, GLuint64 x, GLuint64 y, GLuint64 z);
typedef void (__stdcall *PFNGLUNIFORM3UI64VARBPROC)(GLint location, GLsizei count, const GLuint64 * value);
typedef void (__stdcall *PFNGLUNIFORM3UIVPROC)(GLint location, GLsizei count, const GLuint * value);
typedef void (__stdcall *PFNGLUNIFORM4DPROC)(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (__stdcall *PFNGLUNIFORM4DVPROC)(GLint location, GLsizei count, const GLdouble * value);
typedef void (__stdcall *PFNGLUNIFORM4FPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void (__stdcall *PFNGLUNIFORM4FARBPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void (__stdcall *PFNGLUNIFORM4FVPROC)(GLint location, GLsizei count, const GLfloat * value);
typedef void (__stdcall *PFNGLUNIFORM4FVARBPROC)(GLint location, GLsizei count, const GLfloat * value);
typedef void (__stdcall *PFNGLUNIFORM4IPROC)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void (__stdcall *PFNGLUNIFORM4I64ARBPROC)(GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w);
typedef void (__stdcall *PFNGLUNIFORM4I64VARBPROC)(GLint location, GLsizei count, const GLint64 * value);
typedef void (__stdcall *PFNGLUNIFORM4IARBPROC)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void (__stdcall *PFNGLUNIFORM4IVPROC)(GLint location, GLsizei count, const GLint * value);
typedef void (__stdcall *PFNGLUNIFORM4IVARBPROC)(GLint location, GLsizei count, const GLint * value);
typedef void (__stdcall *PFNGLUNIFORM4UIPROC)(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
typedef void (__stdcall *PFNGLUNIFORM4UI64ARBPROC)(GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w);
typedef void (__stdcall *PFNGLUNIFORM4UI64VARBPROC)(GLint location, GLsizei count, const GLuint64 * value);
typedef void (__stdcall *PFNGLUNIFORM4UIVPROC)(GLint location, GLsizei count, const GLuint * value);
typedef void (__stdcall *PFNGLUNIFORMBLOCKBINDINGPROC)(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
typedef void (__stdcall *PFNGLUNIFORMHANDLEUI64ARBPROC)(GLint location, GLuint64 value);
typedef void (__stdcall *PFNGLUNIFORMHANDLEUI64VARBPROC)(GLint location, GLsizei count, const GLuint64 * value);
typedef void (__stdcall *PFNGLUNIFORMMATRIX2DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (__stdcall *PFNGLUNIFORMMATRIX2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (__stdcall *PFNGLUNIFORMMATRIX2FVARBPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (__stdcall *PFNGLUNIFORMMATRIX2X3DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (__stdcall *PFNGLUNIFORMMATRIX2X3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (__stdcall *PFNGLUNIFORMMATRIX2X4DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (__stdcall *PFNGLUNIFORMMATRIX2X4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (__stdcall *PFNGLUNIFORMMATRIX3DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (__stdcall *PFNGLUNIFORMMATRIX3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (__stdcall *PFNGLUNIFORMMATRIX3FVARBPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (__stdcall *PFNGLUNIFORMMATRIX3X2DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (__stdcall *PFNGLUNIFORMMATRIX3X2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (__stdcall *PFNGLUNIFORMMATRIX3X4DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (__stdcall *PFNGLUNIFORMMATRIX3X4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (__stdcall *PFNGLUNIFORMMATRIX4DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (__stdcall *PFNGLUNIFORMMATRIX4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (__stdcall *PFNGLUNIFORMMATRIX4FVARBPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (__stdcall *PFNGLUNIFORMMATRIX4X2DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (__stdcall *PFNGLUNIFORMMATRIX4X2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (__stdcall *PFNGLUNIFORMMATRIX4X3DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (__stdcall *PFNGLUNIFORMMATRIX4X3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (__stdcall *PFNGLUNIFORMSUBROUTINESUIVPROC)(GLenum shadertype, GLsizei count, const GLuint * indices);
typedef GLboolean (__stdcall *PFNGLUNMAPBUFFERPROC)(GLenum target);
typedef GLboolean (__stdcall *PFNGLUNMAPBUFFERARBPROC)(GLenum target);
typedef GLboolean (__stdcall *PFNGLUNMAPNAMEDBUFFERPROC)(GLuint buffer);
typedef void (__stdcall *PFNGLUSEPROGRAMPROC)(GLuint program);
typedef void (__stdcall *PFNGLUSEPROGRAMOBJECTARBPROC)(GLhandleARB programObj);
typedef void (__stdcall *PFNGLUSEPROGRAMSTAGESPROC)(GLuint pipeline, GLbitfield stages, GLuint program);
typedef void (__stdcall *PFNGLVALIDATEPROGRAMPROC)(GLuint program);
typedef void (__stdcall *PFNGLVALIDATEPROGRAMARBPROC)(GLhandleARB programObj);
typedef void (__stdcall *PFNGLVALIDATEPROGRAMPIPELINEPROC)(GLuint pipeline);
typedef void (__stdcall *PFNGLVERTEX2DPROC)(GLdouble x, GLdouble y);
typedef void (__stdcall *PFNGLVERTEX2DVPROC)(const GLdouble * v);
typedef void (__stdcall *PFNGLVERTEX2FPROC)(GLfloat x, GLfloat y);
typedef void (__stdcall *PFNGLVERTEX2FVPROC)(const GLfloat * v);
typedef void (__stdcall *PFNGLVERTEX2IPROC)(GLint x, GLint y);
typedef void (__stdcall *PFNGLVERTEX2IVPROC)(const GLint * v);
typedef void (__stdcall *PFNGLVERTEX2SPROC)(GLshort x, GLshort y);
typedef void (__stdcall *PFNGLVERTEX2SVPROC)(const GLshort * v);
typedef void (__stdcall *PFNGLVERTEX3DPROC)(GLdouble x, GLdouble y, GLdouble z);
typedef void (__stdcall *PFNGLVERTEX3DVPROC)(const GLdouble * v);
typedef void (__stdcall *PFNGLVERTEX3FPROC)(GLfloat x, GLfloat y, GLfloat z);
typedef void (__stdcall *PFNGLVERTEX3FVPROC)(const GLfloat * v);
typedef void (__stdcall *PFNGLVERTEX3IPROC)(GLint x, GLint y, GLint z);
typedef void (__stdcall *PFNGLVERTEX3IVPROC)(const GLint * v);
typedef void (__stdcall *PFNGLVERTEX3SPROC)(GLshort x, GLshort y, GLshort z);
typedef void (__stdcall *PFNGLVERTEX3SVPROC)(const GLshort * v);
typedef void (__stdcall *PFNGLVERTEX4DPROC)(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (__stdcall *PFNGLVERTEX4DVPROC)(const GLdouble * v);
typedef void (__stdcall *PFNGLVERTEX4FPROC)(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (__stdcall *PFNGLVERTEX4FVPROC)(const GLfloat * v);
typedef void (__stdcall *PFNGLVERTEX4IPROC)(GLint x, GLint y, GLint z, GLint w);
typedef void (__stdcall *PFNGLVERTEX4IVPROC)(const GLint * v);
typedef void (__stdcall *PFNGLVERTEX4SPROC)(GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (__stdcall *PFNGLVERTEX4SVPROC)(const GLshort * v);
typedef void (__stdcall *PFNGLVERTEXARRAYATTRIBBINDINGPROC)(GLuint vaobj, GLuint attribindex, GLuint bindingindex);
typedef void (__stdcall *PFNGLVERTEXARRAYATTRIBFORMATPROC)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
typedef void (__stdcall *PFNGLVERTEXARRAYATTRIBIFORMATPROC)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (__stdcall *PFNGLVERTEXARRAYATTRIBLFORMATPROC)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (__stdcall *PFNGLVERTEXARRAYBINDINGDIVISORPROC)(GLuint vaobj, GLuint bindingindex, GLuint divisor);
typedef void (__stdcall *PFNGLVERTEXARRAYELEMENTBUFFERPROC)(GLuint vaobj, GLuint buffer);
typedef void (__stdcall *PFNGLVERTEXARRAYVERTEXBUFFERPROC)(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
typedef void (__stdcall *PFNGLVERTEXARRAYVERTEXBUFFERSPROC)(GLuint vaobj, GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizei * strides);
typedef void (__stdcall *PFNGLVERTEXATTRIB1DPROC)(GLuint index, GLdouble x);
typedef void (__stdcall *PFNGLVERTEXATTRIB1DARBPROC)(GLuint index, GLdouble x);
typedef void (__stdcall *PFNGLVERTEXATTRIB1DVPROC)(GLuint index, const GLdouble * v);
typedef void (__stdcall *PFNGLVERTEXATTRIB1DVARBPROC)(GLuint index, const GLdouble * v);
typedef void (__stdcall *PFNGLVERTEXATTRIB1FPROC)(GLuint index, GLfloat x);
typedef void (__stdcall *PFNGLVERTEXATTRIB1FARBPROC)(GLuint index, GLfloat x);
typedef void (__stdcall *PFNGLVERTEXATTRIB1FVPROC)(GLuint index, const GLfloat * v);
typedef void (__stdcall *PFNGLVERTEXATTRIB1FVARBPROC)(GLuint index, const GLfloat * v);
typedef void (__stdcall *PFNGLVERTEXATTRIB1SPROC)(GLuint index, GLshort x);
typedef void (__stdcall *PFNGLVERTEXATTRIB1SARBPROC)(GLuint index, GLshort x);
typedef void (__stdcall *PFNGLVERTEXATTRIB1SVPROC)(GLuint index, const GLshort * v);
typedef void (__stdcall *PFNGLVERTEXATTRIB1SVARBPROC)(GLuint index, const GLshort * v);
typedef void (__stdcall *PFNGLVERTEXATTRIB2DPROC)(GLuint index, GLdouble x, GLdouble y);
typedef void (__stdcall *PFNGLVERTEXATTRIB2DARBPROC)(GLuint index, GLdouble x, GLdouble y);
typedef void (__stdcall *PFNGLVERTEXATTRIB2DVPROC)(GLuint index, const GLdouble * v);
typedef void (__stdcall *PFNGLVERTEXATTRIB2DVARBPROC)(GLuint index, const GLdouble * v);
typedef void (__stdcall *PFNGLVERTEXATTRIB2FPROC)(GLuint index, GLfloat x, GLfloat y);
typedef void (__stdcall *PFNGLVERTEXATTRIB2FARBPROC)(GLuint index, GLfloat x, GLfloat y);
typedef void (__stdcall *PFNGLVERTEXATTRIB2FVPROC)(GLuint index, const GLfloat * v);
typedef void (__stdcall *PFNGLVERTEXATTRIB2FVARBPROC)(GLuint index, const GLfloat * v);
typedef void (__stdcall *PFNGLVERTEXATTRIB2SPROC)(GLuint index, GLshort x, GLshort y);
typedef void (__stdcall *PFNGLVERTEXATTRIB2SARBPROC)(GLuint index, GLshort x, GLshort y);
typedef void (__stdcall *PFNGLVERTEXATTRIB2SVPROC)(GLuint index, const GLshort * v);
typedef void (__stdcall *PFNGLVERTEXATTRIB2SVARBPROC)(GLuint index, const GLshort * v);
typedef void (__stdcall *PFNGLVERTEXATTRIB3DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void (__stdcall *PFNGLVERTEXATTRIB3DARBPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void (__stdcall *PFNGLVERTEXATTRIB3DVPROC)(GLuint index, const GLdouble * v);
typedef void (__stdcall *PFNGLVERTEXATTRIB3DVARBPROC)(GLuint index, const GLdouble * v);
typedef void (__stdcall *PFNGLVERTEXATTRIB3FPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z);
typedef void (__stdcall *PFNGLVERTEXATTRIB3FARBPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z);
typedef void (__stdcall *PFNGLVERTEXATTRIB3FVPROC)(GLuint index, const GLfloat * v);
typedef void (__stdcall *PFNGLVERTEXATTRIB3FVARBPROC)(GLuint index, const GLfloat * v);
typedef void (__stdcall *PFNGLVERTEXATTRIB3SPROC)(GLuint index, GLshort x, GLshort y, GLshort z);
typedef void (__stdcall *PFNGLVERTEXATTRIB3SARBPROC)(GLuint index, GLshort x, GLshort y, GLshort z);
typedef void (__stdcall *PFNGLVERTEXATTRIB3SVPROC)(GLuint index, const GLshort * v);
typedef void (__stdcall *PFNGLVERTEXATTRIB3SVARBPROC)(GLuint index, const GLshort * v);
typedef void (__stdcall *PFNGLVERTEXATTRIB4NBVPROC)(GLuint index, const GLbyte * v);
typedef void (__stdcall *PFNGLVERTEXATTRIB4NBVARBPROC)(GLuint index, const GLbyte * v);
typedef void (__stdcall *PFNGLVERTEXATTRIB4NIVPROC)(GLuint index, const GLint * v);
typedef void (__stdcall *PFNGLVERTEXATTRIB4NIVARBPROC)(GLuint index, const GLint * v);
typedef void (__stdcall *PFNGLVERTEXATTRIB4NSVPROC)(GLuint index, const GLshort * v);
typedef void (__stdcall *PFNGLVERTEXATTRIB4NSVARBPROC)(GLuint index, const GLshort * v);
typedef void (__stdcall *PFNGLVERTEXATTRIB4NUBPROC)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
typedef void (__stdcall *PFNGLVERTEXATTRIB4NUBARBPROC)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
typedef void (__stdcall *PFNGLVERTEXATTRIB4NUBVPROC)(GLuint index, const GLubyte * v);
typedef void (__stdcall *PFNGLVERTEXATTRIB4NUBVARBPROC)(GLuint index, const GLubyte * v);
typedef void (__stdcall *PFNGLVERTEXATTRIB4NUIVPROC)(GLuint index, const GLuint * v);
typedef void (__stdcall *PFNGLVERTEXATTRIB4NUIVARBPROC)(GLuint index, const GLuint * v);
typedef void (__stdcall *PFNGLVERTEXATTRIB4NUSVPROC)(GLuint index, const GLushort * v);
typedef void (__stdcall *PFNGLVERTEXATTRIB4NUSVARBPROC)(GLuint index, const GLushort * v);
typedef void (__stdcall *PFNGLVERTEXATTRIB4BVPROC)(GLuint index, const GLbyte * v);
typedef void (__stdcall *PFNGLVERTEXATTRIB4BVARBPROC)(GLuint index, const GLbyte * v);
typedef void (__stdcall *PFNGLVERTEXATTRIB4DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (__stdcall *PFNGLVERTEXATTRIB4DARBPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (__stdcall *PFNGLVERTEXATTRIB4DVPROC)(GLuint index, const GLdouble * v);
typedef void (__stdcall *PFNGLVERTEXATTRIB4DVARBPROC)(GLuint index, const GLdouble * v);
typedef void (__stdcall *PFNGLVERTEXATTRIB4FPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (__stdcall *PFNGLVERTEXATTRIB4FARBPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (__stdcall *PFNGLVERTEXATTRIB4FVPROC)(GLuint index, const GLfloat * v);
typedef void (__stdcall *PFNGLVERTEXATTRIB4FVARBPROC)(GLuint index, const GLfloat * v);
typedef void (__stdcall *PFNGLVERTEXATTRIB4IVPROC)(GLuint index, const GLint * v);
typedef void (__stdcall *PFNGLVERTEXATTRIB4IVARBPROC)(GLuint index, const GLint * v);
typedef void (__stdcall *PFNGLVERTEXATTRIB4SPROC)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (__stdcall *PFNGLVERTEXATTRIB4SARBPROC)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (__stdcall *PFNGLVERTEXATTRIB4SVPROC)(GLuint index, const GLshort * v);
typedef void (__stdcall *PFNGLVERTEXATTRIB4SVARBPROC)(GLuint index, const GLshort * v);
typedef void (__stdcall *PFNGLVERTEXATTRIB4UBVPROC)(GLuint index, const GLubyte * v);
typedef void (__stdcall *PFNGLVERTEXATTRIB4UBVARBPROC)(GLuint index, const GLubyte * v);
typedef void (__stdcall *PFNGLVERTEXATTRIB4UIVPROC)(GLuint index, const GLuint * v);
typedef void (__stdcall *PFNGLVERTEXATTRIB4UIVARBPROC)(GLuint index, const GLuint * v);
typedef void (__stdcall *PFNGLVERTEXATTRIB4USVPROC)(GLuint index, const GLushort * v);
typedef void (__stdcall *PFNGLVERTEXATTRIB4USVARBPROC)(GLuint index, const GLushort * v);
typedef void (__stdcall *PFNGLVERTEXATTRIBBINDINGPROC)(GLuint attribindex, GLuint bindingindex);
typedef void (__stdcall *PFNGLVERTEXATTRIBDIVISORPROC)(GLuint index, GLuint divisor);
typedef void (__stdcall *PFNGLVERTEXATTRIBDIVISORARBPROC)(GLuint index, GLuint divisor);
typedef void (__stdcall *PFNGLVERTEXATTRIBFORMATPROC)(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
typedef void (__stdcall *PFNGLVERTEXATTRIBI1IPROC)(GLuint index, GLint x);
typedef void (__stdcall *PFNGLVERTEXATTRIBI1IVPROC)(GLuint index, const GLint * v);
typedef void (__stdcall *PFNGLVERTEXATTRIBI1UIPROC)(GLuint index, GLuint x);
typedef void (__stdcall *PFNGLVERTEXATTRIBI1UIVPROC)(GLuint index, const GLuint * v);
typedef void (__stdcall *PFNGLVERTEXATTRIBI2IPROC)(GLuint index, GLint x, GLint y);
typedef void (__stdcall *PFNGLVERTEXATTRIBI2IVPROC)(GLuint index, const GLint * v);
typedef void (__stdcall *PFNGLVERTEXATTRIBI2UIPROC)(GLuint index, GLuint x, GLuint y);
typedef void (__stdcall *PFNGLVERTEXATTRIBI2UIVPROC)(GLuint index, const GLuint * v);
typedef void (__stdcall *PFNGLVERTEXATTRIBI3IPROC)(GLuint index, GLint x, GLint y, GLint z);
typedef void (__stdcall *PFNGLVERTEXATTRIBI3IVPROC)(GLuint index, const GLint * v);
typedef void (__stdcall *PFNGLVERTEXATTRIBI3UIPROC)(GLuint index, GLuint x, GLuint y, GLuint z);
typedef void (__stdcall *PFNGLVERTEXATTRIBI3UIVPROC)(GLuint index, const GLuint * v);
typedef void (__stdcall *PFNGLVERTEXATTRIBI4BVPROC)(GLuint index, const GLbyte * v);
typedef void (__stdcall *PFNGLVERTEXATTRIBI4IPROC)(GLuint index, GLint x, GLint y, GLint z, GLint w);
typedef void (__stdcall *PFNGLVERTEXATTRIBI4IVPROC)(GLuint index, const GLint * v);
typedef void (__stdcall *PFNGLVERTEXATTRIBI4SVPROC)(GLuint index, const GLshort * v);
typedef void (__stdcall *PFNGLVERTEXATTRIBI4UBVPROC)(GLuint index, const GLubyte * v);
typedef void (__stdcall *PFNGLVERTEXATTRIBI4UIPROC)(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
typedef void (__stdcall *PFNGLVERTEXATTRIBI4UIVPROC)(GLuint index, const GLuint * v);
typedef void (__stdcall *PFNGLVERTEXATTRIBI4USVPROC)(GLuint index, const GLushort * v);
typedef void (__stdcall *PFNGLVERTEXATTRIBIFORMATPROC)(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (__stdcall *PFNGLVERTEXATTRIBIPOINTERPROC)(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer);
typedef void (__stdcall *PFNGLVERTEXATTRIBL1DPROC)(GLuint index, GLdouble x);
typedef void (__stdcall *PFNGLVERTEXATTRIBL1DVPROC)(GLuint index, const GLdouble * v);
typedef void (__stdcall *PFNGLVERTEXATTRIBL1UI64ARBPROC)(GLuint index, GLuint64EXT x);
typedef void (__stdcall *PFNGLVERTEXATTRIBL1UI64VARBPROC)(GLuint index, const GLuint64EXT * v);
typedef void (__stdcall *PFNGLVERTEXATTRIBL2DPROC)(GLuint index, GLdouble x, GLdouble y);
typedef void (__stdcall *PFNGLVERTEXATTRIBL2DVPROC)(GLuint index, const GLdouble * v);
typedef void (__stdcall *PFNGLVERTEXATTRIBL3DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void (__stdcall *PFNGLVERTEXATTRIBL3DVPROC)(GLuint index, const GLdouble * v);
typedef void (__stdcall *PFNGLVERTEXATTRIBL4DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (__stdcall *PFNGLVERTEXATTRIBL4DVPROC)(GLuint index, const GLdouble * v);
typedef void (__stdcall *PFNGLVERTEXATTRIBLFORMATPROC)(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (__stdcall *PFNGLVERTEXATTRIBLPOINTERPROC)(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer);
typedef void (__stdcall *PFNGLVERTEXATTRIBP1UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void (__stdcall *PFNGLVERTEXATTRIBP1UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint * value);
typedef void (__stdcall *PFNGLVERTEXATTRIBP2UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void (__stdcall *PFNGLVERTEXATTRIBP2UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint * value);
typedef void (__stdcall *PFNGLVERTEXATTRIBP3UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void (__stdcall *PFNGLVERTEXATTRIBP3UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint * value);
typedef void (__stdcall *PFNGLVERTEXATTRIBP4UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void (__stdcall *PFNGLVERTEXATTRIBP4UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint * value);
typedef void (__stdcall *PFNGLVERTEXATTRIBPOINTERPROC)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * pointer);
typedef void (__stdcall *PFNGLVERTEXATTRIBPOINTERARBPROC)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * pointer);
typedef void (__stdcall *PFNGLVERTEXBINDINGDIVISORPROC)(GLuint bindingindex, GLuint divisor);
typedef void (__stdcall *PFNGLVERTEXBLENDARBPROC)(GLint count);
typedef void (__stdcall *PFNGLVERTEXP2UIPROC)(GLenum type, GLuint value);
typedef void (__stdcall *PFNGLVERTEXP2UIVPROC)(GLenum type, const GLuint * value);
typedef void (__stdcall *PFNGLVERTEXP3UIPROC)(GLenum type, GLuint value);
typedef void (__stdcall *PFNGLVERTEXP3UIVPROC)(GLenum type, const GLuint * value);
typedef void (__stdcall *PFNGLVERTEXP4UIPROC)(GLenum type, GLuint value);
typedef void (__stdcall *PFNGLVERTEXP4UIVPROC)(GLenum type, const GLuint * value);
typedef void (__stdcall *PFNGLVERTEXPOINTERPROC)(GLint size, GLenum type, GLsizei stride, const void * pointer);
typedef void (__stdcall *PFNGLVIEWPORTPROC)(GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (__stdcall *PFNGLVIEWPORTARRAYVPROC)(GLuint first, GLsizei count, const GLfloat * v);
typedef void (__stdcall *PFNGLVIEWPORTINDEXEDFPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
typedef void (__stdcall *PFNGLVIEWPORTINDEXEDFVPROC)(GLuint index, const GLfloat * v);
typedef void (__stdcall *PFNGLWAITSYNCPROC)(GLsync sync, GLbitfield flags, GLuint64 timeout);
typedef void (__stdcall *PFNGLWEIGHTPOINTERARBPROC)(GLint size, GLenum type, GLsizei stride, const void * pointer);
typedef void (__stdcall *PFNGLWEIGHTBVARBPROC)(GLint size, const GLbyte * weights);
typedef void (__stdcall *PFNGLWEIGHTDVARBPROC)(GLint size, const GLdouble * weights);
typedef void (__stdcall *PFNGLWEIGHTFVARBPROC)(GLint size, const GLfloat * weights);
typedef void (__stdcall *PFNGLWEIGHTIVARBPROC)(GLint size, const GLint * weights);
typedef void (__stdcall *PFNGLWEIGHTSVARBPROC)(GLint size, const GLshort * weights);
typedef void (__stdcall *PFNGLWEIGHTUBVARBPROC)(GLint size, const GLubyte * weights);
typedef void (__stdcall *PFNGLWEIGHTUIVARBPROC)(GLint size, const GLuint * weights);
typedef void (__stdcall *PFNGLWEIGHTUSVARBPROC)(GLint size, const GLushort * weights);
typedef void (__stdcall *PFNGLWINDOWPOS2DPROC)(GLdouble x, GLdouble y);
typedef void (__stdcall *PFNGLWINDOWPOS2DARBPROC)(GLdouble x, GLdouble y);
typedef void (__stdcall *PFNGLWINDOWPOS2DVPROC)(const GLdouble * v);
typedef void (__stdcall *PFNGLWINDOWPOS2DVARBPROC)(const GLdouble * v);
typedef void (__stdcall *PFNGLWINDOWPOS2FPROC)(GLfloat x, GLfloat y);
typedef void (__stdcall *PFNGLWINDOWPOS2FARBPROC)(GLfloat x, GLfloat y);
typedef void (__stdcall *PFNGLWINDOWPOS2FVPROC)(const GLfloat * v);
typedef void (__stdcall *PFNGLWINDOWPOS2FVARBPROC)(const GLfloat * v);
typedef void (__stdcall *PFNGLWINDOWPOS2IPROC)(GLint x, GLint y);
typedef void (__stdcall *PFNGLWINDOWPOS2IARBPROC)(GLint x, GLint y);
typedef void (__stdcall *PFNGLWINDOWPOS2IVPROC)(const GLint * v);
typedef void (__stdcall *PFNGLWINDOWPOS2IVARBPROC)(const GLint * v);
typedef void (__stdcall *PFNGLWINDOWPOS2SPROC)(GLshort x, GLshort y);
typedef void (__stdcall *PFNGLWINDOWPOS2SARBPROC)(GLshort x, GLshort y);
typedef void (__stdcall *PFNGLWINDOWPOS2SVPROC)(const GLshort * v);
typedef void (__stdcall *PFNGLWINDOWPOS2SVARBPROC)(const GLshort * v);
typedef void (__stdcall *PFNGLWINDOWPOS3DPROC)(GLdouble x, GLdouble y, GLdouble z);
typedef void (__stdcall *PFNGLWINDOWPOS3DARBPROC)(GLdouble x, GLdouble y, GLdouble z);
typedef void (__stdcall *PFNGLWINDOWPOS3DVPROC)(const GLdouble * v);
typedef void (__stdcall *PFNGLWINDOWPOS3DVARBPROC)(const GLdouble * v);
typedef void (__stdcall *PFNGLWINDOWPOS3FPROC)(GLfloat x, GLfloat y, GLfloat z);
typedef void (__stdcall *PFNGLWINDOWPOS3FARBPROC)(GLfloat x, GLfloat y, GLfloat z);
typedef void (__stdcall *PFNGLWINDOWPOS3FVPROC)(const GLfloat * v);
typedef void (__stdcall *PFNGLWINDOWPOS3FVARBPROC)(const GLfloat * v);
typedef void (__stdcall *PFNGLWINDOWPOS3IPROC)(GLint x, GLint y, GLint z);
typedef void (__stdcall *PFNGLWINDOWPOS3IARBPROC)(GLint x, GLint y, GLint z);
typedef void (__stdcall *PFNGLWINDOWPOS3IVPROC)(const GLint * v);
typedef void (__stdcall *PFNGLWINDOWPOS3IVARBPROC)(const GLint * v);
typedef void (__stdcall *PFNGLWINDOWPOS3SPROC)(GLshort x, GLshort y, GLshort z);
typedef void (__stdcall *PFNGLWINDOWPOS3SARBPROC)(GLshort x, GLshort y, GLshort z);
typedef void (__stdcall *PFNGLWINDOWPOS3SVPROC)(const GLshort * v);
typedef void (__stdcall *PFNGLWINDOWPOS3SVARBPROC)(const GLshort * v);
extern PFNGLACCUMPROC glad_glAccum;
extern PFNGLACTIVESHADERPROGRAMPROC glad_glActiveShaderProgram;
extern PFNGLACTIVETEXTUREPROC glad_glActiveTexture;
extern PFNGLACTIVETEXTUREARBPROC glad_glActiveTextureARB;
extern PFNGLALPHAFUNCPROC glad_glAlphaFunc;
extern PFNGLARETEXTURESRESIDENTPROC glad_glAreTexturesResident;
extern PFNGLARRAYELEMENTPROC glad_glArrayElement;
extern PFNGLATTACHOBJECTARBPROC glad_glAttachObjectARB;
extern PFNGLATTACHSHADERPROC glad_glAttachShader;
extern PFNGLBEGINPROC glad_glBegin;
extern PFNGLBEGINCONDITIONALRENDERPROC glad_glBeginConditionalRender;
extern PFNGLBEGINQUERYPROC glad_glBeginQuery;
extern PFNGLBEGINQUERYARBPROC glad_glBeginQueryARB;
extern PFNGLBEGINQUERYINDEXEDPROC glad_glBeginQueryIndexed;
extern PFNGLBEGINTRANSFORMFEEDBACKPROC glad_glBeginTransformFeedback;
extern PFNGLBINDATTRIBLOCATIONPROC glad_glBindAttribLocation;
extern PFNGLBINDATTRIBLOCATIONARBPROC glad_glBindAttribLocationARB;
extern PFNGLBINDBUFFERPROC glad_glBindBuffer;
extern PFNGLBINDBUFFERARBPROC glad_glBindBufferARB;
extern PFNGLBINDBUFFERBASEPROC glad_glBindBufferBase;
extern PFNGLBINDBUFFERRANGEPROC glad_glBindBufferRange;
extern PFNGLBINDBUFFERSBASEPROC glad_glBindBuffersBase;
extern PFNGLBINDBUFFERSRANGEPROC glad_glBindBuffersRange;
extern PFNGLBINDFRAGDATALOCATIONPROC glad_glBindFragDataLocation;
extern PFNGLBINDFRAGDATALOCATIONINDEXEDPROC glad_glBindFragDataLocationIndexed;
extern PFNGLBINDFRAMEBUFFERPROC glad_glBindFramebuffer;
extern PFNGLBINDIMAGETEXTUREPROC glad_glBindImageTexture;
extern PFNGLBINDIMAGETEXTURESPROC glad_glBindImageTextures;
extern PFNGLBINDPROGRAMARBPROC glad_glBindProgramARB;
extern PFNGLBINDPROGRAMPIPELINEPROC glad_glBindProgramPipeline;
extern PFNGLBINDRENDERBUFFERPROC glad_glBindRenderbuffer;
extern PFNGLBINDSAMPLERPROC glad_glBindSampler;
extern PFNGLBINDSAMPLERSPROC glad_glBindSamplers;
extern PFNGLBINDTEXTUREPROC glad_glBindTexture;
extern PFNGLBINDTEXTUREUNITPROC glad_glBindTextureUnit;
extern PFNGLBINDTEXTURESPROC glad_glBindTextures;
extern PFNGLBINDTRANSFORMFEEDBACKPROC glad_glBindTransformFeedback;
extern PFNGLBINDVERTEXARRAYPROC glad_glBindVertexArray;
extern PFNGLBINDVERTEXBUFFERPROC glad_glBindVertexBuffer;
extern PFNGLBINDVERTEXBUFFERSPROC glad_glBindVertexBuffers;
extern PFNGLBITMAPPROC glad_glBitmap;
extern PFNGLBLENDBARRIERPROC glad_glBlendBarrier;
extern PFNGLBLENDBARRIERKHRPROC glad_glBlendBarrierKHR;
extern PFNGLBLENDCOLORPROC glad_glBlendColor;
extern PFNGLBLENDEQUATIONPROC glad_glBlendEquation;
extern PFNGLBLENDEQUATIONSEPARATEPROC glad_glBlendEquationSeparate;
extern PFNGLBLENDEQUATIONSEPARATEIPROC glad_glBlendEquationSeparatei;
extern PFNGLBLENDEQUATIONSEPARATEIARBPROC glad_glBlendEquationSeparateiARB;
extern PFNGLBLENDEQUATIONIPROC glad_glBlendEquationi;
extern PFNGLBLENDEQUATIONIARBPROC glad_glBlendEquationiARB;
extern PFNGLBLENDFUNCPROC glad_glBlendFunc;
extern PFNGLBLENDFUNCSEPARATEPROC glad_glBlendFuncSeparate;
extern PFNGLBLENDFUNCSEPARATEIPROC glad_glBlendFuncSeparatei;
extern PFNGLBLENDFUNCSEPARATEIARBPROC glad_glBlendFuncSeparateiARB;
extern PFNGLBLENDFUNCIPROC glad_glBlendFunci;
extern PFNGLBLENDFUNCIARBPROC glad_glBlendFunciARB;
extern PFNGLBLITFRAMEBUFFERPROC glad_glBlitFramebuffer;
extern PFNGLBLITNAMEDFRAMEBUFFERPROC glad_glBlitNamedFramebuffer;
extern PFNGLBUFFERDATAPROC glad_glBufferData;
extern PFNGLBUFFERDATAARBPROC glad_glBufferDataARB;
extern PFNGLBUFFERPAGECOMMITMENTARBPROC glad_glBufferPageCommitmentARB;
extern PFNGLBUFFERSTORAGEPROC glad_glBufferStorage;
extern PFNGLBUFFERSUBDATAPROC glad_glBufferSubData;
extern PFNGLBUFFERSUBDATAARBPROC glad_glBufferSubDataARB;
extern PFNGLCALLLISTPROC glad_glCallList;
extern PFNGLCALLLISTSPROC glad_glCallLists;
extern PFNGLCHECKFRAMEBUFFERSTATUSPROC glad_glCheckFramebufferStatus;
extern PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC glad_glCheckNamedFramebufferStatus;
extern PFNGLCLAMPCOLORPROC glad_glClampColor;
extern PFNGLCLAMPCOLORARBPROC glad_glClampColorARB;
extern PFNGLCLEARPROC glad_glClear;
extern PFNGLCLEARACCUMPROC glad_glClearAccum;
extern PFNGLCLEARBUFFERDATAPROC glad_glClearBufferData;
extern PFNGLCLEARBUFFERSUBDATAPROC glad_glClearBufferSubData;
extern PFNGLCLEARBUFFERFIPROC glad_glClearBufferfi;
extern PFNGLCLEARBUFFERFVPROC glad_glClearBufferfv;
extern PFNGLCLEARBUFFERIVPROC glad_glClearBufferiv;
extern PFNGLCLEARBUFFERUIVPROC glad_glClearBufferuiv;
extern PFNGLCLEARCOLORPROC glad_glClearColor;
extern PFNGLCLEARDEPTHPROC glad_glClearDepth;
extern PFNGLCLEARDEPTHFPROC glad_glClearDepthf;
extern PFNGLCLEARINDEXPROC glad_glClearIndex;
extern PFNGLCLEARNAMEDBUFFERDATAPROC glad_glClearNamedBufferData;
extern PFNGLCLEARNAMEDBUFFERSUBDATAPROC glad_glClearNamedBufferSubData;
extern PFNGLCLEARNAMEDFRAMEBUFFERFIPROC glad_glClearNamedFramebufferfi;
extern PFNGLCLEARNAMEDFRAMEBUFFERFVPROC glad_glClearNamedFramebufferfv;
extern PFNGLCLEARNAMEDFRAMEBUFFERIVPROC glad_glClearNamedFramebufferiv;
extern PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC glad_glClearNamedFramebufferuiv;
extern PFNGLCLEARSTENCILPROC glad_glClearStencil;
extern PFNGLCLEARTEXIMAGEPROC glad_glClearTexImage;
extern PFNGLCLEARTEXSUBIMAGEPROC glad_glClearTexSubImage;
extern PFNGLCLIENTACTIVETEXTUREPROC glad_glClientActiveTexture;
extern PFNGLCLIENTACTIVETEXTUREARBPROC glad_glClientActiveTextureARB;
extern PFNGLCLIENTWAITSYNCPROC glad_glClientWaitSync;
extern PFNGLCLIPCONTROLPROC glad_glClipControl;
extern PFNGLCLIPPLANEPROC glad_glClipPlane;
extern PFNGLCOLOR3BPROC glad_glColor3b;
extern PFNGLCOLOR3BVPROC glad_glColor3bv;
extern PFNGLCOLOR3DPROC glad_glColor3d;
extern PFNGLCOLOR3DVPROC glad_glColor3dv;
extern PFNGLCOLOR3FPROC glad_glColor3f;
extern PFNGLCOLOR3FVPROC glad_glColor3fv;
extern PFNGLCOLOR3IPROC glad_glColor3i;
extern PFNGLCOLOR3IVPROC glad_glColor3iv;
extern PFNGLCOLOR3SPROC glad_glColor3s;
extern PFNGLCOLOR3SVPROC glad_glColor3sv;
extern PFNGLCOLOR3UBPROC glad_glColor3ub;
extern PFNGLCOLOR3UBVPROC glad_glColor3ubv;
extern PFNGLCOLOR3UIPROC glad_glColor3ui;
extern PFNGLCOLOR3UIVPROC glad_glColor3uiv;
extern PFNGLCOLOR3USPROC glad_glColor3us;
extern PFNGLCOLOR3USVPROC glad_glColor3usv;
extern PFNGLCOLOR4BPROC glad_glColor4b;
extern PFNGLCOLOR4BVPROC glad_glColor4bv;
extern PFNGLCOLOR4DPROC glad_glColor4d;
extern PFNGLCOLOR4DVPROC glad_glColor4dv;
extern PFNGLCOLOR4FPROC glad_glColor4f;
extern PFNGLCOLOR4FVPROC glad_glColor4fv;
extern PFNGLCOLOR4IPROC glad_glColor4i;
extern PFNGLCOLOR4IVPROC glad_glColor4iv;
extern PFNGLCOLOR4SPROC glad_glColor4s;
extern PFNGLCOLOR4SVPROC glad_glColor4sv;
extern PFNGLCOLOR4UBPROC glad_glColor4ub;
extern PFNGLCOLOR4UBVPROC glad_glColor4ubv;
extern PFNGLCOLOR4UIPROC glad_glColor4ui;
extern PFNGLCOLOR4UIVPROC glad_glColor4uiv;
extern PFNGLCOLOR4USPROC glad_glColor4us;
extern PFNGLCOLOR4USVPROC glad_glColor4usv;
extern PFNGLCOLORMASKPROC glad_glColorMask;
extern PFNGLCOLORMASKIPROC glad_glColorMaski;
extern PFNGLCOLORMATERIALPROC glad_glColorMaterial;
extern PFNGLCOLORP3UIPROC glad_glColorP3ui;
extern PFNGLCOLORP3UIVPROC glad_glColorP3uiv;
extern PFNGLCOLORP4UIPROC glad_glColorP4ui;
extern PFNGLCOLORP4UIVPROC glad_glColorP4uiv;
extern PFNGLCOLORPOINTERPROC glad_glColorPointer;
extern PFNGLCOLORSUBTABLEPROC glad_glColorSubTable;
extern PFNGLCOLORTABLEPROC glad_glColorTable;
extern PFNGLCOLORTABLEPARAMETERFVPROC glad_glColorTableParameterfv;
extern PFNGLCOLORTABLEPARAMETERIVPROC glad_glColorTableParameteriv;
extern PFNGLCOMPILESHADERPROC glad_glCompileShader;
extern PFNGLCOMPILESHADERARBPROC glad_glCompileShaderARB;
extern PFNGLCOMPILESHADERINCLUDEARBPROC glad_glCompileShaderIncludeARB;
extern PFNGLCOMPRESSEDTEXIMAGE1DPROC glad_glCompressedTexImage1D;
extern PFNGLCOMPRESSEDTEXIMAGE1DARBPROC glad_glCompressedTexImage1DARB;
extern PFNGLCOMPRESSEDTEXIMAGE2DPROC glad_glCompressedTexImage2D;
extern PFNGLCOMPRESSEDTEXIMAGE2DARBPROC glad_glCompressedTexImage2DARB;
extern PFNGLCOMPRESSEDTEXIMAGE3DPROC glad_glCompressedTexImage3D;
extern PFNGLCOMPRESSEDTEXIMAGE3DARBPROC glad_glCompressedTexImage3DARB;
extern PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC glad_glCompressedTexSubImage1D;
extern PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC glad_glCompressedTexSubImage1DARB;
extern PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC glad_glCompressedTexSubImage2D;
extern PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC glad_glCompressedTexSubImage2DARB;
extern PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC glad_glCompressedTexSubImage3D;
extern PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC glad_glCompressedTexSubImage3DARB;
extern PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC glad_glCompressedTextureSubImage1D;
extern PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC glad_glCompressedTextureSubImage2D;
extern PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC glad_glCompressedTextureSubImage3D;
extern PFNGLCONVOLUTIONFILTER1DPROC glad_glConvolutionFilter1D;
extern PFNGLCONVOLUTIONFILTER2DPROC glad_glConvolutionFilter2D;
extern PFNGLCONVOLUTIONPARAMETERFPROC glad_glConvolutionParameterf;
extern PFNGLCONVOLUTIONPARAMETERFVPROC glad_glConvolutionParameterfv;
extern PFNGLCONVOLUTIONPARAMETERIPROC glad_glConvolutionParameteri;
extern PFNGLCONVOLUTIONPARAMETERIVPROC glad_glConvolutionParameteriv;
extern PFNGLCOPYBUFFERSUBDATAPROC glad_glCopyBufferSubData;
extern PFNGLCOPYCOLORSUBTABLEPROC glad_glCopyColorSubTable;
extern PFNGLCOPYCOLORTABLEPROC glad_glCopyColorTable;
extern PFNGLCOPYCONVOLUTIONFILTER1DPROC glad_glCopyConvolutionFilter1D;
extern PFNGLCOPYCONVOLUTIONFILTER2DPROC glad_glCopyConvolutionFilter2D;
extern PFNGLCOPYIMAGESUBDATAPROC glad_glCopyImageSubData;
extern PFNGLCOPYNAMEDBUFFERSUBDATAPROC glad_glCopyNamedBufferSubData;
extern PFNGLCOPYPIXELSPROC glad_glCopyPixels;
extern PFNGLCOPYTEXIMAGE1DPROC glad_glCopyTexImage1D;
extern PFNGLCOPYTEXIMAGE2DPROC glad_glCopyTexImage2D;
extern PFNGLCOPYTEXSUBIMAGE1DPROC glad_glCopyTexSubImage1D;
extern PFNGLCOPYTEXSUBIMAGE2DPROC glad_glCopyTexSubImage2D;
extern PFNGLCOPYTEXSUBIMAGE3DPROC glad_glCopyTexSubImage3D;
extern PFNGLCOPYTEXTURESUBIMAGE1DPROC glad_glCopyTextureSubImage1D;
extern PFNGLCOPYTEXTURESUBIMAGE2DPROC glad_glCopyTextureSubImage2D;
extern PFNGLCOPYTEXTURESUBIMAGE3DPROC glad_glCopyTextureSubImage3D;
extern PFNGLCREATEBUFFERSPROC glad_glCreateBuffers;
extern PFNGLCREATEFRAMEBUFFERSPROC glad_glCreateFramebuffers;
extern PFNGLCREATEPROGRAMPROC glad_glCreateProgram;
extern PFNGLCREATEPROGRAMOBJECTARBPROC glad_glCreateProgramObjectARB;
extern PFNGLCREATEPROGRAMPIPELINESPROC glad_glCreateProgramPipelines;
extern PFNGLCREATEQUERIESPROC glad_glCreateQueries;
extern PFNGLCREATERENDERBUFFERSPROC glad_glCreateRenderbuffers;
extern PFNGLCREATESAMPLERSPROC glad_glCreateSamplers;
extern PFNGLCREATESHADERPROC glad_glCreateShader;
extern PFNGLCREATESHADEROBJECTARBPROC glad_glCreateShaderObjectARB;
extern PFNGLCREATESHADERPROGRAMVPROC glad_glCreateShaderProgramv;
extern PFNGLCREATESYNCFROMCLEVENTARBPROC glad_glCreateSyncFromCLeventARB;
extern PFNGLCREATETEXTURESPROC glad_glCreateTextures;
extern PFNGLCREATETRANSFORMFEEDBACKSPROC glad_glCreateTransformFeedbacks;
extern PFNGLCREATEVERTEXARRAYSPROC glad_glCreateVertexArrays;
extern PFNGLCULLFACEPROC glad_glCullFace;
extern PFNGLCURRENTPALETTEMATRIXARBPROC glad_glCurrentPaletteMatrixARB;
extern PFNGLDEBUGMESSAGECALLBACKPROC glad_glDebugMessageCallback;
extern PFNGLDEBUGMESSAGECALLBACKARBPROC glad_glDebugMessageCallbackARB;
extern PFNGLDEBUGMESSAGECONTROLPROC glad_glDebugMessageControl;
extern PFNGLDEBUGMESSAGECONTROLARBPROC glad_glDebugMessageControlARB;
extern PFNGLDEBUGMESSAGEINSERTPROC glad_glDebugMessageInsert;
extern PFNGLDEBUGMESSAGEINSERTARBPROC glad_glDebugMessageInsertARB;
extern PFNGLDELETEBUFFERSPROC glad_glDeleteBuffers;
extern PFNGLDELETEBUFFERSARBPROC glad_glDeleteBuffersARB;
extern PFNGLDELETEFRAMEBUFFERSPROC glad_glDeleteFramebuffers;
extern PFNGLDELETELISTSPROC glad_glDeleteLists;
extern PFNGLDELETENAMEDSTRINGARBPROC glad_glDeleteNamedStringARB;
extern PFNGLDELETEOBJECTARBPROC glad_glDeleteObjectARB;
extern PFNGLDELETEPROGRAMPROC glad_glDeleteProgram;
extern PFNGLDELETEPROGRAMPIPELINESPROC glad_glDeleteProgramPipelines;
extern PFNGLDELETEPROGRAMSARBPROC glad_glDeleteProgramsARB;
extern PFNGLDELETEQUERIESPROC glad_glDeleteQueries;
extern PFNGLDELETEQUERIESARBPROC glad_glDeleteQueriesARB;
extern PFNGLDELETERENDERBUFFERSPROC glad_glDeleteRenderbuffers;
extern PFNGLDELETESAMPLERSPROC glad_glDeleteSamplers;
extern PFNGLDELETESHADERPROC glad_glDeleteShader;
extern PFNGLDELETESYNCPROC glad_glDeleteSync;
extern PFNGLDELETETEXTURESPROC glad_glDeleteTextures;
extern PFNGLDELETETRANSFORMFEEDBACKSPROC glad_glDeleteTransformFeedbacks;
extern PFNGLDELETEVERTEXARRAYSPROC glad_glDeleteVertexArrays;
extern PFNGLDEPTHFUNCPROC glad_glDepthFunc;
extern PFNGLDEPTHMASKPROC glad_glDepthMask;
extern PFNGLDEPTHRANGEPROC glad_glDepthRange;
extern PFNGLDEPTHRANGEARRAYDVNVPROC glad_glDepthRangeArraydvNV;
extern PFNGLDEPTHRANGEARRAYVPROC glad_glDepthRangeArrayv;
extern PFNGLDEPTHRANGEINDEXEDPROC glad_glDepthRangeIndexed;
extern PFNGLDEPTHRANGEINDEXEDDNVPROC glad_glDepthRangeIndexeddNV;
extern PFNGLDEPTHRANGEFPROC glad_glDepthRangef;
extern PFNGLDETACHOBJECTARBPROC glad_glDetachObjectARB;
extern PFNGLDETACHSHADERPROC glad_glDetachShader;
extern PFNGLDISABLEPROC glad_glDisable;
extern PFNGLDISABLECLIENTSTATEPROC glad_glDisableClientState;
extern PFNGLDISABLEVERTEXARRAYATTRIBPROC glad_glDisableVertexArrayAttrib;
extern PFNGLDISABLEVERTEXATTRIBARRAYPROC glad_glDisableVertexAttribArray;
extern PFNGLDISABLEVERTEXATTRIBARRAYARBPROC glad_glDisableVertexAttribArrayARB;
extern PFNGLDISABLEIPROC glad_glDisablei;
extern PFNGLDISPATCHCOMPUTEPROC glad_glDispatchCompute;
extern PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC glad_glDispatchComputeGroupSizeARB;
extern PFNGLDISPATCHCOMPUTEINDIRECTPROC glad_glDispatchComputeIndirect;
extern PFNGLDRAWARRAYSPROC glad_glDrawArrays;
extern PFNGLDRAWARRAYSINDIRECTPROC glad_glDrawArraysIndirect;
extern PFNGLDRAWARRAYSINSTANCEDPROC glad_glDrawArraysInstanced;
extern PFNGLDRAWARRAYSINSTANCEDARBPROC glad_glDrawArraysInstancedARB;
extern PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC glad_glDrawArraysInstancedBaseInstance;
extern PFNGLDRAWBUFFERPROC glad_glDrawBuffer;
extern PFNGLDRAWBUFFERSPROC glad_glDrawBuffers;
extern PFNGLDRAWBUFFERSARBPROC glad_glDrawBuffersARB;
extern PFNGLDRAWELEMENTSPROC glad_glDrawElements;
extern PFNGLDRAWELEMENTSBASEVERTEXPROC glad_glDrawElementsBaseVertex;
extern PFNGLDRAWELEMENTSINDIRECTPROC glad_glDrawElementsIndirect;
extern PFNGLDRAWELEMENTSINSTANCEDPROC glad_glDrawElementsInstanced;
extern PFNGLDRAWELEMENTSINSTANCEDARBPROC glad_glDrawElementsInstancedARB;
extern PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC glad_glDrawElementsInstancedBaseInstance;
extern PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC glad_glDrawElementsInstancedBaseVertex;
extern PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC glad_glDrawElementsInstancedBaseVertexBaseInstance;
extern PFNGLDRAWPIXELSPROC glad_glDrawPixels;
extern PFNGLDRAWRANGEELEMENTSPROC glad_glDrawRangeElements;
extern PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC glad_glDrawRangeElementsBaseVertex;
extern PFNGLDRAWTRANSFORMFEEDBACKPROC glad_glDrawTransformFeedback;
extern PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC glad_glDrawTransformFeedbackInstanced;
extern PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC glad_glDrawTransformFeedbackStream;
extern PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC glad_glDrawTransformFeedbackStreamInstanced;
extern PFNGLEDGEFLAGPROC glad_glEdgeFlag;
extern PFNGLEDGEFLAGPOINTERPROC glad_glEdgeFlagPointer;
extern PFNGLEDGEFLAGVPROC glad_glEdgeFlagv;
extern PFNGLENABLEPROC glad_glEnable;
extern PFNGLENABLECLIENTSTATEPROC glad_glEnableClientState;
extern PFNGLENABLEVERTEXARRAYATTRIBPROC glad_glEnableVertexArrayAttrib;
extern PFNGLENABLEVERTEXATTRIBARRAYPROC glad_glEnableVertexAttribArray;
extern PFNGLENABLEVERTEXATTRIBARRAYARBPROC glad_glEnableVertexAttribArrayARB;
extern PFNGLENABLEIPROC glad_glEnablei;
extern PFNGLENDPROC glad_glEnd;
extern PFNGLENDCONDITIONALRENDERPROC glad_glEndConditionalRender;
extern PFNGLENDLISTPROC glad_glEndList;
extern PFNGLENDQUERYPROC glad_glEndQuery;
extern PFNGLENDQUERYARBPROC glad_glEndQueryARB;
extern PFNGLENDQUERYINDEXEDPROC glad_glEndQueryIndexed;
extern PFNGLENDTRANSFORMFEEDBACKPROC glad_glEndTransformFeedback;
extern PFNGLEVALCOORD1DPROC glad_glEvalCoord1d;
extern PFNGLEVALCOORD1DVPROC glad_glEvalCoord1dv;
extern PFNGLEVALCOORD1FPROC glad_glEvalCoord1f;
extern PFNGLEVALCOORD1FVPROC glad_glEvalCoord1fv;
extern PFNGLEVALCOORD2DPROC glad_glEvalCoord2d;
extern PFNGLEVALCOORD2DVPROC glad_glEvalCoord2dv;
extern PFNGLEVALCOORD2FPROC glad_glEvalCoord2f;
extern PFNGLEVALCOORD2FVPROC glad_glEvalCoord2fv;
extern PFNGLEVALMESH1PROC glad_glEvalMesh1;
extern PFNGLEVALMESH2PROC glad_glEvalMesh2;
extern PFNGLEVALPOINT1PROC glad_glEvalPoint1;
extern PFNGLEVALPOINT2PROC glad_glEvalPoint2;
extern PFNGLEVALUATEDEPTHVALUESARBPROC glad_glEvaluateDepthValuesARB;
extern PFNGLFEEDBACKBUFFERPROC glad_glFeedbackBuffer;
extern PFNGLFENCESYNCPROC glad_glFenceSync;
extern PFNGLFINISHPROC glad_glFinish;
extern PFNGLFLUSHPROC glad_glFlush;
extern PFNGLFLUSHMAPPEDBUFFERRANGEPROC glad_glFlushMappedBufferRange;
extern PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC glad_glFlushMappedNamedBufferRange;
extern PFNGLFOGCOORDPOINTERPROC glad_glFogCoordPointer;
extern PFNGLFOGCOORDDPROC glad_glFogCoordd;
extern PFNGLFOGCOORDDVPROC glad_glFogCoorddv;
extern PFNGLFOGCOORDFPROC glad_glFogCoordf;
extern PFNGLFOGCOORDFVPROC glad_glFogCoordfv;
extern PFNGLFOGFPROC glad_glFogf;
extern PFNGLFOGFVPROC glad_glFogfv;
extern PFNGLFOGIPROC glad_glFogi;
extern PFNGLFOGIVPROC glad_glFogiv;
extern PFNGLFRAMEBUFFERPARAMETERIPROC glad_glFramebufferParameteri;
extern PFNGLFRAMEBUFFERRENDERBUFFERPROC glad_glFramebufferRenderbuffer;
extern PFNGLFRAMEBUFFERSAMPLELOCATIONSFVARBPROC glad_glFramebufferSampleLocationsfvARB;
extern PFNGLFRAMEBUFFERTEXTUREPROC glad_glFramebufferTexture;
extern PFNGLFRAMEBUFFERTEXTURE1DPROC glad_glFramebufferTexture1D;
extern PFNGLFRAMEBUFFERTEXTURE2DPROC glad_glFramebufferTexture2D;
extern PFNGLFRAMEBUFFERTEXTURE3DPROC glad_glFramebufferTexture3D;
extern PFNGLFRAMEBUFFERTEXTUREARBPROC glad_glFramebufferTextureARB;
extern PFNGLFRAMEBUFFERTEXTUREFACEARBPROC glad_glFramebufferTextureFaceARB;
extern PFNGLFRAMEBUFFERTEXTURELAYERPROC glad_glFramebufferTextureLayer;
extern PFNGLFRAMEBUFFERTEXTURELAYERARBPROC glad_glFramebufferTextureLayerARB;
extern PFNGLFRONTFACEPROC glad_glFrontFace;
extern PFNGLFRUSTUMPROC glad_glFrustum;
extern PFNGLGENBUFFERSPROC glad_glGenBuffers;
extern PFNGLGENBUFFERSARBPROC glad_glGenBuffersARB;
extern PFNGLGENFRAMEBUFFERSPROC glad_glGenFramebuffers;
extern PFNGLGENLISTSPROC glad_glGenLists;
extern PFNGLGENPROGRAMPIPELINESPROC glad_glGenProgramPipelines;
extern PFNGLGENPROGRAMSARBPROC glad_glGenProgramsARB;
extern PFNGLGENQUERIESPROC glad_glGenQueries;
extern PFNGLGENQUERIESARBPROC glad_glGenQueriesARB;
extern PFNGLGENRENDERBUFFERSPROC glad_glGenRenderbuffers;
extern PFNGLGENSAMPLERSPROC glad_glGenSamplers;
extern PFNGLGENTEXTURESPROC glad_glGenTextures;
extern PFNGLGENTRANSFORMFEEDBACKSPROC glad_glGenTransformFeedbacks;
extern PFNGLGENVERTEXARRAYSPROC glad_glGenVertexArrays;
extern PFNGLGENERATEMIPMAPPROC glad_glGenerateMipmap;
extern PFNGLGENERATETEXTUREMIPMAPPROC glad_glGenerateTextureMipmap;
extern PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC glad_glGetActiveAtomicCounterBufferiv;
extern PFNGLGETACTIVEATTRIBPROC glad_glGetActiveAttrib;
extern PFNGLGETACTIVEATTRIBARBPROC glad_glGetActiveAttribARB;
extern PFNGLGETACTIVESUBROUTINENAMEPROC glad_glGetActiveSubroutineName;
extern PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC glad_glGetActiveSubroutineUniformName;
extern PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC glad_glGetActiveSubroutineUniformiv;
extern PFNGLGETACTIVEUNIFORMPROC glad_glGetActiveUniform;
extern PFNGLGETACTIVEUNIFORMARBPROC glad_glGetActiveUniformARB;
extern PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC glad_glGetActiveUniformBlockName;
extern PFNGLGETACTIVEUNIFORMBLOCKIVPROC glad_glGetActiveUniformBlockiv;
extern PFNGLGETACTIVEUNIFORMNAMEPROC glad_glGetActiveUniformName;
extern PFNGLGETACTIVEUNIFORMSIVPROC glad_glGetActiveUniformsiv;
extern PFNGLGETATTACHEDOBJECTSARBPROC glad_glGetAttachedObjectsARB;
extern PFNGLGETATTACHEDSHADERSPROC glad_glGetAttachedShaders;
extern PFNGLGETATTRIBLOCATIONPROC glad_glGetAttribLocation;
extern PFNGLGETATTRIBLOCATIONARBPROC glad_glGetAttribLocationARB;
extern PFNGLGETBOOLEANI_VPROC glad_glGetBooleani_v;
extern PFNGLGETBOOLEANVPROC glad_glGetBooleanv;
extern PFNGLGETBUFFERPARAMETERI64VPROC glad_glGetBufferParameteri64v;
extern PFNGLGETBUFFERPARAMETERIVPROC glad_glGetBufferParameteriv;
extern PFNGLGETBUFFERPARAMETERIVARBPROC glad_glGetBufferParameterivARB;
extern PFNGLGETBUFFERPOINTERVPROC glad_glGetBufferPointerv;
extern PFNGLGETBUFFERPOINTERVARBPROC glad_glGetBufferPointervARB;
extern PFNGLGETBUFFERSUBDATAPROC glad_glGetBufferSubData;
extern PFNGLGETBUFFERSUBDATAARBPROC glad_glGetBufferSubDataARB;
extern PFNGLGETCLIPPLANEPROC glad_glGetClipPlane;
extern PFNGLGETCOLORTABLEPROC glad_glGetColorTable;
extern PFNGLGETCOLORTABLEPARAMETERFVPROC glad_glGetColorTableParameterfv;
extern PFNGLGETCOLORTABLEPARAMETERIVPROC glad_glGetColorTableParameteriv;
extern PFNGLGETCOMPRESSEDTEXIMAGEPROC glad_glGetCompressedTexImage;
extern PFNGLGETCOMPRESSEDTEXIMAGEARBPROC glad_glGetCompressedTexImageARB;
extern PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC glad_glGetCompressedTextureImage;
extern PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC glad_glGetCompressedTextureSubImage;
extern PFNGLGETCONVOLUTIONFILTERPROC glad_glGetConvolutionFilter;
extern PFNGLGETCONVOLUTIONPARAMETERFVPROC glad_glGetConvolutionParameterfv;
extern PFNGLGETCONVOLUTIONPARAMETERIVPROC glad_glGetConvolutionParameteriv;
extern PFNGLGETDEBUGMESSAGELOGPROC glad_glGetDebugMessageLog;
extern PFNGLGETDEBUGMESSAGELOGARBPROC glad_glGetDebugMessageLogARB;
extern PFNGLGETDOUBLEI_VPROC glad_glGetDoublei_v;
extern PFNGLGETDOUBLEVPROC glad_glGetDoublev;
extern PFNGLGETERRORPROC glad_glGetError;
extern PFNGLGETFLOATI_VPROC glad_glGetFloati_v;
extern PFNGLGETFLOATVPROC glad_glGetFloatv;
extern PFNGLGETFRAGDATAINDEXPROC glad_glGetFragDataIndex;
extern PFNGLGETFRAGDATALOCATIONPROC glad_glGetFragDataLocation;
extern PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC glad_glGetFramebufferAttachmentParameteriv;
extern PFNGLGETFRAMEBUFFERPARAMETERIVPROC glad_glGetFramebufferParameteriv;
extern PFNGLGETGRAPHICSRESETSTATUSPROC glad_glGetGraphicsResetStatus;
extern PFNGLGETGRAPHICSRESETSTATUSARBPROC glad_glGetGraphicsResetStatusARB;
extern PFNGLGETHANDLEARBPROC glad_glGetHandleARB;
extern PFNGLGETHISTOGRAMPROC glad_glGetHistogram;
extern PFNGLGETHISTOGRAMPARAMETERFVPROC glad_glGetHistogramParameterfv;
extern PFNGLGETHISTOGRAMPARAMETERIVPROC glad_glGetHistogramParameteriv;
extern PFNGLGETIMAGEHANDLEARBPROC glad_glGetImageHandleARB;
extern PFNGLGETINFOLOGARBPROC glad_glGetInfoLogARB;
extern PFNGLGETINTEGER64I_VPROC glad_glGetInteger64i_v;
extern PFNGLGETINTEGER64VPROC glad_glGetInteger64v;
extern PFNGLGETINTEGERI_VPROC glad_glGetIntegeri_v;
extern PFNGLGETINTEGERVPROC glad_glGetIntegerv;
extern PFNGLGETINTERNALFORMATI64VPROC glad_glGetInternalformati64v;
extern PFNGLGETINTERNALFORMATIVPROC glad_glGetInternalformativ;
extern PFNGLGETLIGHTFVPROC glad_glGetLightfv;
extern PFNGLGETLIGHTIVPROC glad_glGetLightiv;
extern PFNGLGETMAPDVPROC glad_glGetMapdv;
extern PFNGLGETMAPFVPROC glad_glGetMapfv;
extern PFNGLGETMAPIVPROC glad_glGetMapiv;
extern PFNGLGETMATERIALFVPROC glad_glGetMaterialfv;
extern PFNGLGETMATERIALIVPROC glad_glGetMaterialiv;
extern PFNGLGETMINMAXPROC glad_glGetMinmax;
extern PFNGLGETMINMAXPARAMETERFVPROC glad_glGetMinmaxParameterfv;
extern PFNGLGETMINMAXPARAMETERIVPROC glad_glGetMinmaxParameteriv;
extern PFNGLGETMULTISAMPLEFVPROC glad_glGetMultisamplefv;
extern PFNGLGETNAMEDBUFFERPARAMETERI64VPROC glad_glGetNamedBufferParameteri64v;
extern PFNGLGETNAMEDBUFFERPARAMETERIVPROC glad_glGetNamedBufferParameteriv;
extern PFNGLGETNAMEDBUFFERPOINTERVPROC glad_glGetNamedBufferPointerv;
extern PFNGLGETNAMEDBUFFERSUBDATAPROC glad_glGetNamedBufferSubData;
extern PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC glad_glGetNamedFramebufferAttachmentParameteriv;
extern PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC glad_glGetNamedFramebufferParameteriv;
extern PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC glad_glGetNamedRenderbufferParameteriv;
extern PFNGLGETNAMEDSTRINGARBPROC glad_glGetNamedStringARB;
extern PFNGLGETNAMEDSTRINGIVARBPROC glad_glGetNamedStringivARB;
extern PFNGLGETOBJECTLABELPROC glad_glGetObjectLabel;
extern PFNGLGETOBJECTPARAMETERFVARBPROC glad_glGetObjectParameterfvARB;
extern PFNGLGETOBJECTPARAMETERIVARBPROC glad_glGetObjectParameterivARB;
extern PFNGLGETOBJECTPTRLABELPROC glad_glGetObjectPtrLabel;
extern PFNGLGETPIXELMAPFVPROC glad_glGetPixelMapfv;
extern PFNGLGETPIXELMAPUIVPROC glad_glGetPixelMapuiv;
extern PFNGLGETPIXELMAPUSVPROC glad_glGetPixelMapusv;
extern PFNGLGETPOINTERVPROC glad_glGetPointerv;
extern PFNGLGETPOLYGONSTIPPLEPROC glad_glGetPolygonStipple;
extern PFNGLGETPROGRAMBINARYPROC glad_glGetProgramBinary;
extern PFNGLGETPROGRAMENVPARAMETERDVARBPROC glad_glGetProgramEnvParameterdvARB;
extern PFNGLGETPROGRAMENVPARAMETERFVARBPROC glad_glGetProgramEnvParameterfvARB;
extern PFNGLGETPROGRAMINFOLOGPROC glad_glGetProgramInfoLog;
extern PFNGLGETPROGRAMINTERFACEIVPROC glad_glGetProgramInterfaceiv;
extern PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC glad_glGetProgramLocalParameterdvARB;
extern PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC glad_glGetProgramLocalParameterfvARB;
extern PFNGLGETPROGRAMPIPELINEINFOLOGPROC glad_glGetProgramPipelineInfoLog;
extern PFNGLGETPROGRAMPIPELINEIVPROC glad_glGetProgramPipelineiv;
extern PFNGLGETPROGRAMRESOURCEINDEXPROC glad_glGetProgramResourceIndex;
extern PFNGLGETPROGRAMRESOURCELOCATIONPROC glad_glGetProgramResourceLocation;
extern PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC glad_glGetProgramResourceLocationIndex;
extern PFNGLGETPROGRAMRESOURCENAMEPROC glad_glGetProgramResourceName;
extern PFNGLGETPROGRAMRESOURCEIVPROC glad_glGetProgramResourceiv;
extern PFNGLGETPROGRAMSTAGEIVPROC glad_glGetProgramStageiv;
extern PFNGLGETPROGRAMSTRINGARBPROC glad_glGetProgramStringARB;
extern PFNGLGETPROGRAMIVPROC glad_glGetProgramiv;
extern PFNGLGETPROGRAMIVARBPROC glad_glGetProgramivARB;
extern PFNGLGETQUERYBUFFEROBJECTI64VPROC glad_glGetQueryBufferObjecti64v;
extern PFNGLGETQUERYBUFFEROBJECTIVPROC glad_glGetQueryBufferObjectiv;
extern PFNGLGETQUERYBUFFEROBJECTUI64VPROC glad_glGetQueryBufferObjectui64v;
extern PFNGLGETQUERYBUFFEROBJECTUIVPROC glad_glGetQueryBufferObjectuiv;
extern PFNGLGETQUERYINDEXEDIVPROC glad_glGetQueryIndexediv;
extern PFNGLGETQUERYOBJECTI64VPROC glad_glGetQueryObjecti64v;
extern PFNGLGETQUERYOBJECTIVPROC glad_glGetQueryObjectiv;
extern PFNGLGETQUERYOBJECTIVARBPROC glad_glGetQueryObjectivARB;
extern PFNGLGETQUERYOBJECTUI64VPROC glad_glGetQueryObjectui64v;
extern PFNGLGETQUERYOBJECTUIVPROC glad_glGetQueryObjectuiv;
extern PFNGLGETQUERYOBJECTUIVARBPROC glad_glGetQueryObjectuivARB;
extern PFNGLGETQUERYIVPROC glad_glGetQueryiv;
extern PFNGLGETQUERYIVARBPROC glad_glGetQueryivARB;
extern PFNGLGETRENDERBUFFERPARAMETERIVPROC glad_glGetRenderbufferParameteriv;
extern PFNGLGETSAMPLERPARAMETERIIVPROC glad_glGetSamplerParameterIiv;
extern PFNGLGETSAMPLERPARAMETERIUIVPROC glad_glGetSamplerParameterIuiv;
extern PFNGLGETSAMPLERPARAMETERFVPROC glad_glGetSamplerParameterfv;
extern PFNGLGETSAMPLERPARAMETERIVPROC glad_glGetSamplerParameteriv;
extern PFNGLGETSEPARABLEFILTERPROC glad_glGetSeparableFilter;
extern PFNGLGETSHADERINFOLOGPROC glad_glGetShaderInfoLog;
extern PFNGLGETSHADERPRECISIONFORMATPROC glad_glGetShaderPrecisionFormat;
extern PFNGLGETSHADERSOURCEPROC glad_glGetShaderSource;
extern PFNGLGETSHADERSOURCEARBPROC glad_glGetShaderSourceARB;
extern PFNGLGETSHADERIVPROC glad_glGetShaderiv;
extern PFNGLGETSTRINGPROC glad_glGetString;
extern PFNGLGETSTRINGIPROC glad_glGetStringi;
extern PFNGLGETSUBROUTINEINDEXPROC glad_glGetSubroutineIndex;
extern PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC glad_glGetSubroutineUniformLocation;
extern PFNGLGETSYNCIVPROC glad_glGetSynciv;
extern PFNGLGETTEXENVFVPROC glad_glGetTexEnvfv;
extern PFNGLGETTEXENVIVPROC glad_glGetTexEnviv;
extern PFNGLGETTEXGENDVPROC glad_glGetTexGendv;
extern PFNGLGETTEXGENFVPROC glad_glGetTexGenfv;
extern PFNGLGETTEXGENIVPROC glad_glGetTexGeniv;
extern PFNGLGETTEXIMAGEPROC glad_glGetTexImage;
extern PFNGLGETTEXLEVELPARAMETERFVPROC glad_glGetTexLevelParameterfv;
extern PFNGLGETTEXLEVELPARAMETERIVPROC glad_glGetTexLevelParameteriv;
extern PFNGLGETTEXPARAMETERIIVPROC glad_glGetTexParameterIiv;
extern PFNGLGETTEXPARAMETERIUIVPROC glad_glGetTexParameterIuiv;
extern PFNGLGETTEXPARAMETERFVPROC glad_glGetTexParameterfv;
extern PFNGLGETTEXPARAMETERIVPROC glad_glGetTexParameteriv;
extern PFNGLGETTEXTUREHANDLEARBPROC glad_glGetTextureHandleARB;
extern PFNGLGETTEXTUREIMAGEPROC glad_glGetTextureImage;
extern PFNGLGETTEXTURELEVELPARAMETERFVPROC glad_glGetTextureLevelParameterfv;
extern PFNGLGETTEXTURELEVELPARAMETERIVPROC glad_glGetTextureLevelParameteriv;
extern PFNGLGETTEXTUREPARAMETERIIVPROC glad_glGetTextureParameterIiv;
extern PFNGLGETTEXTUREPARAMETERIUIVPROC glad_glGetTextureParameterIuiv;
extern PFNGLGETTEXTUREPARAMETERFVPROC glad_glGetTextureParameterfv;
extern PFNGLGETTEXTUREPARAMETERIVPROC glad_glGetTextureParameteriv;
extern PFNGLGETTEXTURESAMPLERHANDLEARBPROC glad_glGetTextureSamplerHandleARB;
extern PFNGLGETTEXTURESUBIMAGEPROC glad_glGetTextureSubImage;
extern PFNGLGETTRANSFORMFEEDBACKVARYINGPROC glad_glGetTransformFeedbackVarying;
extern PFNGLGETTRANSFORMFEEDBACKI64_VPROC glad_glGetTransformFeedbacki64_v;
extern PFNGLGETTRANSFORMFEEDBACKI_VPROC glad_glGetTransformFeedbacki_v;
extern PFNGLGETTRANSFORMFEEDBACKIVPROC glad_glGetTransformFeedbackiv;
extern PFNGLGETUNIFORMBLOCKINDEXPROC glad_glGetUniformBlockIndex;
extern PFNGLGETUNIFORMINDICESPROC glad_glGetUniformIndices;
extern PFNGLGETUNIFORMLOCATIONPROC glad_glGetUniformLocation;
extern PFNGLGETUNIFORMLOCATIONARBPROC glad_glGetUniformLocationARB;
extern PFNGLGETUNIFORMSUBROUTINEUIVPROC glad_glGetUniformSubroutineuiv;
extern PFNGLGETUNIFORMDVPROC glad_glGetUniformdv;
extern PFNGLGETUNIFORMFVPROC glad_glGetUniformfv;
extern PFNGLGETUNIFORMFVARBPROC glad_glGetUniformfvARB;
extern PFNGLGETUNIFORMI64VARBPROC glad_glGetUniformi64vARB;
extern PFNGLGETUNIFORMIVPROC glad_glGetUniformiv;
extern PFNGLGETUNIFORMIVARBPROC glad_glGetUniformivARB;
extern PFNGLGETUNIFORMUI64VARBPROC glad_glGetUniformui64vARB;
extern PFNGLGETUNIFORMUIVPROC glad_glGetUniformuiv;
extern PFNGLGETVERTEXARRAYINDEXED64IVPROC glad_glGetVertexArrayIndexed64iv;
extern PFNGLGETVERTEXARRAYINDEXEDIVPROC glad_glGetVertexArrayIndexediv;
extern PFNGLGETVERTEXARRAYIVPROC glad_glGetVertexArrayiv;
extern PFNGLGETVERTEXATTRIBIIVPROC glad_glGetVertexAttribIiv;
extern PFNGLGETVERTEXATTRIBIUIVPROC glad_glGetVertexAttribIuiv;
extern PFNGLGETVERTEXATTRIBLDVPROC glad_glGetVertexAttribLdv;
extern PFNGLGETVERTEXATTRIBLUI64VARBPROC glad_glGetVertexAttribLui64vARB;
extern PFNGLGETVERTEXATTRIBPOINTERVPROC glad_glGetVertexAttribPointerv;
extern PFNGLGETVERTEXATTRIBPOINTERVARBPROC glad_glGetVertexAttribPointervARB;
extern PFNGLGETVERTEXATTRIBDVPROC glad_glGetVertexAttribdv;
extern PFNGLGETVERTEXATTRIBDVARBPROC glad_glGetVertexAttribdvARB;
extern PFNGLGETVERTEXATTRIBFVPROC glad_glGetVertexAttribfv;
extern PFNGLGETVERTEXATTRIBFVARBPROC glad_glGetVertexAttribfvARB;
extern PFNGLGETVERTEXATTRIBIVPROC glad_glGetVertexAttribiv;
extern PFNGLGETVERTEXATTRIBIVARBPROC glad_glGetVertexAttribivARB;
extern PFNGLGETNCOLORTABLEARBPROC glad_glGetnColorTableARB;
extern PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC glad_glGetnCompressedTexImageARB;
extern PFNGLGETNCONVOLUTIONFILTERARBPROC glad_glGetnConvolutionFilterARB;
extern PFNGLGETNHISTOGRAMARBPROC glad_glGetnHistogramARB;
extern PFNGLGETNMAPDVARBPROC glad_glGetnMapdvARB;
extern PFNGLGETNMAPFVARBPROC glad_glGetnMapfvARB;
extern PFNGLGETNMAPIVARBPROC glad_glGetnMapivARB;
extern PFNGLGETNMINMAXARBPROC glad_glGetnMinmaxARB;
extern PFNGLGETNPIXELMAPFVARBPROC glad_glGetnPixelMapfvARB;
extern PFNGLGETNPIXELMAPUIVARBPROC glad_glGetnPixelMapuivARB;
extern PFNGLGETNPIXELMAPUSVARBPROC glad_glGetnPixelMapusvARB;
extern PFNGLGETNPOLYGONSTIPPLEARBPROC glad_glGetnPolygonStippleARB;
extern PFNGLGETNSEPARABLEFILTERARBPROC glad_glGetnSeparableFilterARB;
extern PFNGLGETNTEXIMAGEARBPROC glad_glGetnTexImageARB;
extern PFNGLGETNUNIFORMDVARBPROC glad_glGetnUniformdvARB;
extern PFNGLGETNUNIFORMFVPROC glad_glGetnUniformfv;
extern PFNGLGETNUNIFORMFVARBPROC glad_glGetnUniformfvARB;
extern PFNGLGETNUNIFORMI64VARBPROC glad_glGetnUniformi64vARB;
extern PFNGLGETNUNIFORMIVPROC glad_glGetnUniformiv;
extern PFNGLGETNUNIFORMIVARBPROC glad_glGetnUniformivARB;
extern PFNGLGETNUNIFORMUI64VARBPROC glad_glGetnUniformui64vARB;
extern PFNGLGETNUNIFORMUIVPROC glad_glGetnUniformuiv;
extern PFNGLGETNUNIFORMUIVARBPROC glad_glGetnUniformuivARB;
extern PFNGLHINTPROC glad_glHint;
extern PFNGLHISTOGRAMPROC glad_glHistogram;
extern PFNGLINDEXMASKPROC glad_glIndexMask;
extern PFNGLINDEXPOINTERPROC glad_glIndexPointer;
extern PFNGLINDEXDPROC glad_glIndexd;
extern PFNGLINDEXDVPROC glad_glIndexdv;
extern PFNGLINDEXFPROC glad_glIndexf;
extern PFNGLINDEXFVPROC glad_glIndexfv;
extern PFNGLINDEXIPROC glad_glIndexi;
extern PFNGLINDEXIVPROC glad_glIndexiv;
extern PFNGLINDEXSPROC glad_glIndexs;
extern PFNGLINDEXSVPROC glad_glIndexsv;
extern PFNGLINDEXUBPROC glad_glIndexub;
extern PFNGLINDEXUBVPROC glad_glIndexubv;
extern PFNGLINITNAMESPROC glad_glInitNames;
extern PFNGLINTERLEAVEDARRAYSPROC glad_glInterleavedArrays;
extern PFNGLINVALIDATEBUFFERDATAPROC glad_glInvalidateBufferData;
extern PFNGLINVALIDATEBUFFERSUBDATAPROC glad_glInvalidateBufferSubData;
extern PFNGLINVALIDATEFRAMEBUFFERPROC glad_glInvalidateFramebuffer;
extern PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC glad_glInvalidateNamedFramebufferData;
extern PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC glad_glInvalidateNamedFramebufferSubData;
extern PFNGLINVALIDATESUBFRAMEBUFFERPROC glad_glInvalidateSubFramebuffer;
extern PFNGLINVALIDATETEXIMAGEPROC glad_glInvalidateTexImage;
extern PFNGLINVALIDATETEXSUBIMAGEPROC glad_glInvalidateTexSubImage;
extern PFNGLISBUFFERPROC glad_glIsBuffer;
extern PFNGLISBUFFERARBPROC glad_glIsBufferARB;
extern PFNGLISENABLEDPROC glad_glIsEnabled;
extern PFNGLISENABLEDIPROC glad_glIsEnabledi;
extern PFNGLISFRAMEBUFFERPROC glad_glIsFramebuffer;
extern PFNGLISIMAGEHANDLERESIDENTARBPROC glad_glIsImageHandleResidentARB;
extern PFNGLISLISTPROC glad_glIsList;
extern PFNGLISNAMEDSTRINGARBPROC glad_glIsNamedStringARB;
extern PFNGLISPROGRAMPROC glad_glIsProgram;
extern PFNGLISPROGRAMARBPROC glad_glIsProgramARB;
extern PFNGLISPROGRAMPIPELINEPROC glad_glIsProgramPipeline;
extern PFNGLISQUERYPROC glad_glIsQuery;
extern PFNGLISQUERYARBPROC glad_glIsQueryARB;
extern PFNGLISRENDERBUFFERPROC glad_glIsRenderbuffer;
extern PFNGLISSAMPLERPROC glad_glIsSampler;
extern PFNGLISSHADERPROC glad_glIsShader;
extern PFNGLISSYNCPROC glad_glIsSync;
extern PFNGLISTEXTUREPROC glad_glIsTexture;
extern PFNGLISTEXTUREHANDLERESIDENTARBPROC glad_glIsTextureHandleResidentARB;
extern PFNGLISTRANSFORMFEEDBACKPROC glad_glIsTransformFeedback;
extern PFNGLISVERTEXARRAYPROC glad_glIsVertexArray;
extern PFNGLLIGHTMODELFPROC glad_glLightModelf;
extern PFNGLLIGHTMODELFVPROC glad_glLightModelfv;
extern PFNGLLIGHTMODELIPROC glad_glLightModeli;
extern PFNGLLIGHTMODELIVPROC glad_glLightModeliv;
extern PFNGLLIGHTFPROC glad_glLightf;
extern PFNGLLIGHTFVPROC glad_glLightfv;
extern PFNGLLIGHTIPROC glad_glLighti;
extern PFNGLLIGHTIVPROC glad_glLightiv;
extern PFNGLLINESTIPPLEPROC glad_glLineStipple;
extern PFNGLLINEWIDTHPROC glad_glLineWidth;
extern PFNGLLINKPROGRAMPROC glad_glLinkProgram;
extern PFNGLLINKPROGRAMARBPROC glad_glLinkProgramARB;
extern PFNGLLISTBASEPROC glad_glListBase;
extern PFNGLLOADIDENTITYPROC glad_glLoadIdentity;
extern PFNGLLOADMATRIXDPROC glad_glLoadMatrixd;
extern PFNGLLOADMATRIXFPROC glad_glLoadMatrixf;
extern PFNGLLOADNAMEPROC glad_glLoadName;
extern PFNGLLOADTRANSPOSEMATRIXDPROC glad_glLoadTransposeMatrixd;
extern PFNGLLOADTRANSPOSEMATRIXDARBPROC glad_glLoadTransposeMatrixdARB;
extern PFNGLLOADTRANSPOSEMATRIXFPROC glad_glLoadTransposeMatrixf;
extern PFNGLLOADTRANSPOSEMATRIXFARBPROC glad_glLoadTransposeMatrixfARB;
extern PFNGLLOGICOPPROC glad_glLogicOp;
extern PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC glad_glMakeImageHandleNonResidentARB;
extern PFNGLMAKEIMAGEHANDLERESIDENTARBPROC glad_glMakeImageHandleResidentARB;
extern PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC glad_glMakeTextureHandleNonResidentARB;
extern PFNGLMAKETEXTUREHANDLERESIDENTARBPROC glad_glMakeTextureHandleResidentARB;
extern PFNGLMAP1DPROC glad_glMap1d;
extern PFNGLMAP1FPROC glad_glMap1f;
extern PFNGLMAP2DPROC glad_glMap2d;
extern PFNGLMAP2FPROC glad_glMap2f;
extern PFNGLMAPBUFFERPROC glad_glMapBuffer;
extern PFNGLMAPBUFFERARBPROC glad_glMapBufferARB;
extern PFNGLMAPBUFFERRANGEPROC glad_glMapBufferRange;
extern PFNGLMAPGRID1DPROC glad_glMapGrid1d;
extern PFNGLMAPGRID1FPROC glad_glMapGrid1f;
extern PFNGLMAPGRID2DPROC glad_glMapGrid2d;
extern PFNGLMAPGRID2FPROC glad_glMapGrid2f;
extern PFNGLMAPNAMEDBUFFERPROC glad_glMapNamedBuffer;
extern PFNGLMAPNAMEDBUFFERRANGEPROC glad_glMapNamedBufferRange;
extern PFNGLMATERIALFPROC glad_glMaterialf;
extern PFNGLMATERIALFVPROC glad_glMaterialfv;
extern PFNGLMATERIALIPROC glad_glMateriali;
extern PFNGLMATERIALIVPROC glad_glMaterialiv;
extern PFNGLMATRIXINDEXPOINTERARBPROC glad_glMatrixIndexPointerARB;
extern PFNGLMATRIXINDEXUBVARBPROC glad_glMatrixIndexubvARB;
extern PFNGLMATRIXINDEXUIVARBPROC glad_glMatrixIndexuivARB;
extern PFNGLMATRIXINDEXUSVARBPROC glad_glMatrixIndexusvARB;
extern PFNGLMATRIXMODEPROC glad_glMatrixMode;
extern PFNGLMAXSHADERCOMPILERTHREADSARBPROC glad_glMaxShaderCompilerThreadsARB;
extern PFNGLMAXSHADERCOMPILERTHREADSKHRPROC glad_glMaxShaderCompilerThreadsKHR;
extern PFNGLMEMORYBARRIERPROC glad_glMemoryBarrier;
extern PFNGLMEMORYBARRIERBYREGIONPROC glad_glMemoryBarrierByRegion;
extern PFNGLMINSAMPLESHADINGPROC glad_glMinSampleShading;
extern PFNGLMINSAMPLESHADINGARBPROC glad_glMinSampleShadingARB;
extern PFNGLMINMAXPROC glad_glMinmax;
extern PFNGLMULTMATRIXDPROC glad_glMultMatrixd;
extern PFNGLMULTMATRIXFPROC glad_glMultMatrixf;
extern PFNGLMULTTRANSPOSEMATRIXDPROC glad_glMultTransposeMatrixd;
extern PFNGLMULTTRANSPOSEMATRIXDARBPROC glad_glMultTransposeMatrixdARB;
extern PFNGLMULTTRANSPOSEMATRIXFPROC glad_glMultTransposeMatrixf;
extern PFNGLMULTTRANSPOSEMATRIXFARBPROC glad_glMultTransposeMatrixfARB;
extern PFNGLMULTIDRAWARRAYSPROC glad_glMultiDrawArrays;
extern PFNGLMULTIDRAWARRAYSINDIRECTPROC glad_glMultiDrawArraysIndirect;
extern PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC glad_glMultiDrawArraysIndirectCount;
extern PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC glad_glMultiDrawArraysIndirectCountARB;
extern PFNGLMULTIDRAWELEMENTSPROC glad_glMultiDrawElements;
extern PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC glad_glMultiDrawElementsBaseVertex;
extern PFNGLMULTIDRAWELEMENTSINDIRECTPROC glad_glMultiDrawElementsIndirect;
extern PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC glad_glMultiDrawElementsIndirectCount;
extern PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC glad_glMultiDrawElementsIndirectCountARB;
extern PFNGLMULTITEXCOORD1DPROC glad_glMultiTexCoord1d;
extern PFNGLMULTITEXCOORD1DARBPROC glad_glMultiTexCoord1dARB;
extern PFNGLMULTITEXCOORD1DVPROC glad_glMultiTexCoord1dv;
extern PFNGLMULTITEXCOORD1DVARBPROC glad_glMultiTexCoord1dvARB;
extern PFNGLMULTITEXCOORD1FPROC glad_glMultiTexCoord1f;
extern PFNGLMULTITEXCOORD1FARBPROC glad_glMultiTexCoord1fARB;
extern PFNGLMULTITEXCOORD1FVPROC glad_glMultiTexCoord1fv;
extern PFNGLMULTITEXCOORD1FVARBPROC glad_glMultiTexCoord1fvARB;
extern PFNGLMULTITEXCOORD1IPROC glad_glMultiTexCoord1i;
extern PFNGLMULTITEXCOORD1IARBPROC glad_glMultiTexCoord1iARB;
extern PFNGLMULTITEXCOORD1IVPROC glad_glMultiTexCoord1iv;
extern PFNGLMULTITEXCOORD1IVARBPROC glad_glMultiTexCoord1ivARB;
extern PFNGLMULTITEXCOORD1SPROC glad_glMultiTexCoord1s;
extern PFNGLMULTITEXCOORD1SARBPROC glad_glMultiTexCoord1sARB;
extern PFNGLMULTITEXCOORD1SVPROC glad_glMultiTexCoord1sv;
extern PFNGLMULTITEXCOORD1SVARBPROC glad_glMultiTexCoord1svARB;
extern PFNGLMULTITEXCOORD2DPROC glad_glMultiTexCoord2d;
extern PFNGLMULTITEXCOORD2DARBPROC glad_glMultiTexCoord2dARB;
extern PFNGLMULTITEXCOORD2DVPROC glad_glMultiTexCoord2dv;
extern PFNGLMULTITEXCOORD2DVARBPROC glad_glMultiTexCoord2dvARB;
extern PFNGLMULTITEXCOORD2FPROC glad_glMultiTexCoord2f;
extern PFNGLMULTITEXCOORD2FARBPROC glad_glMultiTexCoord2fARB;
extern PFNGLMULTITEXCOORD2FVPROC glad_glMultiTexCoord2fv;
extern PFNGLMULTITEXCOORD2FVARBPROC glad_glMultiTexCoord2fvARB;
extern PFNGLMULTITEXCOORD2IPROC glad_glMultiTexCoord2i;
extern PFNGLMULTITEXCOORD2IARBPROC glad_glMultiTexCoord2iARB;
extern PFNGLMULTITEXCOORD2IVPROC glad_glMultiTexCoord2iv;
extern PFNGLMULTITEXCOORD2IVARBPROC glad_glMultiTexCoord2ivARB;
extern PFNGLMULTITEXCOORD2SPROC glad_glMultiTexCoord2s;
extern PFNGLMULTITEXCOORD2SARBPROC glad_glMultiTexCoord2sARB;
extern PFNGLMULTITEXCOORD2SVPROC glad_glMultiTexCoord2sv;
extern PFNGLMULTITEXCOORD2SVARBPROC glad_glMultiTexCoord2svARB;
extern PFNGLMULTITEXCOORD3DPROC glad_glMultiTexCoord3d;
extern PFNGLMULTITEXCOORD3DARBPROC glad_glMultiTexCoord3dARB;
extern PFNGLMULTITEXCOORD3DVPROC glad_glMultiTexCoord3dv;
extern PFNGLMULTITEXCOORD3DVARBPROC glad_glMultiTexCoord3dvARB;
extern PFNGLMULTITEXCOORD3FPROC glad_glMultiTexCoord3f;
extern PFNGLMULTITEXCOORD3FARBPROC glad_glMultiTexCoord3fARB;
extern PFNGLMULTITEXCOORD3FVPROC glad_glMultiTexCoord3fv;
extern PFNGLMULTITEXCOORD3FVARBPROC glad_glMultiTexCoord3fvARB;
extern PFNGLMULTITEXCOORD3IPROC glad_glMultiTexCoord3i;
extern PFNGLMULTITEXCOORD3IARBPROC glad_glMultiTexCoord3iARB;
extern PFNGLMULTITEXCOORD3IVPROC glad_glMultiTexCoord3iv;
extern PFNGLMULTITEXCOORD3IVARBPROC glad_glMultiTexCoord3ivARB;
extern PFNGLMULTITEXCOORD3SPROC glad_glMultiTexCoord3s;
extern PFNGLMULTITEXCOORD3SARBPROC glad_glMultiTexCoord3sARB;
extern PFNGLMULTITEXCOORD3SVPROC glad_glMultiTexCoord3sv;
extern PFNGLMULTITEXCOORD3SVARBPROC glad_glMultiTexCoord3svARB;
extern PFNGLMULTITEXCOORD4DPROC glad_glMultiTexCoord4d;
extern PFNGLMULTITEXCOORD4DARBPROC glad_glMultiTexCoord4dARB;
extern PFNGLMULTITEXCOORD4DVPROC glad_glMultiTexCoord4dv;
extern PFNGLMULTITEXCOORD4DVARBPROC glad_glMultiTexCoord4dvARB;
extern PFNGLMULTITEXCOORD4FPROC glad_glMultiTexCoord4f;
extern PFNGLMULTITEXCOORD4FARBPROC glad_glMultiTexCoord4fARB;
extern PFNGLMULTITEXCOORD4FVPROC glad_glMultiTexCoord4fv;
extern PFNGLMULTITEXCOORD4FVARBPROC glad_glMultiTexCoord4fvARB;
extern PFNGLMULTITEXCOORD4IPROC glad_glMultiTexCoord4i;
extern PFNGLMULTITEXCOORD4IARBPROC glad_glMultiTexCoord4iARB;
extern PFNGLMULTITEXCOORD4IVPROC glad_glMultiTexCoord4iv;
extern PFNGLMULTITEXCOORD4IVARBPROC glad_glMultiTexCoord4ivARB;
extern PFNGLMULTITEXCOORD4SPROC glad_glMultiTexCoord4s;
extern PFNGLMULTITEXCOORD4SARBPROC glad_glMultiTexCoord4sARB;
extern PFNGLMULTITEXCOORD4SVPROC glad_glMultiTexCoord4sv;
extern PFNGLMULTITEXCOORD4SVARBPROC glad_glMultiTexCoord4svARB;
extern PFNGLMULTITEXCOORDP1UIPROC glad_glMultiTexCoordP1ui;
extern PFNGLMULTITEXCOORDP1UIVPROC glad_glMultiTexCoordP1uiv;
extern PFNGLMULTITEXCOORDP2UIPROC glad_glMultiTexCoordP2ui;
extern PFNGLMULTITEXCOORDP2UIVPROC glad_glMultiTexCoordP2uiv;
extern PFNGLMULTITEXCOORDP3UIPROC glad_glMultiTexCoordP3ui;
extern PFNGLMULTITEXCOORDP3UIVPROC glad_glMultiTexCoordP3uiv;
extern PFNGLMULTITEXCOORDP4UIPROC glad_glMultiTexCoordP4ui;
extern PFNGLMULTITEXCOORDP4UIVPROC glad_glMultiTexCoordP4uiv;
extern PFNGLNAMEDBUFFERDATAPROC glad_glNamedBufferData;
extern PFNGLNAMEDBUFFERPAGECOMMITMENTARBPROC glad_glNamedBufferPageCommitmentARB;
extern PFNGLNAMEDBUFFERPAGECOMMITMENTEXTPROC glad_glNamedBufferPageCommitmentEXT;
extern PFNGLNAMEDBUFFERSTORAGEPROC glad_glNamedBufferStorage;
extern PFNGLNAMEDBUFFERSUBDATAPROC glad_glNamedBufferSubData;
extern PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC glad_glNamedFramebufferDrawBuffer;
extern PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC glad_glNamedFramebufferDrawBuffers;
extern PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC glad_glNamedFramebufferParameteri;
extern PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC glad_glNamedFramebufferReadBuffer;
extern PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC glad_glNamedFramebufferRenderbuffer;
extern PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARBPROC glad_glNamedFramebufferSampleLocationsfvARB;
extern PFNGLNAMEDFRAMEBUFFERTEXTUREPROC glad_glNamedFramebufferTexture;
extern PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC glad_glNamedFramebufferTextureLayer;
extern PFNGLNAMEDRENDERBUFFERSTORAGEPROC glad_glNamedRenderbufferStorage;
extern PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC glad_glNamedRenderbufferStorageMultisample;
extern PFNGLNAMEDSTRINGARBPROC glad_glNamedStringARB;
extern PFNGLNEWLISTPROC glad_glNewList;
extern PFNGLNORMAL3BPROC glad_glNormal3b;
extern PFNGLNORMAL3BVPROC glad_glNormal3bv;
extern PFNGLNORMAL3DPROC glad_glNormal3d;
extern PFNGLNORMAL3DVPROC glad_glNormal3dv;
extern PFNGLNORMAL3FPROC glad_glNormal3f;
extern PFNGLNORMAL3FVPROC glad_glNormal3fv;
extern PFNGLNORMAL3IPROC glad_glNormal3i;
extern PFNGLNORMAL3IVPROC glad_glNormal3iv;
extern PFNGLNORMAL3SPROC glad_glNormal3s;
extern PFNGLNORMAL3SVPROC glad_glNormal3sv;
extern PFNGLNORMALP3UIPROC glad_glNormalP3ui;
extern PFNGLNORMALP3UIVPROC glad_glNormalP3uiv;
extern PFNGLNORMALPOINTERPROC glad_glNormalPointer;
extern PFNGLOBJECTLABELPROC glad_glObjectLabel;
extern PFNGLOBJECTPTRLABELPROC glad_glObjectPtrLabel;
extern PFNGLORTHOPROC glad_glOrtho;
extern PFNGLPASSTHROUGHPROC glad_glPassThrough;
extern PFNGLPATCHPARAMETERFVPROC glad_glPatchParameterfv;
extern PFNGLPATCHPARAMETERIPROC glad_glPatchParameteri;
extern PFNGLPAUSETRANSFORMFEEDBACKPROC glad_glPauseTransformFeedback;
extern PFNGLPIXELMAPFVPROC glad_glPixelMapfv;
extern PFNGLPIXELMAPUIVPROC glad_glPixelMapuiv;
extern PFNGLPIXELMAPUSVPROC glad_glPixelMapusv;
extern PFNGLPIXELSTOREFPROC glad_glPixelStoref;
extern PFNGLPIXELSTOREIPROC glad_glPixelStorei;
extern PFNGLPIXELTRANSFERFPROC glad_glPixelTransferf;
extern PFNGLPIXELTRANSFERIPROC glad_glPixelTransferi;
extern PFNGLPIXELZOOMPROC glad_glPixelZoom;
extern PFNGLPOINTPARAMETERFPROC glad_glPointParameterf;
extern PFNGLPOINTPARAMETERFARBPROC glad_glPointParameterfARB;
extern PFNGLPOINTPARAMETERFVPROC glad_glPointParameterfv;
extern PFNGLPOINTPARAMETERFVARBPROC glad_glPointParameterfvARB;
extern PFNGLPOINTPARAMETERIPROC glad_glPointParameteri;
extern PFNGLPOINTPARAMETERIVPROC glad_glPointParameteriv;
extern PFNGLPOINTSIZEPROC glad_glPointSize;
extern PFNGLPOLYGONMODEPROC glad_glPolygonMode;
extern PFNGLPOLYGONOFFSETPROC glad_glPolygonOffset;
extern PFNGLPOLYGONOFFSETCLAMPPROC glad_glPolygonOffsetClamp;
extern PFNGLPOLYGONSTIPPLEPROC glad_glPolygonStipple;
extern PFNGLPOPATTRIBPROC glad_glPopAttrib;
extern PFNGLPOPCLIENTATTRIBPROC glad_glPopClientAttrib;
extern PFNGLPOPDEBUGGROUPPROC glad_glPopDebugGroup;
extern PFNGLPOPMATRIXPROC glad_glPopMatrix;
extern PFNGLPOPNAMEPROC glad_glPopName;
extern PFNGLPRIMITIVEBOUNDINGBOXPROC glad_glPrimitiveBoundingBox;
extern PFNGLPRIMITIVEBOUNDINGBOXARBPROC glad_glPrimitiveBoundingBoxARB;
extern PFNGLPRIMITIVERESTARTINDEXPROC glad_glPrimitiveRestartIndex;
extern PFNGLPRIORITIZETEXTURESPROC glad_glPrioritizeTextures;
extern PFNGLPROGRAMBINARYPROC glad_glProgramBinary;
extern PFNGLPROGRAMENVPARAMETER4DARBPROC glad_glProgramEnvParameter4dARB;
extern PFNGLPROGRAMENVPARAMETER4DVARBPROC glad_glProgramEnvParameter4dvARB;
extern PFNGLPROGRAMENVPARAMETER4FARBPROC glad_glProgramEnvParameter4fARB;
extern PFNGLPROGRAMENVPARAMETER4FVARBPROC glad_glProgramEnvParameter4fvARB;
extern PFNGLPROGRAMLOCALPARAMETER4DARBPROC glad_glProgramLocalParameter4dARB;
extern PFNGLPROGRAMLOCALPARAMETER4DVARBPROC glad_glProgramLocalParameter4dvARB;
extern PFNGLPROGRAMLOCALPARAMETER4FARBPROC glad_glProgramLocalParameter4fARB;
extern PFNGLPROGRAMLOCALPARAMETER4FVARBPROC glad_glProgramLocalParameter4fvARB;
extern PFNGLPROGRAMPARAMETERIPROC glad_glProgramParameteri;
extern PFNGLPROGRAMPARAMETERIARBPROC glad_glProgramParameteriARB;
extern PFNGLPROGRAMSTRINGARBPROC glad_glProgramStringARB;
extern PFNGLPROGRAMUNIFORM1DPROC glad_glProgramUniform1d;
extern PFNGLPROGRAMUNIFORM1DVPROC glad_glProgramUniform1dv;
extern PFNGLPROGRAMUNIFORM1FPROC glad_glProgramUniform1f;
extern PFNGLPROGRAMUNIFORM1FVPROC glad_glProgramUniform1fv;
extern PFNGLPROGRAMUNIFORM1IPROC glad_glProgramUniform1i;
extern PFNGLPROGRAMUNIFORM1I64ARBPROC glad_glProgramUniform1i64ARB;
extern PFNGLPROGRAMUNIFORM1I64VARBPROC glad_glProgramUniform1i64vARB;
extern PFNGLPROGRAMUNIFORM1IVPROC glad_glProgramUniform1iv;
extern PFNGLPROGRAMUNIFORM1UIPROC glad_glProgramUniform1ui;
extern PFNGLPROGRAMUNIFORM1UI64ARBPROC glad_glProgramUniform1ui64ARB;
extern PFNGLPROGRAMUNIFORM1UI64VARBPROC glad_glProgramUniform1ui64vARB;
extern PFNGLPROGRAMUNIFORM1UIVPROC glad_glProgramUniform1uiv;
extern PFNGLPROGRAMUNIFORM2DPROC glad_glProgramUniform2d;
extern PFNGLPROGRAMUNIFORM2DVPROC glad_glProgramUniform2dv;
extern PFNGLPROGRAMUNIFORM2FPROC glad_glProgramUniform2f;
extern PFNGLPROGRAMUNIFORM2FVPROC glad_glProgramUniform2fv;
extern PFNGLPROGRAMUNIFORM2IPROC glad_glProgramUniform2i;
extern PFNGLPROGRAMUNIFORM2I64ARBPROC glad_glProgramUniform2i64ARB;
extern PFNGLPROGRAMUNIFORM2I64VARBPROC glad_glProgramUniform2i64vARB;
extern PFNGLPROGRAMUNIFORM2IVPROC glad_glProgramUniform2iv;
extern PFNGLPROGRAMUNIFORM2UIPROC glad_glProgramUniform2ui;
extern PFNGLPROGRAMUNIFORM2UI64ARBPROC glad_glProgramUniform2ui64ARB;
extern PFNGLPROGRAMUNIFORM2UI64VARBPROC glad_glProgramUniform2ui64vARB;
extern PFNGLPROGRAMUNIFORM2UIVPROC glad_glProgramUniform2uiv;
extern PFNGLPROGRAMUNIFORM3DPROC glad_glProgramUniform3d;
extern PFNGLPROGRAMUNIFORM3DVPROC glad_glProgramUniform3dv;
extern PFNGLPROGRAMUNIFORM3FPROC glad_glProgramUniform3f;
extern PFNGLPROGRAMUNIFORM3FVPROC glad_glProgramUniform3fv;
extern PFNGLPROGRAMUNIFORM3IPROC glad_glProgramUniform3i;
extern PFNGLPROGRAMUNIFORM3I64ARBPROC glad_glProgramUniform3i64ARB;
extern PFNGLPROGRAMUNIFORM3I64VARBPROC glad_glProgramUniform3i64vARB;
extern PFNGLPROGRAMUNIFORM3IVPROC glad_glProgramUniform3iv;
extern PFNGLPROGRAMUNIFORM3UIPROC glad_glProgramUniform3ui;
extern PFNGLPROGRAMUNIFORM3UI64ARBPROC glad_glProgramUniform3ui64ARB;
extern PFNGLPROGRAMUNIFORM3UI64VARBPROC glad_glProgramUniform3ui64vARB;
extern PFNGLPROGRAMUNIFORM3UIVPROC glad_glProgramUniform3uiv;
extern PFNGLPROGRAMUNIFORM4DPROC glad_glProgramUniform4d;
extern PFNGLPROGRAMUNIFORM4DVPROC glad_glProgramUniform4dv;
extern PFNGLPROGRAMUNIFORM4FPROC glad_glProgramUniform4f;
extern PFNGLPROGRAMUNIFORM4FVPROC glad_glProgramUniform4fv;
extern PFNGLPROGRAMUNIFORM4IPROC glad_glProgramUniform4i;
extern PFNGLPROGRAMUNIFORM4I64ARBPROC glad_glProgramUniform4i64ARB;
extern PFNGLPROGRAMUNIFORM4I64VARBPROC glad_glProgramUniform4i64vARB;
extern PFNGLPROGRAMUNIFORM4IVPROC glad_glProgramUniform4iv;
extern PFNGLPROGRAMUNIFORM4UIPROC glad_glProgramUniform4ui;
extern PFNGLPROGRAMUNIFORM4UI64ARBPROC glad_glProgramUniform4ui64ARB;
extern PFNGLPROGRAMUNIFORM4UI64VARBPROC glad_glProgramUniform4ui64vARB;
extern PFNGLPROGRAMUNIFORM4UIVPROC glad_glProgramUniform4uiv;
extern PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC glad_glProgramUniformHandleui64ARB;
extern PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC glad_glProgramUniformHandleui64vARB;
extern PFNGLPROGRAMUNIFORMMATRIX2DVPROC glad_glProgramUniformMatrix2dv;
extern PFNGLPROGRAMUNIFORMMATRIX2FVPROC glad_glProgramUniformMatrix2fv;
extern PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC glad_glProgramUniformMatrix2x3dv;
extern PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC glad_glProgramUniformMatrix2x3fv;
extern PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC glad_glProgramUniformMatrix2x4dv;
extern PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC glad_glProgramUniformMatrix2x4fv;
extern PFNGLPROGRAMUNIFORMMATRIX3DVPROC glad_glProgramUniformMatrix3dv;
extern PFNGLPROGRAMUNIFORMMATRIX3FVPROC glad_glProgramUniformMatrix3fv;
extern PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC glad_glProgramUniformMatrix3x2dv;
extern PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC glad_glProgramUniformMatrix3x2fv;
extern PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC glad_glProgramUniformMatrix3x4dv;
extern PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC glad_glProgramUniformMatrix3x4fv;
extern PFNGLPROGRAMUNIFORMMATRIX4DVPROC glad_glProgramUniformMatrix4dv;
extern PFNGLPROGRAMUNIFORMMATRIX4FVPROC glad_glProgramUniformMatrix4fv;
extern PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC glad_glProgramUniformMatrix4x2dv;
extern PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC glad_glProgramUniformMatrix4x2fv;
extern PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC glad_glProgramUniformMatrix4x3dv;
extern PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC glad_glProgramUniformMatrix4x3fv;
extern PFNGLPROVOKINGVERTEXPROC glad_glProvokingVertex;
extern PFNGLPUSHATTRIBPROC glad_glPushAttrib;
extern PFNGLPUSHCLIENTATTRIBPROC glad_glPushClientAttrib;
extern PFNGLPUSHDEBUGGROUPPROC glad_glPushDebugGroup;
extern PFNGLPUSHMATRIXPROC glad_glPushMatrix;
extern PFNGLPUSHNAMEPROC glad_glPushName;
extern PFNGLQUERYCOUNTERPROC glad_glQueryCounter;
extern PFNGLRASTERPOS2DPROC glad_glRasterPos2d;
extern PFNGLRASTERPOS2DVPROC glad_glRasterPos2dv;
extern PFNGLRASTERPOS2FPROC glad_glRasterPos2f;
extern PFNGLRASTERPOS2FVPROC glad_glRasterPos2fv;
extern PFNGLRASTERPOS2IPROC glad_glRasterPos2i;
extern PFNGLRASTERPOS2IVPROC glad_glRasterPos2iv;
extern PFNGLRASTERPOS2SPROC glad_glRasterPos2s;
extern PFNGLRASTERPOS2SVPROC glad_glRasterPos2sv;
extern PFNGLRASTERPOS3DPROC glad_glRasterPos3d;
extern PFNGLRASTERPOS3DVPROC glad_glRasterPos3dv;
extern PFNGLRASTERPOS3FPROC glad_glRasterPos3f;
extern PFNGLRASTERPOS3FVPROC glad_glRasterPos3fv;
extern PFNGLRASTERPOS3IPROC glad_glRasterPos3i;
extern PFNGLRASTERPOS3IVPROC glad_glRasterPos3iv;
extern PFNGLRASTERPOS3SPROC glad_glRasterPos3s;
extern PFNGLRASTERPOS3SVPROC glad_glRasterPos3sv;
extern PFNGLRASTERPOS4DPROC glad_glRasterPos4d;
extern PFNGLRASTERPOS4DVPROC glad_glRasterPos4dv;
extern PFNGLRASTERPOS4FPROC glad_glRasterPos4f;
extern PFNGLRASTERPOS4FVPROC glad_glRasterPos4fv;
extern PFNGLRASTERPOS4IPROC glad_glRasterPos4i;
extern PFNGLRASTERPOS4IVPROC glad_glRasterPos4iv;
extern PFNGLRASTERPOS4SPROC glad_glRasterPos4s;
extern PFNGLRASTERPOS4SVPROC glad_glRasterPos4sv;
extern PFNGLREADBUFFERPROC glad_glReadBuffer;
extern PFNGLREADPIXELSPROC glad_glReadPixels;
extern PFNGLREADNPIXELSPROC glad_glReadnPixels;
extern PFNGLREADNPIXELSARBPROC glad_glReadnPixelsARB;
extern PFNGLRECTDPROC glad_glRectd;
extern PFNGLRECTDVPROC glad_glRectdv;
extern PFNGLRECTFPROC glad_glRectf;
extern PFNGLRECTFVPROC glad_glRectfv;
extern PFNGLRECTIPROC glad_glRecti;
extern PFNGLRECTIVPROC glad_glRectiv;
extern PFNGLRECTSPROC glad_glRects;
extern PFNGLRECTSVPROC glad_glRectsv;
extern PFNGLRELEASESHADERCOMPILERPROC glad_glReleaseShaderCompiler;
extern PFNGLRENDERMODEPROC glad_glRenderMode;
extern PFNGLRENDERBUFFERSTORAGEPROC glad_glRenderbufferStorage;
extern PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC glad_glRenderbufferStorageMultisample;
extern PFNGLRESETHISTOGRAMPROC glad_glResetHistogram;
extern PFNGLRESETMINMAXPROC glad_glResetMinmax;
extern PFNGLRESUMETRANSFORMFEEDBACKPROC glad_glResumeTransformFeedback;
extern PFNGLROTATEDPROC glad_glRotated;
extern PFNGLROTATEFPROC glad_glRotatef;
extern PFNGLSAMPLECOVERAGEPROC glad_glSampleCoverage;
extern PFNGLSAMPLECOVERAGEARBPROC glad_glSampleCoverageARB;
extern PFNGLSAMPLEMASKIPROC glad_glSampleMaski;
extern PFNGLSAMPLERPARAMETERIIVPROC glad_glSamplerParameterIiv;
extern PFNGLSAMPLERPARAMETERIUIVPROC glad_glSamplerParameterIuiv;
extern PFNGLSAMPLERPARAMETERFPROC glad_glSamplerParameterf;
extern PFNGLSAMPLERPARAMETERFVPROC glad_glSamplerParameterfv;
extern PFNGLSAMPLERPARAMETERIPROC glad_glSamplerParameteri;
extern PFNGLSAMPLERPARAMETERIVPROC glad_glSamplerParameteriv;
extern PFNGLSCALEDPROC glad_glScaled;
extern PFNGLSCALEFPROC glad_glScalef;
extern PFNGLSCISSORPROC glad_glScissor;
extern PFNGLSCISSORARRAYVPROC glad_glScissorArrayv;
extern PFNGLSCISSORINDEXEDPROC glad_glScissorIndexed;
extern PFNGLSCISSORINDEXEDVPROC glad_glScissorIndexedv;
extern PFNGLSECONDARYCOLOR3BPROC glad_glSecondaryColor3b;
extern PFNGLSECONDARYCOLOR3BVPROC glad_glSecondaryColor3bv;
extern PFNGLSECONDARYCOLOR3DPROC glad_glSecondaryColor3d;
extern PFNGLSECONDARYCOLOR3DVPROC glad_glSecondaryColor3dv;
extern PFNGLSECONDARYCOLOR3FPROC glad_glSecondaryColor3f;
extern PFNGLSECONDARYCOLOR3FVPROC glad_glSecondaryColor3fv;
extern PFNGLSECONDARYCOLOR3IPROC glad_glSecondaryColor3i;
extern PFNGLSECONDARYCOLOR3IVPROC glad_glSecondaryColor3iv;
extern PFNGLSECONDARYCOLOR3SPROC glad_glSecondaryColor3s;
extern PFNGLSECONDARYCOLOR3SVPROC glad_glSecondaryColor3sv;
extern PFNGLSECONDARYCOLOR3UBPROC glad_glSecondaryColor3ub;
extern PFNGLSECONDARYCOLOR3UBVPROC glad_glSecondaryColor3ubv;
extern PFNGLSECONDARYCOLOR3UIPROC glad_glSecondaryColor3ui;
extern PFNGLSECONDARYCOLOR3UIVPROC glad_glSecondaryColor3uiv;
extern PFNGLSECONDARYCOLOR3USPROC glad_glSecondaryColor3us;
extern PFNGLSECONDARYCOLOR3USVPROC glad_glSecondaryColor3usv;
extern PFNGLSECONDARYCOLORP3UIPROC glad_glSecondaryColorP3ui;
extern PFNGLSECONDARYCOLORP3UIVPROC glad_glSecondaryColorP3uiv;
extern PFNGLSECONDARYCOLORPOINTERPROC glad_glSecondaryColorPointer;
extern PFNGLSELECTBUFFERPROC glad_glSelectBuffer;
extern PFNGLSEPARABLEFILTER2DPROC glad_glSeparableFilter2D;
extern PFNGLSHADEMODELPROC glad_glShadeModel;
extern PFNGLSHADERBINARYPROC glad_glShaderBinary;
extern PFNGLSHADERSOURCEPROC glad_glShaderSource;
extern PFNGLSHADERSOURCEARBPROC glad_glShaderSourceARB;
extern PFNGLSHADERSTORAGEBLOCKBINDINGPROC glad_glShaderStorageBlockBinding;
extern PFNGLSPECIALIZESHADERPROC glad_glSpecializeShader;
extern PFNGLSPECIALIZESHADERARBPROC glad_glSpecializeShaderARB;
extern PFNGLSTENCILFUNCPROC glad_glStencilFunc;
extern PFNGLSTENCILFUNCSEPARATEPROC glad_glStencilFuncSeparate;
extern PFNGLSTENCILMASKPROC glad_glStencilMask;
extern PFNGLSTENCILMASKSEPARATEPROC glad_glStencilMaskSeparate;
extern PFNGLSTENCILOPPROC glad_glStencilOp;
extern PFNGLSTENCILOPSEPARATEPROC glad_glStencilOpSeparate;
extern PFNGLTEXBUFFERPROC glad_glTexBuffer;
extern PFNGLTEXBUFFERARBPROC glad_glTexBufferARB;
extern PFNGLTEXBUFFERRANGEPROC glad_glTexBufferRange;
extern PFNGLTEXCOORD1DPROC glad_glTexCoord1d;
extern PFNGLTEXCOORD1DVPROC glad_glTexCoord1dv;
extern PFNGLTEXCOORD1FPROC glad_glTexCoord1f;
extern PFNGLTEXCOORD1FVPROC glad_glTexCoord1fv;
extern PFNGLTEXCOORD1IPROC glad_glTexCoord1i;
extern PFNGLTEXCOORD1IVPROC glad_glTexCoord1iv;
extern PFNGLTEXCOORD1SPROC glad_glTexCoord1s;
extern PFNGLTEXCOORD1SVPROC glad_glTexCoord1sv;
extern PFNGLTEXCOORD2DPROC glad_glTexCoord2d;
extern PFNGLTEXCOORD2DVPROC glad_glTexCoord2dv;
extern PFNGLTEXCOORD2FPROC glad_glTexCoord2f;
extern PFNGLTEXCOORD2FVPROC glad_glTexCoord2fv;
extern PFNGLTEXCOORD2IPROC glad_glTexCoord2i;
extern PFNGLTEXCOORD2IVPROC glad_glTexCoord2iv;
extern PFNGLTEXCOORD2SPROC glad_glTexCoord2s;
extern PFNGLTEXCOORD2SVPROC glad_glTexCoord2sv;
extern PFNGLTEXCOORD3DPROC glad_glTexCoord3d;
extern PFNGLTEXCOORD3DVPROC glad_glTexCoord3dv;
extern PFNGLTEXCOORD3FPROC glad_glTexCoord3f;
extern PFNGLTEXCOORD3FVPROC glad_glTexCoord3fv;
extern PFNGLTEXCOORD3IPROC glad_glTexCoord3i;
extern PFNGLTEXCOORD3IVPROC glad_glTexCoord3iv;
extern PFNGLTEXCOORD3SPROC glad_glTexCoord3s;
extern PFNGLTEXCOORD3SVPROC glad_glTexCoord3sv;
extern PFNGLTEXCOORD4DPROC glad_glTexCoord4d;
extern PFNGLTEXCOORD4DVPROC glad_glTexCoord4dv;
extern PFNGLTEXCOORD4FPROC glad_glTexCoord4f;
extern PFNGLTEXCOORD4FVPROC glad_glTexCoord4fv;
extern PFNGLTEXCOORD4IPROC glad_glTexCoord4i;
extern PFNGLTEXCOORD4IVPROC glad_glTexCoord4iv;
extern PFNGLTEXCOORD4SPROC glad_glTexCoord4s;
extern PFNGLTEXCOORD4SVPROC glad_glTexCoord4sv;
extern PFNGLTEXCOORDP1UIPROC glad_glTexCoordP1ui;
extern PFNGLTEXCOORDP1UIVPROC glad_glTexCoordP1uiv;
extern PFNGLTEXCOORDP2UIPROC glad_glTexCoordP2ui;
extern PFNGLTEXCOORDP2UIVPROC glad_glTexCoordP2uiv;
extern PFNGLTEXCOORDP3UIPROC glad_glTexCoordP3ui;
extern PFNGLTEXCOORDP3UIVPROC glad_glTexCoordP3uiv;
extern PFNGLTEXCOORDP4UIPROC glad_glTexCoordP4ui;
extern PFNGLTEXCOORDP4UIVPROC glad_glTexCoordP4uiv;
extern PFNGLTEXCOORDPOINTERPROC glad_glTexCoordPointer;
extern PFNGLTEXENVFPROC glad_glTexEnvf;
extern PFNGLTEXENVFVPROC glad_glTexEnvfv;
extern PFNGLTEXENVIPROC glad_glTexEnvi;
extern PFNGLTEXENVIVPROC glad_glTexEnviv;
extern PFNGLTEXGENDPROC glad_glTexGend;
extern PFNGLTEXGENDVPROC glad_glTexGendv;
extern PFNGLTEXGENFPROC glad_glTexGenf;
extern PFNGLTEXGENFVPROC glad_glTexGenfv;
extern PFNGLTEXGENIPROC glad_glTexGeni;
extern PFNGLTEXGENIVPROC glad_glTexGeniv;
extern PFNGLTEXIMAGE1DPROC glad_glTexImage1D;
extern PFNGLTEXIMAGE2DPROC glad_glTexImage2D;
extern PFNGLTEXIMAGE2DMULTISAMPLEPROC glad_glTexImage2DMultisample;
extern PFNGLTEXIMAGE3DPROC glad_glTexImage3D;
extern PFNGLTEXIMAGE3DMULTISAMPLEPROC glad_glTexImage3DMultisample;
extern PFNGLTEXPAGECOMMITMENTARBPROC glad_glTexPageCommitmentARB;
extern PFNGLTEXPARAMETERIIVPROC glad_glTexParameterIiv;
extern PFNGLTEXPARAMETERIUIVPROC glad_glTexParameterIuiv;
extern PFNGLTEXPARAMETERFPROC glad_glTexParameterf;
extern PFNGLTEXPARAMETERFVPROC glad_glTexParameterfv;
extern PFNGLTEXPARAMETERIPROC glad_glTexParameteri;
extern PFNGLTEXPARAMETERIVPROC glad_glTexParameteriv;
extern PFNGLTEXSTORAGE1DPROC glad_glTexStorage1D;
extern PFNGLTEXSTORAGE2DPROC glad_glTexStorage2D;
extern PFNGLTEXSTORAGE2DMULTISAMPLEPROC glad_glTexStorage2DMultisample;
extern PFNGLTEXSTORAGE3DPROC glad_glTexStorage3D;
extern PFNGLTEXSTORAGE3DMULTISAMPLEPROC glad_glTexStorage3DMultisample;
extern PFNGLTEXSUBIMAGE1DPROC glad_glTexSubImage1D;
extern PFNGLTEXSUBIMAGE2DPROC glad_glTexSubImage2D;
extern PFNGLTEXSUBIMAGE3DPROC glad_glTexSubImage3D;
extern PFNGLTEXTUREBARRIERPROC glad_glTextureBarrier;
extern PFNGLTEXTUREBUFFERPROC glad_glTextureBuffer;
extern PFNGLTEXTUREBUFFERRANGEPROC glad_glTextureBufferRange;
extern PFNGLTEXTUREPARAMETERIIVPROC glad_glTextureParameterIiv;
extern PFNGLTEXTUREPARAMETERIUIVPROC glad_glTextureParameterIuiv;
extern PFNGLTEXTUREPARAMETERFPROC glad_glTextureParameterf;
extern PFNGLTEXTUREPARAMETERFVPROC glad_glTextureParameterfv;
extern PFNGLTEXTUREPARAMETERIPROC glad_glTextureParameteri;
extern PFNGLTEXTUREPARAMETERIVPROC glad_glTextureParameteriv;
extern PFNGLTEXTURESTORAGE1DPROC glad_glTextureStorage1D;
extern PFNGLTEXTURESTORAGE2DPROC glad_glTextureStorage2D;
extern PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC glad_glTextureStorage2DMultisample;
extern PFNGLTEXTURESTORAGE3DPROC glad_glTextureStorage3D;
extern PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC glad_glTextureStorage3DMultisample;
extern PFNGLTEXTURESUBIMAGE1DPROC glad_glTextureSubImage1D;
extern PFNGLTEXTURESUBIMAGE2DPROC glad_glTextureSubImage2D;
extern PFNGLTEXTURESUBIMAGE3DPROC glad_glTextureSubImage3D;
extern PFNGLTEXTUREVIEWPROC glad_glTextureView;
extern PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC glad_glTransformFeedbackBufferBase;
extern PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC glad_glTransformFeedbackBufferRange;
extern PFNGLTRANSFORMFEEDBACKVARYINGSPROC glad_glTransformFeedbackVaryings;
extern PFNGLTRANSLATEDPROC glad_glTranslated;
extern PFNGLTRANSLATEFPROC glad_glTranslatef;
extern PFNGLUNIFORM1DPROC glad_glUniform1d;
extern PFNGLUNIFORM1DVPROC glad_glUniform1dv;
extern PFNGLUNIFORM1FPROC glad_glUniform1f;
extern PFNGLUNIFORM1FARBPROC glad_glUniform1fARB;
extern PFNGLUNIFORM1FVPROC glad_glUniform1fv;
extern PFNGLUNIFORM1FVARBPROC glad_glUniform1fvARB;
extern PFNGLUNIFORM1IPROC glad_glUniform1i;
extern PFNGLUNIFORM1I64ARBPROC glad_glUniform1i64ARB;
extern PFNGLUNIFORM1I64VARBPROC glad_glUniform1i64vARB;
extern PFNGLUNIFORM1IARBPROC glad_glUniform1iARB;
extern PFNGLUNIFORM1IVPROC glad_glUniform1iv;
extern PFNGLUNIFORM1IVARBPROC glad_glUniform1ivARB;
extern PFNGLUNIFORM1UIPROC glad_glUniform1ui;
extern PFNGLUNIFORM1UI64ARBPROC glad_glUniform1ui64ARB;
extern PFNGLUNIFORM1UI64VARBPROC glad_glUniform1ui64vARB;
extern PFNGLUNIFORM1UIVPROC glad_glUniform1uiv;
extern PFNGLUNIFORM2DPROC glad_glUniform2d;
extern PFNGLUNIFORM2DVPROC glad_glUniform2dv;
extern PFNGLUNIFORM2FPROC glad_glUniform2f;
extern PFNGLUNIFORM2FARBPROC glad_glUniform2fARB;
extern PFNGLUNIFORM2FVPROC glad_glUniform2fv;
extern PFNGLUNIFORM2FVARBPROC glad_glUniform2fvARB;
extern PFNGLUNIFORM2IPROC glad_glUniform2i;
extern PFNGLUNIFORM2I64ARBPROC glad_glUniform2i64ARB;
extern PFNGLUNIFORM2I64VARBPROC glad_glUniform2i64vARB;
extern PFNGLUNIFORM2IARBPROC glad_glUniform2iARB;
extern PFNGLUNIFORM2IVPROC glad_glUniform2iv;
extern PFNGLUNIFORM2IVARBPROC glad_glUniform2ivARB;
extern PFNGLUNIFORM2UIPROC glad_glUniform2ui;
extern PFNGLUNIFORM2UI64ARBPROC glad_glUniform2ui64ARB;
extern PFNGLUNIFORM2UI64VARBPROC glad_glUniform2ui64vARB;
extern PFNGLUNIFORM2UIVPROC glad_glUniform2uiv;
extern PFNGLUNIFORM3DPROC glad_glUniform3d;
extern PFNGLUNIFORM3DVPROC glad_glUniform3dv;
extern PFNGLUNIFORM3FPROC glad_glUniform3f;
extern PFNGLUNIFORM3FARBPROC glad_glUniform3fARB;
extern PFNGLUNIFORM3FVPROC glad_glUniform3fv;
extern PFNGLUNIFORM3FVARBPROC glad_glUniform3fvARB;
extern PFNGLUNIFORM3IPROC glad_glUniform3i;
extern PFNGLUNIFORM3I64ARBPROC glad_glUniform3i64ARB;
extern PFNGLUNIFORM3I64VARBPROC glad_glUniform3i64vARB;
extern PFNGLUNIFORM3IARBPROC glad_glUniform3iARB;
extern PFNGLUNIFORM3IVPROC glad_glUniform3iv;
extern PFNGLUNIFORM3IVARBPROC glad_glUniform3ivARB;
extern PFNGLUNIFORM3UIPROC glad_glUniform3ui;
extern PFNGLUNIFORM3UI64ARBPROC glad_glUniform3ui64ARB;
extern PFNGLUNIFORM3UI64VARBPROC glad_glUniform3ui64vARB;
extern PFNGLUNIFORM3UIVPROC glad_glUniform3uiv;
extern PFNGLUNIFORM4DPROC glad_glUniform4d;
extern PFNGLUNIFORM4DVPROC glad_glUniform4dv;
extern PFNGLUNIFORM4FPROC glad_glUniform4f;
extern PFNGLUNIFORM4FARBPROC glad_glUniform4fARB;
extern PFNGLUNIFORM4FVPROC glad_glUniform4fv;
extern PFNGLUNIFORM4FVARBPROC glad_glUniform4fvARB;
extern PFNGLUNIFORM4IPROC glad_glUniform4i;
extern PFNGLUNIFORM4I64ARBPROC glad_glUniform4i64ARB;
extern PFNGLUNIFORM4I64VARBPROC glad_glUniform4i64vARB;
extern PFNGLUNIFORM4IARBPROC glad_glUniform4iARB;
extern PFNGLUNIFORM4IVPROC glad_glUniform4iv;
extern PFNGLUNIFORM4IVARBPROC glad_glUniform4ivARB;
extern PFNGLUNIFORM4UIPROC glad_glUniform4ui;
extern PFNGLUNIFORM4UI64ARBPROC glad_glUniform4ui64ARB;
extern PFNGLUNIFORM4UI64VARBPROC glad_glUniform4ui64vARB;
extern PFNGLUNIFORM4UIVPROC glad_glUniform4uiv;
extern PFNGLUNIFORMBLOCKBINDINGPROC glad_glUniformBlockBinding;
extern PFNGLUNIFORMHANDLEUI64ARBPROC glad_glUniformHandleui64ARB;
extern PFNGLUNIFORMHANDLEUI64VARBPROC glad_glUniformHandleui64vARB;
extern PFNGLUNIFORMMATRIX2DVPROC glad_glUniformMatrix2dv;
extern PFNGLUNIFORMMATRIX2FVPROC glad_glUniformMatrix2fv;
extern PFNGLUNIFORMMATRIX2FVARBPROC glad_glUniformMatrix2fvARB;
extern PFNGLUNIFORMMATRIX2X3DVPROC glad_glUniformMatrix2x3dv;
extern PFNGLUNIFORMMATRIX2X3FVPROC glad_glUniformMatrix2x3fv;
extern PFNGLUNIFORMMATRIX2X4DVPROC glad_glUniformMatrix2x4dv;
extern PFNGLUNIFORMMATRIX2X4FVPROC glad_glUniformMatrix2x4fv;
extern PFNGLUNIFORMMATRIX3DVPROC glad_glUniformMatrix3dv;
extern PFNGLUNIFORMMATRIX3FVPROC glad_glUniformMatrix3fv;
extern PFNGLUNIFORMMATRIX3FVARBPROC glad_glUniformMatrix3fvARB;
extern PFNGLUNIFORMMATRIX3X2DVPROC glad_glUniformMatrix3x2dv;
extern PFNGLUNIFORMMATRIX3X2FVPROC glad_glUniformMatrix3x2fv;
extern PFNGLUNIFORMMATRIX3X4DVPROC glad_glUniformMatrix3x4dv;
extern PFNGLUNIFORMMATRIX3X4FVPROC glad_glUniformMatrix3x4fv;
extern PFNGLUNIFORMMATRIX4DVPROC glad_glUniformMatrix4dv;
extern PFNGLUNIFORMMATRIX4FVPROC glad_glUniformMatrix4fv;
extern PFNGLUNIFORMMATRIX4FVARBPROC glad_glUniformMatrix4fvARB;
extern PFNGLUNIFORMMATRIX4X2DVPROC glad_glUniformMatrix4x2dv;
extern PFNGLUNIFORMMATRIX4X2FVPROC glad_glUniformMatrix4x2fv;
extern PFNGLUNIFORMMATRIX4X3DVPROC glad_glUniformMatrix4x3dv;
extern PFNGLUNIFORMMATRIX4X3FVPROC glad_glUniformMatrix4x3fv;
extern PFNGLUNIFORMSUBROUTINESUIVPROC glad_glUniformSubroutinesuiv;
extern PFNGLUNMAPBUFFERPROC glad_glUnmapBuffer;
extern PFNGLUNMAPBUFFERARBPROC glad_glUnmapBufferARB;
extern PFNGLUNMAPNAMEDBUFFERPROC glad_glUnmapNamedBuffer;
extern PFNGLUSEPROGRAMPROC glad_glUseProgram;
extern PFNGLUSEPROGRAMOBJECTARBPROC glad_glUseProgramObjectARB;
extern PFNGLUSEPROGRAMSTAGESPROC glad_glUseProgramStages;
extern PFNGLVALIDATEPROGRAMPROC glad_glValidateProgram;
extern PFNGLVALIDATEPROGRAMARBPROC glad_glValidateProgramARB;
extern PFNGLVALIDATEPROGRAMPIPELINEPROC glad_glValidateProgramPipeline;
extern PFNGLVERTEX2DPROC glad_glVertex2d;
extern PFNGLVERTEX2DVPROC glad_glVertex2dv;
extern PFNGLVERTEX2FPROC glad_glVertex2f;
extern PFNGLVERTEX2FVPROC glad_glVertex2fv;
extern PFNGLVERTEX2IPROC glad_glVertex2i;
extern PFNGLVERTEX2IVPROC glad_glVertex2iv;
extern PFNGLVERTEX2SPROC glad_glVertex2s;
extern PFNGLVERTEX2SVPROC glad_glVertex2sv;
extern PFNGLVERTEX3DPROC glad_glVertex3d;
extern PFNGLVERTEX3DVPROC glad_glVertex3dv;
extern PFNGLVERTEX3FPROC glad_glVertex3f;
extern PFNGLVERTEX3FVPROC glad_glVertex3fv;
extern PFNGLVERTEX3IPROC glad_glVertex3i;
extern PFNGLVERTEX3IVPROC glad_glVertex3iv;
extern PFNGLVERTEX3SPROC glad_glVertex3s;
extern PFNGLVERTEX3SVPROC glad_glVertex3sv;
extern PFNGLVERTEX4DPROC glad_glVertex4d;
extern PFNGLVERTEX4DVPROC glad_glVertex4dv;
extern PFNGLVERTEX4FPROC glad_glVertex4f;
extern PFNGLVERTEX4FVPROC glad_glVertex4fv;
extern PFNGLVERTEX4IPROC glad_glVertex4i;
extern PFNGLVERTEX4IVPROC glad_glVertex4iv;
extern PFNGLVERTEX4SPROC glad_glVertex4s;
extern PFNGLVERTEX4SVPROC glad_glVertex4sv;
extern PFNGLVERTEXARRAYATTRIBBINDINGPROC glad_glVertexArrayAttribBinding;
extern PFNGLVERTEXARRAYATTRIBFORMATPROC glad_glVertexArrayAttribFormat;
extern PFNGLVERTEXARRAYATTRIBIFORMATPROC glad_glVertexArrayAttribIFormat;
extern PFNGLVERTEXARRAYATTRIBLFORMATPROC glad_glVertexArrayAttribLFormat;
extern PFNGLVERTEXARRAYBINDINGDIVISORPROC glad_glVertexArrayBindingDivisor;
extern PFNGLVERTEXARRAYELEMENTBUFFERPROC glad_glVertexArrayElementBuffer;
extern PFNGLVERTEXARRAYVERTEXBUFFERPROC glad_glVertexArrayVertexBuffer;
extern PFNGLVERTEXARRAYVERTEXBUFFERSPROC glad_glVertexArrayVertexBuffers;
extern PFNGLVERTEXATTRIB1DPROC glad_glVertexAttrib1d;
extern PFNGLVERTEXATTRIB1DARBPROC glad_glVertexAttrib1dARB;
extern PFNGLVERTEXATTRIB1DVPROC glad_glVertexAttrib1dv;
extern PFNGLVERTEXATTRIB1DVARBPROC glad_glVertexAttrib1dvARB;
extern PFNGLVERTEXATTRIB1FPROC glad_glVertexAttrib1f;
extern PFNGLVERTEXATTRIB1FARBPROC glad_glVertexAttrib1fARB;
extern PFNGLVERTEXATTRIB1FVPROC glad_glVertexAttrib1fv;
extern PFNGLVERTEXATTRIB1FVARBPROC glad_glVertexAttrib1fvARB;
extern PFNGLVERTEXATTRIB1SPROC glad_glVertexAttrib1s;
extern PFNGLVERTEXATTRIB1SARBPROC glad_glVertexAttrib1sARB;
extern PFNGLVERTEXATTRIB1SVPROC glad_glVertexAttrib1sv;
extern PFNGLVERTEXATTRIB1SVARBPROC glad_glVertexAttrib1svARB;
extern PFNGLVERTEXATTRIB2DPROC glad_glVertexAttrib2d;
extern PFNGLVERTEXATTRIB2DARBPROC glad_glVertexAttrib2dARB;
extern PFNGLVERTEXATTRIB2DVPROC glad_glVertexAttrib2dv;
extern PFNGLVERTEXATTRIB2DVARBPROC glad_glVertexAttrib2dvARB;
extern PFNGLVERTEXATTRIB2FPROC glad_glVertexAttrib2f;
extern PFNGLVERTEXATTRIB2FARBPROC glad_glVertexAttrib2fARB;
extern PFNGLVERTEXATTRIB2FVPROC glad_glVertexAttrib2fv;
extern PFNGLVERTEXATTRIB2FVARBPROC glad_glVertexAttrib2fvARB;
extern PFNGLVERTEXATTRIB2SPROC glad_glVertexAttrib2s;
extern PFNGLVERTEXATTRIB2SARBPROC glad_glVertexAttrib2sARB;
extern PFNGLVERTEXATTRIB2SVPROC glad_glVertexAttrib2sv;
extern PFNGLVERTEXATTRIB2SVARBPROC glad_glVertexAttrib2svARB;
extern PFNGLVERTEXATTRIB3DPROC glad_glVertexAttrib3d;
extern PFNGLVERTEXATTRIB3DARBPROC glad_glVertexAttrib3dARB;
extern PFNGLVERTEXATTRIB3DVPROC glad_glVertexAttrib3dv;
extern PFNGLVERTEXATTRIB3DVARBPROC glad_glVertexAttrib3dvARB;
extern PFNGLVERTEXATTRIB3FPROC glad_glVertexAttrib3f;
extern PFNGLVERTEXATTRIB3FARBPROC glad_glVertexAttrib3fARB;
extern PFNGLVERTEXATTRIB3FVPROC glad_glVertexAttrib3fv;
extern PFNGLVERTEXATTRIB3FVARBPROC glad_glVertexAttrib3fvARB;
extern PFNGLVERTEXATTRIB3SPROC glad_glVertexAttrib3s;
extern PFNGLVERTEXATTRIB3SARBPROC glad_glVertexAttrib3sARB;
extern PFNGLVERTEXATTRIB3SVPROC glad_glVertexAttrib3sv;
extern PFNGLVERTEXATTRIB3SVARBPROC glad_glVertexAttrib3svARB;
extern PFNGLVERTEXATTRIB4NBVPROC glad_glVertexAttrib4Nbv;
extern PFNGLVERTEXATTRIB4NBVARBPROC glad_glVertexAttrib4NbvARB;
extern PFNGLVERTEXATTRIB4NIVPROC glad_glVertexAttrib4Niv;
extern PFNGLVERTEXATTRIB4NIVARBPROC glad_glVertexAttrib4NivARB;
extern PFNGLVERTEXATTRIB4NSVPROC glad_glVertexAttrib4Nsv;
extern PFNGLVERTEXATTRIB4NSVARBPROC glad_glVertexAttrib4NsvARB;
extern PFNGLVERTEXATTRIB4NUBPROC glad_glVertexAttrib4Nub;
extern PFNGLVERTEXATTRIB4NUBARBPROC glad_glVertexAttrib4NubARB;
extern PFNGLVERTEXATTRIB4NUBVPROC glad_glVertexAttrib4Nubv;
extern PFNGLVERTEXATTRIB4NUBVARBPROC glad_glVertexAttrib4NubvARB;
extern PFNGLVERTEXATTRIB4NUIVPROC glad_glVertexAttrib4Nuiv;
extern PFNGLVERTEXATTRIB4NUIVARBPROC glad_glVertexAttrib4NuivARB;
extern PFNGLVERTEXATTRIB4NUSVPROC glad_glVertexAttrib4Nusv;
extern PFNGLVERTEXATTRIB4NUSVARBPROC glad_glVertexAttrib4NusvARB;
extern PFNGLVERTEXATTRIB4BVPROC glad_glVertexAttrib4bv;
extern PFNGLVERTEXATTRIB4BVARBPROC glad_glVertexAttrib4bvARB;
extern PFNGLVERTEXATTRIB4DPROC glad_glVertexAttrib4d;
extern PFNGLVERTEXATTRIB4DARBPROC glad_glVertexAttrib4dARB;
extern PFNGLVERTEXATTRIB4DVPROC glad_glVertexAttrib4dv;
extern PFNGLVERTEXATTRIB4DVARBPROC glad_glVertexAttrib4dvARB;
extern PFNGLVERTEXATTRIB4FPROC glad_glVertexAttrib4f;
extern PFNGLVERTEXATTRIB4FARBPROC glad_glVertexAttrib4fARB;
extern PFNGLVERTEXATTRIB4FVPROC glad_glVertexAttrib4fv;
extern PFNGLVERTEXATTRIB4FVARBPROC glad_glVertexAttrib4fvARB;
extern PFNGLVERTEXATTRIB4IVPROC glad_glVertexAttrib4iv;
extern PFNGLVERTEXATTRIB4IVARBPROC glad_glVertexAttrib4ivARB;
extern PFNGLVERTEXATTRIB4SPROC glad_glVertexAttrib4s;
extern PFNGLVERTEXATTRIB4SARBPROC glad_glVertexAttrib4sARB;
extern PFNGLVERTEXATTRIB4SVPROC glad_glVertexAttrib4sv;
extern PFNGLVERTEXATTRIB4SVARBPROC glad_glVertexAttrib4svARB;
extern PFNGLVERTEXATTRIB4UBVPROC glad_glVertexAttrib4ubv;
extern PFNGLVERTEXATTRIB4UBVARBPROC glad_glVertexAttrib4ubvARB;
extern PFNGLVERTEXATTRIB4UIVPROC glad_glVertexAttrib4uiv;
extern PFNGLVERTEXATTRIB4UIVARBPROC glad_glVertexAttrib4uivARB;
extern PFNGLVERTEXATTRIB4USVPROC glad_glVertexAttrib4usv;
extern PFNGLVERTEXATTRIB4USVARBPROC glad_glVertexAttrib4usvARB;
extern PFNGLVERTEXATTRIBBINDINGPROC glad_glVertexAttribBinding;
extern PFNGLVERTEXATTRIBDIVISORPROC glad_glVertexAttribDivisor;
extern PFNGLVERTEXATTRIBDIVISORARBPROC glad_glVertexAttribDivisorARB;
extern PFNGLVERTEXATTRIBFORMATPROC glad_glVertexAttribFormat;
extern PFNGLVERTEXATTRIBI1IPROC glad_glVertexAttribI1i;
extern PFNGLVERTEXATTRIBI1IVPROC glad_glVertexAttribI1iv;
extern PFNGLVERTEXATTRIBI1UIPROC glad_glVertexAttribI1ui;
extern PFNGLVERTEXATTRIBI1UIVPROC glad_glVertexAttribI1uiv;
extern PFNGLVERTEXATTRIBI2IPROC glad_glVertexAttribI2i;
extern PFNGLVERTEXATTRIBI2IVPROC glad_glVertexAttribI2iv;
extern PFNGLVERTEXATTRIBI2UIPROC glad_glVertexAttribI2ui;
extern PFNGLVERTEXATTRIBI2UIVPROC glad_glVertexAttribI2uiv;
extern PFNGLVERTEXATTRIBI3IPROC glad_glVertexAttribI3i;
extern PFNGLVERTEXATTRIBI3IVPROC glad_glVertexAttribI3iv;
extern PFNGLVERTEXATTRIBI3UIPROC glad_glVertexAttribI3ui;
extern PFNGLVERTEXATTRIBI3UIVPROC glad_glVertexAttribI3uiv;
extern PFNGLVERTEXATTRIBI4BVPROC glad_glVertexAttribI4bv;
extern PFNGLVERTEXATTRIBI4IPROC glad_glVertexAttribI4i;
extern PFNGLVERTEXATTRIBI4IVPROC glad_glVertexAttribI4iv;
extern PFNGLVERTEXATTRIBI4SVPROC glad_glVertexAttribI4sv;
extern PFNGLVERTEXATTRIBI4UBVPROC glad_glVertexAttribI4ubv;
extern PFNGLVERTEXATTRIBI4UIPROC glad_glVertexAttribI4ui;
extern PFNGLVERTEXATTRIBI4UIVPROC glad_glVertexAttribI4uiv;
extern PFNGLVERTEXATTRIBI4USVPROC glad_glVertexAttribI4usv;
extern PFNGLVERTEXATTRIBIFORMATPROC glad_glVertexAttribIFormat;
extern PFNGLVERTEXATTRIBIPOINTERPROC glad_glVertexAttribIPointer;
extern PFNGLVERTEXATTRIBL1DPROC glad_glVertexAttribL1d;
extern PFNGLVERTEXATTRIBL1DVPROC glad_glVertexAttribL1dv;
extern PFNGLVERTEXATTRIBL1UI64ARBPROC glad_glVertexAttribL1ui64ARB;
extern PFNGLVERTEXATTRIBL1UI64VARBPROC glad_glVertexAttribL1ui64vARB;
extern PFNGLVERTEXATTRIBL2DPROC glad_glVertexAttribL2d;
extern PFNGLVERTEXATTRIBL2DVPROC glad_glVertexAttribL2dv;
extern PFNGLVERTEXATTRIBL3DPROC glad_glVertexAttribL3d;
extern PFNGLVERTEXATTRIBL3DVPROC glad_glVertexAttribL3dv;
extern PFNGLVERTEXATTRIBL4DPROC glad_glVertexAttribL4d;
extern PFNGLVERTEXATTRIBL4DVPROC glad_glVertexAttribL4dv;
extern PFNGLVERTEXATTRIBLFORMATPROC glad_glVertexAttribLFormat;
extern PFNGLVERTEXATTRIBLPOINTERPROC glad_glVertexAttribLPointer;
extern PFNGLVERTEXATTRIBP1UIPROC glad_glVertexAttribP1ui;
extern PFNGLVERTEXATTRIBP1UIVPROC glad_glVertexAttribP1uiv;
extern PFNGLVERTEXATTRIBP2UIPROC glad_glVertexAttribP2ui;
extern PFNGLVERTEXATTRIBP2UIVPROC glad_glVertexAttribP2uiv;
extern PFNGLVERTEXATTRIBP3UIPROC glad_glVertexAttribP3ui;
extern PFNGLVERTEXATTRIBP3UIVPROC glad_glVertexAttribP3uiv;
extern PFNGLVERTEXATTRIBP4UIPROC glad_glVertexAttribP4ui;
extern PFNGLVERTEXATTRIBP4UIVPROC glad_glVertexAttribP4uiv;
extern PFNGLVERTEXATTRIBPOINTERPROC glad_glVertexAttribPointer;
extern PFNGLVERTEXATTRIBPOINTERARBPROC glad_glVertexAttribPointerARB;
extern PFNGLVERTEXBINDINGDIVISORPROC glad_glVertexBindingDivisor;
extern PFNGLVERTEXBLENDARBPROC glad_glVertexBlendARB;
extern PFNGLVERTEXP2UIPROC glad_glVertexP2ui;
extern PFNGLVERTEXP2UIVPROC glad_glVertexP2uiv;
extern PFNGLVERTEXP3UIPROC glad_glVertexP3ui;
extern PFNGLVERTEXP3UIVPROC glad_glVertexP3uiv;
extern PFNGLVERTEXP4UIPROC glad_glVertexP4ui;
extern PFNGLVERTEXP4UIVPROC glad_glVertexP4uiv;
extern PFNGLVERTEXPOINTERPROC glad_glVertexPointer;
extern PFNGLVIEWPORTPROC glad_glViewport;
extern PFNGLVIEWPORTARRAYVPROC glad_glViewportArrayv;
extern PFNGLVIEWPORTINDEXEDFPROC glad_glViewportIndexedf;
extern PFNGLVIEWPORTINDEXEDFVPROC glad_glViewportIndexedfv;
extern PFNGLWAITSYNCPROC glad_glWaitSync;
extern PFNGLWEIGHTPOINTERARBPROC glad_glWeightPointerARB;
extern PFNGLWEIGHTBVARBPROC glad_glWeightbvARB;
extern PFNGLWEIGHTDVARBPROC glad_glWeightdvARB;
extern PFNGLWEIGHTFVARBPROC glad_glWeightfvARB;
extern PFNGLWEIGHTIVARBPROC glad_glWeightivARB;
extern PFNGLWEIGHTSVARBPROC glad_glWeightsvARB;
extern PFNGLWEIGHTUBVARBPROC glad_glWeightubvARB;
extern PFNGLWEIGHTUIVARBPROC glad_glWeightuivARB;
extern PFNGLWEIGHTUSVARBPROC glad_glWeightusvARB;
extern PFNGLWINDOWPOS2DPROC glad_glWindowPos2d;
extern PFNGLWINDOWPOS2DARBPROC glad_glWindowPos2dARB;
extern PFNGLWINDOWPOS2DVPROC glad_glWindowPos2dv;
extern PFNGLWINDOWPOS2DVARBPROC glad_glWindowPos2dvARB;
extern PFNGLWINDOWPOS2FPROC glad_glWindowPos2f;
extern PFNGLWINDOWPOS2FARBPROC glad_glWindowPos2fARB;
extern PFNGLWINDOWPOS2FVPROC glad_glWindowPos2fv;
extern PFNGLWINDOWPOS2FVARBPROC glad_glWindowPos2fvARB;
extern PFNGLWINDOWPOS2IPROC glad_glWindowPos2i;
extern PFNGLWINDOWPOS2IARBPROC glad_glWindowPos2iARB;
extern PFNGLWINDOWPOS2IVPROC glad_glWindowPos2iv;
extern PFNGLWINDOWPOS2IVARBPROC glad_glWindowPos2ivARB;
extern PFNGLWINDOWPOS2SPROC glad_glWindowPos2s;
extern PFNGLWINDOWPOS2SARBPROC glad_glWindowPos2sARB;
extern PFNGLWINDOWPOS2SVPROC glad_glWindowPos2sv;
extern PFNGLWINDOWPOS2SVARBPROC glad_glWindowPos2svARB;
extern PFNGLWINDOWPOS3DPROC glad_glWindowPos3d;
extern PFNGLWINDOWPOS3DARBPROC glad_glWindowPos3dARB;
extern PFNGLWINDOWPOS3DVPROC glad_glWindowPos3dv;
extern PFNGLWINDOWPOS3DVARBPROC glad_glWindowPos3dvARB;
extern PFNGLWINDOWPOS3FPROC glad_glWindowPos3f;
extern PFNGLWINDOWPOS3FARBPROC glad_glWindowPos3fARB;
extern PFNGLWINDOWPOS3FVPROC glad_glWindowPos3fv;
extern PFNGLWINDOWPOS3FVARBPROC glad_glWindowPos3fvARB;
extern PFNGLWINDOWPOS3IPROC glad_glWindowPos3i;
extern PFNGLWINDOWPOS3IARBPROC glad_glWindowPos3iARB;
extern PFNGLWINDOWPOS3IVPROC glad_glWindowPos3iv;
extern PFNGLWINDOWPOS3IVARBPROC glad_glWindowPos3ivARB;
extern PFNGLWINDOWPOS3SPROC glad_glWindowPos3s;
extern PFNGLWINDOWPOS3SARBPROC glad_glWindowPos3sARB;
extern PFNGLWINDOWPOS3SVPROC glad_glWindowPos3sv;
extern PFNGLWINDOWPOS3SVARBPROC glad_glWindowPos3svARB;
extern int gladLoadGLUserPtr( GLADuserptrloadfunc load, void *userptr);
extern int gladLoadGL( GLADloadfunc load);
typedef struct FILE FILE;
typedef struct in6_addr {
  union {
    uint8_t  Byte[16];
    uint16_t Word[8];
  } u;
} IN6_ADDR, *PIN6_ADDR, *LPIN6_ADDR;
typedef uint64_t SOCKET;
typedef struct fd_set {
  unsigned int  fd_count;
  SOCKET fd_array[64];
} fd_set, FD_SET, *PFD_SET, *LPFD_SET;
 void fn_void();
 void fn_void_int(int);
 void fn_void_str(const char *);
 int         argc();
 char*       argv(int);
 void        argvadd(const char *arg);
 int recipe( const char *pathmasks, int errorlevel, const char *scripts );
 const char *cook( const char *inputfile );
 void        hang();
 void        crash();
 void        breakpoint();
 bool        has_debugger();
 void        hexdump( const void *ptr, unsigned len );
 void        hexdumpf( FILE *fp, const void *ptr, unsigned len, int width );
 int         dialog(const char *title, const char *message, int numbuttons); 
 const char* dialog_load(const char *title);
 const char* dialog_save(const char *title);
 const char* dialog_folder(const char *title);
 void        alert(const char *message);
 void        alert2(const char *title, const char *message);
 char*       prompt(const char *title, const char *message, const char *defaults ); 
 extern void (*die)(const char *error);
 extern void (*threw)(const char *exception); 
 void* dll(const char *filename, const char *symbol);
 int         is_big();
 int         is_little();
 uint16_t    swap16( uint16_t x );
 uint32_t    swap32( uint32_t x );
 uint64_t    swap64( uint64_t x );
 float       swap32f(float n);
 double      swap64f(double n);
 void        swapf(float *a, float *b);
 void        swapf2(float a[2], float b[2]);
 void        swapf3(float a[3], float b[3]);
 void        swapf4(float a[4], float b[4]);
 uint16_t    lil16(uint16_t n); 
 uint32_t    lil32(uint32_t n); 
 uint64_t    lil64(uint64_t n); 
 float       lil32f(float n);   
 double      lil64f(double n);  
 uint16_t    big16(uint16_t n); 
 uint32_t    big32(uint32_t n); 
 uint64_t    big64(uint64_t n); 
 float       big32f(float n);   
 double      big64f(double n);  
 uint16_t*   lil16p(void *p, int sz);
 uint32_t*   lil32p(void *p, int sz);
 uint64_t*   lil64p(void *p, int sz);
 float   *   lil32pf(void *p, int sz);
 double  *   lil64pf(void *p, int sz);
 uint16_t*   big16p(void *p, int sz);
 uint32_t*   big32p(void *p, int sz);
 uint64_t*   big64p(void *p, int sz);
 float   *   big32pf(void *p, int sz);
 double  *   big64pf(void *p, int sz);
 FILE * file_handle( const char *pathfile );
 char*  file_read(const char *pathfile, int *size); 
 int    file_size(const char *pathfile); 
 int    file_write(const char *pathfile, const void *blob, int len);
 bool   file_append( const char *file, const void *ptr, int len );
 char** file_list(const char *pathmasks, int *count); 
 int    is_file(const char *pathfile); 
 int    is_folder(const char *pathfile); 
 const char *file_path( const char *pathfile ); 
 const char *file_name( const char *pathfile ); 
 const char *file_ext ( const char *pathfile ); 
 const char *file_norm( const char *pathfile ); 
 int         flag(const char *commalist); 
 const char* option(const char *commalist, const char *defaults); 
 int         optioni(const char *commalist, int defaults); 
 float       optionf(const char *commalist, float defaults); 
 extern FILE *stdlog;
 int   tcp_open(const char *address, const char *port);
 int   tcp_bind(const char *interface_, const char *port, int queue);
 int   tcp_peek(int, int(*callback)(int));
 int   tcp_send(int, const void* buf, int len);
 int   tcp_recv(int, void* buf, int len);
 char* tcp_host(int); 
 char* tcp_port(int); 
 int   tcp_close(int);
 int   tcp_debug(int); 
 int test(const char *file, int line, const char *expr, bool result);
 uint64_t    date();        
 uint64_t    date_epoch();  
 char*       date_string(); 
 double      time_hh();
 double      time_mm();
 double      time_ss();
 uint64_t    time_ms();
 uint64_t    time_us();
 uint64_t    time_ns();
 void        sleep_ss(double ss);
 void        sleep_ms(double ms);
 void        sleep_us(double us);
 void        sleep_ns(double us);
 void        yield();
 char*       trace( int traces ); 
 int         tracef( FILE *fp, int traces ); 
 void        traps_handled(void); 
 int   udp_bind(const char *address, const char *port);
 int   udp_open(const char *address, const char *port);
 int   udp_send(int, const void *buf, int len ); 
 int   udp_sendto(int, const char *ip, const char *port, const void *buf, int len ); 
 int   udp_recv(int, void *buf, int len ); 
 int   udp_peek(int); 
 bool  zipme(const char *fullpath, const char *bin, int len);
 char *unzip(const char *fullpath, int *len); 
 void*  watch( void *ptr, int sz );
 void*  forget( void *ptr );
size_t dlmalloc_usable_size(void*); 
typedef void* (*allocator_t)(void*, size_t);
 void* xrealloc(void*, size_t);
 uint32_t unhash_32(uint32_t x);
 uint32_t hash_32(uint32_t x);
 uint64_t hash_64(uint64_t x);
 uint64_t hash_flt(double x);
 uint64_t hash_int(int key);
 uint64_t hash_ptr(const void* ptr);
 uint64_t hash_bin(const void* ptr, unsigned len);
 uint64_t hash_str(const char* str);
 uint64_t fnv1a(const void* ptr_, unsigned len);
 unsigned crc32(unsigned h, const void *ptr, uint64_t len);
 uint64_t crc64(uint64_t h, const void *ptr, uint64_t len);
 void*       thread( int (*thread_func)(void* user_data), void* user_data, const char *thread_name );
 int         thread_join( void *thd );
 void        thread_detach( void *thd );
 int less_64(uint64_t a, uint64_t b);
 int less_int(int a, int b);
 int less_ptr(void *a, void *b);
 int less_str(char *a, char *b);
 int less_64_ptr(const void *a, const void *b);
 int less_int_ptr(const void *a, const void *b);
 void* vrealloc( void* p, size_t sz );
 size_t vlen( void* p );
typedef struct set_item {
    struct set_item *next;
    uint64_t keyhash;
    void *key;
    void *super;
} set_item;
typedef struct set {
    set_item** array;
    int (*cmp)(void *, void *);
    uint64_t (*hash)(void *);
    int count;
} set;
 void  (set_init)(set *m);
 void  (set_free)(set *m);
 void  (set_insert)(set *m, set_item *p, void *key, uint64_t keyhash, void *super);
 void  (set_erase)(set *m, void *key, uint64_t keyhash);
 void* (set_find)(const set *m, void *key, uint64_t keyhash);
 int   (set_isempty)(const set *m);
 int   (set_count)(const set *m);
 void  (set_gc)(set *m); 
 void  (set_clear)(set* m);
typedef struct pair {
    struct pair *next;
    uint64_t keyhash;
    void *key;
    void *value;
    void *super;
} pair;
typedef struct map {
    pair** array;
    int (*cmp)(void *, void *);
    uint64_t (*hash)(void *);
    int count:31;
    int is_sorted:1;
    pair** sorted;
} map;
 void  (map_init)(map *m);
 void  (map_free)(map *m);
 void  (map_insert)(map *m, pair *p, void *key, void *value, uint64_t keyhash, void *super);
 void  (map_erase)(map *m, void *key, uint64_t keyhash);
 void* (map_find)(map *m, void *key, uint64_t keyhash);
 int   (map_isempty)(map *m);
 int   (map_count)(map *m);
 void  (map_gc)(map *m); 
 bool  (map_sort)(map* m);
 void  (map_clear)(map* m);
 unsigned    intern( const char *string );
 const char *quark( unsigned key );
typedef struct quarks_t {
    char* blob;
    struct quark2i* entries;
} quarks_t;
 unsigned    quarks_intern( quarks_t*, const char *string );
 const char *quarks_string( quarks_t*, unsigned key );
 char* va(const char *fmt, ...);
 char*   strcatf(char **s, const char *buf);
 const char* strbeg(const char *a, const char *b); 
 const char* strend(const char *src, const char *sub); 
 const char* strbegi(const char *a, const char *b); 
 const char* strendi(const char *src, const char *sub); 
 const char* strstri(const char *a, const char *b);
 int   strmatch(const char *s, const char *wildcard);
 int   strmatchi(const char *s, const char *wildcard);
 char* strlower(const char *str);
 char* strupper(const char *str);
 char *strrepl(char **copy, const char *target, const char *replace); 
 char *strswap(char *copy, const char *target, const char *replace); 
 char *strcut(char *copy, const char *target);
 int qsort_strcmp(const void *a, const void *b);
 int qsort_strcmpi(const void *a, const void *b);
 char**    strsplit(const char *string, const char *delimiters);
 char*           strjoin(char** list, const char *separator);
typedef void (*event_fn_v)();
typedef int  (*event_fn_i)();
 int  event(const char *name);      
 void events(const char *fmt, ...); 
 int  command(const char *cmd);
 int  command2(const char *cmd, const char *val);
typedef enum OBJTYPE_builtins {
    OBJTYPE_obj    =  0,
    OBJTYPE_entity =  1,
    OBJTYPE_vec2   =  2,
    OBJTYPE_vec3   =  3,
    OBJTYPE_vec4   =  4,
    OBJTYPE_quat   =  5,
    OBJTYPE_mat33  =  6,
    OBJTYPE_mat34  =  7,
    OBJTYPE_mat44  =  8,
    OBJTYPE_vec2i  =  9,
    OBJTYPE_vec3i  = 10,
} OBJTYPE_builtins;
typedef uint16_t half;
 float half_to_float(half value);
 half  float_to_half(float value);
 void pack16i(uint8_t *buf, uint16_t i, int swap);
 void pack32i(uint8_t *buf, uint32_t i, int swap);
 void pack64i(uint8_t *buf, uint64_t i, int swap);
 int16_t unpack16i(const uint8_t *buf, int swap);
 int32_t unpack32i(const uint8_t *buf, int swap);
 int64_t unpack64i(const uint8_t *buf, int swap);
    uint64_t pack754(long double f, unsigned bits, unsigned expbits);
 long double unpack754(uint64_t i, unsigned bits, unsigned expbits);
 uint64_t pack64uv( uint8_t *buffer, uint64_t value );
 uint64_t unpack64uv( const uint8_t *buffer, uint64_t *value );
 uint64_t pack64iv( uint8_t *buffer, int64_t value_ );
 uint64_t unpack64iv( const uint8_t *buffer, int64_t *value );
 int  msgpack(const char *fmt, ... );                
 int  msgunpack(const char *fmt, ... );              
 int msgpack_new(uint8_t *w, size_t l);
 int msgpack_nil();                                  
 int msgpack_chr(bool n);                            
 int msgpack_uns(uint64_t n);                        
 int msgpack_int(int64_t n);                         
 int msgpack_str(const char *s);                     
 int msgpack_bin(const char *s, size_t n);           
 int msgpack_flt(double g);                          
 int msgpack_ext(uint8_t key, void *val, size_t n);  
 int msgpack_arr(uint32_t n);                        
 int msgpack_map(uint32_t n);                        
 int msgpack_eof();                                  
 int msgpack_err();                                  
 bool msgunpack_new( const void *opaque_or_FILE, size_t bytes );
 bool msgunpack_nil();
 bool msgunpack_chr(bool *chr);
 bool msgunpack_uns(uint64_t *uns);
 bool msgunpack_int(int64_t *sig);
 bool msgunpack_str(char **str);
 bool msgunpack_bin(void **bin, uint64_t *len);
 bool msgunpack_flt(float *flt);
 bool msgunpack_dbl(double *dbl);
 bool msgunpack_ext(uint8_t *key, void **val, uint64_t *len);
 bool msgunpack_arr(uint64_t *len);
 bool msgunpack_map(uint64_t *len);
 bool msgunpack_eof();
 bool msgunpack_err();
 int savef(FILE *file, const char *format, ...);
 int saveb(unsigned char *buf, const char *format, ...);
 int loadf(FILE *file, const char *format, ...);
 int loadb(const unsigned char *buf, const char *format, ...);
typedef struct reflect_t {
    unsigned id, objtype;
    union {
    unsigned sz;
    unsigned member_offset;
    unsigned enum_value;
    };
    const char *name;
    const char *info;
    void *addr;
    unsigned parent;
    const char *type;
    unsigned bytes;
} reflect_t;
 unsigned           enum_find(const char *E);
 void *             function_find(const char *F);
 reflect_t          member_find(const char *T, const char *M); 
 void *             member_findptr(void *obj, const char *T, const char *M); 
 reflect_t**  members_find(const char *T);
 void               type_inscribe(const char *TY,unsigned TYsz,const char *infos);
 void               enum_inscribe(const char *E,unsigned Eval,const char *infos);
 void               struct_inscribe(const char *T,unsigned Tsz,unsigned OBJTYPEid, const char *infos);
 void               member_inscribe(const char *T, const char *M,unsigned Msz, const char *infos, const char *type, unsigned bytes);
 void               function_inscribe(const char *F,void *func,const char *infos);
 const char*        symbol_naked(const char *s);
 int                ui_reflect(const char *mask); 
 uintptr_t id_make(void *ptr);
 void *     id_handle(uintptr_t id);
 void       id_dispose(uintptr_t id);
 bool        id_valid(uintptr_t id);
    typedef struct obj { struct { const char *objname; union { uintptr_t objheader;  }; struct obj** objchildren; }; } obj;
    typedef struct entity { struct { struct { const char *objname; union { uintptr_t objheader;  }; struct obj** objchildren; }; union {  uintptr_t cflags; }; void *c[32]; }; } entity;
void*   obj_malloc(unsigned sz);
void*   obj_free(void *o);
 extern void  (*obj_ctor[256])(); 
 extern void  (*obj_dtor[256])(); 
 extern char* (*obj_save[256])(); 
 extern bool  (*obj_load[256])(); 
 extern int   (*obj_test[256])(); 
 extern int   (*obj_init[256])(); 
 extern int   (*obj_quit[256])(); 
 extern int   (*obj_tick[256])(); 
 extern int   (*obj_draw[256])(); 
 extern int   (*obj_lerp[256])(); 
 extern int   (*obj_aabb[256])(); 
 extern int   (*obj_edit[256])(); 
 extern int   (*obj_menu[256])(); 
 extern char* (*obj_icon[256])(); 
 extern const char*OBJTYPES[256]; 
 uintptr_t   obj_header(const void *o);
 uintptr_t   obj_id(const void *o);
 const char* obj_type(const void *o);
 unsigned    obj_typeid(const void *o);
 int         obj_sizeof(const void *o);
 int         obj_size(const void *o); 
 char*       obj_data(void *o); 
 const char* obj_datac(const void *o); 
 void*       obj_payload(const void *o); 
 void*       obj_zero(void *o); 
 void*       obj_ref(void *oo);
 void*       obj_unref(void *oo);
 obj*        obj_detach(void *c);
 obj*        obj_attach(void *o, void *c);
 obj*        obj_root(const void *o);
 obj*        obj_parent(const void *o);
 obj***obj_children(const void *o); 
 obj***obj_siblings(const void *o); 
 int         obj_dumptree(const void *o);
 void*       obj_setmeta(void *o, const char *key, const char *value);
 const char* obj_meta(const void *o, const char *key);
 void*       obj_setname(void *o, const char *name);
 const char* obj_name(const void *o);
 void*       obj_swap(void *dst, void *src);
 void*       obj_copy_fast(void *dst, const void *src);
 void*       obj_copy(void *dst, const void *src);
 int         obj_comp_fast(const void *a, const void *b);
 int         obj_comp(const void *a, const void *b);
 int         obj_lesser(const void *a, const void *b);
 int         obj_greater(const void *a, const void *b);
 int         obj_equal(const void *a, const void *b);
 uint64_t    obj_hash(const void *o);
 bool        obj_hexdump(const void *oo);
 int         obj_print(const void *o);
 int         obj_printf(const void *o, const char *text);
 int         obj_console(const void *o); 
 char*       obj_saveini(const void *o);
 obj*        obj_mergeini(void *o, const char *ini);
 obj*        obj_loadini(void *o, const char *ini);
 char*       obj_savejson(const void *o);
 obj*        obj_mergejson(void *o, const char *json);
 obj*        obj_loadjson(void *o, const char *json);
 char*       obj_savebin(const void *o);
 obj*        obj_mergebin(void *o, const char *sav);
 obj*        obj_loadbin(void *o, const char *sav);
 char*       obj_savempack(const void *o); 
 obj*        obj_mergempack(void *o, const char *sav); 
 obj*        obj_loadmpack(void *o, const char *sav); 
 int         obj_push(const void *o);
 int         obj_pop(void *o);
 bool        obj_addcomponent(entity *e, unsigned c, void *ptr);
 bool        obj_hascomponent(entity *e, unsigned c);
 void*       obj_getcomponent(entity *e, unsigned c);
 bool        obj_delcomponent(entity *e, unsigned c);
 bool        obj_usecomponent(entity *e, unsigned c);
 bool        obj_offcomponent(entity *e, unsigned c);
 char*       entity_save(entity *self);
 void*       obj_clone(const void *src);
 void*       obj_merge(void *dst, const void *src); 
 void*       obj_mutate(void *dst, const void *src);
 void*       obj_make(const char *str);
 unsigned cobs_bounds(unsigned len);
 unsigned cobs_encode(const void *in, unsigned inlen, void *out, unsigned outlen);
 unsigned cobs_decode(const void *in, unsigned inlen, void *out, unsigned outlen);
enum COMPRESS_FLAGS {
    COMPRESS_RAW     = 0,
    COMPRESS_PPP     = (1<<4),
    COMPRESS_ULZ     = (2<<4),
    COMPRESS_LZ4     = (3<<4),
    COMPRESS_CRUSH   = (4<<4),
    COMPRESS_DEFLATE = (5<<4),
    COMPRESS_LZP1    = (6<<4),
    COMPRESS_LZMA    = (7<<4),
    COMPRESS_BALZ    = (8<<4),
    COMPRESS_LZW3    = (9<<4),
    COMPRESS_LZSS    = (10<<4),
    COMPRESS_BCM     = (11<<4),
    COMPRESS_ZLIB    = (12<<4), 
};
 unsigned zbounds(unsigned inlen, unsigned flags);
 unsigned zencode(void *out, unsigned outlen, const void *in, unsigned inlen, unsigned flags);
 unsigned zexcess(unsigned flags);
 unsigned zdecode(void *out, unsigned outlen, const void *in, unsigned inlen, unsigned flags);
 int ui_obj(const char *fmt, obj *o);
typedef enum OBJTYPE_game {
    OBJTYPE_camera = 11,
    OBJTYPE_node   = 12,
    OBJTYPE_scene  = 13,
} OBJTYPE_game;
typedef union vec2i{ struct { int X,Y; };       struct { int x,y; }; struct { int r,g; }; struct { int w,h; }; struct { int min,max; }; struct { int from,to; }; struct { int src,dst; }; int v2[2]; int array[1]; } vec2i;
typedef union vec3i{ struct { int X,Y,Z; };     struct { int x,y,z; }; struct { int r,g,b; }; struct { int w,h,d; }; struct { int min,max; }; struct { int from,to,step; }; struct { int src,dst; }; int v3[3]; int array[1]; } vec3i;
typedef union vec2 { struct { float X,Y; };     struct { float x,y; }; struct { float r,g; }; struct { float w,h; }; struct { float min,max; }; struct { float from,to; }; struct { float src,dst; }; float v2[2]; float array[1]; } vec2;
typedef union vec3 { struct { float X,Y,Z; };   struct { float x,y,z; }; struct { float r,g,b; }; struct { float min,max; }; struct { float from,to; }; vec2 xy; vec2 rg; vec2 wh; float v3[3]; float array[1]; } vec3;
typedef union vec4 { struct { float X,Y,Z,W; }; struct { float x,y,z,w; }; struct { float r,g,b,a; }; struct { float min,max; }; struct { float from,to; }; vec2 xy; vec3 xyz; vec2 rg; vec3 rgb; vec2 wh; vec3 whd; float v4[4]; float array[1]; } vec4;
typedef union quat { struct { float X,Y,Z,W; }; struct { float x,y,z,w; }; vec3 xyz; vec4 xyzw; float v4[4]; float array[1]; } quat;
typedef float mat33[9];
typedef float mat34[12];
typedef float mat44[16];
typedef struct line     { vec3 a, b;                                                  } line;
typedef struct sphere   { vec3 c; float r;                                            } sphere;
typedef struct aabb     { vec3 min, max;                                              } aabb;
typedef struct plane    { vec3 p, n;                                                  } plane;
typedef struct capsule  { vec3 a, b; float r;                                         } capsule;
typedef struct ray      { vec3 p, d;                                                  } ray;
typedef struct triangle { vec3 p0,p1,p2;                                              } triangle;
typedef struct poly     { vec3* verts; int cnt;                                       } poly;
typedef union  frustum  { struct { vec4 l, r, t, b, n, f; }; vec4 pl[6]; float v[24]; } frustum;
 char* ftoa1(float v);
 char* ftoa2(vec2 v);
 char* ftoa3(vec3 v);
 char* ftoa4(vec4 v);
 float atof1(const char *s);
 vec2 atof2(const char *s);
 vec3 atof3(const char *s);
 vec4 atof4(const char *s);
 char* itoa1(int   v);
 char* itoa2(vec2i v);
 char* itoa3(vec3i v);
 int   atoi1(const char *s);
 vec2i atoi2(const char *s);
 vec3i atoi3(const char *s);
 void     randset(uint64_t state);
 uint64_t rand64(void);
 double   randf(void); 
 int      randi(int mini, int maxi); 
 float deg      (float radians);
 float rad      (float degrees);
 float cycle180 (float angle);
 float cycle360 (float angle);
 int   mini     (int    a, int    b);
 int   maxi     (int    a, int    b);
 int   absi     (int    a          );
 int   clampi   (int v,int a,int b);
 float minf     (float  a, float  b);
 float maxf     (float  a, float  b);
 float absf     (float  a          );
 float pmodf    (float  a, float  b);
 float signf    (float  a)           ;
 float clampf   (float v,float a,float b);
 float mixf     (float a,float b,float t);
 float unmixf   (float a,float b,float t);
 float mapf     (float x,float a,float b,float c,float d);
 float slerpf   (float a,float b,float t);
 float fractf   (float a);
 vec2 ptr2     (const float *a    );
 vec2 neg2     (vec2 a          );
 vec2 add2     (vec2 a, vec2 b);
 vec2 sub2     (vec2 a, vec2 b);
 vec2 mul2     (vec2 a, vec2 b);
 vec2 div2     (vec2 a, vec2 b);
 vec2 inc2     (vec2 a, float  b);
 vec2 dec2     (vec2 a, float  b);
 vec2 scale2   (vec2 a, float  b);
 vec2 pmod2    (vec2 a, float  b);
 vec2 min2     (vec2 a, vec2 b);
 vec2 max2     (vec2 a, vec2 b);
 vec2 abs2     (vec2 a          );
 vec2 floor2   (vec2 a          );
 vec2 fract2   (vec2 a          );
 vec2 ceil2    (vec2 a          );
 float dot2     (vec2 a, vec2 b);
 vec2 refl2    (vec2 a, vec2 b);
 float cross2   (vec2 a, vec2 b);
 float len2sq   (vec2 a          );
 float len2     (vec2 a          );
 vec2 norm2    (vec2 a          );
 int   finite2  (vec2 a          );
 vec2 mix2  (vec2 a,vec2 b,float t);
 vec2 clamp2(vec2 v,vec2 a,vec2 b);
 vec2 clamp2f(vec2 v,float a,float b);
 vec3 rnd3     (void); 
 vec3 ptr3     (const float *a    );
 vec3 vec23    (vec2 a, float z );
 vec3 neg3     (vec3 a          );
 vec3 add3     (vec3 a, vec3 b);
 vec3 sub3     (vec3 a, vec3 b);
 vec3 mul3     (vec3 a, vec3 b);
 vec3 div3     (vec3 a, vec3 b);
 vec3 inc3     (vec3 a, float  b);
 vec3 dec3     (vec3 a, float  b);
 vec3 scale3   (vec3 a, float  b);
 vec3 pmod3    (vec3 a, float  b);
 vec3 min3     (vec3 a, vec3 b);
 vec3 max3     (vec3 a, vec3 b);
 vec3 abs3     (vec3 a          );
 vec3 floor3   (vec3 a          );
 vec3 fract3   (vec3 a          );
 vec3 ceil3    (vec3 a          );
 vec3 cross3   (vec3 a, vec3 b);
 float dot3     (vec3 a, vec3 b);
 vec3 refl3    (vec3 a, vec3 b);
 float len3sq   (vec3 a          );
 float len3     (vec3 a          );
 vec3 norm3    (vec3 a          );
 vec3 norm3sq  (vec3 a          );
 int   finite3  (vec3 a          );
 vec3 mix3  (vec3 a,vec3 b,float t);
 vec3 clamp3(vec3 v,vec3 a,vec3 b);
 vec3 clamp3f(vec3 v,float a,float b);
 void  ortho3   (vec3 *left, vec3 *up, vec3 v);
 vec3 rotatex3 (vec3 dir, float degrees);
 vec3 rotatey3 (vec3 dir, float degrees);
 vec3 rotatez3 (vec3 dir, float degrees);
 vec4 ptr4     (const float *a    );
 vec4 vec34    (vec3 a, float w );
 vec4 neg4     (vec4 a          );
 vec4 add4     (vec4 a, vec4 b);
 vec4 sub4     (vec4 a, vec4 b);
 vec4 mul4     (vec4 a, vec4 b);
 vec4 div4     (vec4 a, vec4 b);
 vec4 inc4     (vec4 a, float  b);
 vec4 dec4     (vec4 a, float  b);
 vec4 scale4   (vec4 a, float  b);
 vec4 pmod4    (vec4 a, float  b);
 vec4 min4     (vec4 a, vec4 b);
 vec4 max4     (vec4 a, vec4 b);
 vec4 abs4     (vec4 a          );
 vec4 floor4   (vec4 a          );
 vec4 fract4   (vec4 a          );
 vec4 ceil4    (vec4 a          );
 float dot4     (vec4 a, vec4 b);
 vec4 refl4    (vec4 a, vec4 b);
 float len4sq   (vec4 a          );
 float len4     (vec4 a          );
 vec4 norm4    (vec4 a          );
 vec4 norm4sq  (vec4 a          );
 int   finite4  (vec4 a          );
 vec4 mix4  (vec4 a,vec4 b,float t);
 vec4 clamp4(vec4 v,vec4 a,vec4 b);
 vec4 clamp4f(vec4 v,float a,float b);
 quat idq      (                  );
 quat ptrq     (const float *a    );
 quat vec3q    (vec3 a, float w );
 quat vec4q    (vec4 a          );
 quat negq     (quat a          );
 quat conjq    (quat a          );
 quat addq     (quat a, quat b);
 quat subq     (quat a, quat b);
 quat mulq     (quat p, quat q);
 quat scaleq   (quat a, float  s);
 quat normq    (quat a          );
 float dotq     (quat a, quat b);
 quat mixq(quat a, quat b, float t);
 quat slerpq(quat a, quat b, float s);
 quat rotationq(float deg,float x,float y,float z);
 quat mat44q   (mat44 M);
 vec3 rotate3q_2(vec3 v, quat q);
 vec3 rotate3q(vec3 v, quat r);
 vec3 euler    (quat q);
 quat eulerq   (vec3 pyr_degrees);
 void scaling33(mat33 m, float x, float y, float z);
 void scale33(mat33 m, float x, float y, float z);
 void id33(mat33 m);
 void extract33(mat33 m, const mat44 m4);
 void copy33(mat33 m, const mat33 a);
 vec3 mulv33(mat33 m, vec3 v);
 void multiply33x2(mat33 m, const mat33 a, const mat33 b);
 void rotation33(mat33 m, float degrees, float x,float y,float z);
 void rotationq33(mat33 m, quat q);
 void rotate33(mat33 r, float degrees, float x,float y,float z);
 void compose33(mat33 m, quat r, vec3 s);
 void id34(mat34 m);
 void copy34(mat34 m, const mat34 a);
 void scale34(mat34 m, float s);
 void add34(mat34 m, mat34 n);
 void muladd34(mat34 m, mat34 n, float s);
 void add34x2(mat34 m, mat34 n, mat34 o);
 void lerp34(mat34 m, mat34 n, mat34 o, float alpha); 
 void multiply34x2(mat34 m, const mat34 m0, const mat34 m1);
 void multiply34(mat34 m, const mat34 a);
 void multiply34x3(mat34 m, const mat34 a, const mat34 b, const mat34 c);
 void compose34(mat34 m, vec3 t, quat q, vec3 s);
 void invert34(mat34 m, const mat34 o);
 void id44(mat44 m);
 void identity44(mat44 m);
 void copy44(mat44 m, const mat44 a);
 void multiply44x2(mat44 m, const mat44 a, const mat44 b);
 void multiply44x3(mat44 m, const mat44 a, const mat44 b, const mat44 c);
 void multiply44(mat44 m, const mat44 a);
 void ortho44(mat44 m, float l, float r, float b, float t, float n, float f);
 void frustum44(mat44 m, float l, float r, float b, float t, float n, float f);
 void perspective44(mat44 m, float fovy_degrees, float aspect, float nearp, float farp);
 void lookat44(mat44 m, vec3 eye, vec3 center, vec3 up);
 vec3 pos44(mat44 m);
 void translation44(mat44 m, float x, float y, float z);
 void translate44(mat44 m, float x, float y, float z);
 void relocate44(mat44 m, float x, float y, float z);
 void rotationq44(mat44 m, quat q);
 void rotation44(mat44 m, float degrees, float x, float y, float z);
 void rotate44(mat44 m, float degrees, float x, float y, float z);
 void scaling44(mat44 m, float x, float y, float z);
 void scale44(mat44 m, float x, float y, float z);
 void transpose44(mat44 m, const mat44 a);
 float det44(const mat44 M);
 bool invert44(mat44 T, const mat44 M);
 void compose44(mat44 m, vec3 t, quat q, vec3 s);
 vec3 transformq(const quat q, const vec3 v);
 vec3 transform33(const mat33 m, vec3 p);
 vec3 transform344(const mat44 m, const vec3 p);
 vec4 transform444(const mat44 m, const vec4 p);
 bool unproject44(vec3 *out, vec3 xyd, vec4 viewport, mat44 mvp);
 void print2i( vec2i v );
 void print3i( vec3i v );
 void print2( vec2 v );
 void print3( vec3 v );
 void print4( vec4 v );
 void printq( quat q );
 void print33( float *m );
 void print34( float *m );
 void print44( float *m );
 int limit_fps(float fps);
typedef struct tween_keyframe_t {
    float t;
    vec3 v;
    unsigned ease;
} tween_keyframe_t;
typedef struct tween_t {
    tween_keyframe_t* keyframes;
    vec3 result;
    float time;
    float duration;
} tween_t;
 tween_t tween();
 void      tween_setkey(tween_t *tw, float t, vec3 v, unsigned easing_mode);
 void        tween_delkey(tween_t *tw, float t);
 float     tween_update(tween_t *tw, float dt);
 void      tween_reset(tween_t *tw);
 void    tween_destroy(tween_t *tw);
typedef struct audio_t {
    const char *err, *type, *path, *ptr; int bytes;
    unsigned id, bits, rate, channels, format;
    float duration;
    short *samples;
} audio_t;
enum AUDIO_FLAGS {
    AUDIO_CLIP = 0,
    AUDIO_STREAM = 1, 
};
 audio_t audio( const void *ptr, int len, unsigned flags );
    void audio_destroy(audio_t *);
typedef struct speaker_t {
    unsigned source;
    unsigned buffer;
} speaker_t;
 speaker_t speaker();
 void       speaker_play(speaker_t*, audio_t idx, bool paused);
 void        speaker_pause(speaker_t*, bool);
 void        speaker_loop(speaker_t*, bool on );
 void        speaker_gain(speaker_t*, float gain );
 void        speaker_pitch(speaker_t*, float pitch );
 void        speaker_position(speaker_t*, const float position[3], bool relative );
 void        speaker_velocity(speaker_t*, const float velocity[3] );
 void        speaker_direction(speaker_t*, const float direction[3] );
 void        speaker_attenuation(speaker_t*, float rollOff, float refDistance );
 void       speaker_stop(speaker_t*);
 bool       speaker_finished(speaker_t*);
 void      speaker_destroy(speaker_t*);
 void listener_gain( float gain );
 void listener_position( const float position[3] );
 void listener_velocity( const float velocity[3] );
 void listener_direction( const float direction[3] );
typedef struct camera_t { struct { const char *objname; union { uintptr_t objheader;  }; struct obj** objchildren; };
    mat44 view, proj;
    vec3 position, updir, lookdir, rightdir;
    vec3 velocity;
    float yaw, pitch, roll; 
    float speed, accel, fov, aspect; 
    float near_clip, far_clip;
    float frustum_fov_multiplier;
    float move_friction, move_damping;
    float look_friction, look_damping;
    vec3 last_look; vec3 last_move; 
    bool damping;
    bool orthographic; 
    float distance;    
} camera_t;
 camera_t camera();
 void camera_teleport(camera_t *cam, vec3 pos);
 void camera_moveby(camera_t *cam, vec3 inc);
 void camera_fov(camera_t *cam, float fov);
 void camera_fps(camera_t *cam, float yaw, float pitch);
 void camera_fps2(camera_t *cam, float yaw, float pitch, float roll);
 void camera_orbit(camera_t *cam, float yaw, float pitch, float inc_distance);
 void camera_lookat(camera_t *cam, vec3 target);
 void camera_enable(camera_t *cam);
 void camera_freefly(camera_t *cam, bool blocked);
 frustum camera_frustum_build(camera_t *cam);
 camera_t *camera_get_active();
 int  ui_camera(camera_t *cam);
 void ddraw_camera(camera_t *cam);
typedef struct hit {
    union {
        float depth;
        struct { float t0, t1; };
        struct { int hits; vec3 p0, p1; float distance2; int iterations; };
    };
    union { vec3 p; vec3 contact_point; };
    union { vec3 n; vec3 normal; };
} hit;
 float   line_distance2_point(line l, vec3 p);
 vec3 line_closest_point(line l, vec3 p);
 float   ray_test_plane(ray r, vec4 p4);
 float   ray_test_triangle(ray r, triangle t);
 int     ray_test_sphere(float *t0, float *t1, ray r, sphere s);
 int     ray_test_aabb(float *t0, float *t1, ray r, aabb a);
 hit*    ray_hit_plane(ray r, plane p);
 hit*    ray_hit_triangle(ray r, triangle t);
 hit*    ray_hit_sphere(ray r, sphere s);
 hit*    ray_hit_aabb(ray r, aabb a);
 vec3 sphere_closest_point(sphere s, vec3 p);
 hit*    sphere_hit_aabb(sphere s, aabb a);
 hit*    sphere_hit_capsule(sphere s, capsule c);
 hit*    sphere_hit_sphere(sphere a, sphere b);
 int     sphere_test_aabb(sphere s, aabb a);
 int     sphere_test_capsule(sphere s, capsule c);
 int     sphere_test_sphere(sphere a, sphere b);
 vec3 aabb_closest_point(aabb a, vec3 p);
 float   aabb_distance2_point(aabb a, vec3 p);
 int     aabb_contains_point(aabb a, vec3 p);
 hit*    aabb_hit_aabb(aabb a, aabb b);
 hit*    aabb_hit_capsule(aabb a, capsule c);
 hit*    aabb_hit_sphere(aabb a, sphere s);
 int     aabb_test_aabb(aabb a, aabb b);
 int     aabb_test_capsule(aabb a, capsule c);
 int     aabb_test_sphere(aabb a, sphere s);
 float   capsule_distance2_point(capsule c, vec3 p);
 vec3 capsule_closest_point(capsule c, vec3 p);
 hit*    capsule_hit_aabb(capsule c, aabb a);
 hit*    capsule_hit_capsule(capsule a, capsule b);
 hit*    capsule_hit_sphere(capsule c, sphere s);
 int     capsule_test_aabb(capsule c, aabb a);
 int     capsule_test_capsule(capsule a, capsule b);
 int     capsule_test_sphere(capsule c, sphere s);
 vec4 plane4(vec3 p, vec3 n);
 frustum frustum_build(mat44 projview);
 int     frustum_test_sphere(frustum f, sphere s);
 int     frustum_test_aabb(frustum f, aabb a);
 poly poly_alloc(int cnt);
 void    poly_free(poly *p);
 poly pyramid(vec3 from, vec3 to, float size); 
 poly diamond(vec3 from, vec3 to, float size); 
 void    collide_demo(); 
enum EASE_FLAGS {
    EASE_SINE,
    EASE_QUAD,
    EASE_CUBIC,
    EASE_QUART,
    EASE_QUINT,
    EASE_EXPO,
    EASE_CIRC,
    EASE_BACK,
    EASE_ELASTIC,
    EASE_BOUNCE,
    EASE_IN,
    EASE_OUT = 0,
    EASE_INOUT = EASE_IN * 2,
    EASE_ZERO = EASE_INOUT | (EASE_BOUNCE + 1),
    EASE_ONE,
    EASE_LINEAR,
    EASE_INOUT_PERLIN,
    EASE_NUM
};
 float ease(float t01, unsigned fn); 
 float ease_pong(float t01, unsigned fn); 
 float ease_ping_pong(float t, unsigned fn1, unsigned fn2); 
 float ease_pong_ping(float t, unsigned fn1, unsigned fn2); 
 const char *ease_enum(unsigned fn);
 const char**ease_enums();
 float ease_zero(float t);
 float ease_one(float t);
 float ease_linear(float t);
 float ease_out_sine(float t);
 float ease_out_quad(float t);
 float ease_out_cubic(float t);
 float ease_out_quart(float t);
 float ease_out_quint(float t);
 float ease_out_expo(float t);
 float ease_out_circ(float t);
 float ease_out_back(float t);
 float ease_out_elastic(float t);
 float ease_out_bounce(float t);
 float ease_in_sine(float t);
 float ease_in_quad(float t);
 float ease_in_cubic(float t);
 float ease_in_quart(float t);
 float ease_in_quint(float t);
 float ease_in_expo(float t);
 float ease_in_circ(float t);
 float ease_in_back(float t);
 float ease_in_elastic(float t);
 float ease_in_bounce(float t);
 float ease_inout_sine(float t);
 float ease_inout_quad(float t);
 float ease_inout_cubic(float t);
 float ease_inout_quart(float t);
 float ease_inout_quint(float t);
 float ease_inout_expo(float t);
 float ease_inout_circ(float t);
 float ease_inout_back(float t);
 float ease_inout_elastic(float t);
 float ease_inout_bounce(float t);
 float ease_inout_perlin(float t);
typedef struct gamepad_t {
    const char *name;
    bool plugged;
    bool a, b, x, y;
    bool up, down, left, right;
    bool menu, start;
    vec2 lpad, lpad_raw;
    bool lb, lthumb;
    vec2 rpad, rpad_raw;
    bool rb, rthumb;
    float lt, rt;
} gamepad_t;
 gamepad_t gamepad(unsigned gamepad_id, float deadzone); 
 int ui_gamepad(unsigned gamepad_id);
 int ui_gamepads();
enum IMAGE_FLAGS {
    IMAGE_R     = 0x01000,
    IMAGE_RG    = 0x02000,
    IMAGE_RGB   = 0x04000,
    IMAGE_RGBA  = 0x08000,
    IMAGE_FLIP  = 0x10000,
    IMAGE_FLOAT = 0x20000,
};
typedef struct image_t {
    union {
        struct { unsigned w,h,n; };
        struct { unsigned x,y; };
    };
    void *pixels;
} image_t;
 image_t image(const void *file, unsigned ptrlen, unsigned flags);
 image_t image_create(int x, int y, int flags);
 void    image_destroy(image_t *im);
enum INPUT_ENUMS {
    KEY_0,KEY_1,KEY_2,KEY_3,KEY_4,KEY_5,KEY_6,KEY_7,KEY_8,KEY_9,   KEY_TICK,KEY_BS,           KEY_ESC,
    KEY_TAB,   KEY_Q,KEY_W,KEY_E,KEY_R,KEY_T,KEY_Y,KEY_U,KEY_I,KEY_O,KEY_P,
    KEY_CAPS,     KEY_A,KEY_S,KEY_D,KEY_F,KEY_G,KEY_H,KEY_J,KEY_K,KEY_L, KEY_ENTER,
    KEY_LSHIFT,       KEY_Z,KEY_X,KEY_C,KEY_V,KEY_B,KEY_N,KEY_M,        KEY_RSHIFT,            KEY_UP,
    KEY_LCTRL,KEY_LALT,               KEY_SPACE,                KEY_RALT,KEY_RCTRL,  KEY_LEFT,KEY_DOWN,KEY_RIGHT,
    KEY_INS,KEY_HOME,KEY_PGUP,KEY_DEL,KEY_END,KEY_PGDN, 
    KEY_LMETA,KEY_RMETA,KEY_MENU,KEY_PRINT,KEY_PAUSE,KEY_SCROLL,KEY_NUMLOCK, 
    KEY_MINUS,KEY_EQUAL,KEY_LSQUARE,KEY_RSQUARE,KEY_SEMICOLON,KEY_QUOTE,KEY_HASH,KEY_BAR,KEY_COMMA,KEY_DOT,KEY_SLASH, 
    KEY_F1,KEY_F2,KEY_F3,KEY_F4,KEY_F5,KEY_F6,KEY_F7,KEY_F8,KEY_F9,KEY_F10,KEY_F11,KEY_F12, 
    KEY_PAD1,KEY_PAD2,KEY_PAD3,KEY_PAD4,KEY_PAD5,KEY_PAD6,KEY_PAD7,KEY_PAD8,KEY_PAD9,KEY_PAD0, 
    KEY_PADADD,KEY_PADSUB,KEY_PADMUL,KEY_PADDIV,KEY_PADDOT,KEY_PADENTER, 
    MOUSE_L, MOUSE_M, MOUSE_R, 
    GAMEPAD_CONNECTED, GAMEPAD_A, GAMEPAD_B, GAMEPAD_X, GAMEPAD_Y,
    GAMEPAD_UP, GAMEPAD_DOWN, GAMEPAD_LEFT, GAMEPAD_RIGHT, GAMEPAD_MENU, GAMEPAD_START,
    GAMEPAD_LB, GAMEPAD_RB, GAMEPAD_LTHUMB, GAMEPAD_RTHUMB,
    WINDOW_BLUR, WINDOW_FOCUS, WINDOW_CLOSE, WINDOW_MINIMIZE, WINDOW_MAXIMIZE, WINDOW_FULLSCREEN, WINDOW_WINDOWED, 
    GAMEPAD_LPAD, GAMEPAD_LPADX = GAMEPAD_LPAD, GAMEPAD_LPADY,
    GAMEPAD_RPAD, GAMEPAD_RPADX = GAMEPAD_RPAD, GAMEPAD_RPADY,
    GAMEPAD_LTRIGGER, GAMEPAD_LT = GAMEPAD_LTRIGGER, GAMEPAD_RTRIGGER, GAMEPAD_RT = GAMEPAD_RTRIGGER, GAMEPAD_BATTERY,
    MOUSE, MOUSE_X = MOUSE, MOUSE_Y, MOUSE_W,
    TOUCH_X1, TOUCH_Y1, TOUCH_X2, TOUCH_Y2,
    WINDOW_RESIZE, WINDOW_RESIZEX = WINDOW_RESIZE, WINDOW_RESIZEY, WINDOW_ORIENTATION, WINDOW_BATTERY,
    GAMEPAD_GUID, GAMEPAD_NAME,
    INPUT_MAX
};
enum INPUT_ALIASES {
    KEY_SHIFT = KEY_LSHIFT,
    KEY_ALT = KEY_LALT,
    KEY_CTRL = KEY_LCTRL,
};
 float input(int key);
 float input_diff(int key);
 float input_down(int key);
 float input_held(int key);
 float input_up(int key);
 float input_repeat(int key);
 int ui_keyboard();
typedef union json_t { char* s; double f; int64_t i; uintptr_t p; union json_t* arr; } json_t;
 bool            json_push(const char *json_content);
 const char*         json_key(const char *keypath);
 json_t*             json_find(const char *type_keypath);
 json_t              json_get(const char *type_keypath);
 int                 json_count(const char *keypath);
 bool            json_pop();
 int             xml_push(const char *xml_content);
 const char *        xml_string(char *key);
 unsigned            xml_count(char *key);
 char*         xml_base64(char *key);
 void            xml_pop();
typedef struct { map base; struct { pair p; char* key; char* val; } tmp, *ptr; char** tmpval; int (*typed_cmp)(char*, char*); uint64_t (*typed_hash)(char*); } * ini_t;
 ini_t        ini(const char *filename);
 ini_t        ini_from_mem(const char *data);
 void         ini_destroy(ini_t);
 bool         ini_write(const char *filename, const char *section, const char *key, const char *value);
 bool data_tests();
typedef enum CURSORS {
    CURSOR_HIDE,
    CURSOR_AUTO,
    CURSOR_ARROW,
    CURSOR_HAND,
    CURSOR_TEXT,
    CURSOR_CROSS,
    CURSOR_MAX
} CURSORS;
typedef struct mouse_t {
    int x, y, l, m, r, any, wheel, cursor;
} mouse_t;
 mouse_t mouse();
 int     mouse_send(const char *cmd, const char *val);
 int     ui_mouse();
 int profiler_enable(bool on);
struct profile_t { double stat; int32_t cost, avg; }; 
typedef struct { map base; struct { pair p; char * key; struct profile_t val; } tmp, *ptr; struct profile_t* tmpval; int (*typed_cmp)(char *, char *); uint64_t (*typed_hash)(char *); } * profiler_t; 
extern  profiler_t profiler; 
extern  int profiler_enabled; 
 void lua_init();
 void  luaj_init();
 void   luaj_bind(const char *cffi);
 void  lua_setstring(const char *key, const char *val);
 void  lua_setstrings(const char *key, const char **val, int count);
 void  lua_runstring(const char *script);
 void  lua_runfile(const char *pathfile);
 void  lua_die(const char *err);
 void lua_quit();
 uint32_t* string32( const char *utf8 ); 
enum UI_FLAGS { 
    UI_OPEN = 1,
    UI_MENUS = 2,
    UI_CENTER = 4,
};
 int ui_notify(const char *label, const char *body);
 int ui_window(const char *label, int *flags);
 int   ui_panel(const char *label, int flags); 
 int     ui_collapse(const char *label, const char *id);
 int       ui_section(const char *label);
 int       ui_separator();
 int       ui_int(const char *label, int value[1]);
 int       ui_int2(const char *label, int value[2]);
 int       ui_int3(const char *label, int value[3]);
 int       ui_unsigned(const char *label, unsigned value[1]);
 int       ui_unsigned2(const char *label, unsigned value[2]);
 int       ui_unsigned3(const char *label, unsigned value[3]);
 int       ui_bool(const char *label, bool *value);
 int       ui_float(const char *label, float value[1]);
 int       ui_float2(const char *label, float value[2]);
 int       ui_float3(const char *label, float value[3]);
 int       ui_float4(const char *label, float value[4]);
 int       ui_floatabs(const char *label, float value[1]);
 int       ui_vec2i(const char *label, vec2i *v);
 int       ui_vec3i(const char *label, vec3i *v);
 int       ui_vec2(const char *label, vec2 *v);
 int       ui_vec3(const char *label, vec3 *v);
 int       ui_vec4(const char *label, vec4 *v);
 int       ui_mat33(const char *label, float M[9]);
 int       ui_mat34(const char *label, float M[12]);
 int       ui_mat44(const char *label, float M[16]);
 int       ui_buffer(const char *label, char *buffer, int buflen);
 int       ui_string(const char *label, char **string);
 int       ui_color3(const char *label, unsigned *color); 
 int       ui_color3f(const char *label, float color[3]); 
 int       ui_color4(const char *label, unsigned *color); 
 int       ui_color4f(const char *label, float color[4]); 
 int       ui_button(const char *label);
 int       ui_buttons(int buttons, ...);
 int       ui_toolbar(const char *label, int icons, ...); 
 int       ui_toggle(const char *label, bool *value);
 int       ui_alert(const char *message, int *show);
 int       ui_dialog(const char *label, const char *text, int choices);
 int       ui_list(const char *label, const char **items, int num_items, int *selector);
 int       ui_bitmask(const char *label, int bits, void *ptr);
 int       ui_label(const char *label);
 int       ui_label2(const char *label, const char *caption);
 int       ui_slider(const char *label, float *value);
 int       ui_slider2(const char *label, float *value, const char *caption);
 int       ui_const_bool(const char *label, bool);
 int       ui_const_float(const char *label, float);
 int       ui_const_float2(const char *label, float[2]);
 int       ui_const_string(const char *label, const char *);
 int       ui_image(const char *label, unsigned id, unsigned w, unsigned h); 
 int       ui_subimage(const char *label, unsigned id, unsigned iw, unsigned ih, float u0, float v0, float u1, float v1); 
 int       ui_clampi(const char *label, int *value, int mini, int maxi);
 int       ui_clampf(const char *label, float *value, float minf, float maxf);
 int       ui_percent(const char *label, float value); 
 int       ui_link(const char *label, const char *url);
 int     ui_collapse_end();
 int   ui_panel_end();
 int   ui_tray(); 
 int     ui_menu(const char *label); 
 int       ui_case(const char *label, bool disabled); 
 int     ui_menu_end();
 int   ui_tray_end();
 int ui_window_end();
 int   ui_print(const char *title, const char *text); 
 char* ui_console(const char *title); 
 int ui_demo(int do_windows);
 int ui_enable(bool);
 int ui_enabled();
 int ui_hide(bool);
 int ui_hidden();
 int ui_active();
 int ui_hovered();
 int ui_loadfont(unsigned slot, float pt, float brightness, const char *resource, const void *runes);
 int ui_loadfonts();
 enum BROWSER_FLAGS {
    BROWSER_OPEN = 1,
    BROWSER_OPEN1 = 2,
    BROWSER_SAVE = 4,
    BROWSER_INLINE = 8,
};
 int    ui_browse(const char *winid, const char *wintitle, const char *pathmasks, unsigned flags);
 char** ui_browse_results(const char *winid, int *count);
char* wget( const char *url, int *len ); 
enum {
    APP_MSAA2 = 0x02,
    APP_MSAA4 = 0x04,
    APP_MSAA8 = 0x08,
    APP_TRANSPARENT = 0x10,
    APP_SQUARE = 0x20,
};
 void  app_create(float scale, unsigned flags);
 int   app_swap();
 const char *app_name();
 int   app_send(const char *cmd, const char *val);
 const char* app_recv(const char *cmd);
typedef enum OBJTYPE_render {
    OBJTYPE_sprite = 21,
    OBJTYPE_light  = 22,
} OBJTYPE_render;
typedef unsigned handle; 
enum TEXTURE_FLAGS {
    TEXTURE_BC1 = 8,  
    TEXTURE_BC2 = 16, 
    TEXTURE_BC3 = 32, 
    TEXTURE_NEAREST = 0,
    TEXTURE_LINEAR = 64,
    TEXTURE_MIPMAPS = 128,
    TEXTURE_ANISOTROPY = 1 << 30,
    TEXTURE_CLAMP = 0,
    TEXTURE_BORDER = 0x100,
    TEXTURE_REPEAT = 0x200,
    TEXTURE_BYTE = 0,
    TEXTURE_FLOAT = IMAGE_FLOAT,
    TEXTURE_COLOR = 0,
    TEXTURE_DEPTH = 0x800,
    TEXTURE_R = IMAGE_R,
    TEXTURE_RG = IMAGE_RG,
    TEXTURE_RGB = IMAGE_RGB,
    TEXTURE_RGBA = IMAGE_RGBA,
    TEXTURE_FLIP = IMAGE_FLIP,
    TEXTURE_UNIQUE = 1 << 31,
    TEXTURE_SRGB = 1 << 24,
    TEXTURE_BGR = 1 << 25,
    TEXTURE_BGRA = TEXTURE_BGR,
    TEXTURE_ARRAY = 1 << 26,
};
typedef struct texture_t {
    union { unsigned x, w; };
    union { unsigned y, h; };
    union { unsigned z, d; };
    union { unsigned n, bpp; };
    handle id;
    unsigned texel_type;
    unsigned flags;
    char* filename;
    bool transparent;
    bool mipmaps_generated;
    unsigned fbo; 
    union { unsigned userdata, delay; };
} texture_t;
 texture_t texture_compressed(const char *filename, unsigned flags);
 texture_t texture_compressed_from_mem(const void *data, int len, unsigned flags);
 texture_t texture(const char* filename, int flags);
 texture_t texture_from_mem(const void* ptr, int len, int flags);
 texture_t texture_create(unsigned w, unsigned h, unsigned n, const void *pixels, int flags);
 texture_t texture_checker();
 void      texture_destroy(texture_t *t);
 unsigned  texture_update(texture_t *t, unsigned w, unsigned h, unsigned n, const void *pixels, int flags);
 void      texture_params(texture_t *t, unsigned flags);
typedef enum BLIT_FLAGS {
    BLIT_RGB = 1,
    BLIT_YCBCR = 2,
    BLIT_Y = 4,
    BLIT_FLIP = 8,
} BLIT_FLAGS;
 void blit( texture_t *textures, float gamma, unsigned flags );
 void blit_rgb_gamma( texture_t texture_rgb, float gamma );
 void blit_rgb_flipped_gamma( texture_t texture_rgb, float gamma );
 void blit_rgb( texture_t texture_rgb );
 void blit_rgb_flipped( texture_t texture );
 void blit_y( texture_t texture_Y );
 void blit_ycbcr( texture_t texture_YCbCr[3] );
 void blit_ycbcr_flipped( texture_t texture_YCbCr[3] );
 texture_t brdf_lut();
 bool      texture_rec_begin(texture_t *t, unsigned w, unsigned h); 
 void      texture_rec_end(texture_t *t); 
 unsigned shader(const char *vs, const char *fs, const char *attribs, const char *fragcolor, const char *defines);
 unsigned shader_geom(const char *gs, const char *vs, const char *fs, const char *attribs, const char *fragcolor, const char *defines);
 unsigned shader_bind(unsigned program);
      int shader_uniform(const char *name);
     void shader_bool(const char *uniform, bool i );
     void shader_int(const char *uniform, int i);
     void shader_uint(const char *uniform, unsigned i );
     void shader_float(const char *uniform, float f);
     void shader_vec2(const char *uniform, vec2 v);
     void shader_vec3(const char *uniform, vec3 v);
     void shader_vec3v(const char *uniform, int count, vec3 *v);
     void shader_vec4(const char *uniform, vec4 v);
     void shader_mat44(const char *uniform, mat44 m);
     void shader_texture(const char *sampler, unsigned texture, unsigned unit);
     void shader_cubemap(const char *sampler, unsigned texture, unsigned unit);
 unsigned shader_get_active();
 void     shader_destroy(unsigned shader);
 unsigned     shader_properties(unsigned shader);
 char**       shader_property(unsigned shader, unsigned property_no);
 void         shader_apply_param(unsigned shader, unsigned param_no);
 void         shader_apply_params(unsigned shader, const char *parameter_mask);
 int          ui_shader(unsigned shader);
 int          ui_shaders();
typedef struct shader_t {
    unsigned program;
    char *vs, *fs, *gs;
    char *attribs, *fragcolor;
    char *saved;
    char** defines; 
    struct {
        int location;
        char *name; 
        union {
            bool b;
            int i;
            unsigned u;
            float f;
            vec2 v2;
            vec3 v3;
            vec4 v4;
            mat44 m;
            struct texture { unsigned tid, tunit; };
            struct cubemap { unsigned cid, cunit; };
        };
    } uniforms[64];
    uint64_t dirty; 
} shader_t;
shader_t shader2(const char *vs, const char *fs, const char *attribs, const char *fragcolor, const char *defines, const char *gs);
void     shader2_apply(shader_t *s); 
void     shader2_destroy(shader_t *s);
enum BUFFER_USAGE {
    STATIC_DRAW,
    STATIC_READ,
    STATIC_COPY,
    DYNAMIC_DRAW,
    DYNAMIC_READ,
    DYNAMIC_COPY,
    STREAM_DRAW,
    STREAM_READ,
    STREAM_COPY
};
enum BUFFER_MODE {
    BUFFER_READ,
    BUFFER_WRITE,
    BUFFER_READ_WRITE
};
 unsigned compute(const char *cs);
 void compute_dispatch(unsigned wx, unsigned wy, unsigned wz);
 void shader_image(texture_t t, unsigned unit, unsigned level, int layer, unsigned access);
 void shader_image_unit(unsigned texture, unsigned unit, unsigned level, int layer, unsigned texel_type, unsigned access);
 void write_barrier();
 void write_barrier_image();
 unsigned ubo_create(void *data, int size, unsigned usage);
 void       ubo_update(unsigned ubo, int offset, void *data, int size);
 void       ubo_bind(unsigned ubo, unsigned unit);
 void       ubo_unbind(unsigned unit);
 void     ubo_destroy(unsigned ubo);
enum SSBO_ACCESS {
    SSBO_READ = BUFFER_READ,
    SSBO_WRITE = BUFFER_WRITE,
    SSBO_READ_WRITE = BUFFER_READ_WRITE
};
 unsigned ssbo_create(const void *data, int len, unsigned usage);
 void ssbo_destroy(unsigned ssbo);
 void ssbo_update(int offset, int len, const void *data);
 void ssbo_bind(unsigned ssbo, unsigned unit);
 void *ssbo_map(unsigned access);
 void ssbo_unmap();
 void ssbo_unbind();
enum ANIM_FLAGS {
    ANIM_LOOP = 1,
    ANIM_DONT_RESET_AFTER_USE = 2,
};
typedef struct anim_t {
    int        from;
    int        to;
    float      blendtime;
    unsigned   flags;
    float      curframe;
    unsigned   easing;
    float      alpha; 
    float      timer; 
    bool       active;
    vec3 pose; 
    char*      name; 
} anim_t;
 anim_t clip(float minframe, float maxframe, float blendtime, unsigned flags);
 anim_t loop(float minframe, float maxframe, float blendtime, unsigned flags);
 anim_t* animlist(const char *filename);
 vec3 pose(bool forward_time, float curframe, int minframe, int maxframe, bool loop, float *retframe);
 void glDebugEnable();
 unsigned rgba( uint8_t r, uint8_t g, uint8_t b, uint8_t a );
 unsigned bgra( uint8_t b, uint8_t g, uint8_t r, uint8_t a );
 unsigned rgbaf( float r, float g, float b, float a );
 unsigned bgraf( float b, float g, float r, float a );
 unsigned alpha( unsigned rgba );
 unsigned atorgba(const char *s);
 char *   rgbatoa(unsigned rgba);
typedef struct colormap_t {
    vec4 color;
    texture_t *texture;
    bool no_mipmaps;
} colormap_t;
 bool colormap( colormap_t *cm, const char *texture_name, bool load_as_srgb );
typedef struct cubemap_t {
    unsigned id;    
    vec3 sh[9];     
    int framebuffers[6];
    int textures[6];
    int depth_buffers[6];
    unsigned width, height;
    float *pixels;
    int step;
    vec3 pos;
} cubemap_t;
 cubemap_t  cubemap( texture_t texture, int flags ); 
 void       cubemap_destroy(cubemap_t *c);
 cubemap_t* cubemap_get_active();
 void       cubemap_beginbake(cubemap_t *c, vec3 pos, unsigned width, unsigned height);
 bool       cubemap_stepbake(cubemap_t *c, mat44 proj , mat44 view );
 void       cubemap_endbake(cubemap_t *c, int step , float sky_intensity );
 void       cubemap_sh_reset(cubemap_t *c);
 void       cubemap_sh_addlight(cubemap_t *c, vec3 light, vec3 dir, float strength);
 void       cubemap_sh_blend(vec3 pos, float max_dist, unsigned count, cubemap_t *probes, vec3 out_sh[9]);
 void ddraw_line_width(float width);
 void ddraw_line_width_push(float scale);
 void ddraw_line_width_pop();
 void ddraw_color(unsigned rgb);
 void ddraw_color_push(unsigned rgb);
 void ddraw_color_pop();
 void ddraw_ontop(int enabled);
 void ddraw_ontop_push(int enabled);
 void ddraw_ontop_pop();
 void ddraw_push_2d();
 void ddraw_pop_2d();
 void ddraw_aabb(vec3 minbb, vec3 maxbb);
 void ddraw_aabb_corners(vec3 minbb, vec3 maxbb);
 void ddraw_arrow(vec3 begin, vec3 end);
 void ddraw_axis(float units);
 void ddraw_boid(vec3 pos, vec3 dir);
 void ddraw_bone(vec3 center, vec3 end); 
 void ddraw_bounds(const vec3 points[8]);
 void ddraw_box(vec3 center, vec3 extents);
 void ddraw_capsule(vec3 from, vec3 to, float radius);
 void ddraw_circle(vec3 pos, vec3 n, float radius);
 void ddraw_ring(vec3 pos, vec3 n, float radius);
 void ddraw_cone(vec3 center, vec3 top, float radius);
 void ddraw_cube(vec3 center, float radius);
 void ddraw_cube33(vec3 center, vec3 radius, mat33 M);
 void ddraw_diamond(vec3 from, vec3 to, float size);
 void ddraw_frustum(float projview[16]);
 void ddraw_ground(float scale);
 void ddraw_grid(float scale);
 void ddraw_hexagon(vec3 pos, float radius);
 void ddraw_line(vec3 from, vec3 to);
 void ddraw_line_dashed(vec3 from, vec3 to);
 void ddraw_line_thin(vec3 from, vec3 to);
 void ddraw_normal(vec3 pos, vec3 n);
 void ddraw_pentagon(vec3 pos, float radius);
 void ddraw_plane(vec3 p, vec3 n, float scale);
 void ddraw_point(vec3 from);
 void ddraw_position(vec3 pos, float radius);
 void ddraw_position_dir(vec3 pos, vec3 dir, float radius);
 void ddraw_pyramid(vec3 center, float height, int segments);
 void ddraw_cylinder(vec3 center, float height, int segments);
 void ddraw_sphere(vec3 pos, float radius);
 void ddraw_square(vec3 pos, float radius);
 void ddraw_text(vec3 pos, float scale, const char *text);
 void ddraw_text2d(vec2 pos, const char *text);
 void ddraw_triangle(vec3 p1, vec3 p2, vec3 p3);
 void ddraw_prism(vec3 center, float radius, float height, vec3 normal, int segments);
 void ddraw_demo();
 void ddraw_flush();
 void ddraw_flush_projview(mat44 proj, mat44 view);
enum FBO_FLAGS {
    FBO_NO_DEPTH = 1,
    FBO_NO_COLOR = 2,
};
enum FBO_BLIT_MODE {
    FBO_BLIT_COPY,
    FBO_BLIT_ADDITIVE,
    FBO_BLIT_COPY_ALPHA,
};
typedef struct fbo_t {
    unsigned id;
    texture_t texture_color;
    texture_t texture_depth;
    unsigned width, height;
    int flags;
    int texture_flags;
} fbo_t;
 fbo_t fbo(unsigned width, unsigned height, int flags, int texture_flags);
 unsigned fbo_id(unsigned texture_color, unsigned texture_depth, int flags);
 void     fbo_resize(fbo_t *f, unsigned width, unsigned height);
 void     fbo_attach(unsigned id, int slot, texture_t texture);
 void     fbo_attach_depth(unsigned id, texture_t texture);
 void     fbo_bind(unsigned id);
 void     fbo_unbind();
 void     fbo_destroy(fbo_t f);
 void     fbo_destroy_id(unsigned id);
 void     fbo_blit(unsigned id, texture_t texture, int mode);
 uint32_t hh_mem(const void *data, size_t size);
 uint32_t hh_str(const char* str);
 uint32_t hh_float(float f);
 uint32_t hh_int(int i);
 uint32_t hh_vec2(vec2 v);
 uint32_t hh_vec3(vec3 v);
 uint32_t hh_vec4(vec4 v);
 uint32_t hh_mat33(mat33 m);
 uint32_t hh_mat44(mat44 m);
enum MATERIAL_ENUMS {
	MATERIAL_CHANNEL_ALBEDO,
	MATERIAL_CHANNEL_NORMALS,
	MATERIAL_CHANNEL_ROUGHNESS,
	MATERIAL_CHANNEL_METALLIC,
	MATERIAL_CHANNEL_AO,
	MATERIAL_CHANNEL_AMBIENT,
	MATERIAL_CHANNEL_EMISSIVE,
	MATERIAL_CHANNEL_PARALLAX,
    MAX_CHANNELS_PER_MATERIAL
};
typedef struct material_layer_t {
    char   texname[32];
    float  value;
    float  value2;
    colormap_t map;
} material_layer_t;
typedef struct material_t {
    char *name;
    material_layer_t layer[MAX_CHANNELS_PER_MATERIAL];
    float cutout_alpha;
    float ssr_strength;
    bool parallax_clip;
    bool disable_ibl;
    bool _loaded;
} material_t;
 void material_texparams(material_t *m, unsigned texture_flags);
 uint32_t material_checksum(material_t *m);
 void ui_material(material_t *m);
enum MESH_FLAGS {
    MESH_STATIC = 0, 
    MESH_STREAM = 1,
    MESH_TRIANGLE_STRIP = 2,
};
typedef struct mesh_t {
    handle vao, vbo, ibo;
    unsigned vertex_count;
    unsigned index_count;
    unsigned flags;
    int* lod_collapse_map; 
    union {
    unsigned* in_index;
    vec3i*    in_index3;
    };
    union {
    unsigned* out_index;
    vec3i*    out_index3;
    };
    union {
    float* in_vertex;
    vec3* in_vertex3;
    };
    union {
    float* out_vertex;
    vec3* out_vertex3;
    };
} mesh_t;
 mesh_t mesh();
   void mesh_update(mesh_t *m, const char *format, int vertex_stride,int vertex_count,const void *interleaved_vertex_data, int index_count,const void *index_data, int flags);
   void mesh_render(mesh_t *m);
   void mesh_render_prim(mesh_t *sm, unsigned prim);
   void mesh_destroy(mesh_t *m);
   aabb mesh_bounds(mesh_t *m);
 unsigned query_test_point(mat44 proj, mat44 view, vec3 pos, float size);
 void quad_render_id( int texture_type, int texture_id, vec2 dims, vec2 tex_start, vec2 tex_end, int rgba, vec2 start, vec2 end );
 void quad_render( texture_t texture, vec2 tex_start, vec2 tex_end, int rgba, vec2 start, vec2 end );
typedef struct renderstate_t {
    float clear_color[4];
    bool color_mask[4];
    double clear_depth;
    bool depth_test_enabled;
    bool depth_write_enabled;
    unsigned depth_func;
    bool reverse_z;
    bool polygon_offset_enabled;
    float polygon_offset;
    float polygon_offset_factor;
    bool blend_enabled;
    unsigned blend_func;
    unsigned blend_src;
    unsigned blend_dst;
    unsigned blend_src_alpha;
    unsigned blend_dst_alpha;
    bool cull_face_enabled;
    unsigned cull_face_mode;
    bool stencil_test_enabled;
    unsigned stencil_func;
    unsigned stencil_op_fail, stencil_op_zfail, stencil_op_zpass;
    int stencil_ref;
    unsigned stencil_read_mask;
    unsigned stencil_write_mask;
    unsigned front_face; 
    bool line_smooth_enabled;
    float line_width;
    bool point_size_enabled;
    float point_size;
    unsigned polygon_mode_face;
    unsigned polygon_mode_draw;
    bool scissor_test_enabled;
    bool seamless_cubemap;
    bool depth_clamp_enabled;
} renderstate_t;
 renderstate_t renderstate();
 bool            renderstate_compare(const renderstate_t *stateA, const renderstate_t *stateB);
 uint32_t        renderstate_checksum(const renderstate_t *state);
 void            renderstate_apply(const renderstate_t *state);
 void*    screenshot(int components); 
 void*    screenshot_async(int components); 
enum SKYBOX_FLAGS {
	SKYBOX_RAYLEIGH,
	SKYBOX_CUBEMAP,
	SKYBOX_PBR,
};
typedef struct skybox_t {
    handle program, rayleigh_program;
    mesh_t geometry;
    cubemap_t cubemap;
    int flags;
    bool rayleigh_immediate;
    texture_t sky, refl, env;
} skybox_t;
 skybox_t skybox(const char *panorama, int flags);
 skybox_t skybox_pbr(const char *sky_map, const char *refl_map, const char *env_map);
 int      skybox_render(skybox_t *sky, mat44 proj, mat44 view);
 void     skybox_destroy(skybox_t *sky);
 void     skybox_calc_sh(skybox_t *probe, skybox_t *sky, float sky_intensity);
 void     skybox_mie_calc_sh(skybox_t *sky, float sky_intensity);
 void     skybox_sh_reset(skybox_t *sky);  
 void     skybox_sh_shader(skybox_t *sky);  
 void     skybox_sh_add_light(skybox_t *sky, vec3 light, vec3 dir, float strength);  
 int      skybox_push_state(skybox_t *sky, mat44 proj, mat44 view); 
 int      skybox_pop_state(); 
 int ui_texture(const char *label, texture_t t);
 int ui_subtexture(const char *label, texture_t t, float u0, float v0, float u1, float v1);
 int ui_colormap( const char *label, colormap_t *cm );
 void     viewport_color(unsigned color);
 void     viewport_clear(bool color, bool depth);
 void     viewport_clip(vec2 from, vec2 to);
 void     viewport_area(vec2 from, vec2 to);
typedef enum SPRITE_FLAGS {
    SPRITE_PROJECTED = 1,
    SPRITE_ADDITIVE = 2,
    SPRITE_CENTERED = 4,
    SPRITE_RESOLUTION_INDEPENDANT = 128,
} SPRITE_FLAGS;
 void sprite( texture_t texture, float position[3], float rotation , unsigned color , unsigned flags);
 void sprite_rect( texture_t t, vec4 rect, vec4 pos, vec4 scaleoff, float tilt_deg, unsigned tint_rgba, unsigned flags);
 void sprite_sheet( texture_t texture, float sheet[3], float position[3], float rotation, float offset[2], float scale[2], unsigned rgba, unsigned flags);
 void sprite_flush();
typedef struct tileset_t {
    texture_t tex;            
    unsigned tile_w, tile_h;  
    unsigned cols, rows;      
    unsigned selected;        
} tileset_t;
 tileset_t tileset(texture_t tex, unsigned tile_w, unsigned tile_h, unsigned cols, unsigned rows);
 int       ui_tileset( tileset_t t );
typedef struct tilemap_t {
    int blank_chr;                
    unsigned cols, rows;          
    int* map;
    vec3 position;                
    float zindex;
    float tilt;
    unsigned tint;
    bool is_additive;
} tilemap_t;
 tilemap_t tilemap(const char *map, int blank_chr, int linefeed_chr);
 void      tilemap_render( tilemap_t m, tileset_t style );
 void      tilemap_render_ext( tilemap_t m, tileset_t style, float zindex, float xy_zoom[3], float tilt, unsigned tint, bool is_additive );
typedef struct tiled_t {
    char *map_name;
    unsigned first_gid, tilew, tileh, w, h;
    bool parallax;
    vec3 position;
    bool* visible;
    tilemap_t* layers;
    tileset_t* sets;
    char** names;
} tiled_t;
 tiled_t tiled(const char *file_tmx);
 void    tiled_render(tiled_t tmx, vec3 pos);
 void    ui_tiled(tiled_t *t);
enum {
    SHADERTOY_FLIP_Y = 2,
    SHADERTOY_IGNORE_FBO = 4,
    SHADERTOY_IGNORE_MOUSE = 8,
};
typedef struct shadertoy_t {
    handle vao, program;
    int uniforms[32];
    int texture_channels[4];
    int frame;
    uint64_t t;
    texture_t tx;
    vec2i dims;
    int flags;
    vec4 mouse;
} shadertoy_t;
 shadertoy_t  shadertoy( const char *shaderfile, unsigned flags );
 shadertoy_t* shadertoy_render( shadertoy_t *s, float delta );
 int      fx_load(const char *file);
 int      fx_load_from_mem(const char *nameid, const char *content);
 bool     fx_begin();
 bool     fx_begin_res(int w, int h);
 bool     fx_end(unsigned texture_id, unsigned depth_id);
 void     fx_apply(texture_t color_texture, texture_t depth_texture);
 void     fx_enable(int pass, int enabled);
 int      fx_enable_ordered(int pass);
 int      fx_enabled(int pass);
 void     fx_enable_all(int enabled);
 char *   fx_name(int pass);
 int      fx_find(const char *name);
 void     fx_setparam(int pass, const char *name, float value);
 void     fx_setparami(int pass, const char *name, int value);
 void     fx_setparam3(int pass, const char *name, vec3 value);
 void     fx_setparam4(int pass, const char *name, vec4 value);
 void     fx_setparamt(int pass, const char *name, texture_t value, int unit);
 int      fx_order(int pass, unsigned priority);
 unsigned fx_program(int pass);
 int      ui_fx(int pass);
 int      ui_fxs();
 void fx_drawpass_rs(int pass, texture_t color, texture_t depth, renderstate_t *rs);
 void fx_drawpass(int pass, texture_t color, texture_t depth);
typedef struct passfx {
    char *name;
    unsigned program;
    int uniforms[16];
    unsigned priority;
    bool enabled;
} passfx;
typedef struct postfx {
    unsigned vao;
    unsigned fb[2];
    texture_t diffuse[2], depth[2];
    passfx* pass;
    bool enabled;
    unsigned rolling_id;
    struct { set base; struct { set_item p; char* key; } tmp, *ptr; char* *tmpval; int (*typed_cmp)(char*, char*); uint64_t (*typed_hash)(char*); } * added;
} postfx;
 void postfx_create(postfx *fx, int flags);
 void postfx_destroy(postfx *fx);
 bool postfx_load(postfx *fx, const char *filemask);
 bool postfx_begin(postfx *fx, int width, int height);
 bool postfx_end(postfx *fx, unsigned texture_id, unsigned depth_id);
 bool postfx_apply(postfx *fx, texture_t color_texture, texture_t depth_texture);
 bool postfx_enabled(postfx *fx, int pass_number);
 bool postfx_enable(postfx *fx, int pass_number, bool enabled);
 int postfx_enable_ordered(postfx *fx, int pass);
 void postfx_enable_all(postfx *fx, bool enabled);
 void postfx_clear(postfx *fx);
 int postfx_order(postfx *fx, int pass, unsigned priority);
 unsigned postfx_program(postfx *fx, int pass);
 void postfx_setparam(postfx *fx, int pass, const char *name, float value);
 void postfx_setparami(postfx *fx, int pass, const char *name, int value);
 void postfx_setparam3(postfx *fx, int pass, const char *name, vec3 value);
 void postfx_setparam4(postfx *fx, int pass, const char *name, vec4 value);
 void postfx_setparamt(postfx *fx, int pass, const char *name, texture_t value, int unit);
 char* postfx_name(postfx *fx, int slot);
 passfx* postfx_pass(postfx *fx, int slot);
 void postfx_drawpass_rs(postfx *fx, int pass, texture_t color, texture_t depth, renderstate_t *rs);
 void postfx_drawpass(postfx *fx, int pass, texture_t color, texture_t depth);
 int   ui_postfx(postfx *fx, int slot);
 int   ui_postfxs(postfx *fx);
typedef struct bloom_params_t {
    int mips_count; 
    float filter_radius; 
    float strength; 
    float threshold; 
    float soft_threshold; 
    bool suppress_fireflies; 
} bloom_params_t;
 texture_t fxt_bloom(texture_t color, bloom_params_t params);
typedef struct reflect_params_t {
    bool disabled; 
    float max_distance; 
    float reflection_strength; 
    float metallic_threshold; 
    int downsample; 
    cubemap_t *cubemap; 
} reflect_params_t;
 texture_t fxt_reflect(texture_t color, texture_t depth, texture_t normal, texture_t matprops, mat44 proj, mat44 view, reflect_params_t params);
typedef struct atlas_frame_t {
    unsigned delay;
    vec4 sheet;
    vec2 anchor; 
    vec3i* indices;
    vec2* coords;
    vec2* uvs;
} atlas_frame_t;
typedef struct atlas_anim_t {
    unsigned name;
    unsigned* frames;
} atlas_anim_t;
typedef struct atlas_slice_frame_t {
    vec4 bounds;
    bool has_9slice;
    vec4 core;
    vec2 pivot;
    unsigned color;
    char *text;
} atlas_slice_frame_t;
typedef struct atlas_slice_t {
    unsigned name;
    unsigned* frames;
} atlas_slice_t;
typedef struct atlas_t {
    texture_t tex;
    atlas_frame_t* frames;
    atlas_anim_t*  anims;
    atlas_slice_t* slices;
    atlas_slice_frame_t* slice_frames;
    quarks_t db;
} atlas_t;
 atlas_t atlas_create(const char *inifile, unsigned flags);
 int         ui_atlas(atlas_t *a);
 int         ui_atlas_frame(atlas_frame_t *f);
 void    atlas_destroy(atlas_t *a);
typedef struct sprite_t { struct { const char *objname; union { uintptr_t objheader;  }; struct obj** objchildren; };
    vec4 gamepad; 
    vec2 fire;    
    vec4 pos;
    vec2 sca;
    float tilt;
    unsigned tint;
    unsigned frame;
    unsigned timer, timer_ms;
    unsigned flip_, flipped;
    unsigned play;
    bool paused;
    struct atlas_t *a; 
} sprite_t;
 void     sprite_ctor(sprite_t *s);
 void     sprite_dtor(sprite_t *s);
 void     sprite_tick(sprite_t *s);
 void     sprite_draw(sprite_t *s);
 void     sprite_edit(sprite_t *s);
 sprite_t*sprite_new(const char *ase, int bindings[6]);
 void     sprite_del(sprite_t *s);
 void     sprite_setanim(sprite_t *s, unsigned name);
enum FONT_FLAGS {
    FONT_512 = 0x0,
    FONT_1024 = 0x1,
    FONT_2048 = 0x2,
    FONT_4096 = 0x4,
    FONT_NO_OVERSAMPLE = 0x0,
    FONT_OVERSAMPLE_X = 0x08,
    FONT_OVERSAMPLE_Y = 0x10,
    FONT_ASCII = 0x800, 
    FONT_AR = 0x001000, 
    FONT_ZH = 0x002000, 
    FONT_EL = 0x004000, 
    FONT_EM = 0x008000, 
    FONT_EU = 0x010000, 
    FONT_HE = 0x020000, 
    FONT_JP = 0x040000, 
    FONT_KR = 0x080000, 
    FONT_RU = 0x100000, 
    FONT_TH = 0x200000, 
    FONT_VI = 0x400000, 
    FONT_CJK = FONT_ZH|FONT_JP|FONT_KR,
};
typedef struct font_metrics_t {
    float ascent;   
    float descent;  
    float linegap;  
    float linedist; 
} font_metrics_t;
 void  font_face(const char *face_tag, const char *filename_ttf, float font_size, unsigned flags);
 void  font_face_from_mem(const char *tag, const void *ttf_buffer, unsigned ttf_len, float font_size, unsigned flags);
 void  font_scale(const char *face_tag, int scale_index, float value);
 void  font_scales(const char *face_tag, float h1, float h2, float h3, float h4, float h5, float h6);
 void  font_color(const char *color_tag, uint32_t color);
 vec2 font_xy();
 void           font_goto(float x, float y);
 vec2 font_print(const char *text);
 vec2 font_clip(const char *text, vec4 rect);
 const char*    font_wrap(const char *text, float max_width);
 vec2 font_rect(const char *text);
 font_metrics_t font_metrics(const char *text);
 void* font_colorize(const char *text, const char *comma_types, const char *comma_keywords); 
 vec2 font_highlight(const char *text, const void *colors);
 void  ui_font();
enum LIGHT_TYPE {
    LIGHT_DIRECTIONAL,
    LIGHT_POINT,
    LIGHT_SPOT,
};
enum SHADOW_TECHNIQUE {
    SHADOW_VSM,
    SHADOW_CSM,
};
typedef struct light_t { struct { const char *objname; union { uintptr_t objheader;  }; struct obj** objchildren; };
    char *name;
    unsigned type;
    vec3 diffuse, specular, ambient;
    vec3 pos, dir;
    struct {
        float constant, linear, quadratic;
    } falloff;
    float radius;
    float specularPower;
    float innerCone, outerCone;
    bool cast_shadows;
    bool hard_shadows;
    unsigned shadow_technique;
    float shadow_distance;
    float shadow_near_clip;
    mat44 shadow_matrix[4];
    float min_variance; 
    float variance_transition; 
    float shadow_bias; 
    float normal_bias; 
    float shadow_softness;
    float penumbra_size;
    bool cached; 
    bool processed_shadows;
} light_t;
enum { OBJTYPE_light_t = OBJTYPE_light }; typedef struct { unsigned static_assert_on_L48 : !!(OBJTYPE_light <= 255); } static_assert_on_L_L48_0; typedef struct { unsigned static_assert_on_L48 : !!(sizeof(light_t) == ((sizeof(light_t)>>2)<<2)); } static_assert_on_L_L48_1;;
 light_t light();
 void    light_type(light_t* l, char type);
 void    light_diffuse(light_t* l, vec3 color);
 void    light_specular(light_t* l, vec3 color);
 void    light_ambient(light_t* l, vec3 color);
 void    light_pos(light_t* l, vec3 pos);
 void    light_dir(light_t* l, vec3 dir);
 void    light_power(light_t* l, float power);
 void    light_radius(light_t* l, float radius);
 void    light_falloff(light_t* l, float constant, float linear, float quadratic);
 void    light_cone(light_t* l, float innerCone, float outerCone);
 void    ui_light(light_t *l);
 void    ui_lights(unsigned num_lights, light_t *lights);
typedef struct shadowmap_t {
    mat44 V;
    mat44 PV;
    int vsm_texture_width;
    int csm_texture_width;
    int step;
    int light_step;
    int cascade_index;
    int max_cascades; 
    unsigned shadow_technique;
    float cascade_splits[4];
    frustum shadow_frustum;
    bool skip_render;
    int lights_pushed;
    handle fbo;
    uint64_t vram_usage;
    uint64_t vram_usage_total;
    uint64_t vram_usage_vsm;
    uint64_t vram_usage_csm;
    handle depth_texture;
    handle depth_texture_2d;
    float blend_region;
    int filter_size, window_size;
    handle offsets_texture;
    struct {
        int gen;
        unsigned shadow_technique;
        handle texture;
        handle texture_2d[4];
        float cascade_distances[4];
    } maps[8];
    handle saved_fb;
    handle saved_pass;
    int saved_vp[4];
    int gen;
    int old_filter_size;
    int old_window_size;
} shadowmap_t;
 shadowmap_t shadowmap(int vsm_texture_width, int csm_texture_width); 
 void          shadowmap_offsets_build(shadowmap_t *s, int filter_size, int window_size);
 void        shadowmap_destroy(shadowmap_t *s);
 void shadowmap_begin(shadowmap_t *s);
 bool   shadowmap_step(shadowmap_t *s); 
 void     shadowmap_light(shadowmap_t *s, light_t *l, mat44 cam_proj, mat44 cam_view); 
 void shadowmap_end(shadowmap_t *s);
 void ui_shadowmap(shadowmap_t *s);
enum UNIFORM_KIND {
    UNIFORM_BOOL,
    UNIFORM_INT,
    UNIFORM_UINT,
    UNIFORM_FLOAT,
    UNIFORM_VEC2,
    UNIFORM_VEC3,
    UNIFORM_VEC4,
    UNIFORM_MAT3,
    UNIFORM_MAT4,
    UNIFORM_SAMPLER2D,
    UNIFORM_SAMPLER3D,
    UNIFORM_SAMPLERCUBE,
};
enum MODEL_UNIFORMS {
    MODEL_UNIFORM_MV,
    MODEL_UNIFORM_MVP,
    MODEL_UNIFORM_VP,
    MODEL_UNIFORM_CAM_POS,
    MODEL_UNIFORM_CAM_DIR,
    MODEL_UNIFORM_BILLBOARD,
    MODEL_UNIFORM_MODEL,
    MODEL_UNIFORM_VIEW,
    MODEL_UNIFORM_INV_VIEW,
    MODEL_UNIFORM_PROJ,
    MODEL_UNIFORM_SKINNED,
    MODEL_UNIFORM_INSTANCED,
    MODEL_UNIFORM_VS_BONE_MATRIX,
    MODEL_UNIFORM_U_MATCAPS,
    MODEL_UNIFORM_FRAME_COUNT,
    MODEL_UNIFORM_FRAME_TIME,
    MODEL_UNIFORM_SHADOW_CAMERA_TO_SHADOW_VIEW,
    MODEL_UNIFORM_SHADOW_CAMERA_TO_SHADOW_PROJECTOR,
    MODEL_UNIFORM_SHADOW_TECHNIQUE,
    MODEL_UNIFORM_U_SHADOW_RECEIVER,
    MODEL_UNIFORM_U_BLEND_REGION,
    MODEL_UNIFORM_SHADOW_OFFSETS,
    MODEL_UNIFORM_SHADOW_FILTER_SIZE,
    MODEL_UNIFORM_SHADOW_WINDOW_SIZE,
    MODEL_UNIFORM_RESOLUTION,
    MODEL_UNIFORM_HAS_TEX_ENV_CUBEMAP,
    MODEL_UNIFORM_HAS_TEX_SKYSPHERE,
    MODEL_UNIFORM_HAS_TEX_SKYENV,
    MODEL_UNIFORM_TEX_ENV_CUBEMAP,
    MODEL_UNIFORM_TEX_SKYSPHERE,
    MODEL_UNIFORM_SKYSPHERE_MIP_COUNT,
    MODEL_UNIFORM_TEX_SKYENV,
    MODEL_UNIFORM_TEX_BRDF_LUT,
    MODEL_UNIFORM_MAX_SHADOW_CASCADES,
    MODEL_UNIFORM_SHADOW_CASCADE_DISTANCES,
    MODEL_UNIFORM_SHADOW_CASCADE_DISTANCES_COUNT = MODEL_UNIFORM_SHADOW_CASCADE_DISTANCES+4,
    MODEL_UNIFORM_SHADOW_MAP_2D,
    MODEL_UNIFORM_SHADOW_MAP_2D_COUNT = MODEL_UNIFORM_SHADOW_MAP_2D+4,
    MODEL_UNIFORM_SHADOW_MAP_CUBEMAP,
    MODEL_UNIFORM_SHADOW_MAP_CUBEMAP_COUNT = MODEL_UNIFORM_SHADOW_MAP_CUBEMAP+96,
    NUM_MODEL_UNIFORMS
};
typedef struct model_uniform_t {
    const char *name;
    int kind;
    union {
        float f;
        int i;
        bool b;
        unsigned u;
        vec2 v2;
        vec3 v3;
        vec4 v4;
        mat33 m33;
        mat44 m44;
    };
} model_uniform_t;
 bool model_compareuniform(const model_uniform_t *a, const model_uniform_t *b);
 bool model_compareuniforms(unsigned s1, const model_uniform_t *a, unsigned s2, const model_uniform_t *b);
 uint32_t model_uniforms_checksum(unsigned count, model_uniform_t *uniforms);
typedef struct drawmat_t  {
    handle fbo_id;
    texture_t matprops; 
    texture_t normals;
    texture_t albedo;
    texture_t depth;
} drawmat_t;
 drawmat_t drawmat();
 void      drawmat_destroy(drawmat_t *lookup);
 void      drawmat_clear(drawmat_t *lookup);
enum MODEL_FLAGS {
    MODEL_NO_ANIMATIONS = 1,
    MODEL_NO_MESHES = 2,
    MODEL_NO_TEXTURES = 4,
    MODEL_NO_FILTERING = 8,
    MODEL_STREAM = 16, 
    MODEL_CACHED = 0, 
    MODEL_SHARED = 512, 
    MODEL_UNIQUE = 1024, 
    MODEL_PROCEDURAL = 2048,
};
enum FOG_MODE {
    FOG_NONE,
    FOG_LINEAR,
    FOG_EXP,
    FOG_EXP2,
    FOG_DEPTH,
};
enum RENDER_PASS {
    RENDER_PASS_OPAQUE,
    RENDER_PASS_TRANSPARENT,
    RENDER_PASS_OVERRIDES_BEGIN,
    RENDER_PASS_MATERIAL,
    RENDER_PASS_SHADOW,
    RENDER_PASS_CUSTOM, 
    RENDER_PASS_OVERRIDES_END,
    NUM_RENDER_PASSES
};
enum MODEL_TEXTURE_SLOTS {
    MODEL_TEXTURE_ALBEDO,
    MODEL_TEXTURE_NORMALS,
    MODEL_TEXTURE_ROUGHNESS,
    MODEL_TEXTURE_METALLIC,
    MODEL_TEXTURE_AO,
    MODEL_TEXTURE_AMBIENT,
    MODEL_TEXTURE_EMISSIVE,
    MODEL_TEXTURE_PARALLAX,
    MODEL_TEXTURE_ENV_CUBEMAP,
    MODEL_TEXTURE_SKYSPHERE,
    MODEL_TEXTURE_SKYENV,
    MODEL_TEXTURE_BRDF_LUT,
    MODEL_TEXTURE_SHADOW_OFFSETS,
    MODEL_TEXTURE_SHADOW_MAP_2D,
    MODEL_TEXTURE_SHADOW_MAP_2D_COUNT = MODEL_TEXTURE_SHADOW_MAP_2D+4,
    MODEL_TEXTURE_SHADOW_MAP_CUBEMAP,
    MODEL_TEXTURE_SHADOW_MAP_CUBEMAP_COUNT = MODEL_TEXTURE_SHADOW_MAP_CUBEMAP+8,
    MODEL_TEXTURE_USER_DEFINED,
    NUM_MODEL_TEXTURE_SLOTS
};
typedef struct lightarray_t {
    light_t *base;
    unsigned count;
} lightarray_t;
typedef struct model_shaderinfo_t {
    char *vs;
    char *fs;
    char *defines;
    char** switches;
} model_shaderinfo_t;
typedef struct model_t {
    struct iqm_t *iqm; 
    char *filename;
    unsigned num_textures;
    char **texture_names;
    material_t* materials;
    texture_t sky_refl, sky_env, sky_cubemap;
    unsigned num_meshes;
    unsigned num_triangles;
    unsigned num_joints; 
    unsigned num_anims;
    unsigned num_frames;
    shadowmap_t *shadow_map;
    lightarray_t lights;
    bool shadow_receiver;
    float curframe;
    mat44 pivot;
    int stride; 
    void *verts;
    int num_verts;
    void *tris;
    int num_tris;
    handle vao, ibo, vbo, vao_instanced;
    int* lod_collapse_map; 
    void *lod_verts;
    int lod_num_verts;
    void *lod_tris;
    int lod_num_tris;
    unsigned flags;
    unsigned billboard;
    float *instanced_matrices;
    unsigned num_instances;
    int stored_flags;
    renderstate_t rs[NUM_RENDER_PASSES];
    bool frustum_enabled;
    frustum frustum_state;
    model_uniform_t* uniforms;
    model_shaderinfo_t shaderinfo;
} model_t;
typedef struct model_vertex_t {
    vec3 position;
    vec2 texcoord;
    vec3 normal;
    vec4 tangent;
    uint8_t blend_indices[4];
    uint8_t blend_weights[4];
    float blend_vertex_index;
    vec4 color;
    vec2 texcoord2;
} model_vertex_t;
enum BILLBOARD_MODE {
    BILLBOARD_X = 0x1,
    BILLBOARD_Y = 0x2,
    BILLBOARD_Z = 0x4,
    BILLBOARD_CYLINDRICAL = BILLBOARD_X|BILLBOARD_Z,
    BILLBOARD_SPHERICAL = BILLBOARD_X|BILLBOARD_Y|BILLBOARD_Z
};
 model_t  model(const char *filename, int flags); 
 model_t  model_from_mem(const void *mem, int sz, int flags); 
 void     model_sync(model_t m, int num_vertices, model_vertex_t *vertices, int num_indices, uint32_t *indices); 
 float    model_animate(model_t, float curframe);
 float    model_animate_clip(model_t, float curframe, int minframe, int maxframe, bool loop);
 float    model_animate_blends(model_t m, anim_t *primary, anim_t *secondary, float delta);
 aabb model_aabb(model_t, mat44 transform);
 sphere model_bsphere(model_t, mat44 transform);
 void     model_setshader(model_t*, const char *vs, const char *fs, const char *defines);
 void     model_adduniform(model_t*, model_uniform_t uniform);
 void     model_adduniforms(model_t*, unsigned count, model_uniform_t *uniforms);
 void     model_addswitch(model_t*, const char *name);
 void     model_delswitch(model_t*, const char *name);
 uint32_t model_uniforms_checksum(unsigned count, model_uniform_t *uniforms);
 void     model_fog(model_t*, unsigned mode, vec3 color, float start, float end, float density);
 void     model_skybox(model_t*, skybox_t sky);
 void     model_cubemap(model_t*, cubemap_t *c);
 void     model_probe(model_t*, vec3 center, float radius, unsigned count, cubemap_t *c);
 void     model_shadow(model_t*, shadowmap_t *sm);
 void     model_light(model_t*, unsigned count, light_t *lights);
 void     model_render(model_t *mdl, mat44 proj, mat44 view, mat44* models, unsigned count, int pass); 
 void     model_skeletonrender(model_t, mat44 model);
 bool     model_has_transparency_mesh(model_t m, int mesh);
 bool     model_has_transparency(model_t m);
 void     model_frustumset(model_t *m, frustum f);
 void     model_frustumclear(model_t *m);
 bool     model_bonegetpose(model_t m, unsigned joint, mat34 *out);
 bool     model_bonegetposition(model_t m, unsigned joint, mat44 M, vec3 *out);
 void     model_destroy(model_t);
 vec3 pose(bool forward, float curframe, int minframe, int maxframe, bool loop, float *opt_retframe);
 void ui_materials(model_t *m);
 void     drawmat_render(drawmat_t *lookup, model_t m, mat44 proj, mat44 view, mat44* models, unsigned count);
 uint64_t render_frame();
 float    render_fps();
 int      render_msaa();
typedef struct object_t {
    uint64_t renderbucket;
    mat44 transform;
    quat rot;
    vec3 sca, pos, euler, pivot;
    texture_t* textures;
    model_t model, model_shadow;
    anim_t anim;
    float anim_speed;
    aabb bounds;
    unsigned billboard; 
    bool disable_frustum_check;
    bool cast_shadows;
    bool fullbright;
    bool batchable;
    handle* old_texture_ids;
    texture_t* old_textures;
    float distance;
    bool skip_draw;
    bool light_cached; 
    bool was_batched;
    mat44* instances;
    unsigned num_instances;
    unsigned* pair_instance;
    uint32_t checksum;
} object_t;
 object_t object();
 bool object_compare(object_t *obj1, object_t *obj2);
 void object_rotate(object_t *obj, vec3 euler);
 void object_pivot(object_t *obj, vec3 euler);
 void object_teleport(object_t *obj, vec3 pos);
 void object_move(object_t *obj, vec3 inc);
 vec3 object_position(object_t *obj);
 void object_scale(object_t *obj, vec3 sca);
 void object_batchable(object_t *obj, bool batchable);
 void object_model(object_t *obj, model_t model);
 void object_model_shadow(object_t *obj, model_t model);
 void object_anim(object_t *obj, anim_t anim, float speed);
 void object_diffuse(object_t *obj, texture_t tex);
 void object_diffuse_push(object_t *obj, texture_t tex);
 void object_diffuse_pop(object_t *obj);
 void object_billboard(object_t *obj, unsigned mode);
enum SCENE_FLAGS {
    SCENE_WIREFRAME = 1,
    SCENE_CULLFACE = 2,
    SCENE_BACKGROUND = 4,
    SCENE_FOREGROUND = 8,
    SCENE_UPDATE_SH_COEF = 16,
    SCENE_SHADOWS = 32,
    SCENE_POSTFX = 64,
    SCENE_DRAWMAT = 128,
};
typedef struct scene_t {
    object_t* objs;
    light_t* lights;
    skybox_t skybox;
    int u_coefficients_sh;
    shadowmap_t shadowmap;
    drawmat_t drawmat;
} scene_t;
 scene_t*  scene_push();
 void      scene_pop();
 scene_t*  scene_get_active();
 int       scene_merge(const char *source);
 void      scene_render(int flags);
 object_t* scene_spawn();
 unsigned  scene_count();
 object_t* scene_index(unsigned index);
 light_t*  scene_spawn_light();
 void      scene_merge_lights(const char *source);
 unsigned  scene_count_light();
 light_t*  scene_index_light(unsigned index);
 void      scene_skybox(skybox_t sky);
 bool editor_active();
 bool editor_hovered();
 int  gizmo(vec3 *pos, vec3 *rot, vec3 *sca);
 bool gizmo_active();
 bool gizmo_hovered();
typedef int8_t Sint8;
typedef uint8_t Uint8;
typedef int16_t Sint16;
typedef uint16_t Uint16;
typedef int32_t Sint32;
typedef uint32_t Uint32;
typedef int64_t Sint64;
typedef uint64_t Uint64;
typedef Sint64 SDL_Time;
typedef int SDL_compile_time_assert_longlong_size64[(sizeof(long long) == 8) * 2 - 1]; 
typedef int SDL_compile_time_assert_bool_size[(sizeof(bool) == 1) * 2 - 1];
typedef int SDL_compile_time_assert_uint8_size[(sizeof(Uint8) == 1) * 2 - 1];
typedef int SDL_compile_time_assert_sint8_size[(sizeof(Sint8) == 1) * 2 - 1];
typedef int SDL_compile_time_assert_uint16_size[(sizeof(Uint16) == 2) * 2 - 1];
typedef int SDL_compile_time_assert_sint16_size[(sizeof(Sint16) == 2) * 2 - 1];
typedef int SDL_compile_time_assert_uint32_size[(sizeof(Uint32) == 4) * 2 - 1];
typedef int SDL_compile_time_assert_sint32_size[(sizeof(Sint32) == 4) * 2 - 1];
typedef int SDL_compile_time_assert_uint64_size[(sizeof(Uint64) == 8) * 2 - 1];
typedef int SDL_compile_time_assert_sint64_size[(sizeof(Sint64) == 8) * 2 - 1];
typedef int SDL_compile_time_assert_uint64_longlong[(sizeof(Uint64) <= sizeof(unsigned long long)) * 2 - 1];
typedef int SDL_compile_time_assert_size_t_longlong[(sizeof(size_t) <= sizeof(unsigned long long)) * 2 - 1];
typedef struct SDL_alignment_test
{
    Uint8 a;
    void *b;
} SDL_alignment_test;
typedef int SDL_compile_time_assert_struct_alignment[(sizeof(SDL_alignment_test) == (2 * sizeof(void *))) * 2 - 1];
typedef int SDL_compile_time_assert_two_s_complement[((int)~(int)0 == (int)(-1)) * 2 - 1];
typedef enum SDL_DUMMY_ENUM
{
    DUMMY_ENUM_VALUE
} SDL_DUMMY_ENUM;
typedef int SDL_compile_time_assert_enum[(sizeof(SDL_DUMMY_ENUM) == sizeof(int)) * 2 - 1];
#pragma pack(push,8)
extern   void * __cdecl SDL_malloc(size_t size);
extern    void * __cdecl SDL_calloc(size_t nmemb, size_t size);
extern   void * __cdecl SDL_realloc(void *mem, size_t size);
extern  void __cdecl SDL_free(void *mem);
typedef void *(__cdecl *SDL_malloc_func)(size_t size);
typedef void *(__cdecl *SDL_calloc_func)(size_t nmemb, size_t size);
typedef void *(__cdecl *SDL_realloc_func)(void *mem, size_t size);
typedef void (__cdecl *SDL_free_func)(void *mem);
extern  void __cdecl SDL_GetOriginalMemoryFunctions(SDL_malloc_func *malloc_func,
                                                            SDL_calloc_func *calloc_func,
                                                            SDL_realloc_func *realloc_func,
                                                            SDL_free_func *free_func);
extern  void __cdecl SDL_GetMemoryFunctions(SDL_malloc_func *malloc_func,
                                                    SDL_calloc_func *calloc_func,
                                                    SDL_realloc_func *realloc_func,
                                                    SDL_free_func *free_func);
extern  bool __cdecl SDL_SetMemoryFunctions(SDL_malloc_func malloc_func,
                                                            SDL_calloc_func calloc_func,
                                                            SDL_realloc_func realloc_func,
                                                            SDL_free_func free_func);
extern   void * __cdecl SDL_aligned_alloc(size_t alignment, size_t size);
extern  void __cdecl SDL_aligned_free(void *mem);
extern  int __cdecl SDL_GetNumAllocations(void);
typedef struct SDL_Environment SDL_Environment;
extern  SDL_Environment * __cdecl SDL_GetEnvironment(void);
extern  SDL_Environment * __cdecl SDL_CreateEnvironment(bool populated);
extern  const char * __cdecl SDL_GetEnvironmentVariable(SDL_Environment *env, const char *name);
extern  char ** __cdecl SDL_GetEnvironmentVariables(SDL_Environment *env);
extern  bool __cdecl SDL_SetEnvironmentVariable(SDL_Environment *env, const char *name, const char *value, bool overwrite);
extern  bool __cdecl SDL_UnsetEnvironmentVariable(SDL_Environment *env, const char *name);
extern  void __cdecl SDL_DestroyEnvironment(SDL_Environment *env);
extern  const char * __cdecl SDL_getenv(const char *name);
extern  const char * __cdecl SDL_getenv_unsafe(const char *name);
extern  int __cdecl SDL_setenv_unsafe(const char *name, const char *value, int overwrite);
extern  int __cdecl SDL_unsetenv_unsafe(const char *name);
typedef int (__cdecl *SDL_CompareCallback)(const void *a, const void *b);
extern  void __cdecl SDL_qsort(void *base, size_t nmemb, size_t size, SDL_CompareCallback compare);
extern  void * __cdecl SDL_bsearch(const void *key, const void *base, size_t nmemb, size_t size, SDL_CompareCallback compare);
typedef int (__cdecl *SDL_CompareCallback_r)(void *userdata, const void *a, const void *b);
extern  void __cdecl SDL_qsort_r(void *base, size_t nmemb, size_t size, SDL_CompareCallback_r compare, void *userdata);
extern  void * __cdecl SDL_bsearch_r(const void *key, const void *base, size_t nmemb, size_t size, SDL_CompareCallback_r compare, void *userdata);
extern  int __cdecl SDL_abs(int x);
extern  int __cdecl SDL_isalpha(int x);
extern  int __cdecl SDL_isalnum(int x);
extern  int __cdecl SDL_isblank(int x);
extern  int __cdecl SDL_iscntrl(int x);
extern  int __cdecl SDL_isdigit(int x);
extern  int __cdecl SDL_isxdigit(int x);
extern  int __cdecl SDL_ispunct(int x);
extern  int __cdecl SDL_isspace(int x);
extern  int __cdecl SDL_isupper(int x);
extern  int __cdecl SDL_islower(int x);
extern  int __cdecl SDL_isprint(int x);
extern  int __cdecl SDL_isgraph(int x);
extern  int __cdecl SDL_toupper(int x);
extern  int __cdecl SDL_tolower(int x);
extern  Uint16 __cdecl SDL_crc16(Uint16 crc, const void *data, size_t len);
extern  Uint32 __cdecl SDL_crc32(Uint32 crc, const void *data, size_t len);
extern  Uint32 __cdecl SDL_murmur3_32(const void *data, size_t len, Uint32 seed);
extern  void * __cdecl SDL_memcpy(  void *dst,   const void *src, size_t len);
extern  void * __cdecl SDL_memmove(  void *dst,   const void *src, size_t len);
extern  void * __cdecl SDL_memset(  void *dst, int c, size_t len);
extern  void * __cdecl SDL_memset4(void *dst, Uint32 val, size_t dwords);
extern  int __cdecl SDL_memcmp(const void *s1, const void *s2, size_t len);
extern  size_t __cdecl SDL_wcslen(const wchar_t *wstr);
extern  size_t __cdecl SDL_wcsnlen(const wchar_t *wstr, size_t maxlen);
extern  size_t __cdecl SDL_wcslcpy(  wchar_t *dst, const wchar_t *src, size_t maxlen);
extern  size_t __cdecl SDL_wcslcat(  wchar_t *dst, const wchar_t *src, size_t maxlen);
extern  wchar_t * __cdecl SDL_wcsdup(const wchar_t *wstr);
extern  wchar_t * __cdecl SDL_wcsstr(const wchar_t *haystack, const wchar_t *needle);
extern  wchar_t * __cdecl SDL_wcsnstr(const wchar_t *haystack, const wchar_t *needle, size_t maxlen);
extern  int __cdecl SDL_wcscmp(const wchar_t *str1, const wchar_t *str2);
extern  int __cdecl SDL_wcsncmp(const wchar_t *str1, const wchar_t *str2, size_t maxlen);
extern  int __cdecl SDL_wcscasecmp(const wchar_t *str1, const wchar_t *str2);
extern  int __cdecl SDL_wcsncasecmp(const wchar_t *str1, const wchar_t *str2, size_t maxlen);
extern  long __cdecl SDL_wcstol(const wchar_t *str, wchar_t **endp, int base);
extern  size_t __cdecl SDL_strlen(const char *str);
extern  size_t __cdecl SDL_strnlen(const char *str, size_t maxlen);
extern  size_t __cdecl SDL_strlcpy(  char *dst, const char *src, size_t maxlen);
extern  size_t __cdecl SDL_utf8strlcpy(  char *dst, const char *src, size_t dst_bytes);
extern  size_t __cdecl SDL_strlcat(  char *dst, const char *src, size_t maxlen);
extern   char * __cdecl SDL_strdup(const char *str);
extern   char * __cdecl SDL_strndup(const char *str, size_t maxlen);
extern  char * __cdecl SDL_strrev(char *str);
extern  char * __cdecl SDL_strupr(char *str);
extern  char * __cdecl SDL_strlwr(char *str);
extern  char * __cdecl SDL_strchr(const char *str, int c);
extern  char * __cdecl SDL_strrchr(const char *str, int c);
extern  char * __cdecl SDL_strstr(const char *haystack, const char *needle);
extern  char * __cdecl SDL_strnstr(const char *haystack, const char *needle, size_t maxlen);
extern  char * __cdecl SDL_strcasestr(const char *haystack, const char *needle);
extern  char * __cdecl SDL_strtok_r(char *s1, const char *s2, char **saveptr);
extern  size_t __cdecl SDL_utf8strlen(const char *str);
extern  size_t __cdecl SDL_utf8strnlen(const char *str, size_t bytes);
extern  char * __cdecl SDL_itoa(int value, char *str, int radix);
extern  char * __cdecl SDL_uitoa(unsigned int value, char *str, int radix);
extern  char * __cdecl SDL_ltoa(long value, char *str, int radix);
extern  char * __cdecl SDL_ultoa(unsigned long value, char *str, int radix);
extern  char * __cdecl SDL_lltoa(long long value, char *str, int radix);
extern  char * __cdecl SDL_ulltoa(unsigned long long value, char *str, int radix);
extern  int __cdecl SDL_atoi(const char *str);
extern  double __cdecl SDL_atof(const char *str);
extern  long __cdecl SDL_strtol(const char *str, char **endp, int base);
extern  unsigned long __cdecl SDL_strtoul(const char *str, char **endp, int base);
extern  long long __cdecl SDL_strtoll(const char *str, char **endp, int base);
extern  unsigned long long __cdecl SDL_strtoull(const char *str, char **endp, int base);
extern  double __cdecl SDL_strtod(const char *str, char **endp);
extern  int __cdecl SDL_strcmp(const char *str1, const char *str2);
extern  int __cdecl SDL_strncmp(const char *str1, const char *str2, size_t maxlen);
extern  int __cdecl SDL_strcasecmp(const char *str1, const char *str2);
extern  int __cdecl SDL_strncasecmp(const char *str1, const char *str2, size_t maxlen);
extern  char * __cdecl SDL_strpbrk(const char *str, const char *breakset);
extern  Uint32 __cdecl SDL_StepUTF8(const char **pstr, size_t *pslen);
extern  Uint32 __cdecl SDL_StepBackUTF8(const char *start, const char **pstr);
extern  char * __cdecl SDL_UCS4ToUTF8(Uint32 codepoint, char *dst);
extern  int __cdecl SDL_sscanf(const char *text,  const char *fmt, ...) ;
extern  int __cdecl SDL_vsscanf(const char *text,  const char *fmt, va_list ap) ;
extern  int __cdecl SDL_snprintf(  char *text, size_t maxlen,   const char *fmt, ...) ;
extern  int __cdecl SDL_swprintf(  wchar_t *text, size_t maxlen,   const wchar_t *fmt, ...) ;
extern  int __cdecl SDL_vsnprintf(  char *text, size_t maxlen,   const char *fmt, va_list ap) ;
extern  int __cdecl SDL_vswprintf(  wchar_t *text, size_t maxlen,   const wchar_t *fmt, va_list ap) ;
extern  int __cdecl SDL_asprintf(char **strp,   const char *fmt, ...) ;
extern  int __cdecl SDL_vasprintf(char **strp,   const char *fmt, va_list ap) ;
extern  void __cdecl SDL_srand(Uint64 seed);
extern  Sint32 __cdecl SDL_rand(Sint32 n);
extern  float __cdecl SDL_randf(void);
extern  Uint32 __cdecl SDL_rand_bits(void);
extern  Sint32 __cdecl SDL_rand_r(Uint64 *state, Sint32 n);
extern  float __cdecl SDL_randf_r(Uint64 *state);
extern  Uint32 __cdecl SDL_rand_bits_r(Uint64 *state);
extern  double __cdecl SDL_acos(double x);
extern  float __cdecl SDL_acosf(float x);
extern  double __cdecl SDL_asin(double x);
extern  float __cdecl SDL_asinf(float x);
extern  double __cdecl SDL_atan(double x);
extern  float __cdecl SDL_atanf(float x);
extern  double __cdecl SDL_atan2(double y, double x);
extern  float __cdecl SDL_atan2f(float y, float x);
extern  double __cdecl SDL_ceil(double x);
extern  float __cdecl SDL_ceilf(float x);
extern  double __cdecl SDL_copysign(double x, double y);
extern  float __cdecl SDL_copysignf(float x, float y);
extern  double __cdecl SDL_cos(double x);
extern  float __cdecl SDL_cosf(float x);
extern  double __cdecl SDL_exp(double x);
extern  float __cdecl SDL_expf(float x);
extern  double __cdecl SDL_fabs(double x);
extern  float __cdecl SDL_fabsf(float x);
extern  double __cdecl SDL_floor(double x);
extern  float __cdecl SDL_floorf(float x);
extern  double __cdecl SDL_trunc(double x);
extern  float __cdecl SDL_truncf(float x);
extern  double __cdecl SDL_fmod(double x, double y);
extern  float __cdecl SDL_fmodf(float x, float y);
extern  int __cdecl SDL_isinf(double x);
extern  int __cdecl SDL_isinff(float x);
extern  int __cdecl SDL_isnan(double x);
extern  int __cdecl SDL_isnanf(float x);
extern  double __cdecl SDL_log(double x);
extern  float __cdecl SDL_logf(float x);
extern  double __cdecl SDL_log10(double x);
extern  float __cdecl SDL_log10f(float x);
extern  double __cdecl SDL_modf(double x, double *y);
extern  float __cdecl SDL_modff(float x, float *y);
extern  double __cdecl SDL_pow(double x, double y);
extern  float __cdecl SDL_powf(float x, float y);
extern  double __cdecl SDL_round(double x);
extern  float __cdecl SDL_roundf(float x);
extern  long __cdecl SDL_lround(double x);
extern  long __cdecl SDL_lroundf(float x);
extern  double __cdecl SDL_scalbn(double x, int n);
extern  float __cdecl SDL_scalbnf(float x, int n);
extern  double __cdecl SDL_sin(double x);
extern  float __cdecl SDL_sinf(float x);
extern  double __cdecl SDL_sqrt(double x);
extern  float __cdecl SDL_sqrtf(float x);
extern  double __cdecl SDL_tan(double x);
extern  float __cdecl SDL_tanf(float x);
typedef struct SDL_iconv_data_t *SDL_iconv_t;
extern  SDL_iconv_t __cdecl SDL_iconv_open(const char *tocode,
                                                   const char *fromcode);
extern  int __cdecl SDL_iconv_close(SDL_iconv_t cd);
extern  size_t __cdecl SDL_iconv(SDL_iconv_t cd, const char **inbuf,
                                         size_t *inbytesleft, char **outbuf,
                                         size_t *outbytesleft);
extern  char * __cdecl SDL_iconv_string(const char *tocode,
                                               const char *fromcode,
                                               const char *inbuf,
                                               size_t inbytesleft);
 bool SDL_size_mul_check_overflow(size_t a, size_t b, size_t *ret)
{
    if (a != 0 && b > ((size_t) -1) / a) {
        return false;
    }
    *ret = a * b;
    return true;
}
 bool SDL_size_add_check_overflow(size_t a, size_t b, size_t *ret)
{
    if (b > ((size_t) -1) - a) {
        return false;
    }
    *ret = a + b;
    return true;
}
typedef void (*SDL_FunctionPointer)(void);
#pragma pack(pop)
#pragma pack(push,8)
    extern void __cdecl __debugbreak(void);
typedef enum SDL_AssertState
{
    SDL_ASSERTION_RETRY,  
    SDL_ASSERTION_BREAK,  
    SDL_ASSERTION_ABORT,  
    SDL_ASSERTION_IGNORE,  
    SDL_ASSERTION_ALWAYS_IGNORE  
} SDL_AssertState;
typedef struct SDL_AssertData
{
    bool always_ignore;  
    unsigned int trigger_count; 
    const char *condition;  
    const char *filename;  
    int linenum;  
    const char *function;  
    const struct SDL_AssertData *next;  
} SDL_AssertData;
extern  SDL_AssertState __cdecl SDL_ReportAssertion(SDL_AssertData *data,
                                                            const char *func,
                                                            const char *file, int line) ;
typedef SDL_AssertState (__cdecl *SDL_AssertionHandler)(
                                 const SDL_AssertData *data, void *userdata);
extern  void __cdecl SDL_SetAssertionHandler(
                                            SDL_AssertionHandler handler,
                                            void *userdata);
extern  SDL_AssertionHandler __cdecl SDL_GetDefaultAssertionHandler(void);
extern  SDL_AssertionHandler __cdecl SDL_GetAssertionHandler(void **puserdata);
extern  const SDL_AssertData * __cdecl SDL_GetAssertionReport(void);
extern  void __cdecl SDL_ResetAssertionReport(void);
#pragma pack(pop)
#pragma pack(push,8)
typedef int SDL_SpinLock;
extern  bool __cdecl SDL_TryLockSpinlock(SDL_SpinLock *lock);
extern  void __cdecl SDL_LockSpinlock(SDL_SpinLock *lock);
extern  void __cdecl SDL_UnlockSpinlock(SDL_SpinLock *lock);
void _ReadWriteBarrier(void);
#pragma intrinsic(_ReadWriteBarrier)
extern  void __cdecl SDL_MemoryBarrierReleaseFunction(void);
extern  void __cdecl SDL_MemoryBarrierAcquireFunction(void);
typedef struct SDL_AtomicInt { int value; } SDL_AtomicInt;
extern  bool __cdecl SDL_CompareAndSwapAtomicInt(SDL_AtomicInt *a, int oldval, int newval);
extern  int __cdecl SDL_SetAtomicInt(SDL_AtomicInt *a, int v);
extern  int __cdecl SDL_GetAtomicInt(SDL_AtomicInt *a);
extern  int __cdecl SDL_AddAtomicInt(SDL_AtomicInt *a, int v);
typedef struct SDL_AtomicU32 { Uint32 value; } SDL_AtomicU32;
extern  bool __cdecl SDL_CompareAndSwapAtomicU32(SDL_AtomicU32 *a, Uint32 oldval, Uint32 newval);
extern  Uint32 __cdecl SDL_SetAtomicU32(SDL_AtomicU32 *a, Uint32 v);
extern  Uint32 __cdecl SDL_GetAtomicU32(SDL_AtomicU32 *a);
extern  bool __cdecl SDL_CompareAndSwapAtomicPointer(void **a, void *oldval, void *newval);
extern  void * __cdecl SDL_SetAtomicPointer(void **a, void *v);
extern  void * __cdecl SDL_GetAtomicPointer(void **a);
#pragma pack(pop)
#pragma pack(push,8)
#pragma intrinsic(_byteswap_ushort)
#pragma intrinsic(_byteswap_ulong)
#pragma intrinsic(_byteswap_uint64)
 float SDL_SwapFloat(float x)
{
    union {
        float f;
        Uint32 ui32;
    } swapper;
    swapper.f = x;
    swapper.ui32 = _byteswap_ulong(swapper.ui32);
    return swapper.f;
}
#pragma pack(pop)
#pragma pack(push,8)
extern  bool __cdecl SDL_SetError(  const char *fmt, ...) ;
extern  bool __cdecl SDL_SetErrorV(  const char *fmt, va_list ap) ;
extern  bool __cdecl SDL_OutOfMemory(void);
extern  const char * __cdecl SDL_GetError(void);
extern  bool __cdecl SDL_ClearError(void);
#pragma pack(pop)
#pragma pack(push,8)
typedef Uint32 SDL_PropertiesID;
typedef enum SDL_PropertyType
{
    SDL_PROPERTY_TYPE_INVALID,
    SDL_PROPERTY_TYPE_POINTER,
    SDL_PROPERTY_TYPE_STRING,
    SDL_PROPERTY_TYPE_NUMBER,
    SDL_PROPERTY_TYPE_FLOAT,
    SDL_PROPERTY_TYPE_BOOLEAN
} SDL_PropertyType;
extern  SDL_PropertiesID __cdecl SDL_GetGlobalProperties(void);
extern  SDL_PropertiesID __cdecl SDL_CreateProperties(void);
extern  bool __cdecl SDL_CopyProperties(SDL_PropertiesID src, SDL_PropertiesID dst);
extern  bool __cdecl SDL_LockProperties(SDL_PropertiesID props);
extern  void __cdecl SDL_UnlockProperties(SDL_PropertiesID props);
typedef void (__cdecl *SDL_CleanupPropertyCallback)(void *userdata, void *value);
extern  bool __cdecl SDL_SetPointerPropertyWithCleanup(SDL_PropertiesID props, const char *name, void *value, SDL_CleanupPropertyCallback cleanup, void *userdata);
extern  bool __cdecl SDL_SetPointerProperty(SDL_PropertiesID props, const char *name, void *value);
extern  bool __cdecl SDL_SetStringProperty(SDL_PropertiesID props, const char *name, const char *value);
extern  bool __cdecl SDL_SetNumberProperty(SDL_PropertiesID props, const char *name, Sint64 value);
extern  bool __cdecl SDL_SetFloatProperty(SDL_PropertiesID props, const char *name, float value);
extern  bool __cdecl SDL_SetBooleanProperty(SDL_PropertiesID props, const char *name, bool value);
extern  bool __cdecl SDL_HasProperty(SDL_PropertiesID props, const char *name);
extern  SDL_PropertyType __cdecl SDL_GetPropertyType(SDL_PropertiesID props, const char *name);
extern  void * __cdecl SDL_GetPointerProperty(SDL_PropertiesID props, const char *name, void *default_value);
extern  const char * __cdecl SDL_GetStringProperty(SDL_PropertiesID props, const char *name, const char *default_value);
extern  Sint64 __cdecl SDL_GetNumberProperty(SDL_PropertiesID props, const char *name, Sint64 default_value);
extern  float __cdecl SDL_GetFloatProperty(SDL_PropertiesID props, const char *name, float default_value);
extern  bool __cdecl SDL_GetBooleanProperty(SDL_PropertiesID props, const char *name, bool default_value);
extern  bool __cdecl SDL_ClearProperty(SDL_PropertiesID props, const char *name);
typedef void (__cdecl *SDL_EnumeratePropertiesCallback)(void *userdata, SDL_PropertiesID props, const char *name);
extern  bool __cdecl SDL_EnumerateProperties(SDL_PropertiesID props, SDL_EnumeratePropertiesCallback callback, void *userdata);
extern  void __cdecl SDL_DestroyProperties(SDL_PropertiesID props);
#pragma pack(pop)
#pragma pack(push,8)
typedef struct SDL_Thread SDL_Thread;
typedef Uint64 SDL_ThreadID;
typedef SDL_AtomicInt SDL_TLSID;
typedef enum SDL_ThreadPriority {
    SDL_THREAD_PRIORITY_LOW,
    SDL_THREAD_PRIORITY_NORMAL,
    SDL_THREAD_PRIORITY_HIGH,
    SDL_THREAD_PRIORITY_TIME_CRITICAL
} SDL_ThreadPriority;
typedef int (__cdecl * SDL_ThreadFunction) (void *data);
extern  SDL_Thread * __cdecl SDL_CreateThreadRuntime(SDL_ThreadFunction fn, const char *name, void *data, SDL_FunctionPointer pfnBeginThread, SDL_FunctionPointer pfnEndThread);
extern  SDL_Thread * __cdecl SDL_CreateThreadWithPropertiesRuntime(SDL_PropertiesID props, SDL_FunctionPointer pfnBeginThread, SDL_FunctionPointer pfnEndThread);
extern  const char * __cdecl SDL_GetThreadName(SDL_Thread *thread);
extern  SDL_ThreadID __cdecl SDL_GetCurrentThreadID(void);
extern  SDL_ThreadID __cdecl SDL_GetThreadID(SDL_Thread *thread);
extern  bool __cdecl SDL_SetCurrentThreadPriority(SDL_ThreadPriority priority);
extern  void __cdecl SDL_WaitThread(SDL_Thread *thread, int *status);
extern  void __cdecl SDL_DetachThread(SDL_Thread *thread);
extern  void * __cdecl SDL_GetTLS(SDL_TLSID *id);
typedef void (__cdecl *SDL_TLSDestructorCallback)(void *value);
extern  bool __cdecl SDL_SetTLS(SDL_TLSID *id, const void *value, SDL_TLSDestructorCallback destructor);
extern  void __cdecl SDL_CleanupTLS(void);
#pragma pack(pop)
#pragma pack(push,8)
typedef struct SDL_Mutex SDL_Mutex;
extern  SDL_Mutex * __cdecl SDL_CreateMutex(void);
extern  void __cdecl SDL_LockMutex(SDL_Mutex *mutex) ;
extern  bool __cdecl SDL_TryLockMutex(SDL_Mutex *mutex) ;
extern  void __cdecl SDL_UnlockMutex(SDL_Mutex *mutex) ;
extern  void __cdecl SDL_DestroyMutex(SDL_Mutex *mutex);
typedef struct SDL_RWLock SDL_RWLock;
extern  SDL_RWLock * __cdecl SDL_CreateRWLock(void);
extern  void __cdecl SDL_LockRWLockForReading(SDL_RWLock *rwlock) ;
extern  void __cdecl SDL_LockRWLockForWriting(SDL_RWLock *rwlock) ;
extern  bool __cdecl SDL_TryLockRWLockForReading(SDL_RWLock *rwlock) ;
extern  bool __cdecl SDL_TryLockRWLockForWriting(SDL_RWLock *rwlock) ;
extern  void __cdecl SDL_UnlockRWLock(SDL_RWLock *rwlock) ;
extern  void __cdecl SDL_DestroyRWLock(SDL_RWLock *rwlock);
typedef struct SDL_Semaphore SDL_Semaphore;
extern  SDL_Semaphore * __cdecl SDL_CreateSemaphore(Uint32 initial_value);
extern  void __cdecl SDL_DestroySemaphore(SDL_Semaphore *sem);
extern  void __cdecl SDL_WaitSemaphore(SDL_Semaphore *sem);
extern  bool __cdecl SDL_TryWaitSemaphore(SDL_Semaphore *sem);
extern  bool __cdecl SDL_WaitSemaphoreTimeout(SDL_Semaphore *sem, Sint32 timeoutMS);
extern  void __cdecl SDL_SignalSemaphore(SDL_Semaphore *sem);
extern  Uint32 __cdecl SDL_GetSemaphoreValue(SDL_Semaphore *sem);
typedef struct SDL_Condition SDL_Condition;
extern  SDL_Condition * __cdecl SDL_CreateCondition(void);
extern  void __cdecl SDL_DestroyCondition(SDL_Condition *cond);
extern  void __cdecl SDL_SignalCondition(SDL_Condition *cond);
extern  void __cdecl SDL_BroadcastCondition(SDL_Condition *cond);
extern  void __cdecl SDL_WaitCondition(SDL_Condition *cond, SDL_Mutex *mutex);
extern  bool __cdecl SDL_WaitConditionTimeout(SDL_Condition *cond,
                                                SDL_Mutex *mutex, Sint32 timeoutMS);
typedef enum SDL_InitStatus
{
    SDL_INIT_STATUS_UNINITIALIZED,
    SDL_INIT_STATUS_INITIALIZING,
    SDL_INIT_STATUS_INITIALIZED,
    SDL_INIT_STATUS_UNINITIALIZING
} SDL_InitStatus;
typedef struct SDL_InitState
{
    SDL_AtomicInt status;
    SDL_ThreadID thread;
    void *reserved;
} SDL_InitState;
extern  bool __cdecl SDL_ShouldInit(SDL_InitState *state);
extern  bool __cdecl SDL_ShouldQuit(SDL_InitState *state);
extern  void __cdecl SDL_SetInitialized(SDL_InitState *state, bool initialized);
#pragma pack(pop)
#pragma pack(push,8)
typedef enum SDL_IOStatus
{
    SDL_IO_STATUS_READY,     
    SDL_IO_STATUS_ERROR,     
    SDL_IO_STATUS_EOF,       
    SDL_IO_STATUS_NOT_READY, 
    SDL_IO_STATUS_READONLY,  
    SDL_IO_STATUS_WRITEONLY  
} SDL_IOStatus;
typedef enum SDL_IOWhence
{
    SDL_IO_SEEK_SET,  
    SDL_IO_SEEK_CUR,  
    SDL_IO_SEEK_END   
} SDL_IOWhence;
typedef struct SDL_IOStreamInterface
{
    Uint32 version;
    Sint64 (__cdecl *size)(void *userdata);
    Sint64 (__cdecl *seek)(void *userdata, Sint64 offset, SDL_IOWhence whence);
    size_t (__cdecl *read)(void *userdata, void *ptr, size_t size, SDL_IOStatus *status);
    size_t (__cdecl *write)(void *userdata, const void *ptr, size_t size, SDL_IOStatus *status);
    bool (__cdecl *flush)(void *userdata, SDL_IOStatus *status);
    bool (__cdecl *close)(void *userdata);
} SDL_IOStreamInterface;
typedef int SDL_compile_time_assert_SDL_IOStreamInterface_SIZE[((sizeof(void *) == 4 && sizeof(SDL_IOStreamInterface) == 28) || (sizeof(void *) == 8 && sizeof(SDL_IOStreamInterface) == 56)) * 2 - 1];
typedef struct SDL_IOStream SDL_IOStream;
extern  SDL_IOStream * __cdecl SDL_IOFromFile(const char *file, const char *mode);
extern  SDL_IOStream * __cdecl SDL_IOFromMem(void *mem, size_t size);
extern  SDL_IOStream * __cdecl SDL_IOFromConstMem(const void *mem, size_t size);
extern  SDL_IOStream * __cdecl SDL_IOFromDynamicMem(void);
extern  SDL_IOStream * __cdecl SDL_OpenIO(const SDL_IOStreamInterface *iface, void *userdata);
extern  bool __cdecl SDL_CloseIO(SDL_IOStream *context);
extern  SDL_PropertiesID __cdecl SDL_GetIOProperties(SDL_IOStream *context);
extern  SDL_IOStatus __cdecl SDL_GetIOStatus(SDL_IOStream *context);
extern  Sint64 __cdecl SDL_GetIOSize(SDL_IOStream *context);
extern  Sint64 __cdecl SDL_SeekIO(SDL_IOStream *context, Sint64 offset, SDL_IOWhence whence);
extern  Sint64 __cdecl SDL_TellIO(SDL_IOStream *context);
extern  size_t __cdecl SDL_ReadIO(SDL_IOStream *context, void *ptr, size_t size);
extern  size_t __cdecl SDL_WriteIO(SDL_IOStream *context, const void *ptr, size_t size);
extern  size_t __cdecl SDL_IOprintf(SDL_IOStream *context,   const char *fmt, ...)  ;
extern  size_t __cdecl SDL_IOvprintf(SDL_IOStream *context,   const char *fmt, va_list ap) ;
extern  bool __cdecl SDL_FlushIO(SDL_IOStream *context);
extern  void * __cdecl SDL_LoadFile_IO(SDL_IOStream *src, size_t *datasize, bool closeio);
extern  void * __cdecl SDL_LoadFile(const char *file, size_t *datasize);
extern  bool __cdecl SDL_ReadU8(SDL_IOStream *src, Uint8 *value);
extern  bool __cdecl SDL_ReadS8(SDL_IOStream *src, Sint8 *value);
extern  bool __cdecl SDL_ReadU16LE(SDL_IOStream *src, Uint16 *value);
extern  bool __cdecl SDL_ReadS16LE(SDL_IOStream *src, Sint16 *value);
extern  bool __cdecl SDL_ReadU16BE(SDL_IOStream *src, Uint16 *value);
extern  bool __cdecl SDL_ReadS16BE(SDL_IOStream *src, Sint16 *value);
extern  bool __cdecl SDL_ReadU32LE(SDL_IOStream *src, Uint32 *value);
extern  bool __cdecl SDL_ReadS32LE(SDL_IOStream *src, Sint32 *value);
extern  bool __cdecl SDL_ReadU32BE(SDL_IOStream *src, Uint32 *value);
extern  bool __cdecl SDL_ReadS32BE(SDL_IOStream *src, Sint32 *value);
extern  bool __cdecl SDL_ReadU64LE(SDL_IOStream *src, Uint64 *value);
extern  bool __cdecl SDL_ReadS64LE(SDL_IOStream *src, Sint64 *value);
extern  bool __cdecl SDL_ReadU64BE(SDL_IOStream *src, Uint64 *value);
extern  bool __cdecl SDL_ReadS64BE(SDL_IOStream *src, Sint64 *value);
extern  bool __cdecl SDL_WriteU8(SDL_IOStream *dst, Uint8 value);
extern  bool __cdecl SDL_WriteS8(SDL_IOStream *dst, Sint8 value);
extern  bool __cdecl SDL_WriteU16LE(SDL_IOStream *dst, Uint16 value);
extern  bool __cdecl SDL_WriteS16LE(SDL_IOStream *dst, Sint16 value);
extern  bool __cdecl SDL_WriteU16BE(SDL_IOStream *dst, Uint16 value);
extern  bool __cdecl SDL_WriteS16BE(SDL_IOStream *dst, Sint16 value);
extern  bool __cdecl SDL_WriteU32LE(SDL_IOStream *dst, Uint32 value);
extern  bool __cdecl SDL_WriteS32LE(SDL_IOStream *dst, Sint32 value);
extern  bool __cdecl SDL_WriteU32BE(SDL_IOStream *dst, Uint32 value);
extern  bool __cdecl SDL_WriteS32BE(SDL_IOStream *dst, Sint32 value);
extern  bool __cdecl SDL_WriteU64LE(SDL_IOStream *dst, Uint64 value);
extern  bool __cdecl SDL_WriteS64LE(SDL_IOStream *dst, Sint64 value);
extern  bool __cdecl SDL_WriteU64BE(SDL_IOStream *dst, Uint64 value);
extern  bool __cdecl SDL_WriteS64BE(SDL_IOStream *dst, Sint64 value);
#pragma pack(pop)
#pragma pack(push,8)
typedef enum SDL_AudioFormat
{
    SDL_AUDIO_UNKNOWN   = 0x0000u,  
    SDL_AUDIO_U8        = 0x0008u,  
    SDL_AUDIO_S8        = 0x8008u,  
    SDL_AUDIO_S16LE     = 0x8010u,  
    SDL_AUDIO_S16BE     = 0x9010u,  
    SDL_AUDIO_S32LE     = 0x8020u,  
    SDL_AUDIO_S32BE     = 0x9020u,  
    SDL_AUDIO_F32LE     = 0x8120u,  
    SDL_AUDIO_F32BE     = 0x9120u,  
    SDL_AUDIO_S16 = SDL_AUDIO_S16LE,
    SDL_AUDIO_S32 = SDL_AUDIO_S32LE,
    SDL_AUDIO_F32 = SDL_AUDIO_F32LE
} SDL_AudioFormat;
typedef Uint32 SDL_AudioDeviceID;
typedef struct SDL_AudioSpec
{
    SDL_AudioFormat format;     
    int channels;               
    int freq;                   
} SDL_AudioSpec;
typedef struct SDL_AudioStream SDL_AudioStream;
extern  int __cdecl SDL_GetNumAudioDrivers(void);
extern  const char * __cdecl SDL_GetAudioDriver(int index);
extern  const char * __cdecl SDL_GetCurrentAudioDriver(void);
extern  SDL_AudioDeviceID * __cdecl SDL_GetAudioPlaybackDevices(int *count);
extern  SDL_AudioDeviceID * __cdecl SDL_GetAudioRecordingDevices(int *count);
extern  const char * __cdecl SDL_GetAudioDeviceName(SDL_AudioDeviceID devid);
extern  bool __cdecl SDL_GetAudioDeviceFormat(SDL_AudioDeviceID devid, SDL_AudioSpec *spec, int *sample_frames);
extern  int * __cdecl SDL_GetAudioDeviceChannelMap(SDL_AudioDeviceID devid, int *count);
extern  SDL_AudioDeviceID __cdecl SDL_OpenAudioDevice(SDL_AudioDeviceID devid, const SDL_AudioSpec *spec);
extern  bool __cdecl SDL_PauseAudioDevice(SDL_AudioDeviceID dev);
extern  bool __cdecl SDL_ResumeAudioDevice(SDL_AudioDeviceID dev);
extern  bool __cdecl SDL_AudioDevicePaused(SDL_AudioDeviceID dev);
extern  float __cdecl SDL_GetAudioDeviceGain(SDL_AudioDeviceID devid);
extern  bool __cdecl SDL_SetAudioDeviceGain(SDL_AudioDeviceID devid, float gain);
extern  void __cdecl SDL_CloseAudioDevice(SDL_AudioDeviceID devid);
extern  bool __cdecl SDL_BindAudioStreams(SDL_AudioDeviceID devid, SDL_AudioStream **streams, int num_streams);
extern  bool __cdecl SDL_BindAudioStream(SDL_AudioDeviceID devid, SDL_AudioStream *stream);
extern  void __cdecl SDL_UnbindAudioStreams(SDL_AudioStream **streams, int num_streams);
extern  void __cdecl SDL_UnbindAudioStream(SDL_AudioStream *stream);
extern  SDL_AudioDeviceID __cdecl SDL_GetAudioStreamDevice(SDL_AudioStream *stream);
extern  SDL_AudioStream * __cdecl SDL_CreateAudioStream(const SDL_AudioSpec *src_spec, const SDL_AudioSpec *dst_spec);
extern  SDL_PropertiesID __cdecl SDL_GetAudioStreamProperties(SDL_AudioStream *stream);
extern  bool __cdecl SDL_GetAudioStreamFormat(SDL_AudioStream *stream, SDL_AudioSpec *src_spec, SDL_AudioSpec *dst_spec);
extern  bool __cdecl SDL_SetAudioStreamFormat(SDL_AudioStream *stream, const SDL_AudioSpec *src_spec, const SDL_AudioSpec *dst_spec);
extern  float __cdecl SDL_GetAudioStreamFrequencyRatio(SDL_AudioStream *stream);
extern  bool __cdecl SDL_SetAudioStreamFrequencyRatio(SDL_AudioStream *stream, float ratio);
extern  float __cdecl SDL_GetAudioStreamGain(SDL_AudioStream *stream);
extern  bool __cdecl SDL_SetAudioStreamGain(SDL_AudioStream *stream, float gain);
extern  int * __cdecl SDL_GetAudioStreamInputChannelMap(SDL_AudioStream *stream, int *count);
extern  int * __cdecl SDL_GetAudioStreamOutputChannelMap(SDL_AudioStream *stream, int *count);
extern  bool __cdecl SDL_SetAudioStreamInputChannelMap(SDL_AudioStream *stream, const int *chmap, int count);
extern  bool __cdecl SDL_SetAudioStreamOutputChannelMap(SDL_AudioStream *stream, const int *chmap, int count);
extern  bool __cdecl SDL_PutAudioStreamData(SDL_AudioStream *stream, const void *buf, int len);
extern  int __cdecl SDL_GetAudioStreamData(SDL_AudioStream *stream, void *buf, int len);
extern  int __cdecl SDL_GetAudioStreamAvailable(SDL_AudioStream *stream);
extern  int __cdecl SDL_GetAudioStreamQueued(SDL_AudioStream *stream);
extern  bool __cdecl SDL_FlushAudioStream(SDL_AudioStream *stream);
extern  bool __cdecl SDL_ClearAudioStream(SDL_AudioStream *stream);
extern  bool __cdecl SDL_PauseAudioStreamDevice(SDL_AudioStream *stream);
extern  bool __cdecl SDL_ResumeAudioStreamDevice(SDL_AudioStream *stream);
extern  bool __cdecl SDL_LockAudioStream(SDL_AudioStream *stream);
extern  bool __cdecl SDL_UnlockAudioStream(SDL_AudioStream *stream);
typedef void (__cdecl *SDL_AudioStreamCallback)(void *userdata, SDL_AudioStream *stream, int additional_amount, int total_amount);
extern  bool __cdecl SDL_SetAudioStreamGetCallback(SDL_AudioStream *stream, SDL_AudioStreamCallback callback, void *userdata);
extern  bool __cdecl SDL_SetAudioStreamPutCallback(SDL_AudioStream *stream, SDL_AudioStreamCallback callback, void *userdata);
extern  void __cdecl SDL_DestroyAudioStream(SDL_AudioStream *stream);
extern  SDL_AudioStream * __cdecl SDL_OpenAudioDeviceStream(SDL_AudioDeviceID devid, const SDL_AudioSpec *spec, SDL_AudioStreamCallback callback, void *userdata);
typedef void (__cdecl *SDL_AudioPostmixCallback)(void *userdata, const SDL_AudioSpec *spec, float *buffer, int buflen);
extern  bool __cdecl SDL_SetAudioPostmixCallback(SDL_AudioDeviceID devid, SDL_AudioPostmixCallback callback, void *userdata);
extern  bool __cdecl SDL_LoadWAV_IO(SDL_IOStream *src, bool closeio, SDL_AudioSpec *spec, Uint8 **audio_buf, Uint32 *audio_len);
extern  bool __cdecl SDL_LoadWAV(const char *path, SDL_AudioSpec *spec, Uint8 **audio_buf, Uint32 *audio_len);
extern  bool __cdecl SDL_MixAudio(Uint8 *dst, const Uint8 *src, SDL_AudioFormat format, Uint32 len, float volume);
extern  bool __cdecl SDL_ConvertAudioSamples(const SDL_AudioSpec *src_spec, const Uint8 *src_data, int src_len, const SDL_AudioSpec *dst_spec, Uint8 **dst_data, int *dst_len);
extern  const char * __cdecl SDL_GetAudioFormatName(SDL_AudioFormat format);
extern  int __cdecl SDL_GetSilenceValueForFormat(SDL_AudioFormat format);
#pragma pack(pop)
#pragma pack(push,8)
 int SDL_MostSignificantBitIndex32(Uint32 x)
{
    unsigned long index;
    if (_BitScanReverse(&index, x)) {
        return (int)index;
    }
    return -1;
}
 bool SDL_HasExactlyOneBitSet32(Uint32 x)
{
    if (x && !(x & (x - 1))) {
        return true;
    }
    return false;
}
#pragma pack(pop)
#pragma pack(push,8)
typedef Uint32 SDL_BlendMode;
typedef enum SDL_BlendOperation
{
    SDL_BLENDOPERATION_ADD              = 0x1,  
    SDL_BLENDOPERATION_SUBTRACT         = 0x2,  
    SDL_BLENDOPERATION_REV_SUBTRACT     = 0x3,  
    SDL_BLENDOPERATION_MINIMUM          = 0x4,  
    SDL_BLENDOPERATION_MAXIMUM          = 0x5   
} SDL_BlendOperation;
typedef enum SDL_BlendFactor
{
    SDL_BLENDFACTOR_ZERO                = 0x1,  
    SDL_BLENDFACTOR_ONE                 = 0x2,  
    SDL_BLENDFACTOR_SRC_COLOR           = 0x3,  
    SDL_BLENDFACTOR_ONE_MINUS_SRC_COLOR = 0x4,  
    SDL_BLENDFACTOR_SRC_ALPHA           = 0x5,  
    SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA = 0x6,  
    SDL_BLENDFACTOR_DST_COLOR           = 0x7,  
    SDL_BLENDFACTOR_ONE_MINUS_DST_COLOR = 0x8,  
    SDL_BLENDFACTOR_DST_ALPHA           = 0x9,  
    SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA = 0xA   
} SDL_BlendFactor;
extern  SDL_BlendMode __cdecl SDL_ComposeCustomBlendMode(SDL_BlendFactor srcColorFactor,
                                                                 SDL_BlendFactor dstColorFactor,
                                                                 SDL_BlendOperation colorOperation,
                                                                 SDL_BlendFactor srcAlphaFactor,
                                                                 SDL_BlendFactor dstAlphaFactor,
                                                                 SDL_BlendOperation alphaOperation);
#pragma pack(pop)
#pragma pack(push,8)
typedef enum SDL_PixelType
{
    SDL_PIXELTYPE_UNKNOWN,
    SDL_PIXELTYPE_INDEX1,
    SDL_PIXELTYPE_INDEX4,
    SDL_PIXELTYPE_INDEX8,
    SDL_PIXELTYPE_PACKED8,
    SDL_PIXELTYPE_PACKED16,
    SDL_PIXELTYPE_PACKED32,
    SDL_PIXELTYPE_ARRAYU8,
    SDL_PIXELTYPE_ARRAYU16,
    SDL_PIXELTYPE_ARRAYU32,
    SDL_PIXELTYPE_ARRAYF16,
    SDL_PIXELTYPE_ARRAYF32,
    SDL_PIXELTYPE_INDEX2
} SDL_PixelType;
typedef enum SDL_BitmapOrder
{
    SDL_BITMAPORDER_NONE,
    SDL_BITMAPORDER_4321,
    SDL_BITMAPORDER_1234
} SDL_BitmapOrder;
typedef enum SDL_PackedOrder
{
    SDL_PACKEDORDER_NONE,
    SDL_PACKEDORDER_XRGB,
    SDL_PACKEDORDER_RGBX,
    SDL_PACKEDORDER_ARGB,
    SDL_PACKEDORDER_RGBA,
    SDL_PACKEDORDER_XBGR,
    SDL_PACKEDORDER_BGRX,
    SDL_PACKEDORDER_ABGR,
    SDL_PACKEDORDER_BGRA
} SDL_PackedOrder;
typedef enum SDL_ArrayOrder
{
    SDL_ARRAYORDER_NONE,
    SDL_ARRAYORDER_RGB,
    SDL_ARRAYORDER_RGBA,
    SDL_ARRAYORDER_ARGB,
    SDL_ARRAYORDER_BGR,
    SDL_ARRAYORDER_BGRA,
    SDL_ARRAYORDER_ABGR
} SDL_ArrayOrder;
typedef enum SDL_PackedLayout
{
    SDL_PACKEDLAYOUT_NONE,
    SDL_PACKEDLAYOUT_332,
    SDL_PACKEDLAYOUT_4444,
    SDL_PACKEDLAYOUT_1555,
    SDL_PACKEDLAYOUT_5551,
    SDL_PACKEDLAYOUT_565,
    SDL_PACKEDLAYOUT_8888,
    SDL_PACKEDLAYOUT_2101010,
    SDL_PACKEDLAYOUT_1010102
} SDL_PackedLayout;
typedef enum SDL_PixelFormat
{
    SDL_PIXELFORMAT_UNKNOWN = 0,
    SDL_PIXELFORMAT_INDEX1LSB = 0x11100100u,
    SDL_PIXELFORMAT_INDEX1MSB = 0x11200100u,
    SDL_PIXELFORMAT_INDEX2LSB = 0x1c100200u,
    SDL_PIXELFORMAT_INDEX2MSB = 0x1c200200u,
    SDL_PIXELFORMAT_INDEX4LSB = 0x12100400u,
    SDL_PIXELFORMAT_INDEX4MSB = 0x12200400u,
    SDL_PIXELFORMAT_INDEX8 = 0x13000801u,
    SDL_PIXELFORMAT_RGB332 = 0x14110801u,
    SDL_PIXELFORMAT_XRGB4444 = 0x15120c02u,
    SDL_PIXELFORMAT_XBGR4444 = 0x15520c02u,
    SDL_PIXELFORMAT_XRGB1555 = 0x15130f02u,
    SDL_PIXELFORMAT_XBGR1555 = 0x15530f02u,
    SDL_PIXELFORMAT_ARGB4444 = 0x15321002u,
    SDL_PIXELFORMAT_RGBA4444 = 0x15421002u,
    SDL_PIXELFORMAT_ABGR4444 = 0x15721002u,
    SDL_PIXELFORMAT_BGRA4444 = 0x15821002u,
    SDL_PIXELFORMAT_ARGB1555 = 0x15331002u,
    SDL_PIXELFORMAT_RGBA5551 = 0x15441002u,
    SDL_PIXELFORMAT_ABGR1555 = 0x15731002u,
    SDL_PIXELFORMAT_BGRA5551 = 0x15841002u,
    SDL_PIXELFORMAT_RGB565 = 0x15151002u,
    SDL_PIXELFORMAT_BGR565 = 0x15551002u,
    SDL_PIXELFORMAT_RGB24 = 0x17101803u,
    SDL_PIXELFORMAT_BGR24 = 0x17401803u,
    SDL_PIXELFORMAT_XRGB8888 = 0x16161804u,
    SDL_PIXELFORMAT_RGBX8888 = 0x16261804u,
    SDL_PIXELFORMAT_XBGR8888 = 0x16561804u,
    SDL_PIXELFORMAT_BGRX8888 = 0x16661804u,
    SDL_PIXELFORMAT_ARGB8888 = 0x16362004u,
    SDL_PIXELFORMAT_RGBA8888 = 0x16462004u,
    SDL_PIXELFORMAT_ABGR8888 = 0x16762004u,
    SDL_PIXELFORMAT_BGRA8888 = 0x16862004u,
    SDL_PIXELFORMAT_XRGB2101010 = 0x16172004u,
    SDL_PIXELFORMAT_XBGR2101010 = 0x16572004u,
    SDL_PIXELFORMAT_ARGB2101010 = 0x16372004u,
    SDL_PIXELFORMAT_ABGR2101010 = 0x16772004u,
    SDL_PIXELFORMAT_RGB48 = 0x18103006u,
    SDL_PIXELFORMAT_BGR48 = 0x18403006u,
    SDL_PIXELFORMAT_RGBA64 = 0x18204008u,
    SDL_PIXELFORMAT_ARGB64 = 0x18304008u,
    SDL_PIXELFORMAT_BGRA64 = 0x18504008u,
    SDL_PIXELFORMAT_ABGR64 = 0x18604008u,
    SDL_PIXELFORMAT_RGB48_FLOAT = 0x1a103006u,
    SDL_PIXELFORMAT_BGR48_FLOAT = 0x1a403006u,
    SDL_PIXELFORMAT_RGBA64_FLOAT = 0x1a204008u,
    SDL_PIXELFORMAT_ARGB64_FLOAT = 0x1a304008u,
    SDL_PIXELFORMAT_BGRA64_FLOAT = 0x1a504008u,
    SDL_PIXELFORMAT_ABGR64_FLOAT = 0x1a604008u,
    SDL_PIXELFORMAT_RGB96_FLOAT = 0x1b10600cu,
    SDL_PIXELFORMAT_BGR96_FLOAT = 0x1b40600cu,
    SDL_PIXELFORMAT_RGBA128_FLOAT = 0x1b208010u,
    SDL_PIXELFORMAT_ARGB128_FLOAT = 0x1b308010u,
    SDL_PIXELFORMAT_BGRA128_FLOAT = 0x1b508010u,
    SDL_PIXELFORMAT_ABGR128_FLOAT = 0x1b608010u,
    SDL_PIXELFORMAT_YV12 = 0x32315659u,      
    SDL_PIXELFORMAT_IYUV = 0x56555949u,      
    SDL_PIXELFORMAT_YUY2 = 0x32595559u,      
    SDL_PIXELFORMAT_UYVY = 0x59565955u,      
    SDL_PIXELFORMAT_YVYU = 0x55595659u,      
    SDL_PIXELFORMAT_NV12 = 0x3231564eu,      
    SDL_PIXELFORMAT_NV21 = 0x3132564eu,      
    SDL_PIXELFORMAT_P010 = 0x30313050u,      
    SDL_PIXELFORMAT_EXTERNAL_OES = 0x2053454fu,     
    SDL_PIXELFORMAT_RGBA32 = SDL_PIXELFORMAT_ABGR8888,
    SDL_PIXELFORMAT_ARGB32 = SDL_PIXELFORMAT_BGRA8888,
    SDL_PIXELFORMAT_BGRA32 = SDL_PIXELFORMAT_ARGB8888,
    SDL_PIXELFORMAT_ABGR32 = SDL_PIXELFORMAT_RGBA8888,
    SDL_PIXELFORMAT_RGBX32 = SDL_PIXELFORMAT_XBGR8888,
    SDL_PIXELFORMAT_XRGB32 = SDL_PIXELFORMAT_BGRX8888,
    SDL_PIXELFORMAT_BGRX32 = SDL_PIXELFORMAT_XRGB8888,
    SDL_PIXELFORMAT_XBGR32 = SDL_PIXELFORMAT_RGBX8888
} SDL_PixelFormat;
typedef enum SDL_ColorType
{
    SDL_COLOR_TYPE_UNKNOWN = 0,
    SDL_COLOR_TYPE_RGB = 1,
    SDL_COLOR_TYPE_YCBCR = 2
} SDL_ColorType;
typedef enum SDL_ColorRange
{
    SDL_COLOR_RANGE_UNKNOWN = 0,
    SDL_COLOR_RANGE_LIMITED = 1, 
    SDL_COLOR_RANGE_FULL = 2    
} SDL_ColorRange;
typedef enum SDL_ColorPrimaries
{
    SDL_COLOR_PRIMARIES_UNKNOWN = 0,
    SDL_COLOR_PRIMARIES_BT709 = 1,                  
    SDL_COLOR_PRIMARIES_UNSPECIFIED = 2,
    SDL_COLOR_PRIMARIES_BT470M = 4,                 
    SDL_COLOR_PRIMARIES_BT470BG = 5,                
    SDL_COLOR_PRIMARIES_BT601 = 6,                  
    SDL_COLOR_PRIMARIES_SMPTE240 = 7,               
    SDL_COLOR_PRIMARIES_GENERIC_FILM = 8,           
    SDL_COLOR_PRIMARIES_BT2020 = 9,                 
    SDL_COLOR_PRIMARIES_XYZ = 10,                   
    SDL_COLOR_PRIMARIES_SMPTE431 = 11,              
    SDL_COLOR_PRIMARIES_SMPTE432 = 12,              
    SDL_COLOR_PRIMARIES_EBU3213 = 22,               
    SDL_COLOR_PRIMARIES_CUSTOM = 31
} SDL_ColorPrimaries;
typedef enum SDL_TransferCharacteristics
{
    SDL_TRANSFER_CHARACTERISTICS_UNKNOWN = 0,
    SDL_TRANSFER_CHARACTERISTICS_BT709 = 1,         
    SDL_TRANSFER_CHARACTERISTICS_UNSPECIFIED = 2,
    SDL_TRANSFER_CHARACTERISTICS_GAMMA22 = 4,       
    SDL_TRANSFER_CHARACTERISTICS_GAMMA28 = 5,       
    SDL_TRANSFER_CHARACTERISTICS_BT601 = 6,         
    SDL_TRANSFER_CHARACTERISTICS_SMPTE240 = 7,      
    SDL_TRANSFER_CHARACTERISTICS_LINEAR = 8,
    SDL_TRANSFER_CHARACTERISTICS_LOG100 = 9,
    SDL_TRANSFER_CHARACTERISTICS_LOG100_SQRT10 = 10,
    SDL_TRANSFER_CHARACTERISTICS_IEC61966 = 11,     
    SDL_TRANSFER_CHARACTERISTICS_BT1361 = 12,       
    SDL_TRANSFER_CHARACTERISTICS_SRGB = 13,         
    SDL_TRANSFER_CHARACTERISTICS_BT2020_10BIT = 14, 
    SDL_TRANSFER_CHARACTERISTICS_BT2020_12BIT = 15, 
    SDL_TRANSFER_CHARACTERISTICS_PQ = 16,           
    SDL_TRANSFER_CHARACTERISTICS_SMPTE428 = 17,     
    SDL_TRANSFER_CHARACTERISTICS_HLG = 18,          
    SDL_TRANSFER_CHARACTERISTICS_CUSTOM = 31
} SDL_TransferCharacteristics;
typedef enum SDL_MatrixCoefficients
{
    SDL_MATRIX_COEFFICIENTS_IDENTITY = 0,
    SDL_MATRIX_COEFFICIENTS_BT709 = 1,              
    SDL_MATRIX_COEFFICIENTS_UNSPECIFIED = 2,
    SDL_MATRIX_COEFFICIENTS_FCC = 4,                
    SDL_MATRIX_COEFFICIENTS_BT470BG = 5,            
    SDL_MATRIX_COEFFICIENTS_BT601 = 6,              
    SDL_MATRIX_COEFFICIENTS_SMPTE240 = 7,           
    SDL_MATRIX_COEFFICIENTS_YCGCO = 8,
    SDL_MATRIX_COEFFICIENTS_BT2020_NCL = 9,         
    SDL_MATRIX_COEFFICIENTS_BT2020_CL = 10,         
    SDL_MATRIX_COEFFICIENTS_SMPTE2085 = 11,         
    SDL_MATRIX_COEFFICIENTS_CHROMA_DERIVED_NCL = 12,
    SDL_MATRIX_COEFFICIENTS_CHROMA_DERIVED_CL = 13,
    SDL_MATRIX_COEFFICIENTS_ICTCP = 14,             
    SDL_MATRIX_COEFFICIENTS_CUSTOM = 31
} SDL_MatrixCoefficients;
typedef enum SDL_ChromaLocation
{
    SDL_CHROMA_LOCATION_NONE = 0,   
    SDL_CHROMA_LOCATION_LEFT = 1,   
    SDL_CHROMA_LOCATION_CENTER = 2, 
    SDL_CHROMA_LOCATION_TOPLEFT = 3 
} SDL_ChromaLocation;
typedef enum SDL_Colorspace
{
    SDL_COLORSPACE_UNKNOWN = 0,
    SDL_COLORSPACE_SRGB = 0x120005a0u, 
    SDL_COLORSPACE_SRGB_LINEAR = 0x12000500u, 
    SDL_COLORSPACE_HDR10 = 0x12002600u, 
    SDL_COLORSPACE_JPEG = 0x220004c6u, 
    SDL_COLORSPACE_BT601_LIMITED = 0x211018c6u, 
    SDL_COLORSPACE_BT601_FULL = 0x221018c6u, 
    SDL_COLORSPACE_BT709_LIMITED = 0x21100421u, 
    SDL_COLORSPACE_BT709_FULL = 0x22100421u, 
    SDL_COLORSPACE_BT2020_LIMITED = 0x21102609u, 
    SDL_COLORSPACE_BT2020_FULL = 0x22102609u, 
    SDL_COLORSPACE_RGB_DEFAULT = SDL_COLORSPACE_SRGB, 
    SDL_COLORSPACE_YUV_DEFAULT = SDL_COLORSPACE_JPEG  
} SDL_Colorspace;
typedef struct SDL_Color
{
    Uint8 r;
    Uint8 g;
    Uint8 b;
    Uint8 a;
} SDL_Color;
typedef struct SDL_FColor
{
    float r;
    float g;
    float b;
    float a;
} SDL_FColor;
typedef struct SDL_Palette
{
    int ncolors;        
    SDL_Color *colors;  
    Uint32 version;     
    int refcount;       
} SDL_Palette;
typedef struct SDL_PixelFormatDetails
{
    SDL_PixelFormat format;
    Uint8 bits_per_pixel;
    Uint8 bytes_per_pixel;
    Uint8 padding[2];
    Uint32 Rmask;
    Uint32 Gmask;
    Uint32 Bmask;
    Uint32 Amask;
    Uint8 Rbits;
    Uint8 Gbits;
    Uint8 Bbits;
    Uint8 Abits;
    Uint8 Rshift;
    Uint8 Gshift;
    Uint8 Bshift;
    Uint8 Ashift;
} SDL_PixelFormatDetails;
extern  const char * __cdecl SDL_GetPixelFormatName(SDL_PixelFormat format);
extern  bool __cdecl SDL_GetMasksForPixelFormat(SDL_PixelFormat format, int *bpp, Uint32 *Rmask, Uint32 *Gmask, Uint32 *Bmask, Uint32 *Amask);
extern  SDL_PixelFormat __cdecl SDL_GetPixelFormatForMasks(int bpp, Uint32 Rmask, Uint32 Gmask, Uint32 Bmask, Uint32 Amask);
extern  const SDL_PixelFormatDetails * __cdecl SDL_GetPixelFormatDetails(SDL_PixelFormat format);
extern  SDL_Palette * __cdecl SDL_CreatePalette(int ncolors);
extern  bool __cdecl SDL_SetPaletteColors(SDL_Palette *palette, const SDL_Color *colors, int firstcolor, int ncolors);
extern  void __cdecl SDL_DestroyPalette(SDL_Palette *palette);
extern  Uint32 __cdecl SDL_MapRGB(const SDL_PixelFormatDetails *format, const SDL_Palette *palette, Uint8 r, Uint8 g, Uint8 b);
extern  Uint32 __cdecl SDL_MapRGBA(const SDL_PixelFormatDetails *format, const SDL_Palette *palette, Uint8 r, Uint8 g, Uint8 b, Uint8 a);
extern  void __cdecl SDL_GetRGB(Uint32 pixel, const SDL_PixelFormatDetails *format, const SDL_Palette *palette, Uint8 *r, Uint8 *g, Uint8 *b);
extern  void __cdecl SDL_GetRGBA(Uint32 pixel, const SDL_PixelFormatDetails *format, const SDL_Palette *palette, Uint8 *r, Uint8 *g, Uint8 *b, Uint8 *a);
#pragma pack(pop)
#pragma pack(push,8)
typedef struct SDL_Point
{
    int x;
    int y;
} SDL_Point;
typedef struct SDL_FPoint
{
    float x;
    float y;
} SDL_FPoint;
typedef struct SDL_Rect
{
    int x, y;
    int w, h;
} SDL_Rect;
typedef struct SDL_FRect
{
    float x;
    float y;
    float w;
    float h;
} SDL_FRect;
 void SDL_RectToFRect(const SDL_Rect *rect, SDL_FRect *frect)
{
    frect->x = (float)rect->x;
    frect->y = (float)rect->y;
    frect->w = (float)rect->w;
    frect->h = (float)rect->h;
}
 bool SDL_PointInRect(const SDL_Point *p, const SDL_Rect *r)
{
    return ( p && r && (p->x >= r->x) && (p->x < (r->x + r->w)) &&
             (p->y >= r->y) && (p->y < (r->y + r->h)) ) ? true : false;
}
 bool SDL_RectEmpty(const SDL_Rect *r)
{
    return ((!r) || (r->w <= 0) || (r->h <= 0)) ? true : false;
}
 bool SDL_RectsEqual(const SDL_Rect *a, const SDL_Rect *b)
{
    return (a && b && (a->x == b->x) && (a->y == b->y) &&
            (a->w == b->w) && (a->h == b->h)) ? true : false;
}
extern  bool __cdecl SDL_HasRectIntersection(const SDL_Rect *A, const SDL_Rect *B);
extern  bool __cdecl SDL_GetRectIntersection(const SDL_Rect *A, const SDL_Rect *B, SDL_Rect *result);
extern  bool __cdecl SDL_GetRectUnion(const SDL_Rect *A, const SDL_Rect *B, SDL_Rect *result);
extern  bool __cdecl SDL_GetRectEnclosingPoints(const SDL_Point *points, int count, const SDL_Rect *clip, SDL_Rect *result);
extern  bool __cdecl SDL_GetRectAndLineIntersection(const SDL_Rect *rect, int *X1, int *Y1, int *X2, int *Y2);
 bool SDL_PointInRectFloat(const SDL_FPoint *p, const SDL_FRect *r)
{
    return ( p && r && (p->x >= r->x) && (p->x <= (r->x + r->w)) &&
             (p->y >= r->y) && (p->y <= (r->y + r->h)) ) ? true : false;
}
 bool SDL_RectEmptyFloat(const SDL_FRect *r)
{
    return ((!r) || (r->w < 0.0f) || (r->h < 0.0f)) ? true : false;
}
 bool SDL_RectsEqualEpsilon(const SDL_FRect *a, const SDL_FRect *b, const float epsilon)
{
    return (a && b && ((a == b) ||
            ((SDL_fabsf(a->x - b->x) <= epsilon) &&
            (SDL_fabsf(a->y - b->y) <= epsilon) &&
            (SDL_fabsf(a->w - b->w) <= epsilon) &&
            (SDL_fabsf(a->h - b->h) <= epsilon))))
            ? true : false;
}
 bool SDL_RectsEqualFloat(const SDL_FRect *a, const SDL_FRect *b)
{
    return SDL_RectsEqualEpsilon(a, b, 1.1920928955078125e-07F);
}
extern  bool __cdecl SDL_HasRectIntersectionFloat(const SDL_FRect *A, const SDL_FRect *B);
extern  bool __cdecl SDL_GetRectIntersectionFloat(const SDL_FRect *A, const SDL_FRect *B, SDL_FRect *result);
extern  bool __cdecl SDL_GetRectUnionFloat(const SDL_FRect *A, const SDL_FRect *B, SDL_FRect *result);
extern  bool __cdecl SDL_GetRectEnclosingPointsFloat(const SDL_FPoint *points, int count, const SDL_FRect *clip, SDL_FRect *result);
extern  bool __cdecl SDL_GetRectAndLineIntersectionFloat(const SDL_FRect *rect, float *X1, float *Y1, float *X2, float *Y2);
#pragma pack(pop)
#pragma pack(push,8)
typedef Uint32 SDL_SurfaceFlags;
typedef enum SDL_ScaleMode
{
    SDL_SCALEMODE_NEAREST, 
    SDL_SCALEMODE_LINEAR   
} SDL_ScaleMode;
typedef enum SDL_FlipMode
{
    SDL_FLIP_NONE,          
    SDL_FLIP_HORIZONTAL,    
    SDL_FLIP_VERTICAL       
} SDL_FlipMode;
struct SDL_Surface
{
    SDL_SurfaceFlags flags;     
    SDL_PixelFormat format;     
    int w;                      
    int h;                      
    int pitch;                  
    void *pixels;               
    int refcount;               
    void *reserved;             
};
typedef struct SDL_Surface SDL_Surface;
extern  SDL_Surface * __cdecl SDL_CreateSurface(int width, int height, SDL_PixelFormat format);
extern  SDL_Surface * __cdecl SDL_CreateSurfaceFrom(int width, int height, SDL_PixelFormat format, void *pixels, int pitch);
extern  void __cdecl SDL_DestroySurface(SDL_Surface *surface);
extern  SDL_PropertiesID __cdecl SDL_GetSurfaceProperties(SDL_Surface *surface);
extern  bool __cdecl SDL_SetSurfaceColorspace(SDL_Surface *surface, SDL_Colorspace colorspace);
extern  SDL_Colorspace __cdecl SDL_GetSurfaceColorspace(SDL_Surface *surface);
extern  SDL_Palette * __cdecl SDL_CreateSurfacePalette(SDL_Surface *surface);
extern  bool __cdecl SDL_SetSurfacePalette(SDL_Surface *surface, SDL_Palette *palette);
extern  SDL_Palette * __cdecl SDL_GetSurfacePalette(SDL_Surface *surface);
extern  bool __cdecl SDL_AddSurfaceAlternateImage(SDL_Surface *surface, SDL_Surface *image);
extern  bool __cdecl SDL_SurfaceHasAlternateImages(SDL_Surface *surface);
extern  SDL_Surface ** __cdecl SDL_GetSurfaceImages(SDL_Surface *surface, int *count);
extern  void __cdecl SDL_RemoveSurfaceAlternateImages(SDL_Surface *surface);
extern  bool __cdecl SDL_LockSurface(SDL_Surface *surface);
extern  void __cdecl SDL_UnlockSurface(SDL_Surface *surface);
extern  SDL_Surface * __cdecl SDL_LoadBMP_IO(SDL_IOStream *src, bool closeio);
extern  SDL_Surface * __cdecl SDL_LoadBMP(const char *file);
extern  bool __cdecl SDL_SaveBMP_IO(SDL_Surface *surface, SDL_IOStream *dst, bool closeio);
extern  bool __cdecl SDL_SaveBMP(SDL_Surface *surface, const char *file);
extern  bool __cdecl SDL_SetSurfaceRLE(SDL_Surface *surface, bool enabled);
extern  bool __cdecl SDL_SurfaceHasRLE(SDL_Surface *surface);
extern  bool __cdecl SDL_SetSurfaceColorKey(SDL_Surface *surface, bool enabled, Uint32 key);
extern  bool __cdecl SDL_SurfaceHasColorKey(SDL_Surface *surface);
extern  bool __cdecl SDL_GetSurfaceColorKey(SDL_Surface *surface, Uint32 *key);
extern  bool __cdecl SDL_SetSurfaceColorMod(SDL_Surface *surface, Uint8 r, Uint8 g, Uint8 b);
extern  bool __cdecl SDL_GetSurfaceColorMod(SDL_Surface *surface, Uint8 *r, Uint8 *g, Uint8 *b);
extern  bool __cdecl SDL_SetSurfaceAlphaMod(SDL_Surface *surface, Uint8 alpha);
extern  bool __cdecl SDL_GetSurfaceAlphaMod(SDL_Surface *surface, Uint8 *alpha);
extern  bool __cdecl SDL_SetSurfaceBlendMode(SDL_Surface *surface, SDL_BlendMode blendMode);
extern  bool __cdecl SDL_GetSurfaceBlendMode(SDL_Surface *surface, SDL_BlendMode *blendMode);
extern  bool __cdecl SDL_SetSurfaceClipRect(SDL_Surface *surface, const SDL_Rect *rect);
extern  bool __cdecl SDL_GetSurfaceClipRect(SDL_Surface *surface, SDL_Rect *rect);
extern  bool __cdecl SDL_FlipSurface(SDL_Surface *surface, SDL_FlipMode flip);
extern  SDL_Surface * __cdecl SDL_DuplicateSurface(SDL_Surface *surface);
extern  SDL_Surface * __cdecl SDL_ScaleSurface(SDL_Surface *surface, int width, int height, SDL_ScaleMode scaleMode);
extern  SDL_Surface * __cdecl SDL_ConvertSurface(SDL_Surface *surface, SDL_PixelFormat format);
extern  SDL_Surface * __cdecl SDL_ConvertSurfaceAndColorspace(SDL_Surface *surface, SDL_PixelFormat format, SDL_Palette *palette, SDL_Colorspace colorspace, SDL_PropertiesID props);
extern  bool __cdecl SDL_ConvertPixels(int width, int height, SDL_PixelFormat src_format, const void *src, int src_pitch, SDL_PixelFormat dst_format, void *dst, int dst_pitch);
extern  bool __cdecl SDL_ConvertPixelsAndColorspace(int width, int height, SDL_PixelFormat src_format, SDL_Colorspace src_colorspace, SDL_PropertiesID src_properties, const void *src, int src_pitch, SDL_PixelFormat dst_format, SDL_Colorspace dst_colorspace, SDL_PropertiesID dst_properties, void *dst, int dst_pitch);
extern  bool __cdecl SDL_PremultiplyAlpha(int width, int height, SDL_PixelFormat src_format, const void *src, int src_pitch, SDL_PixelFormat dst_format, void *dst, int dst_pitch, bool linear);
extern  bool __cdecl SDL_PremultiplySurfaceAlpha(SDL_Surface *surface, bool linear);
extern  bool __cdecl SDL_ClearSurface(SDL_Surface *surface, float r, float g, float b, float a);
extern  bool __cdecl SDL_FillSurfaceRect(SDL_Surface *dst, const SDL_Rect *rect, Uint32 color);
extern  bool __cdecl SDL_FillSurfaceRects(SDL_Surface *dst, const SDL_Rect *rects, int count, Uint32 color);
extern  bool __cdecl SDL_BlitSurface(SDL_Surface *src, const SDL_Rect *srcrect, SDL_Surface *dst, const SDL_Rect *dstrect);
extern  bool __cdecl SDL_BlitSurfaceUnchecked(SDL_Surface *src, const SDL_Rect *srcrect, SDL_Surface *dst, const SDL_Rect *dstrect);
extern  bool __cdecl SDL_BlitSurfaceScaled(SDL_Surface *src, const SDL_Rect *srcrect, SDL_Surface *dst, const SDL_Rect *dstrect, SDL_ScaleMode scaleMode);
extern  bool __cdecl SDL_BlitSurfaceUncheckedScaled(SDL_Surface *src, const SDL_Rect *srcrect, SDL_Surface *dst, const SDL_Rect *dstrect, SDL_ScaleMode scaleMode);
extern  bool __cdecl SDL_BlitSurfaceTiled(SDL_Surface *src, const SDL_Rect *srcrect, SDL_Surface *dst, const SDL_Rect *dstrect);
extern  bool __cdecl SDL_BlitSurfaceTiledWithScale(SDL_Surface *src, const SDL_Rect *srcrect, float scale, SDL_ScaleMode scaleMode, SDL_Surface *dst, const SDL_Rect *dstrect);
extern  bool __cdecl SDL_BlitSurface9Grid(SDL_Surface *src, const SDL_Rect *srcrect, int left_width, int right_width, int top_height, int bottom_height, float scale, SDL_ScaleMode scaleMode, SDL_Surface *dst, const SDL_Rect *dstrect);
extern  Uint32 __cdecl SDL_MapSurfaceRGB(SDL_Surface *surface, Uint8 r, Uint8 g, Uint8 b);
extern  Uint32 __cdecl SDL_MapSurfaceRGBA(SDL_Surface *surface, Uint8 r, Uint8 g, Uint8 b, Uint8 a);
extern  bool __cdecl SDL_ReadSurfacePixel(SDL_Surface *surface, int x, int y, Uint8 *r, Uint8 *g, Uint8 *b, Uint8 *a);
extern  bool __cdecl SDL_ReadSurfacePixelFloat(SDL_Surface *surface, int x, int y, float *r, float *g, float *b, float *a);
extern  bool __cdecl SDL_WriteSurfacePixel(SDL_Surface *surface, int x, int y, Uint8 r, Uint8 g, Uint8 b, Uint8 a);
extern  bool __cdecl SDL_WriteSurfacePixelFloat(SDL_Surface *surface, int x, int y, float r, float g, float b, float a);
#pragma pack(pop)
#pragma pack(push,8)
typedef Uint32 SDL_CameraID;
typedef struct SDL_Camera SDL_Camera;
typedef struct SDL_CameraSpec
{
    SDL_PixelFormat format;     
    SDL_Colorspace colorspace;  
    int width;                  
    int height;                 
    int framerate_numerator;     
    int framerate_denominator;   
} SDL_CameraSpec;
typedef enum SDL_CameraPosition
{
    SDL_CAMERA_POSITION_UNKNOWN,
    SDL_CAMERA_POSITION_FRONT_FACING,
    SDL_CAMERA_POSITION_BACK_FACING
} SDL_CameraPosition;
extern  int __cdecl SDL_GetNumCameraDrivers(void);
extern  const char * __cdecl SDL_GetCameraDriver(int index);
extern  const char * __cdecl SDL_GetCurrentCameraDriver(void);
extern  SDL_CameraID * __cdecl SDL_GetCameras(int *count);
extern  SDL_CameraSpec ** __cdecl SDL_GetCameraSupportedFormats(SDL_CameraID devid, int *count);
extern  const char * __cdecl SDL_GetCameraName(SDL_CameraID instance_id);
extern  SDL_CameraPosition __cdecl SDL_GetCameraPosition(SDL_CameraID instance_id);
extern  SDL_Camera * __cdecl SDL_OpenCamera(SDL_CameraID instance_id, const SDL_CameraSpec *spec);
extern  int __cdecl SDL_GetCameraPermissionState(SDL_Camera *camera);
extern  SDL_CameraID __cdecl SDL_GetCameraID(SDL_Camera *camera);
extern  SDL_PropertiesID __cdecl SDL_GetCameraProperties(SDL_Camera *camera);
extern  bool __cdecl SDL_GetCameraFormat(SDL_Camera *camera, SDL_CameraSpec *spec);
extern  SDL_Surface * __cdecl SDL_AcquireCameraFrame(SDL_Camera *camera, Uint64 *timestampNS);
extern  void __cdecl SDL_ReleaseCameraFrame(SDL_Camera *camera, SDL_Surface *frame);
extern  void __cdecl SDL_CloseCamera(SDL_Camera *camera);
#pragma pack(pop)
#pragma pack(push,8)
extern  bool __cdecl SDL_SetClipboardText(const char *text);
extern  char * __cdecl SDL_GetClipboardText(void);
extern  bool __cdecl SDL_HasClipboardText(void);
extern  bool __cdecl SDL_SetPrimarySelectionText(const char *text);
extern  char * __cdecl SDL_GetPrimarySelectionText(void);
extern  bool __cdecl SDL_HasPrimarySelectionText(void);
typedef const void *(__cdecl *SDL_ClipboardDataCallback)(void *userdata, const char *mime_type, size_t *size);
typedef void (__cdecl *SDL_ClipboardCleanupCallback)(void *userdata);
extern  bool __cdecl SDL_SetClipboardData(SDL_ClipboardDataCallback callback, SDL_ClipboardCleanupCallback cleanup, void *userdata, const char **mime_types, size_t num_mime_types);
extern  bool __cdecl SDL_ClearClipboardData(void);
extern  void * __cdecl SDL_GetClipboardData(const char *mime_type, size_t *size);
extern  bool __cdecl SDL_HasClipboardData(const char *mime_type);
extern  char ** __cdecl SDL_GetClipboardMimeTypes(size_t *num_mime_types);
#pragma pack(pop)
#pragma pack(push,8)
extern  int __cdecl SDL_GetNumLogicalCPUCores(void);
extern  int __cdecl SDL_GetCPUCacheLineSize(void);
extern  bool __cdecl SDL_HasAltiVec(void);
extern  bool __cdecl SDL_HasMMX(void);
extern  bool __cdecl SDL_HasSSE(void);
extern  bool __cdecl SDL_HasSSE2(void);
extern  bool __cdecl SDL_HasSSE3(void);
extern  bool __cdecl SDL_HasSSE41(void);
extern  bool __cdecl SDL_HasSSE42(void);
extern  bool __cdecl SDL_HasAVX(void);
extern  bool __cdecl SDL_HasAVX2(void);
extern  bool __cdecl SDL_HasAVX512F(void);
extern  bool __cdecl SDL_HasARMSIMD(void);
extern  bool __cdecl SDL_HasNEON(void);
extern  bool __cdecl SDL_HasLSX(void);
extern  bool __cdecl SDL_HasLASX(void);
extern  int __cdecl SDL_GetSystemRAM(void);
extern  size_t __cdecl SDL_GetSIMDAlignment(void);
#pragma pack(pop)
#pragma pack(push,8)
typedef Uint32 SDL_DisplayID;
typedef Uint32 SDL_WindowID;
typedef enum SDL_SystemTheme
{
    SDL_SYSTEM_THEME_UNKNOWN,   
    SDL_SYSTEM_THEME_LIGHT,     
    SDL_SYSTEM_THEME_DARK       
} SDL_SystemTheme;
typedef struct SDL_DisplayModeData SDL_DisplayModeData;
typedef struct SDL_DisplayMode
{
    SDL_DisplayID displayID;        
    SDL_PixelFormat format;         
    int w;                          
    int h;                          
    float pixel_density;            
    float refresh_rate;             
    int refresh_rate_numerator;     
    int refresh_rate_denominator;   
    SDL_DisplayModeData *internal;  
} SDL_DisplayMode;
typedef enum SDL_DisplayOrientation
{
    SDL_ORIENTATION_UNKNOWN,            
    SDL_ORIENTATION_LANDSCAPE,          
    SDL_ORIENTATION_LANDSCAPE_FLIPPED,  
    SDL_ORIENTATION_PORTRAIT,           
    SDL_ORIENTATION_PORTRAIT_FLIPPED    
} SDL_DisplayOrientation;
typedef struct SDL_Window SDL_Window;
typedef Uint64 SDL_WindowFlags;
typedef enum SDL_FlashOperation
{
    SDL_FLASH_CANCEL,                   
    SDL_FLASH_BRIEFLY,                  
    SDL_FLASH_UNTIL_FOCUSED             
} SDL_FlashOperation;
typedef struct SDL_GLContextState *SDL_GLContext;
typedef void *SDL_EGLDisplay;
typedef void *SDL_EGLConfig;
typedef void *SDL_EGLSurface;
typedef intptr_t SDL_EGLAttrib;
typedef int SDL_EGLint;
typedef SDL_EGLAttrib *(__cdecl *SDL_EGLAttribArrayCallback)(void *userdata);
typedef SDL_EGLint *(__cdecl *SDL_EGLIntArrayCallback)(void *userdata, SDL_EGLDisplay display, SDL_EGLConfig config);
typedef enum SDL_GLAttr
{
    SDL_GL_RED_SIZE,                    
    SDL_GL_GREEN_SIZE,                  
    SDL_GL_BLUE_SIZE,                   
    SDL_GL_ALPHA_SIZE,                  
    SDL_GL_BUFFER_SIZE,                 
    SDL_GL_DOUBLEBUFFER,                
    SDL_GL_DEPTH_SIZE,                  
    SDL_GL_STENCIL_SIZE,                
    SDL_GL_ACCUM_RED_SIZE,              
    SDL_GL_ACCUM_GREEN_SIZE,            
    SDL_GL_ACCUM_BLUE_SIZE,             
    SDL_GL_ACCUM_ALPHA_SIZE,            
    SDL_GL_STEREO,                      
    SDL_GL_MULTISAMPLEBUFFERS,          
    SDL_GL_MULTISAMPLESAMPLES,          
    SDL_GL_ACCELERATED_VISUAL,          
    SDL_GL_RETAINED_BACKING,            
    SDL_GL_CONTEXT_MAJOR_VERSION,       
    SDL_GL_CONTEXT_MINOR_VERSION,       
    SDL_GL_CONTEXT_FLAGS,               
    SDL_GL_CONTEXT_PROFILE_MASK,        
    SDL_GL_SHARE_WITH_CURRENT_CONTEXT,  
    SDL_GL_FRAMEBUFFER_SRGB_CAPABLE,    
    SDL_GL_CONTEXT_RELEASE_BEHAVIOR,    
    SDL_GL_CONTEXT_RESET_NOTIFICATION,  
    SDL_GL_CONTEXT_NO_ERROR,
    SDL_GL_FLOATBUFFERS,
    SDL_GL_EGL_PLATFORM
} SDL_GLAttr;
typedef Uint32 SDL_GLProfile;
typedef Uint32 SDL_GLContextFlag;
typedef Uint32 SDL_GLContextReleaseFlag;
typedef Uint32 SDL_GLContextResetNotification;
extern  int __cdecl SDL_GetNumVideoDrivers(void);
extern  const char * __cdecl SDL_GetVideoDriver(int index);
extern  const char * __cdecl SDL_GetCurrentVideoDriver(void);
extern  SDL_SystemTheme __cdecl SDL_GetSystemTheme(void);
extern  SDL_DisplayID * __cdecl SDL_GetDisplays(int *count);
extern  SDL_DisplayID __cdecl SDL_GetPrimaryDisplay(void);
extern  SDL_PropertiesID __cdecl SDL_GetDisplayProperties(SDL_DisplayID displayID);
extern  const char * __cdecl SDL_GetDisplayName(SDL_DisplayID displayID);
extern  bool __cdecl SDL_GetDisplayBounds(SDL_DisplayID displayID, SDL_Rect *rect);
extern  bool __cdecl SDL_GetDisplayUsableBounds(SDL_DisplayID displayID, SDL_Rect *rect);
extern  SDL_DisplayOrientation __cdecl SDL_GetNaturalDisplayOrientation(SDL_DisplayID displayID);
extern  SDL_DisplayOrientation __cdecl SDL_GetCurrentDisplayOrientation(SDL_DisplayID displayID);
extern  float __cdecl SDL_GetDisplayContentScale(SDL_DisplayID displayID);
extern  SDL_DisplayMode ** __cdecl SDL_GetFullscreenDisplayModes(SDL_DisplayID displayID, int *count);
extern  bool __cdecl SDL_GetClosestFullscreenDisplayMode(SDL_DisplayID displayID, int w, int h, float refresh_rate, bool include_high_density_modes, SDL_DisplayMode *mode);
extern  const SDL_DisplayMode * __cdecl SDL_GetDesktopDisplayMode(SDL_DisplayID displayID);
extern  const SDL_DisplayMode * __cdecl SDL_GetCurrentDisplayMode(SDL_DisplayID displayID);
extern  SDL_DisplayID __cdecl SDL_GetDisplayForPoint(const SDL_Point *point);
extern  SDL_DisplayID __cdecl SDL_GetDisplayForRect(const SDL_Rect *rect);
extern  SDL_DisplayID __cdecl SDL_GetDisplayForWindow(SDL_Window *window);
extern  float __cdecl SDL_GetWindowPixelDensity(SDL_Window *window);
extern  float __cdecl SDL_GetWindowDisplayScale(SDL_Window *window);
extern  bool __cdecl SDL_SetWindowFullscreenMode(SDL_Window *window, const SDL_DisplayMode *mode);
extern  const SDL_DisplayMode * __cdecl SDL_GetWindowFullscreenMode(SDL_Window *window);
extern  void * __cdecl SDL_GetWindowICCProfile(SDL_Window *window, size_t *size);
extern  SDL_PixelFormat __cdecl SDL_GetWindowPixelFormat(SDL_Window *window);
extern  SDL_Window ** __cdecl SDL_GetWindows(int *count);
extern  SDL_Window * __cdecl SDL_CreateWindow(const char *title, int w, int h, SDL_WindowFlags flags);
extern  SDL_Window * __cdecl SDL_CreatePopupWindow(SDL_Window *parent, int offset_x, int offset_y, int w, int h, SDL_WindowFlags flags);
extern  SDL_Window * __cdecl SDL_CreateWindowWithProperties(SDL_PropertiesID props);
extern  SDL_WindowID __cdecl SDL_GetWindowID(SDL_Window *window);
extern  SDL_Window * __cdecl SDL_GetWindowFromID(SDL_WindowID id);
extern  SDL_Window * __cdecl SDL_GetWindowParent(SDL_Window *window);
extern  SDL_PropertiesID __cdecl SDL_GetWindowProperties(SDL_Window *window);
extern  SDL_WindowFlags __cdecl SDL_GetWindowFlags(SDL_Window *window);
extern  bool __cdecl SDL_SetWindowTitle(SDL_Window *window, const char *title);
extern  const char * __cdecl SDL_GetWindowTitle(SDL_Window *window);
extern  bool __cdecl SDL_SetWindowIcon(SDL_Window *window, SDL_Surface *icon);
extern  bool __cdecl SDL_SetWindowPosition(SDL_Window *window, int x, int y);
extern  bool __cdecl SDL_GetWindowPosition(SDL_Window *window, int *x, int *y);
extern  bool __cdecl SDL_SetWindowSize(SDL_Window *window, int w, int h);
extern  bool __cdecl SDL_GetWindowSize(SDL_Window *window, int *w, int *h);
extern  bool __cdecl SDL_GetWindowSafeArea(SDL_Window *window, SDL_Rect *rect);
extern  bool __cdecl SDL_SetWindowAspectRatio(SDL_Window *window, float min_aspect, float max_aspect);
extern  bool __cdecl SDL_GetWindowAspectRatio(SDL_Window *window, float *min_aspect, float *max_aspect);
extern  bool __cdecl SDL_GetWindowBordersSize(SDL_Window *window, int *top, int *left, int *bottom, int *right);
extern  bool __cdecl SDL_GetWindowSizeInPixels(SDL_Window *window, int *w, int *h);
extern  bool __cdecl SDL_SetWindowMinimumSize(SDL_Window *window, int min_w, int min_h);
extern  bool __cdecl SDL_GetWindowMinimumSize(SDL_Window *window, int *w, int *h);
extern  bool __cdecl SDL_SetWindowMaximumSize(SDL_Window *window, int max_w, int max_h);
extern  bool __cdecl SDL_GetWindowMaximumSize(SDL_Window *window, int *w, int *h);
extern  bool __cdecl SDL_SetWindowBordered(SDL_Window *window, bool bordered);
extern  bool __cdecl SDL_SetWindowResizable(SDL_Window *window, bool resizable);
extern  bool __cdecl SDL_SetWindowAlwaysOnTop(SDL_Window *window, bool on_top);
extern  bool __cdecl SDL_ShowWindow(SDL_Window *window);
extern  bool __cdecl SDL_HideWindow(SDL_Window *window);
extern  bool __cdecl SDL_RaiseWindow(SDL_Window *window);
extern  bool __cdecl SDL_MaximizeWindow(SDL_Window *window);
extern  bool __cdecl SDL_MinimizeWindow(SDL_Window *window);
extern  bool __cdecl SDL_RestoreWindow(SDL_Window *window);
extern  bool __cdecl SDL_SetWindowFullscreen(SDL_Window *window, bool fullscreen);
extern  bool __cdecl SDL_SyncWindow(SDL_Window *window);
extern  bool __cdecl SDL_WindowHasSurface(SDL_Window *window);
extern  SDL_Surface * __cdecl SDL_GetWindowSurface(SDL_Window *window);
extern  bool __cdecl SDL_SetWindowSurfaceVSync(SDL_Window *window, int vsync);
extern  bool __cdecl SDL_GetWindowSurfaceVSync(SDL_Window *window, int *vsync);
extern  bool __cdecl SDL_UpdateWindowSurface(SDL_Window *window);
extern  bool __cdecl SDL_UpdateWindowSurfaceRects(SDL_Window *window, const SDL_Rect *rects, int numrects);
extern  bool __cdecl SDL_DestroyWindowSurface(SDL_Window *window);
extern  bool __cdecl SDL_SetWindowKeyboardGrab(SDL_Window *window, bool grabbed);
extern  bool __cdecl SDL_SetWindowMouseGrab(SDL_Window *window, bool grabbed);
extern  bool __cdecl SDL_GetWindowKeyboardGrab(SDL_Window *window);
extern  bool __cdecl SDL_GetWindowMouseGrab(SDL_Window *window);
extern  SDL_Window * __cdecl SDL_GetGrabbedWindow(void);
extern  bool __cdecl SDL_SetWindowMouseRect(SDL_Window *window, const SDL_Rect *rect);
extern  const SDL_Rect * __cdecl SDL_GetWindowMouseRect(SDL_Window *window);
extern  bool __cdecl SDL_SetWindowOpacity(SDL_Window *window, float opacity);
extern  float __cdecl SDL_GetWindowOpacity(SDL_Window *window);
extern  bool __cdecl SDL_SetWindowParent(SDL_Window *window, SDL_Window *parent);
extern  bool __cdecl SDL_SetWindowModal(SDL_Window *window, bool modal);
extern  bool __cdecl SDL_SetWindowFocusable(SDL_Window *window, bool focusable);
extern  bool __cdecl SDL_ShowWindowSystemMenu(SDL_Window *window, int x, int y);
typedef enum SDL_HitTestResult
{
    SDL_HITTEST_NORMAL,             
    SDL_HITTEST_DRAGGABLE,          
    SDL_HITTEST_RESIZE_TOPLEFT,     
    SDL_HITTEST_RESIZE_TOP,         
    SDL_HITTEST_RESIZE_TOPRIGHT,    
    SDL_HITTEST_RESIZE_RIGHT,       
    SDL_HITTEST_RESIZE_BOTTOMRIGHT, 
    SDL_HITTEST_RESIZE_BOTTOM,      
    SDL_HITTEST_RESIZE_BOTTOMLEFT,  
    SDL_HITTEST_RESIZE_LEFT         
} SDL_HitTestResult;
typedef SDL_HitTestResult (__cdecl *SDL_HitTest)(SDL_Window *win,
                                                 const SDL_Point *area,
                                                 void *data);
extern  bool __cdecl SDL_SetWindowHitTest(SDL_Window *window, SDL_HitTest callback, void *callback_data);
extern  bool __cdecl SDL_SetWindowShape(SDL_Window *window, SDL_Surface *shape);
extern  bool __cdecl SDL_FlashWindow(SDL_Window *window, SDL_FlashOperation operation);
extern  void __cdecl SDL_DestroyWindow(SDL_Window *window);
extern  bool __cdecl SDL_ScreenSaverEnabled(void);
extern  bool __cdecl SDL_EnableScreenSaver(void);
extern  bool __cdecl SDL_DisableScreenSaver(void);
extern  bool __cdecl SDL_GL_LoadLibrary(const char *path);
extern  SDL_FunctionPointer __cdecl SDL_GL_GetProcAddress(const char *proc);
extern  SDL_FunctionPointer __cdecl SDL_EGL_GetProcAddress(const char *proc);
extern  void __cdecl SDL_GL_UnloadLibrary(void);
extern  bool __cdecl SDL_GL_ExtensionSupported(const char *extension);
extern  void __cdecl SDL_GL_ResetAttributes(void);
extern  bool __cdecl SDL_GL_SetAttribute(SDL_GLAttr attr, int value);
extern  bool __cdecl SDL_GL_GetAttribute(SDL_GLAttr attr, int *value);
extern  SDL_GLContext __cdecl SDL_GL_CreateContext(SDL_Window *window);
extern  bool __cdecl SDL_GL_MakeCurrent(SDL_Window *window, SDL_GLContext context);
extern  SDL_Window * __cdecl SDL_GL_GetCurrentWindow(void);
extern  SDL_GLContext __cdecl SDL_GL_GetCurrentContext(void);
extern  SDL_EGLDisplay __cdecl SDL_EGL_GetCurrentDisplay(void);
extern  SDL_EGLConfig __cdecl SDL_EGL_GetCurrentConfig(void);
extern  SDL_EGLSurface __cdecl SDL_EGL_GetWindowSurface(SDL_Window *window);
extern  void __cdecl SDL_EGL_SetAttributeCallbacks(SDL_EGLAttribArrayCallback platformAttribCallback,
                                                               SDL_EGLIntArrayCallback surfaceAttribCallback,
                                                               SDL_EGLIntArrayCallback contextAttribCallback, void *userdata);
extern  bool __cdecl SDL_GL_SetSwapInterval(int interval);
extern  bool __cdecl SDL_GL_GetSwapInterval(int *interval);
extern  bool __cdecl SDL_GL_SwapWindow(SDL_Window *window);
extern  bool __cdecl SDL_GL_DestroyContext(SDL_GLContext context);
#pragma pack(pop)
#pragma pack(push,8)
typedef struct SDL_DialogFileFilter
{
    const char *name;
    const char *pattern;
} SDL_DialogFileFilter;
typedef void (__cdecl *SDL_DialogFileCallback)(void *userdata, const char * const *filelist, int filter);
extern  void __cdecl SDL_ShowOpenFileDialog(SDL_DialogFileCallback callback, void *userdata, SDL_Window *window, const SDL_DialogFileFilter *filters, int nfilters, const char *default_location, bool allow_many);
extern  void __cdecl SDL_ShowSaveFileDialog(SDL_DialogFileCallback callback, void *userdata, SDL_Window *window, const SDL_DialogFileFilter *filters, int nfilters, const char *default_location);
extern  void __cdecl SDL_ShowOpenFolderDialog(SDL_DialogFileCallback callback, void *userdata, SDL_Window *window, const char *default_location, bool allow_many);
#pragma pack(pop)
#pragma pack(push,8)
typedef struct SDL_GUID {
    Uint8 data[16];
} SDL_GUID;
extern  void __cdecl SDL_GUIDToString(SDL_GUID guid, char *pszGUID, int cbGUID);
extern  SDL_GUID __cdecl SDL_StringToGUID(const char *pchGUID);
#pragma pack(pop)
#pragma pack(push,8)
typedef enum SDL_PowerState
{
    SDL_POWERSTATE_ERROR = -1,   
    SDL_POWERSTATE_UNKNOWN,      
    SDL_POWERSTATE_ON_BATTERY,   
    SDL_POWERSTATE_NO_BATTERY,   
    SDL_POWERSTATE_CHARGING,     
    SDL_POWERSTATE_CHARGED       
} SDL_PowerState;
extern  SDL_PowerState __cdecl SDL_GetPowerInfo(int *seconds, int *percent);
#pragma pack(pop)
#pragma pack(push,8)
typedef struct SDL_Sensor SDL_Sensor;
typedef Uint32 SDL_SensorID;
typedef enum SDL_SensorType
{
    SDL_SENSOR_INVALID = -1,    
    SDL_SENSOR_UNKNOWN,         
    SDL_SENSOR_ACCEL,           
    SDL_SENSOR_GYRO,            
    SDL_SENSOR_ACCEL_L,         
    SDL_SENSOR_GYRO_L,          
    SDL_SENSOR_ACCEL_R,         
    SDL_SENSOR_GYRO_R           
} SDL_SensorType;
extern  SDL_SensorID * __cdecl SDL_GetSensors(int *count);
extern  const char * __cdecl SDL_GetSensorNameForID(SDL_SensorID instance_id);
extern  SDL_SensorType __cdecl SDL_GetSensorTypeForID(SDL_SensorID instance_id);
extern  int __cdecl SDL_GetSensorNonPortableTypeForID(SDL_SensorID instance_id);
extern  SDL_Sensor * __cdecl SDL_OpenSensor(SDL_SensorID instance_id);
extern  SDL_Sensor * __cdecl SDL_GetSensorFromID(SDL_SensorID instance_id);
extern  SDL_PropertiesID __cdecl SDL_GetSensorProperties(SDL_Sensor *sensor);
extern  const char * __cdecl SDL_GetSensorName(SDL_Sensor *sensor);
extern  SDL_SensorType __cdecl SDL_GetSensorType(SDL_Sensor *sensor);
extern  int __cdecl SDL_GetSensorNonPortableType(SDL_Sensor *sensor);
extern  SDL_SensorID __cdecl SDL_GetSensorID(SDL_Sensor *sensor);
extern  bool __cdecl SDL_GetSensorData(SDL_Sensor *sensor, float *data, int num_values);
extern  void __cdecl SDL_CloseSensor(SDL_Sensor *sensor);
extern  void __cdecl SDL_UpdateSensors(void);
#pragma pack(pop)
#pragma pack(push,8)
typedef struct SDL_Joystick SDL_Joystick;
typedef Uint32 SDL_JoystickID;
typedef enum SDL_JoystickType
{
    SDL_JOYSTICK_TYPE_UNKNOWN,
    SDL_JOYSTICK_TYPE_GAMEPAD,
    SDL_JOYSTICK_TYPE_WHEEL,
    SDL_JOYSTICK_TYPE_ARCADE_STICK,
    SDL_JOYSTICK_TYPE_FLIGHT_STICK,
    SDL_JOYSTICK_TYPE_DANCE_PAD,
    SDL_JOYSTICK_TYPE_GUITAR,
    SDL_JOYSTICK_TYPE_DRUM_KIT,
    SDL_JOYSTICK_TYPE_ARCADE_PAD,
    SDL_JOYSTICK_TYPE_THROTTLE,
    SDL_JOYSTICK_TYPE_COUNT
} SDL_JoystickType;
typedef enum SDL_JoystickConnectionState
{
    SDL_JOYSTICK_CONNECTION_INVALID = -1,
    SDL_JOYSTICK_CONNECTION_UNKNOWN,
    SDL_JOYSTICK_CONNECTION_WIRED,
    SDL_JOYSTICK_CONNECTION_WIRELESS
} SDL_JoystickConnectionState;
extern  void __cdecl SDL_LockJoysticks(void) ;
extern  void __cdecl SDL_UnlockJoysticks(void) ;
extern  bool __cdecl SDL_HasJoystick(void);
extern  SDL_JoystickID * __cdecl SDL_GetJoysticks(int *count);
extern  const char * __cdecl SDL_GetJoystickNameForID(SDL_JoystickID instance_id);
extern  const char * __cdecl SDL_GetJoystickPathForID(SDL_JoystickID instance_id);
extern  int __cdecl SDL_GetJoystickPlayerIndexForID(SDL_JoystickID instance_id);
extern  SDL_GUID __cdecl SDL_GetJoystickGUIDForID(SDL_JoystickID instance_id);
extern  Uint16 __cdecl SDL_GetJoystickVendorForID(SDL_JoystickID instance_id);
extern  Uint16 __cdecl SDL_GetJoystickProductForID(SDL_JoystickID instance_id);
extern  Uint16 __cdecl SDL_GetJoystickProductVersionForID(SDL_JoystickID instance_id);
extern  SDL_JoystickType __cdecl SDL_GetJoystickTypeForID(SDL_JoystickID instance_id);
extern  SDL_Joystick * __cdecl SDL_OpenJoystick(SDL_JoystickID instance_id);
extern  SDL_Joystick * __cdecl SDL_GetJoystickFromID(SDL_JoystickID instance_id);
extern  SDL_Joystick * __cdecl SDL_GetJoystickFromPlayerIndex(int player_index);
typedef struct SDL_VirtualJoystickTouchpadDesc
{
    Uint16 nfingers;    
    Uint16 padding[3];
} SDL_VirtualJoystickTouchpadDesc;
typedef struct SDL_VirtualJoystickSensorDesc
{
    SDL_SensorType type;    
    float rate;             
} SDL_VirtualJoystickSensorDesc;
typedef struct SDL_VirtualJoystickDesc
{
    Uint32 version;     
    Uint16 type;        
    Uint16 padding;     
    Uint16 vendor_id;   
    Uint16 product_id;  
    Uint16 naxes;       
    Uint16 nbuttons;    
    Uint16 nballs;      
    Uint16 nhats;       
    Uint16 ntouchpads;  
    Uint16 nsensors;    
    Uint16 padding2[2]; 
    Uint32 button_mask; 
    Uint32 axis_mask;   
    const char *name;   
    const SDL_VirtualJoystickTouchpadDesc *touchpads;   
    const SDL_VirtualJoystickSensorDesc *sensors;       
    void *userdata;     
    void (__cdecl *Update)(void *userdata); 
    void (__cdecl *SetPlayerIndex)(void *userdata, int player_index); 
    bool (__cdecl *Rumble)(void *userdata, Uint16 low_frequency_rumble, Uint16 high_frequency_rumble); 
    bool (__cdecl *RumbleTriggers)(void *userdata, Uint16 left_rumble, Uint16 right_rumble); 
    bool (__cdecl *SetLED)(void *userdata, Uint8 red, Uint8 green, Uint8 blue); 
    bool (__cdecl *SendEffect)(void *userdata, const void *data, int size); 
    bool (__cdecl *SetSensorsEnabled)(void *userdata, bool enabled); 
    void (__cdecl *Cleanup)(void *userdata); 
} SDL_VirtualJoystickDesc;
typedef int SDL_compile_time_assert_SDL_VirtualJoystickDesc_SIZE[((sizeof(void *) == 4 && sizeof(SDL_VirtualJoystickDesc) == 84) || (sizeof(void *) == 8 && sizeof(SDL_VirtualJoystickDesc) == 136)) * 2 - 1];
extern  SDL_JoystickID __cdecl SDL_AttachVirtualJoystick(const SDL_VirtualJoystickDesc *desc);
extern  bool __cdecl SDL_DetachVirtualJoystick(SDL_JoystickID instance_id);
extern  bool __cdecl SDL_IsJoystickVirtual(SDL_JoystickID instance_id);
extern  bool __cdecl SDL_SetJoystickVirtualAxis(SDL_Joystick *joystick, int axis, Sint16 value);
extern  bool __cdecl SDL_SetJoystickVirtualBall(SDL_Joystick *joystick, int ball, Sint16 xrel, Sint16 yrel);
extern  bool __cdecl SDL_SetJoystickVirtualButton(SDL_Joystick *joystick, int button, bool down);
extern  bool __cdecl SDL_SetJoystickVirtualHat(SDL_Joystick *joystick, int hat, Uint8 value);
extern  bool __cdecl SDL_SetJoystickVirtualTouchpad(SDL_Joystick *joystick, int touchpad, int finger, bool down, float x, float y, float pressure);
extern  bool __cdecl SDL_SendJoystickVirtualSensorData(SDL_Joystick *joystick, SDL_SensorType type, Uint64 sensor_timestamp, const float *data, int num_values);
extern  SDL_PropertiesID __cdecl SDL_GetJoystickProperties(SDL_Joystick *joystick);
extern  const char * __cdecl SDL_GetJoystickName(SDL_Joystick *joystick);
extern  const char * __cdecl SDL_GetJoystickPath(SDL_Joystick *joystick);
extern  int __cdecl SDL_GetJoystickPlayerIndex(SDL_Joystick *joystick);
extern  bool __cdecl SDL_SetJoystickPlayerIndex(SDL_Joystick *joystick, int player_index);
extern  SDL_GUID __cdecl SDL_GetJoystickGUID(SDL_Joystick *joystick);
extern  Uint16 __cdecl SDL_GetJoystickVendor(SDL_Joystick *joystick);
extern  Uint16 __cdecl SDL_GetJoystickProduct(SDL_Joystick *joystick);
extern  Uint16 __cdecl SDL_GetJoystickProductVersion(SDL_Joystick *joystick);
extern  Uint16 __cdecl SDL_GetJoystickFirmwareVersion(SDL_Joystick *joystick);
extern  const char * __cdecl SDL_GetJoystickSerial(SDL_Joystick *joystick);
extern  SDL_JoystickType __cdecl SDL_GetJoystickType(SDL_Joystick *joystick);
extern  void __cdecl SDL_GetJoystickGUIDInfo(SDL_GUID guid, Uint16 *vendor, Uint16 *product, Uint16 *version, Uint16 *crc16);
extern  bool __cdecl SDL_JoystickConnected(SDL_Joystick *joystick);
extern  SDL_JoystickID __cdecl SDL_GetJoystickID(SDL_Joystick *joystick);
extern  int __cdecl SDL_GetNumJoystickAxes(SDL_Joystick *joystick);
extern  int __cdecl SDL_GetNumJoystickBalls(SDL_Joystick *joystick);
extern  int __cdecl SDL_GetNumJoystickHats(SDL_Joystick *joystick);
extern  int __cdecl SDL_GetNumJoystickButtons(SDL_Joystick *joystick);
extern  void __cdecl SDL_SetJoystickEventsEnabled(bool enabled);
extern  bool __cdecl SDL_JoystickEventsEnabled(void);
extern  void __cdecl SDL_UpdateJoysticks(void);
extern  Sint16 __cdecl SDL_GetJoystickAxis(SDL_Joystick *joystick, int axis);
extern  bool __cdecl SDL_GetJoystickAxisInitialState(SDL_Joystick *joystick, int axis, Sint16 *state);
extern  bool __cdecl SDL_GetJoystickBall(SDL_Joystick *joystick, int ball, int *dx, int *dy);
extern  Uint8 __cdecl SDL_GetJoystickHat(SDL_Joystick *joystick, int hat);
extern  bool __cdecl SDL_GetJoystickButton(SDL_Joystick *joystick, int button);
extern  bool __cdecl SDL_RumbleJoystick(SDL_Joystick *joystick, Uint16 low_frequency_rumble, Uint16 high_frequency_rumble, Uint32 duration_ms);
extern  bool __cdecl SDL_RumbleJoystickTriggers(SDL_Joystick *joystick, Uint16 left_rumble, Uint16 right_rumble, Uint32 duration_ms);
extern  bool __cdecl SDL_SetJoystickLED(SDL_Joystick *joystick, Uint8 red, Uint8 green, Uint8 blue);
extern  bool __cdecl SDL_SendJoystickEffect(SDL_Joystick *joystick, const void *data, int size);
extern  void __cdecl SDL_CloseJoystick(SDL_Joystick *joystick);
extern  SDL_JoystickConnectionState __cdecl SDL_GetJoystickConnectionState(SDL_Joystick *joystick);
extern  SDL_PowerState __cdecl SDL_GetJoystickPowerInfo(SDL_Joystick *joystick, int *percent);
#pragma pack(pop)
#pragma pack(push,8)
typedef struct SDL_Gamepad SDL_Gamepad;
typedef enum SDL_GamepadType
{
    SDL_GAMEPAD_TYPE_UNKNOWN = 0,
    SDL_GAMEPAD_TYPE_STANDARD,
    SDL_GAMEPAD_TYPE_XBOX360,
    SDL_GAMEPAD_TYPE_XBOXONE,
    SDL_GAMEPAD_TYPE_PS3,
    SDL_GAMEPAD_TYPE_PS4,
    SDL_GAMEPAD_TYPE_PS5,
    SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_PRO,
    SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_LEFT,
    SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_RIGHT,
    SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_PAIR,
    SDL_GAMEPAD_TYPE_COUNT
} SDL_GamepadType;
typedef enum SDL_GamepadButton
{
    SDL_GAMEPAD_BUTTON_INVALID = -1,
    SDL_GAMEPAD_BUTTON_SOUTH,           
    SDL_GAMEPAD_BUTTON_EAST,            
    SDL_GAMEPAD_BUTTON_WEST,            
    SDL_GAMEPAD_BUTTON_NORTH,           
    SDL_GAMEPAD_BUTTON_BACK,
    SDL_GAMEPAD_BUTTON_GUIDE,
    SDL_GAMEPAD_BUTTON_START,
    SDL_GAMEPAD_BUTTON_LEFT_STICK,
    SDL_GAMEPAD_BUTTON_RIGHT_STICK,
    SDL_GAMEPAD_BUTTON_LEFT_SHOULDER,
    SDL_GAMEPAD_BUTTON_RIGHT_SHOULDER,
    SDL_GAMEPAD_BUTTON_DPAD_UP,
    SDL_GAMEPAD_BUTTON_DPAD_DOWN,
    SDL_GAMEPAD_BUTTON_DPAD_LEFT,
    SDL_GAMEPAD_BUTTON_DPAD_RIGHT,
    SDL_GAMEPAD_BUTTON_MISC1,           
    SDL_GAMEPAD_BUTTON_RIGHT_PADDLE1,   
    SDL_GAMEPAD_BUTTON_LEFT_PADDLE1,    
    SDL_GAMEPAD_BUTTON_RIGHT_PADDLE2,   
    SDL_GAMEPAD_BUTTON_LEFT_PADDLE2,    
    SDL_GAMEPAD_BUTTON_TOUCHPAD,        
    SDL_GAMEPAD_BUTTON_MISC2,           
    SDL_GAMEPAD_BUTTON_MISC3,           
    SDL_GAMEPAD_BUTTON_MISC4,           
    SDL_GAMEPAD_BUTTON_MISC5,           
    SDL_GAMEPAD_BUTTON_MISC6,           
    SDL_GAMEPAD_BUTTON_COUNT
} SDL_GamepadButton;
typedef enum SDL_GamepadButtonLabel
{
    SDL_GAMEPAD_BUTTON_LABEL_UNKNOWN,
    SDL_GAMEPAD_BUTTON_LABEL_A,
    SDL_GAMEPAD_BUTTON_LABEL_B,
    SDL_GAMEPAD_BUTTON_LABEL_X,
    SDL_GAMEPAD_BUTTON_LABEL_Y,
    SDL_GAMEPAD_BUTTON_LABEL_CROSS,
    SDL_GAMEPAD_BUTTON_LABEL_CIRCLE,
    SDL_GAMEPAD_BUTTON_LABEL_SQUARE,
    SDL_GAMEPAD_BUTTON_LABEL_TRIANGLE
} SDL_GamepadButtonLabel;
typedef enum SDL_GamepadAxis
{
    SDL_GAMEPAD_AXIS_INVALID = -1,
    SDL_GAMEPAD_AXIS_LEFTX,
    SDL_GAMEPAD_AXIS_LEFTY,
    SDL_GAMEPAD_AXIS_RIGHTX,
    SDL_GAMEPAD_AXIS_RIGHTY,
    SDL_GAMEPAD_AXIS_LEFT_TRIGGER,
    SDL_GAMEPAD_AXIS_RIGHT_TRIGGER,
    SDL_GAMEPAD_AXIS_COUNT
} SDL_GamepadAxis;
typedef enum SDL_GamepadBindingType
{
    SDL_GAMEPAD_BINDTYPE_NONE = 0,
    SDL_GAMEPAD_BINDTYPE_BUTTON,
    SDL_GAMEPAD_BINDTYPE_AXIS,
    SDL_GAMEPAD_BINDTYPE_HAT
} SDL_GamepadBindingType;
typedef struct SDL_GamepadBinding
{
    SDL_GamepadBindingType input_type;
    union
    {
        int button;
        struct
        {
            int axis;
            int axis_min;
            int axis_max;
        } axis;
        struct
        {
            int hat;
            int hat_mask;
        } hat;
    } input;
    SDL_GamepadBindingType output_type;
    union
    {
        SDL_GamepadButton button;
        struct
        {
            SDL_GamepadAxis axis;
            int axis_min;
            int axis_max;
        } axis;
    } output;
} SDL_GamepadBinding;
extern  int __cdecl SDL_AddGamepadMapping(const char *mapping);
extern  int __cdecl SDL_AddGamepadMappingsFromIO(SDL_IOStream *src, bool closeio);
extern  int __cdecl SDL_AddGamepadMappingsFromFile(const char *file);
extern  bool __cdecl SDL_ReloadGamepadMappings(void);
extern  char ** __cdecl SDL_GetGamepadMappings(int *count);
extern  char * __cdecl SDL_GetGamepadMappingForGUID(SDL_GUID guid);
extern  char * __cdecl SDL_GetGamepadMapping(SDL_Gamepad *gamepad);
extern  bool __cdecl SDL_SetGamepadMapping(SDL_JoystickID instance_id, const char *mapping);
extern  bool __cdecl SDL_HasGamepad(void);
extern  SDL_JoystickID * __cdecl SDL_GetGamepads(int *count);
extern  bool __cdecl SDL_IsGamepad(SDL_JoystickID instance_id);
extern  const char * __cdecl SDL_GetGamepadNameForID(SDL_JoystickID instance_id);
extern  const char * __cdecl SDL_GetGamepadPathForID(SDL_JoystickID instance_id);
extern  int __cdecl SDL_GetGamepadPlayerIndexForID(SDL_JoystickID instance_id);
extern  SDL_GUID __cdecl SDL_GetGamepadGUIDForID(SDL_JoystickID instance_id);
extern  Uint16 __cdecl SDL_GetGamepadVendorForID(SDL_JoystickID instance_id);
extern  Uint16 __cdecl SDL_GetGamepadProductForID(SDL_JoystickID instance_id);
extern  Uint16 __cdecl SDL_GetGamepadProductVersionForID(SDL_JoystickID instance_id);
extern  SDL_GamepadType __cdecl SDL_GetGamepadTypeForID(SDL_JoystickID instance_id);
extern  SDL_GamepadType __cdecl SDL_GetRealGamepadTypeForID(SDL_JoystickID instance_id);
extern  char * __cdecl SDL_GetGamepadMappingForID(SDL_JoystickID instance_id);
extern  SDL_Gamepad * __cdecl SDL_OpenGamepad(SDL_JoystickID instance_id);
extern  SDL_Gamepad * __cdecl SDL_GetGamepadFromID(SDL_JoystickID instance_id);
extern  SDL_Gamepad * __cdecl SDL_GetGamepadFromPlayerIndex(int player_index);
extern  SDL_PropertiesID __cdecl SDL_GetGamepadProperties(SDL_Gamepad *gamepad);
extern  SDL_JoystickID __cdecl SDL_GetGamepadID(SDL_Gamepad *gamepad);
extern  const char * __cdecl SDL_GetGamepadName(SDL_Gamepad *gamepad);
extern  const char * __cdecl SDL_GetGamepadPath(SDL_Gamepad *gamepad);
extern  SDL_GamepadType __cdecl SDL_GetGamepadType(SDL_Gamepad *gamepad);
extern  SDL_GamepadType __cdecl SDL_GetRealGamepadType(SDL_Gamepad *gamepad);
extern  int __cdecl SDL_GetGamepadPlayerIndex(SDL_Gamepad *gamepad);
extern  bool __cdecl SDL_SetGamepadPlayerIndex(SDL_Gamepad *gamepad, int player_index);
extern  Uint16 __cdecl SDL_GetGamepadVendor(SDL_Gamepad *gamepad);
extern  Uint16 __cdecl SDL_GetGamepadProduct(SDL_Gamepad *gamepad);
extern  Uint16 __cdecl SDL_GetGamepadProductVersion(SDL_Gamepad *gamepad);
extern  Uint16 __cdecl SDL_GetGamepadFirmwareVersion(SDL_Gamepad *gamepad);
extern  const char * __cdecl SDL_GetGamepadSerial(SDL_Gamepad *gamepad);
extern  Uint64 __cdecl SDL_GetGamepadSteamHandle(SDL_Gamepad *gamepad);
extern  SDL_JoystickConnectionState __cdecl SDL_GetGamepadConnectionState(SDL_Gamepad *gamepad);
extern  SDL_PowerState __cdecl SDL_GetGamepadPowerInfo(SDL_Gamepad *gamepad, int *percent);
extern  bool __cdecl SDL_GamepadConnected(SDL_Gamepad *gamepad);
extern  SDL_Joystick * __cdecl SDL_GetGamepadJoystick(SDL_Gamepad *gamepad);
extern  void __cdecl SDL_SetGamepadEventsEnabled(bool enabled);
extern  bool __cdecl SDL_GamepadEventsEnabled(void);
extern  SDL_GamepadBinding ** __cdecl SDL_GetGamepadBindings(SDL_Gamepad *gamepad, int *count);
extern  void __cdecl SDL_UpdateGamepads(void);
extern  SDL_GamepadType __cdecl SDL_GetGamepadTypeFromString(const char *str);
extern  const char * __cdecl SDL_GetGamepadStringForType(SDL_GamepadType type);
extern  SDL_GamepadAxis __cdecl SDL_GetGamepadAxisFromString(const char *str);
extern  const char * __cdecl SDL_GetGamepadStringForAxis(SDL_GamepadAxis axis);
extern  bool __cdecl SDL_GamepadHasAxis(SDL_Gamepad *gamepad, SDL_GamepadAxis axis);
extern  Sint16 __cdecl SDL_GetGamepadAxis(SDL_Gamepad *gamepad, SDL_GamepadAxis axis);
extern  SDL_GamepadButton __cdecl SDL_GetGamepadButtonFromString(const char *str);
extern  const char * __cdecl SDL_GetGamepadStringForButton(SDL_GamepadButton button);
extern  bool __cdecl SDL_GamepadHasButton(SDL_Gamepad *gamepad, SDL_GamepadButton button);
extern  bool __cdecl SDL_GetGamepadButton(SDL_Gamepad *gamepad, SDL_GamepadButton button);
extern  SDL_GamepadButtonLabel __cdecl SDL_GetGamepadButtonLabelForType(SDL_GamepadType type, SDL_GamepadButton button);
extern  SDL_GamepadButtonLabel __cdecl SDL_GetGamepadButtonLabel(SDL_Gamepad *gamepad, SDL_GamepadButton button);
extern  int __cdecl SDL_GetNumGamepadTouchpads(SDL_Gamepad *gamepad);
extern  int __cdecl SDL_GetNumGamepadTouchpadFingers(SDL_Gamepad *gamepad, int touchpad);
extern  bool __cdecl SDL_GetGamepadTouchpadFinger(SDL_Gamepad *gamepad, int touchpad, int finger, bool *down, float *x, float *y, float *pressure);
extern  bool __cdecl SDL_GamepadHasSensor(SDL_Gamepad *gamepad, SDL_SensorType type);
extern  bool __cdecl SDL_SetGamepadSensorEnabled(SDL_Gamepad *gamepad, SDL_SensorType type, bool enabled);
extern  bool __cdecl SDL_GamepadSensorEnabled(SDL_Gamepad *gamepad, SDL_SensorType type);
extern  float __cdecl SDL_GetGamepadSensorDataRate(SDL_Gamepad *gamepad, SDL_SensorType type);
extern  bool __cdecl SDL_GetGamepadSensorData(SDL_Gamepad *gamepad, SDL_SensorType type, float *data, int num_values);
extern  bool __cdecl SDL_RumbleGamepad(SDL_Gamepad *gamepad, Uint16 low_frequency_rumble, Uint16 high_frequency_rumble, Uint32 duration_ms);
extern  bool __cdecl SDL_RumbleGamepadTriggers(SDL_Gamepad *gamepad, Uint16 left_rumble, Uint16 right_rumble, Uint32 duration_ms);
extern  bool __cdecl SDL_SetGamepadLED(SDL_Gamepad *gamepad, Uint8 red, Uint8 green, Uint8 blue);
extern  bool __cdecl SDL_SendGamepadEffect(SDL_Gamepad *gamepad, const void *data, int size);
extern  void __cdecl SDL_CloseGamepad(SDL_Gamepad *gamepad);
extern  const char * __cdecl SDL_GetGamepadAppleSFSymbolsNameForButton(SDL_Gamepad *gamepad, SDL_GamepadButton button);
extern  const char * __cdecl SDL_GetGamepadAppleSFSymbolsNameForAxis(SDL_Gamepad *gamepad, SDL_GamepadAxis axis);
#pragma pack(pop)
typedef enum SDL_Scancode
{
    SDL_SCANCODE_UNKNOWN = 0,
    SDL_SCANCODE_A = 4,
    SDL_SCANCODE_B = 5,
    SDL_SCANCODE_C = 6,
    SDL_SCANCODE_D = 7,
    SDL_SCANCODE_E = 8,
    SDL_SCANCODE_F = 9,
    SDL_SCANCODE_G = 10,
    SDL_SCANCODE_H = 11,
    SDL_SCANCODE_I = 12,
    SDL_SCANCODE_J = 13,
    SDL_SCANCODE_K = 14,
    SDL_SCANCODE_L = 15,
    SDL_SCANCODE_M = 16,
    SDL_SCANCODE_N = 17,
    SDL_SCANCODE_O = 18,
    SDL_SCANCODE_P = 19,
    SDL_SCANCODE_Q = 20,
    SDL_SCANCODE_R = 21,
    SDL_SCANCODE_S = 22,
    SDL_SCANCODE_T = 23,
    SDL_SCANCODE_U = 24,
    SDL_SCANCODE_V = 25,
    SDL_SCANCODE_W = 26,
    SDL_SCANCODE_X = 27,
    SDL_SCANCODE_Y = 28,
    SDL_SCANCODE_Z = 29,
    SDL_SCANCODE_1 = 30,
    SDL_SCANCODE_2 = 31,
    SDL_SCANCODE_3 = 32,
    SDL_SCANCODE_4 = 33,
    SDL_SCANCODE_5 = 34,
    SDL_SCANCODE_6 = 35,
    SDL_SCANCODE_7 = 36,
    SDL_SCANCODE_8 = 37,
    SDL_SCANCODE_9 = 38,
    SDL_SCANCODE_0 = 39,
    SDL_SCANCODE_RETURN = 40,
    SDL_SCANCODE_ESCAPE = 41,
    SDL_SCANCODE_BACKSPACE = 42,
    SDL_SCANCODE_TAB = 43,
    SDL_SCANCODE_SPACE = 44,
    SDL_SCANCODE_MINUS = 45,
    SDL_SCANCODE_EQUALS = 46,
    SDL_SCANCODE_LEFTBRACKET = 47,
    SDL_SCANCODE_RIGHTBRACKET = 48,
    SDL_SCANCODE_BACKSLASH = 49, 
    SDL_SCANCODE_NONUSHASH = 50, 
    SDL_SCANCODE_SEMICOLON = 51,
    SDL_SCANCODE_APOSTROPHE = 52,
    SDL_SCANCODE_GRAVE = 53, 
    SDL_SCANCODE_COMMA = 54,
    SDL_SCANCODE_PERIOD = 55,
    SDL_SCANCODE_SLASH = 56,
    SDL_SCANCODE_CAPSLOCK = 57,
    SDL_SCANCODE_F1 = 58,
    SDL_SCANCODE_F2 = 59,
    SDL_SCANCODE_F3 = 60,
    SDL_SCANCODE_F4 = 61,
    SDL_SCANCODE_F5 = 62,
    SDL_SCANCODE_F6 = 63,
    SDL_SCANCODE_F7 = 64,
    SDL_SCANCODE_F8 = 65,
    SDL_SCANCODE_F9 = 66,
    SDL_SCANCODE_F10 = 67,
    SDL_SCANCODE_F11 = 68,
    SDL_SCANCODE_F12 = 69,
    SDL_SCANCODE_PRINTSCREEN = 70,
    SDL_SCANCODE_SCROLLLOCK = 71,
    SDL_SCANCODE_PAUSE = 72,
    SDL_SCANCODE_INSERT = 73, 
    SDL_SCANCODE_HOME = 74,
    SDL_SCANCODE_PAGEUP = 75,
    SDL_SCANCODE_DELETE = 76,
    SDL_SCANCODE_END = 77,
    SDL_SCANCODE_PAGEDOWN = 78,
    SDL_SCANCODE_RIGHT = 79,
    SDL_SCANCODE_LEFT = 80,
    SDL_SCANCODE_DOWN = 81,
    SDL_SCANCODE_UP = 82,
    SDL_SCANCODE_NUMLOCKCLEAR = 83, 
    SDL_SCANCODE_KP_DIVIDE = 84,
    SDL_SCANCODE_KP_MULTIPLY = 85,
    SDL_SCANCODE_KP_MINUS = 86,
    SDL_SCANCODE_KP_PLUS = 87,
    SDL_SCANCODE_KP_ENTER = 88,
    SDL_SCANCODE_KP_1 = 89,
    SDL_SCANCODE_KP_2 = 90,
    SDL_SCANCODE_KP_3 = 91,
    SDL_SCANCODE_KP_4 = 92,
    SDL_SCANCODE_KP_5 = 93,
    SDL_SCANCODE_KP_6 = 94,
    SDL_SCANCODE_KP_7 = 95,
    SDL_SCANCODE_KP_8 = 96,
    SDL_SCANCODE_KP_9 = 97,
    SDL_SCANCODE_KP_0 = 98,
    SDL_SCANCODE_KP_PERIOD = 99,
    SDL_SCANCODE_NONUSBACKSLASH = 100, 
    SDL_SCANCODE_APPLICATION = 101, 
    SDL_SCANCODE_POWER = 102, 
    SDL_SCANCODE_KP_EQUALS = 103,
    SDL_SCANCODE_F13 = 104,
    SDL_SCANCODE_F14 = 105,
    SDL_SCANCODE_F15 = 106,
    SDL_SCANCODE_F16 = 107,
    SDL_SCANCODE_F17 = 108,
    SDL_SCANCODE_F18 = 109,
    SDL_SCANCODE_F19 = 110,
    SDL_SCANCODE_F20 = 111,
    SDL_SCANCODE_F21 = 112,
    SDL_SCANCODE_F22 = 113,
    SDL_SCANCODE_F23 = 114,
    SDL_SCANCODE_F24 = 115,
    SDL_SCANCODE_EXECUTE = 116,
    SDL_SCANCODE_HELP = 117,    
    SDL_SCANCODE_MENU = 118,    
    SDL_SCANCODE_SELECT = 119,
    SDL_SCANCODE_STOP = 120,    
    SDL_SCANCODE_AGAIN = 121,   
    SDL_SCANCODE_UNDO = 122,    
    SDL_SCANCODE_CUT = 123,     
    SDL_SCANCODE_COPY = 124,    
    SDL_SCANCODE_PASTE = 125,   
    SDL_SCANCODE_FIND = 126,    
    SDL_SCANCODE_MUTE = 127,
    SDL_SCANCODE_VOLUMEUP = 128,
    SDL_SCANCODE_VOLUMEDOWN = 129,
    SDL_SCANCODE_KP_COMMA = 133,
    SDL_SCANCODE_KP_EQUALSAS400 = 134,
    SDL_SCANCODE_INTERNATIONAL1 = 135, 
    SDL_SCANCODE_INTERNATIONAL2 = 136,
    SDL_SCANCODE_INTERNATIONAL3 = 137, 
    SDL_SCANCODE_INTERNATIONAL4 = 138,
    SDL_SCANCODE_INTERNATIONAL5 = 139,
    SDL_SCANCODE_INTERNATIONAL6 = 140,
    SDL_SCANCODE_INTERNATIONAL7 = 141,
    SDL_SCANCODE_INTERNATIONAL8 = 142,
    SDL_SCANCODE_INTERNATIONAL9 = 143,
    SDL_SCANCODE_LANG1 = 144, 
    SDL_SCANCODE_LANG2 = 145, 
    SDL_SCANCODE_LANG3 = 146, 
    SDL_SCANCODE_LANG4 = 147, 
    SDL_SCANCODE_LANG5 = 148, 
    SDL_SCANCODE_LANG6 = 149, 
    SDL_SCANCODE_LANG7 = 150, 
    SDL_SCANCODE_LANG8 = 151, 
    SDL_SCANCODE_LANG9 = 152, 
    SDL_SCANCODE_ALTERASE = 153,    
    SDL_SCANCODE_SYSREQ = 154,
    SDL_SCANCODE_CANCEL = 155,      
    SDL_SCANCODE_CLEAR = 156,
    SDL_SCANCODE_PRIOR = 157,
    SDL_SCANCODE_RETURN2 = 158,
    SDL_SCANCODE_SEPARATOR = 159,
    SDL_SCANCODE_OUT = 160,
    SDL_SCANCODE_OPER = 161,
    SDL_SCANCODE_CLEARAGAIN = 162,
    SDL_SCANCODE_CRSEL = 163,
    SDL_SCANCODE_EXSEL = 164,
    SDL_SCANCODE_KP_00 = 176,
    SDL_SCANCODE_KP_000 = 177,
    SDL_SCANCODE_THOUSANDSSEPARATOR = 178,
    SDL_SCANCODE_DECIMALSEPARATOR = 179,
    SDL_SCANCODE_CURRENCYUNIT = 180,
    SDL_SCANCODE_CURRENCYSUBUNIT = 181,
    SDL_SCANCODE_KP_LEFTPAREN = 182,
    SDL_SCANCODE_KP_RIGHTPAREN = 183,
    SDL_SCANCODE_KP_LEFTBRACE = 184,
    SDL_SCANCODE_KP_RIGHTBRACE = 185,
    SDL_SCANCODE_KP_TAB = 186,
    SDL_SCANCODE_KP_BACKSPACE = 187,
    SDL_SCANCODE_KP_A = 188,
    SDL_SCANCODE_KP_B = 189,
    SDL_SCANCODE_KP_C = 190,
    SDL_SCANCODE_KP_D = 191,
    SDL_SCANCODE_KP_E = 192,
    SDL_SCANCODE_KP_F = 193,
    SDL_SCANCODE_KP_XOR = 194,
    SDL_SCANCODE_KP_POWER = 195,
    SDL_SCANCODE_KP_PERCENT = 196,
    SDL_SCANCODE_KP_LESS = 197,
    SDL_SCANCODE_KP_GREATER = 198,
    SDL_SCANCODE_KP_AMPERSAND = 199,
    SDL_SCANCODE_KP_DBLAMPERSAND = 200,
    SDL_SCANCODE_KP_VERTICALBAR = 201,
    SDL_SCANCODE_KP_DBLVERTICALBAR = 202,
    SDL_SCANCODE_KP_COLON = 203,
    SDL_SCANCODE_KP_HASH = 204,
    SDL_SCANCODE_KP_SPACE = 205,
    SDL_SCANCODE_KP_AT = 206,
    SDL_SCANCODE_KP_EXCLAM = 207,
    SDL_SCANCODE_KP_MEMSTORE = 208,
    SDL_SCANCODE_KP_MEMRECALL = 209,
    SDL_SCANCODE_KP_MEMCLEAR = 210,
    SDL_SCANCODE_KP_MEMADD = 211,
    SDL_SCANCODE_KP_MEMSUBTRACT = 212,
    SDL_SCANCODE_KP_MEMMULTIPLY = 213,
    SDL_SCANCODE_KP_MEMDIVIDE = 214,
    SDL_SCANCODE_KP_PLUSMINUS = 215,
    SDL_SCANCODE_KP_CLEAR = 216,
    SDL_SCANCODE_KP_CLEARENTRY = 217,
    SDL_SCANCODE_KP_BINARY = 218,
    SDL_SCANCODE_KP_OCTAL = 219,
    SDL_SCANCODE_KP_DECIMAL = 220,
    SDL_SCANCODE_KP_HEXADECIMAL = 221,
    SDL_SCANCODE_LCTRL = 224,
    SDL_SCANCODE_LSHIFT = 225,
    SDL_SCANCODE_LALT = 226, 
    SDL_SCANCODE_LGUI = 227, 
    SDL_SCANCODE_RCTRL = 228,
    SDL_SCANCODE_RSHIFT = 229,
    SDL_SCANCODE_RALT = 230, 
    SDL_SCANCODE_RGUI = 231, 
    SDL_SCANCODE_MODE = 257,    
    SDL_SCANCODE_SLEEP = 258,                   
    SDL_SCANCODE_WAKE = 259,                    
    SDL_SCANCODE_CHANNEL_INCREMENT = 260,       
    SDL_SCANCODE_CHANNEL_DECREMENT = 261,       
    SDL_SCANCODE_MEDIA_PLAY = 262,          
    SDL_SCANCODE_MEDIA_PAUSE = 263,         
    SDL_SCANCODE_MEDIA_RECORD = 264,        
    SDL_SCANCODE_MEDIA_FAST_FORWARD = 265,  
    SDL_SCANCODE_MEDIA_REWIND = 266,        
    SDL_SCANCODE_MEDIA_NEXT_TRACK = 267,    
    SDL_SCANCODE_MEDIA_PREVIOUS_TRACK = 268, 
    SDL_SCANCODE_MEDIA_STOP = 269,          
    SDL_SCANCODE_MEDIA_EJECT = 270,         
    SDL_SCANCODE_MEDIA_PLAY_PAUSE = 271,    
    SDL_SCANCODE_MEDIA_SELECT = 272,        
    SDL_SCANCODE_AC_NEW = 273,              
    SDL_SCANCODE_AC_OPEN = 274,             
    SDL_SCANCODE_AC_CLOSE = 275,            
    SDL_SCANCODE_AC_EXIT = 276,             
    SDL_SCANCODE_AC_SAVE = 277,             
    SDL_SCANCODE_AC_PRINT = 278,            
    SDL_SCANCODE_AC_PROPERTIES = 279,       
    SDL_SCANCODE_AC_SEARCH = 280,           
    SDL_SCANCODE_AC_HOME = 281,             
    SDL_SCANCODE_AC_BACK = 282,             
    SDL_SCANCODE_AC_FORWARD = 283,          
    SDL_SCANCODE_AC_STOP = 284,             
    SDL_SCANCODE_AC_REFRESH = 285,          
    SDL_SCANCODE_AC_BOOKMARKS = 286,        
    SDL_SCANCODE_SOFTLEFT = 287, 
    SDL_SCANCODE_SOFTRIGHT = 288, 
    SDL_SCANCODE_CALL = 289, 
    SDL_SCANCODE_ENDCALL = 290, 
    SDL_SCANCODE_RESERVED = 400,    
    SDL_SCANCODE_COUNT = 512 
} SDL_Scancode;
typedef Uint32 SDL_Keycode;
typedef Uint16 SDL_Keymod;
#pragma pack(push,8)
typedef Uint32 SDL_KeyboardID;
extern  bool __cdecl SDL_HasKeyboard(void);
extern  SDL_KeyboardID * __cdecl SDL_GetKeyboards(int *count);
extern  const char * __cdecl SDL_GetKeyboardNameForID(SDL_KeyboardID instance_id);
extern  SDL_Window * __cdecl SDL_GetKeyboardFocus(void);
extern  const bool * __cdecl SDL_GetKeyboardState(int *numkeys);
extern  void __cdecl SDL_ResetKeyboard(void);
extern  SDL_Keymod __cdecl SDL_GetModState(void);
extern  void __cdecl SDL_SetModState(SDL_Keymod modstate);
extern  SDL_Keycode __cdecl SDL_GetKeyFromScancode(SDL_Scancode scancode, SDL_Keymod modstate, bool key_event);
extern  SDL_Scancode __cdecl SDL_GetScancodeFromKey(SDL_Keycode key, SDL_Keymod *modstate);
extern  bool __cdecl SDL_SetScancodeName(SDL_Scancode scancode, const char *name);
extern  const char * __cdecl SDL_GetScancodeName(SDL_Scancode scancode);
extern  SDL_Scancode __cdecl SDL_GetScancodeFromName(const char *name);
extern  const char * __cdecl SDL_GetKeyName(SDL_Keycode key);
extern  SDL_Keycode __cdecl SDL_GetKeyFromName(const char *name);
extern  bool __cdecl SDL_StartTextInput(SDL_Window *window);
typedef enum SDL_TextInputType
{
    SDL_TEXTINPUT_TYPE_TEXT,                        
    SDL_TEXTINPUT_TYPE_TEXT_NAME,                   
    SDL_TEXTINPUT_TYPE_TEXT_EMAIL,                  
    SDL_TEXTINPUT_TYPE_TEXT_USERNAME,               
    SDL_TEXTINPUT_TYPE_TEXT_PASSWORD_HIDDEN,        
    SDL_TEXTINPUT_TYPE_TEXT_PASSWORD_VISIBLE,       
    SDL_TEXTINPUT_TYPE_NUMBER,                      
    SDL_TEXTINPUT_TYPE_NUMBER_PASSWORD_HIDDEN,      
    SDL_TEXTINPUT_TYPE_NUMBER_PASSWORD_VISIBLE      
} SDL_TextInputType;
typedef enum SDL_Capitalization
{
    SDL_CAPITALIZE_NONE,        
    SDL_CAPITALIZE_SENTENCES,   
    SDL_CAPITALIZE_WORDS,       
    SDL_CAPITALIZE_LETTERS      
} SDL_Capitalization;
extern  bool __cdecl SDL_StartTextInputWithProperties(SDL_Window *window, SDL_PropertiesID props);
extern  bool __cdecl SDL_TextInputActive(SDL_Window *window);
extern  bool __cdecl SDL_StopTextInput(SDL_Window *window);
extern  bool __cdecl SDL_ClearComposition(SDL_Window *window);
extern  bool __cdecl SDL_SetTextInputArea(SDL_Window *window, const SDL_Rect *rect, int cursor);
extern  bool __cdecl SDL_GetTextInputArea(SDL_Window *window, SDL_Rect *rect, int *cursor);
extern  bool __cdecl SDL_HasScreenKeyboardSupport(void);
extern  bool __cdecl SDL_ScreenKeyboardShown(SDL_Window *window);
#pragma pack(pop)
#pragma pack(push,8)
typedef Uint32 SDL_MouseID;
typedef struct SDL_Cursor SDL_Cursor;
typedef enum SDL_SystemCursor
{
    SDL_SYSTEM_CURSOR_DEFAULT,      
    SDL_SYSTEM_CURSOR_TEXT,         
    SDL_SYSTEM_CURSOR_WAIT,         
    SDL_SYSTEM_CURSOR_CROSSHAIR,    
    SDL_SYSTEM_CURSOR_PROGRESS,     
    SDL_SYSTEM_CURSOR_NWSE_RESIZE,  
    SDL_SYSTEM_CURSOR_NESW_RESIZE,  
    SDL_SYSTEM_CURSOR_EW_RESIZE,    
    SDL_SYSTEM_CURSOR_NS_RESIZE,    
    SDL_SYSTEM_CURSOR_MOVE,         
    SDL_SYSTEM_CURSOR_NOT_ALLOWED,  
    SDL_SYSTEM_CURSOR_POINTER,      
    SDL_SYSTEM_CURSOR_NW_RESIZE,    
    SDL_SYSTEM_CURSOR_N_RESIZE,     
    SDL_SYSTEM_CURSOR_NE_RESIZE,    
    SDL_SYSTEM_CURSOR_E_RESIZE,     
    SDL_SYSTEM_CURSOR_SE_RESIZE,    
    SDL_SYSTEM_CURSOR_S_RESIZE,     
    SDL_SYSTEM_CURSOR_SW_RESIZE,    
    SDL_SYSTEM_CURSOR_W_RESIZE,     
    SDL_SYSTEM_CURSOR_COUNT
} SDL_SystemCursor;
typedef enum SDL_MouseWheelDirection
{
    SDL_MOUSEWHEEL_NORMAL,    
    SDL_MOUSEWHEEL_FLIPPED    
} SDL_MouseWheelDirection;
typedef Uint32 SDL_MouseButtonFlags;
extern  bool __cdecl SDL_HasMouse(void);
extern  SDL_MouseID * __cdecl SDL_GetMice(int *count);
extern  const char * __cdecl SDL_GetMouseNameForID(SDL_MouseID instance_id);
extern  SDL_Window * __cdecl SDL_GetMouseFocus(void);
extern  SDL_MouseButtonFlags __cdecl SDL_GetMouseState(float *x, float *y);
extern  SDL_MouseButtonFlags __cdecl SDL_GetGlobalMouseState(float *x, float *y);
extern  SDL_MouseButtonFlags __cdecl SDL_GetRelativeMouseState(float *x, float *y);
extern  void __cdecl SDL_WarpMouseInWindow(SDL_Window * window,
                                                   float x, float y);
extern  bool __cdecl SDL_WarpMouseGlobal(float x, float y);
extern  bool __cdecl SDL_SetWindowRelativeMouseMode(SDL_Window *window, bool enabled);
extern  bool __cdecl SDL_GetWindowRelativeMouseMode(SDL_Window *window);
extern  bool __cdecl SDL_CaptureMouse(bool enabled);
extern  SDL_Cursor * __cdecl SDL_CreateCursor(const Uint8 * data,
                                                     const Uint8 * mask,
                                                     int w, int h, int hot_x,
                                                     int hot_y);
extern  SDL_Cursor * __cdecl SDL_CreateColorCursor(SDL_Surface *surface,
                                                          int hot_x,
                                                          int hot_y);
extern  SDL_Cursor * __cdecl SDL_CreateSystemCursor(SDL_SystemCursor id);
extern  bool __cdecl SDL_SetCursor(SDL_Cursor *cursor);
extern  SDL_Cursor * __cdecl SDL_GetCursor(void);
extern  SDL_Cursor * __cdecl SDL_GetDefaultCursor(void);
extern  void __cdecl SDL_DestroyCursor(SDL_Cursor *cursor);
extern  bool __cdecl SDL_ShowCursor(void);
extern  bool __cdecl SDL_HideCursor(void);
extern  bool __cdecl SDL_CursorVisible(void);
#pragma pack(pop)
typedef Uint32 SDL_PenID;
typedef Uint32 SDL_PenInputFlags;
typedef enum SDL_PenAxis
{
    SDL_PEN_AXIS_PRESSURE,  
    SDL_PEN_AXIS_XTILT,     
    SDL_PEN_AXIS_YTILT,     
    SDL_PEN_AXIS_DISTANCE,  
    SDL_PEN_AXIS_ROTATION,  
    SDL_PEN_AXIS_SLIDER,    
    SDL_PEN_AXIS_TANGENTIAL_PRESSURE,    
    SDL_PEN_AXIS_COUNT       
} SDL_PenAxis;
#pragma pack(push,8)
typedef Uint64 SDL_TouchID;
typedef Uint64 SDL_FingerID;
typedef enum SDL_TouchDeviceType
{
    SDL_TOUCH_DEVICE_INVALID = -1,
    SDL_TOUCH_DEVICE_DIRECT,            
    SDL_TOUCH_DEVICE_INDIRECT_ABSOLUTE, 
    SDL_TOUCH_DEVICE_INDIRECT_RELATIVE  
} SDL_TouchDeviceType;
typedef struct SDL_Finger
{
    SDL_FingerID id;  
    float x;  
    float y;  
    float pressure; 
} SDL_Finger;
extern  SDL_TouchID * __cdecl SDL_GetTouchDevices(int *count);
extern  const char * __cdecl SDL_GetTouchDeviceName(SDL_TouchID touchID);
extern  SDL_TouchDeviceType __cdecl SDL_GetTouchDeviceType(SDL_TouchID touchID);
extern  SDL_Finger ** __cdecl SDL_GetTouchFingers(SDL_TouchID touchID, int *count);
#pragma pack(pop)
#pragma pack(push,8)
typedef enum SDL_EventType
{
    SDL_EVENT_FIRST     = 0,     
    SDL_EVENT_QUIT           = 0x100, 
    SDL_EVENT_TERMINATING,      
    SDL_EVENT_LOW_MEMORY,       
    SDL_EVENT_WILL_ENTER_BACKGROUND, 
    SDL_EVENT_DID_ENTER_BACKGROUND, 
    SDL_EVENT_WILL_ENTER_FOREGROUND, 
    SDL_EVENT_DID_ENTER_FOREGROUND, 
    SDL_EVENT_LOCALE_CHANGED,  
    SDL_EVENT_SYSTEM_THEME_CHANGED, 
    SDL_EVENT_DISPLAY_ORIENTATION = 0x151,   
    SDL_EVENT_DISPLAY_ADDED,                 
    SDL_EVENT_DISPLAY_REMOVED,               
    SDL_EVENT_DISPLAY_MOVED,                 
    SDL_EVENT_DISPLAY_DESKTOP_MODE_CHANGED,  
    SDL_EVENT_DISPLAY_CURRENT_MODE_CHANGED,  
    SDL_EVENT_DISPLAY_CONTENT_SCALE_CHANGED, 
    SDL_EVENT_DISPLAY_FIRST = SDL_EVENT_DISPLAY_ORIENTATION,
    SDL_EVENT_DISPLAY_LAST = SDL_EVENT_DISPLAY_CONTENT_SCALE_CHANGED,
    SDL_EVENT_WINDOW_SHOWN = 0x202,     
    SDL_EVENT_WINDOW_HIDDEN,            
    SDL_EVENT_WINDOW_EXPOSED,           
    SDL_EVENT_WINDOW_MOVED,             
    SDL_EVENT_WINDOW_RESIZED,           
    SDL_EVENT_WINDOW_PIXEL_SIZE_CHANGED,
    SDL_EVENT_WINDOW_METAL_VIEW_RESIZED,
    SDL_EVENT_WINDOW_MINIMIZED,         
    SDL_EVENT_WINDOW_MAXIMIZED,         
    SDL_EVENT_WINDOW_RESTORED,          
    SDL_EVENT_WINDOW_MOUSE_ENTER,       
    SDL_EVENT_WINDOW_MOUSE_LEAVE,       
    SDL_EVENT_WINDOW_FOCUS_GAINED,      
    SDL_EVENT_WINDOW_FOCUS_LOST,        
    SDL_EVENT_WINDOW_CLOSE_REQUESTED,   
    SDL_EVENT_WINDOW_HIT_TEST,          
    SDL_EVENT_WINDOW_ICCPROF_CHANGED,   
    SDL_EVENT_WINDOW_DISPLAY_CHANGED,   
    SDL_EVENT_WINDOW_DISPLAY_SCALE_CHANGED, 
    SDL_EVENT_WINDOW_SAFE_AREA_CHANGED, 
    SDL_EVENT_WINDOW_OCCLUDED,          
    SDL_EVENT_WINDOW_ENTER_FULLSCREEN,  
    SDL_EVENT_WINDOW_LEAVE_FULLSCREEN,  
    SDL_EVENT_WINDOW_DESTROYED,         
    SDL_EVENT_WINDOW_HDR_STATE_CHANGED, 
    SDL_EVENT_WINDOW_FIRST = SDL_EVENT_WINDOW_SHOWN,
    SDL_EVENT_WINDOW_LAST = SDL_EVENT_WINDOW_HDR_STATE_CHANGED,
    SDL_EVENT_KEY_DOWN        = 0x300, 
    SDL_EVENT_KEY_UP,                  
    SDL_EVENT_TEXT_EDITING,            
    SDL_EVENT_TEXT_INPUT,              
    SDL_EVENT_KEYMAP_CHANGED,          
    SDL_EVENT_KEYBOARD_ADDED,          
    SDL_EVENT_KEYBOARD_REMOVED,        
    SDL_EVENT_TEXT_EDITING_CANDIDATES, 
    SDL_EVENT_MOUSE_MOTION    = 0x400, 
    SDL_EVENT_MOUSE_BUTTON_DOWN,       
    SDL_EVENT_MOUSE_BUTTON_UP,         
    SDL_EVENT_MOUSE_WHEEL,             
    SDL_EVENT_MOUSE_ADDED,             
    SDL_EVENT_MOUSE_REMOVED,           
    SDL_EVENT_JOYSTICK_AXIS_MOTION  = 0x600, 
    SDL_EVENT_JOYSTICK_BALL_MOTION,          
    SDL_EVENT_JOYSTICK_HAT_MOTION,           
    SDL_EVENT_JOYSTICK_BUTTON_DOWN,          
    SDL_EVENT_JOYSTICK_BUTTON_UP,            
    SDL_EVENT_JOYSTICK_ADDED,                
    SDL_EVENT_JOYSTICK_REMOVED,              
    SDL_EVENT_JOYSTICK_BATTERY_UPDATED,      
    SDL_EVENT_JOYSTICK_UPDATE_COMPLETE,      
    SDL_EVENT_GAMEPAD_AXIS_MOTION  = 0x650, 
    SDL_EVENT_GAMEPAD_BUTTON_DOWN,          
    SDL_EVENT_GAMEPAD_BUTTON_UP,            
    SDL_EVENT_GAMEPAD_ADDED,                
    SDL_EVENT_GAMEPAD_REMOVED,              
    SDL_EVENT_GAMEPAD_REMAPPED,             
    SDL_EVENT_GAMEPAD_TOUCHPAD_DOWN,        
    SDL_EVENT_GAMEPAD_TOUCHPAD_MOTION,      
    SDL_EVENT_GAMEPAD_TOUCHPAD_UP,          
    SDL_EVENT_GAMEPAD_SENSOR_UPDATE,        
    SDL_EVENT_GAMEPAD_UPDATE_COMPLETE,      
    SDL_EVENT_GAMEPAD_STEAM_HANDLE_UPDATED,  
    SDL_EVENT_FINGER_DOWN      = 0x700,
    SDL_EVENT_FINGER_UP,
    SDL_EVENT_FINGER_MOTION,
    SDL_EVENT_CLIPBOARD_UPDATE = 0x900, 
    SDL_EVENT_DROP_FILE        = 0x1000, 
    SDL_EVENT_DROP_TEXT,                 
    SDL_EVENT_DROP_BEGIN,                
    SDL_EVENT_DROP_COMPLETE,             
    SDL_EVENT_DROP_POSITION,             
    SDL_EVENT_AUDIO_DEVICE_ADDED = 0x1100,  
    SDL_EVENT_AUDIO_DEVICE_REMOVED,         
    SDL_EVENT_AUDIO_DEVICE_FORMAT_CHANGED,  
    SDL_EVENT_SENSOR_UPDATE = 0x1200,     
    SDL_EVENT_PEN_PROXIMITY_IN = 0x1300,  
    SDL_EVENT_PEN_PROXIMITY_OUT,          
    SDL_EVENT_PEN_DOWN,                   
    SDL_EVENT_PEN_UP,                     
    SDL_EVENT_PEN_BUTTON_DOWN,            
    SDL_EVENT_PEN_BUTTON_UP,              
    SDL_EVENT_PEN_MOTION,                 
    SDL_EVENT_PEN_AXIS,                   
    SDL_EVENT_CAMERA_DEVICE_ADDED = 0x1400,  
    SDL_EVENT_CAMERA_DEVICE_REMOVED,         
    SDL_EVENT_CAMERA_DEVICE_APPROVED,        
    SDL_EVENT_CAMERA_DEVICE_DENIED,          
    SDL_EVENT_RENDER_TARGETS_RESET = 0x2000, 
    SDL_EVENT_RENDER_DEVICE_RESET, 
    SDL_EVENT_RENDER_DEVICE_LOST, 
    SDL_EVENT_PRIVATE0 = 0x4000,
    SDL_EVENT_PRIVATE1,
    SDL_EVENT_PRIVATE2,
    SDL_EVENT_PRIVATE3,
    SDL_EVENT_POLL_SENTINEL = 0x7F00, 
    SDL_EVENT_USER    = 0x8000,
    SDL_EVENT_LAST    = 0xFFFF,
    SDL_EVENT_ENUM_PADDING = 0x7FFFFFFF
} SDL_EventType;
typedef struct SDL_CommonEvent
{
    Uint32 type;        
    Uint32 reserved;
    Uint64 timestamp;   
} SDL_CommonEvent;
typedef struct SDL_DisplayEvent
{
    SDL_EventType type; 
    Uint32 reserved;
    Uint64 timestamp;   
    SDL_DisplayID displayID;
    Sint32 data1;       
    Sint32 data2;       
} SDL_DisplayEvent;
typedef struct SDL_WindowEvent
{
    SDL_EventType type; 
    Uint32 reserved;
    Uint64 timestamp;   
    SDL_WindowID windowID; 
    Sint32 data1;       
    Sint32 data2;       
} SDL_WindowEvent;
typedef struct SDL_KeyboardDeviceEvent
{
    SDL_EventType type; 
    Uint32 reserved;
    Uint64 timestamp;   
    SDL_KeyboardID which;   
} SDL_KeyboardDeviceEvent;
typedef struct SDL_KeyboardEvent
{
    SDL_EventType type;     
    Uint32 reserved;
    Uint64 timestamp;       
    SDL_WindowID windowID;  
    SDL_KeyboardID which;   
    SDL_Scancode scancode;  
    SDL_Keycode key;        
    SDL_Keymod mod;         
    Uint16 raw;             
    bool down;          
    bool repeat;        
} SDL_KeyboardEvent;
typedef struct SDL_TextEditingEvent
{
    SDL_EventType type;         
    Uint32 reserved;
    Uint64 timestamp;           
    SDL_WindowID windowID;      
    const char *text;           
    Sint32 start;               
    Sint32 length;              
} SDL_TextEditingEvent;
typedef struct SDL_TextEditingCandidatesEvent
{
    SDL_EventType type;         
    Uint32 reserved;
    Uint64 timestamp;           
    SDL_WindowID windowID;      
    const char * const *candidates;    
    Sint32 num_candidates;      
    Sint32 selected_candidate;  
    bool horizontal;          
    Uint8 padding1;
    Uint8 padding2;
    Uint8 padding3;
} SDL_TextEditingCandidatesEvent;
typedef struct SDL_TextInputEvent
{
    SDL_EventType type; 
    Uint32 reserved;
    Uint64 timestamp;   
    SDL_WindowID windowID; 
    const char *text;   
} SDL_TextInputEvent;
typedef struct SDL_MouseDeviceEvent
{
    SDL_EventType type; 
    Uint32 reserved;
    Uint64 timestamp;   
    SDL_MouseID which;  
} SDL_MouseDeviceEvent;
typedef struct SDL_MouseMotionEvent
{
    SDL_EventType type; 
    Uint32 reserved;
    Uint64 timestamp;   
    SDL_WindowID windowID; 
    SDL_MouseID which;  
    SDL_MouseButtonFlags state;       
    float x;            
    float y;            
    float xrel;         
    float yrel;         
} SDL_MouseMotionEvent;
typedef struct SDL_MouseButtonEvent
{
    SDL_EventType type; 
    Uint32 reserved;
    Uint64 timestamp;   
    SDL_WindowID windowID; 
    SDL_MouseID which;  
    Uint8 button;       
    bool down;      
    Uint8 clicks;       
    Uint8 padding;
    float x;            
    float y;            
} SDL_MouseButtonEvent;
typedef struct SDL_MouseWheelEvent
{
    SDL_EventType type; 
    Uint32 reserved;
    Uint64 timestamp;   
    SDL_WindowID windowID; 
    SDL_MouseID which;  
    float x;            
    float y;            
    SDL_MouseWheelDirection direction; 
    float mouse_x;      
    float mouse_y;      
} SDL_MouseWheelEvent;
typedef struct SDL_JoyAxisEvent
{
    SDL_EventType type; 
    Uint32 reserved;
    Uint64 timestamp;   
    SDL_JoystickID which; 
    Uint8 axis;         
    Uint8 padding1;
    Uint8 padding2;
    Uint8 padding3;
    Sint16 value;       
    Uint16 padding4;
} SDL_JoyAxisEvent;
typedef struct SDL_JoyBallEvent
{
    SDL_EventType type; 
    Uint32 reserved;
    Uint64 timestamp;   
    SDL_JoystickID which; 
    Uint8 ball;         
    Uint8 padding1;
    Uint8 padding2;
    Uint8 padding3;
    Sint16 xrel;        
    Sint16 yrel;        
} SDL_JoyBallEvent;
typedef struct SDL_JoyHatEvent
{
    SDL_EventType type; 
    Uint32 reserved;
    Uint64 timestamp;   
    SDL_JoystickID which; 
    Uint8 hat;          
    Uint8 value;        
    Uint8 padding1;
    Uint8 padding2;
} SDL_JoyHatEvent;
typedef struct SDL_JoyButtonEvent
{
    SDL_EventType type; 
    Uint32 reserved;
    Uint64 timestamp;   
    SDL_JoystickID which; 
    Uint8 button;       
    bool down;      
    Uint8 padding1;
    Uint8 padding2;
} SDL_JoyButtonEvent;
typedef struct SDL_JoyDeviceEvent
{
    SDL_EventType type; 
    Uint32 reserved;
    Uint64 timestamp;   
    SDL_JoystickID which;       
} SDL_JoyDeviceEvent;
typedef struct SDL_JoyBatteryEvent
{
    SDL_EventType type; 
    Uint32 reserved;
    Uint64 timestamp;   
    SDL_JoystickID which; 
    SDL_PowerState state; 
    int percent;          
} SDL_JoyBatteryEvent;
typedef struct SDL_GamepadAxisEvent
{
    SDL_EventType type; 
    Uint32 reserved;
    Uint64 timestamp;   
    SDL_JoystickID which; 
    Uint8 axis;         
    Uint8 padding1;
    Uint8 padding2;
    Uint8 padding3;
    Sint16 value;       
    Uint16 padding4;
} SDL_GamepadAxisEvent;
typedef struct SDL_GamepadButtonEvent
{
    SDL_EventType type; 
    Uint32 reserved;
    Uint64 timestamp;   
    SDL_JoystickID which; 
    Uint8 button;       
    bool down;      
    Uint8 padding1;
    Uint8 padding2;
} SDL_GamepadButtonEvent;
typedef struct SDL_GamepadDeviceEvent
{
    SDL_EventType type; 
    Uint32 reserved;
    Uint64 timestamp;   
    SDL_JoystickID which;       
} SDL_GamepadDeviceEvent;
typedef struct SDL_GamepadTouchpadEvent
{
    SDL_EventType type; 
    Uint32 reserved;
    Uint64 timestamp;   
    SDL_JoystickID which; 
    Sint32 touchpad;    
    Sint32 finger;      
    float x;            
    float y;            
    float pressure;     
} SDL_GamepadTouchpadEvent;
typedef struct SDL_GamepadSensorEvent
{
    SDL_EventType type; 
    Uint32 reserved;
    Uint64 timestamp;   
    SDL_JoystickID which; 
    Sint32 sensor;      
    float data[3];      
    Uint64 sensor_timestamp; 
} SDL_GamepadSensorEvent;
typedef struct SDL_AudioDeviceEvent
{
    SDL_EventType type; 
    Uint32 reserved;
    Uint64 timestamp;   
    SDL_AudioDeviceID which;       
    bool recording; 
    Uint8 padding1;
    Uint8 padding2;
    Uint8 padding3;
} SDL_AudioDeviceEvent;
typedef struct SDL_CameraDeviceEvent
{
    SDL_EventType type; 
    Uint32 reserved;
    Uint64 timestamp;   
    SDL_CameraID which;       
} SDL_CameraDeviceEvent;
typedef struct SDL_TouchFingerEvent
{
    SDL_EventType type; 
    Uint32 reserved;
    Uint64 timestamp;   
    SDL_TouchID touchID; 
    SDL_FingerID fingerID;
    float x;            
    float y;            
    float dx;           
    float dy;           
    float pressure;     
    SDL_WindowID windowID; 
} SDL_TouchFingerEvent;
typedef struct SDL_PenProximityEvent
{
    SDL_EventType type; 
    Uint32 reserved;
    Uint64 timestamp;   
    SDL_WindowID windowID; 
    SDL_PenID which;        
} SDL_PenProximityEvent;
typedef struct SDL_PenMotionEvent
{
    SDL_EventType type; 
    Uint32 reserved;
    Uint64 timestamp;   
    SDL_WindowID windowID; 
    SDL_PenID which;        
    SDL_PenInputFlags pen_state;   
    float x;                
    float y;                
} SDL_PenMotionEvent;
typedef struct SDL_PenTouchEvent
{
    SDL_EventType type;     
    Uint32 reserved;
    Uint64 timestamp;       
    SDL_WindowID windowID;  
    SDL_PenID which;        
    SDL_PenInputFlags pen_state;   
    float x;                
    float y;                
    bool eraser;        
    bool down;          
} SDL_PenTouchEvent;
typedef struct SDL_PenButtonEvent
{
    SDL_EventType type; 
    Uint32 reserved;
    Uint64 timestamp;   
    SDL_WindowID windowID; 
    SDL_PenID which;        
    SDL_PenInputFlags pen_state;   
    float x;                
    float y;                
    Uint8 button;       
    bool down;      
} SDL_PenButtonEvent;
typedef struct SDL_PenAxisEvent
{
    SDL_EventType type;     
    Uint32 reserved;
    Uint64 timestamp;       
    SDL_WindowID windowID;  
    SDL_PenID which;        
    SDL_PenInputFlags pen_state;   
    float x;                
    float y;                
    SDL_PenAxis axis;       
    float value;            
} SDL_PenAxisEvent;
typedef struct SDL_DropEvent
{
    SDL_EventType type; 
    Uint32 reserved;
    Uint64 timestamp;   
    SDL_WindowID windowID;    
    float x;            
    float y;            
    const char *source; 
    const char *data;   
} SDL_DropEvent;
typedef struct SDL_ClipboardEvent
{
    SDL_EventType type; 
    Uint32 reserved;
    Uint64 timestamp;   
    bool owner;       
    Sint32 n_mime_types;     
    const char **mime_types; 
} SDL_ClipboardEvent;
typedef struct SDL_SensorEvent
{
    SDL_EventType type; 
    Uint32 reserved;
    Uint64 timestamp;   
    SDL_SensorID which; 
    float data[6];      
    Uint64 sensor_timestamp; 
} SDL_SensorEvent;
typedef struct SDL_QuitEvent
{
    SDL_EventType type; 
    Uint32 reserved;
    Uint64 timestamp;   
} SDL_QuitEvent;
typedef struct SDL_UserEvent
{
    Uint32 type;        
    Uint32 reserved;
    Uint64 timestamp;   
    SDL_WindowID windowID; 
    Sint32 code;        
    void *data1;        
    void *data2;        
} SDL_UserEvent;
typedef union SDL_Event
{
    Uint32 type;                            
    SDL_CommonEvent common;                 
    SDL_DisplayEvent display;               
    SDL_WindowEvent window;                 
    SDL_KeyboardDeviceEvent kdevice;        
    SDL_KeyboardEvent key;                  
    SDL_TextEditingEvent edit;              
    SDL_TextEditingCandidatesEvent edit_candidates; 
    SDL_TextInputEvent text;                
    SDL_MouseDeviceEvent mdevice;           
    SDL_MouseMotionEvent motion;            
    SDL_MouseButtonEvent button;            
    SDL_MouseWheelEvent wheel;              
    SDL_JoyDeviceEvent jdevice;             
    SDL_JoyAxisEvent jaxis;                 
    SDL_JoyBallEvent jball;                 
    SDL_JoyHatEvent jhat;                   
    SDL_JoyButtonEvent jbutton;             
    SDL_JoyBatteryEvent jbattery;           
    SDL_GamepadDeviceEvent gdevice;         
    SDL_GamepadAxisEvent gaxis;             
    SDL_GamepadButtonEvent gbutton;         
    SDL_GamepadTouchpadEvent gtouchpad;     
    SDL_GamepadSensorEvent gsensor;         
    SDL_AudioDeviceEvent adevice;           
    SDL_CameraDeviceEvent cdevice;          
    SDL_SensorEvent sensor;                 
    SDL_QuitEvent quit;                     
    SDL_UserEvent user;                     
    SDL_TouchFingerEvent tfinger;           
    SDL_PenProximityEvent pproximity;       
    SDL_PenTouchEvent ptouch;               
    SDL_PenMotionEvent pmotion;             
    SDL_PenButtonEvent pbutton;             
    SDL_PenAxisEvent paxis;                 
    SDL_DropEvent drop;                     
    SDL_ClipboardEvent clipboard;           
    Uint8 padding[128];
} SDL_Event;
typedef int SDL_compile_time_assert_SDL_Event[(sizeof(SDL_Event) == sizeof(((SDL_Event *)((void *)0))->padding)) * 2 - 1];
extern  void __cdecl SDL_PumpEvents(void);
typedef enum SDL_EventAction
{
    SDL_ADDEVENT,  
    SDL_PEEKEVENT, 
    SDL_GETEVENT   
} SDL_EventAction;
extern  int __cdecl SDL_PeepEvents(SDL_Event *events, int numevents, SDL_EventAction action, Uint32 minType, Uint32 maxType);
extern  bool __cdecl SDL_HasEvent(Uint32 type);
extern  bool __cdecl SDL_HasEvents(Uint32 minType, Uint32 maxType);
extern  void __cdecl SDL_FlushEvent(Uint32 type);
extern  void __cdecl SDL_FlushEvents(Uint32 minType, Uint32 maxType);
extern  bool __cdecl SDL_PollEvent(SDL_Event *event);
extern  bool __cdecl SDL_WaitEvent(SDL_Event *event);
extern  bool __cdecl SDL_WaitEventTimeout(SDL_Event *event, Sint32 timeoutMS);
extern  bool __cdecl SDL_PushEvent(SDL_Event *event);
typedef bool (__cdecl *SDL_EventFilter)(void *userdata, SDL_Event *event);
extern  void __cdecl SDL_SetEventFilter(SDL_EventFilter filter, void *userdata);
extern  bool __cdecl SDL_GetEventFilter(SDL_EventFilter *filter, void **userdata);
extern  bool __cdecl SDL_AddEventWatch(SDL_EventFilter filter, void *userdata);
extern  void __cdecl SDL_RemoveEventWatch(SDL_EventFilter filter, void *userdata);
extern  void __cdecl SDL_FilterEvents(SDL_EventFilter filter, void *userdata);
extern  void __cdecl SDL_SetEventEnabled(Uint32 type, bool enabled);
extern  bool __cdecl SDL_EventEnabled(Uint32 type);
extern  Uint32 __cdecl SDL_RegisterEvents(int numevents);
extern  SDL_Window * __cdecl SDL_GetWindowFromEvent(const SDL_Event *event);
#pragma pack(pop)
#pragma pack(push,8)
extern  const char * __cdecl SDL_GetBasePath(void);
extern  char * __cdecl SDL_GetPrefPath(const char *org, const char *app);
typedef enum SDL_Folder
{
    SDL_FOLDER_HOME,        
    SDL_FOLDER_DESKTOP,     
    SDL_FOLDER_DOCUMENTS,   
    SDL_FOLDER_DOWNLOADS,   
    SDL_FOLDER_MUSIC,       
    SDL_FOLDER_PICTURES,    
    SDL_FOLDER_PUBLICSHARE, 
    SDL_FOLDER_SAVEDGAMES,  
    SDL_FOLDER_SCREENSHOTS, 
    SDL_FOLDER_TEMPLATES,   
    SDL_FOLDER_VIDEOS,      
    SDL_FOLDER_COUNT        
} SDL_Folder;
extern  const char * __cdecl SDL_GetUserFolder(SDL_Folder folder);
typedef enum SDL_PathType
{
    SDL_PATHTYPE_NONE,      
    SDL_PATHTYPE_FILE,      
    SDL_PATHTYPE_DIRECTORY, 
    SDL_PATHTYPE_OTHER      
} SDL_PathType;
typedef struct SDL_PathInfo
{
    SDL_PathType type;      
    Uint64 size;            
    SDL_Time create_time;   
    SDL_Time modify_time;   
    SDL_Time access_time;   
} SDL_PathInfo;
typedef Uint32 SDL_GlobFlags;
extern  bool __cdecl SDL_CreateDirectory(const char *path);
typedef enum SDL_EnumerationResult
{
    SDL_ENUM_CONTINUE,   
    SDL_ENUM_SUCCESS,    
    SDL_ENUM_FAILURE     
} SDL_EnumerationResult;
typedef SDL_EnumerationResult (__cdecl *SDL_EnumerateDirectoryCallback)(void *userdata, const char *dirname, const char *fname);
extern  bool __cdecl SDL_EnumerateDirectory(const char *path, SDL_EnumerateDirectoryCallback callback, void *userdata);
extern  bool __cdecl SDL_RemovePath(const char *path);
extern  bool __cdecl SDL_RenamePath(const char *oldpath, const char *newpath);
extern  bool __cdecl SDL_CopyFile(const char *oldpath, const char *newpath);
extern  bool __cdecl SDL_GetPathInfo(const char *path, SDL_PathInfo *info);
extern  char ** __cdecl SDL_GlobDirectory(const char *path, const char *pattern, SDL_GlobFlags flags, int *count);
#pragma pack(pop)
#pragma pack(push,8)
typedef struct SDL_GPUDevice SDL_GPUDevice;
typedef struct SDL_GPUBuffer SDL_GPUBuffer;
typedef struct SDL_GPUTransferBuffer SDL_GPUTransferBuffer;
typedef struct SDL_GPUTexture SDL_GPUTexture;
typedef struct SDL_GPUSampler SDL_GPUSampler;
typedef struct SDL_GPUShader SDL_GPUShader;
typedef struct SDL_GPUComputePipeline SDL_GPUComputePipeline;
typedef struct SDL_GPUGraphicsPipeline SDL_GPUGraphicsPipeline;
typedef struct SDL_GPUCommandBuffer SDL_GPUCommandBuffer;
typedef struct SDL_GPURenderPass SDL_GPURenderPass;
typedef struct SDL_GPUComputePass SDL_GPUComputePass;
typedef struct SDL_GPUCopyPass SDL_GPUCopyPass;
typedef struct SDL_GPUFence SDL_GPUFence;
typedef enum SDL_GPUPrimitiveType
{
    SDL_GPU_PRIMITIVETYPE_TRIANGLELIST,  
    SDL_GPU_PRIMITIVETYPE_TRIANGLESTRIP, 
    SDL_GPU_PRIMITIVETYPE_LINELIST,      
    SDL_GPU_PRIMITIVETYPE_LINESTRIP,     
    SDL_GPU_PRIMITIVETYPE_POINTLIST      
} SDL_GPUPrimitiveType;
typedef enum SDL_GPULoadOp
{
    SDL_GPU_LOADOP_LOAD,      
    SDL_GPU_LOADOP_CLEAR,     
    SDL_GPU_LOADOP_DONT_CARE  
} SDL_GPULoadOp;
typedef enum SDL_GPUStoreOp
{
    SDL_GPU_STOREOP_STORE,             
    SDL_GPU_STOREOP_DONT_CARE,         
    SDL_GPU_STOREOP_RESOLVE,           
    SDL_GPU_STOREOP_RESOLVE_AND_STORE  
} SDL_GPUStoreOp;
typedef enum SDL_GPUIndexElementSize
{
    SDL_GPU_INDEXELEMENTSIZE_16BIT, 
    SDL_GPU_INDEXELEMENTSIZE_32BIT  
} SDL_GPUIndexElementSize;
typedef enum SDL_GPUTextureFormat
{
    SDL_GPU_TEXTUREFORMAT_INVALID,
    SDL_GPU_TEXTUREFORMAT_A8_UNORM,
    SDL_GPU_TEXTUREFORMAT_R8_UNORM,
    SDL_GPU_TEXTUREFORMAT_R8G8_UNORM,
    SDL_GPU_TEXTUREFORMAT_R8G8B8A8_UNORM,
    SDL_GPU_TEXTUREFORMAT_R16_UNORM,
    SDL_GPU_TEXTUREFORMAT_R16G16_UNORM,
    SDL_GPU_TEXTUREFORMAT_R16G16B16A16_UNORM,
    SDL_GPU_TEXTUREFORMAT_R10G10B10A2_UNORM,
    SDL_GPU_TEXTUREFORMAT_B5G6R5_UNORM,
    SDL_GPU_TEXTUREFORMAT_B5G5R5A1_UNORM,
    SDL_GPU_TEXTUREFORMAT_B4G4R4A4_UNORM,
    SDL_GPU_TEXTUREFORMAT_B8G8R8A8_UNORM,
    SDL_GPU_TEXTUREFORMAT_BC1_RGBA_UNORM,
    SDL_GPU_TEXTUREFORMAT_BC2_RGBA_UNORM,
    SDL_GPU_TEXTUREFORMAT_BC3_RGBA_UNORM,
    SDL_GPU_TEXTUREFORMAT_BC4_R_UNORM,
    SDL_GPU_TEXTUREFORMAT_BC5_RG_UNORM,
    SDL_GPU_TEXTUREFORMAT_BC7_RGBA_UNORM,
    SDL_GPU_TEXTUREFORMAT_BC6H_RGB_FLOAT,
    SDL_GPU_TEXTUREFORMAT_BC6H_RGB_UFLOAT,
    SDL_GPU_TEXTUREFORMAT_R8_SNORM,
    SDL_GPU_TEXTUREFORMAT_R8G8_SNORM,
    SDL_GPU_TEXTUREFORMAT_R8G8B8A8_SNORM,
    SDL_GPU_TEXTUREFORMAT_R16_SNORM,
    SDL_GPU_TEXTUREFORMAT_R16G16_SNORM,
    SDL_GPU_TEXTUREFORMAT_R16G16B16A16_SNORM,
    SDL_GPU_TEXTUREFORMAT_R16_FLOAT,
    SDL_GPU_TEXTUREFORMAT_R16G16_FLOAT,
    SDL_GPU_TEXTUREFORMAT_R16G16B16A16_FLOAT,
    SDL_GPU_TEXTUREFORMAT_R32_FLOAT,
    SDL_GPU_TEXTUREFORMAT_R32G32_FLOAT,
    SDL_GPU_TEXTUREFORMAT_R32G32B32A32_FLOAT,
    SDL_GPU_TEXTUREFORMAT_R11G11B10_UFLOAT,
    SDL_GPU_TEXTUREFORMAT_R8_UINT,
    SDL_GPU_TEXTUREFORMAT_R8G8_UINT,
    SDL_GPU_TEXTUREFORMAT_R8G8B8A8_UINT,
    SDL_GPU_TEXTUREFORMAT_R16_UINT,
    SDL_GPU_TEXTUREFORMAT_R16G16_UINT,
    SDL_GPU_TEXTUREFORMAT_R16G16B16A16_UINT,
    SDL_GPU_TEXTUREFORMAT_R32_UINT,
    SDL_GPU_TEXTUREFORMAT_R32G32_UINT,
    SDL_GPU_TEXTUREFORMAT_R32G32B32A32_UINT,
    SDL_GPU_TEXTUREFORMAT_R8_INT,
    SDL_GPU_TEXTUREFORMAT_R8G8_INT,
    SDL_GPU_TEXTUREFORMAT_R8G8B8A8_INT,
    SDL_GPU_TEXTUREFORMAT_R16_INT,
    SDL_GPU_TEXTUREFORMAT_R16G16_INT,
    SDL_GPU_TEXTUREFORMAT_R16G16B16A16_INT,
    SDL_GPU_TEXTUREFORMAT_R32_INT,
    SDL_GPU_TEXTUREFORMAT_R32G32_INT,
    SDL_GPU_TEXTUREFORMAT_R32G32B32A32_INT,
    SDL_GPU_TEXTUREFORMAT_R8G8B8A8_UNORM_SRGB,
    SDL_GPU_TEXTUREFORMAT_B8G8R8A8_UNORM_SRGB,
    SDL_GPU_TEXTUREFORMAT_BC1_RGBA_UNORM_SRGB,
    SDL_GPU_TEXTUREFORMAT_BC2_RGBA_UNORM_SRGB,
    SDL_GPU_TEXTUREFORMAT_BC3_RGBA_UNORM_SRGB,
    SDL_GPU_TEXTUREFORMAT_BC7_RGBA_UNORM_SRGB,
    SDL_GPU_TEXTUREFORMAT_D16_UNORM,
    SDL_GPU_TEXTUREFORMAT_D24_UNORM,
    SDL_GPU_TEXTUREFORMAT_D32_FLOAT,
    SDL_GPU_TEXTUREFORMAT_D24_UNORM_S8_UINT,
    SDL_GPU_TEXTUREFORMAT_D32_FLOAT_S8_UINT,
    SDL_GPU_TEXTUREFORMAT_ASTC_4x4_UNORM,
    SDL_GPU_TEXTUREFORMAT_ASTC_5x4_UNORM,
    SDL_GPU_TEXTUREFORMAT_ASTC_5x5_UNORM,
    SDL_GPU_TEXTUREFORMAT_ASTC_6x5_UNORM,
    SDL_GPU_TEXTUREFORMAT_ASTC_6x6_UNORM,
    SDL_GPU_TEXTUREFORMAT_ASTC_8x5_UNORM,
    SDL_GPU_TEXTUREFORMAT_ASTC_8x6_UNORM,
    SDL_GPU_TEXTUREFORMAT_ASTC_8x8_UNORM,
    SDL_GPU_TEXTUREFORMAT_ASTC_10x5_UNORM,
    SDL_GPU_TEXTUREFORMAT_ASTC_10x6_UNORM,
    SDL_GPU_TEXTUREFORMAT_ASTC_10x8_UNORM,
    SDL_GPU_TEXTUREFORMAT_ASTC_10x10_UNORM,
    SDL_GPU_TEXTUREFORMAT_ASTC_12x10_UNORM,
    SDL_GPU_TEXTUREFORMAT_ASTC_12x12_UNORM,
    SDL_GPU_TEXTUREFORMAT_ASTC_4x4_UNORM_SRGB,
    SDL_GPU_TEXTUREFORMAT_ASTC_5x4_UNORM_SRGB,
    SDL_GPU_TEXTUREFORMAT_ASTC_5x5_UNORM_SRGB,
    SDL_GPU_TEXTUREFORMAT_ASTC_6x5_UNORM_SRGB,
    SDL_GPU_TEXTUREFORMAT_ASTC_6x6_UNORM_SRGB,
    SDL_GPU_TEXTUREFORMAT_ASTC_8x5_UNORM_SRGB,
    SDL_GPU_TEXTUREFORMAT_ASTC_8x6_UNORM_SRGB,
    SDL_GPU_TEXTUREFORMAT_ASTC_8x8_UNORM_SRGB,
    SDL_GPU_TEXTUREFORMAT_ASTC_10x5_UNORM_SRGB,
    SDL_GPU_TEXTUREFORMAT_ASTC_10x6_UNORM_SRGB,
    SDL_GPU_TEXTUREFORMAT_ASTC_10x8_UNORM_SRGB,
    SDL_GPU_TEXTUREFORMAT_ASTC_10x10_UNORM_SRGB,
    SDL_GPU_TEXTUREFORMAT_ASTC_12x10_UNORM_SRGB,
    SDL_GPU_TEXTUREFORMAT_ASTC_12x12_UNORM_SRGB,
    SDL_GPU_TEXTUREFORMAT_ASTC_4x4_FLOAT,
    SDL_GPU_TEXTUREFORMAT_ASTC_5x4_FLOAT,
    SDL_GPU_TEXTUREFORMAT_ASTC_5x5_FLOAT,
    SDL_GPU_TEXTUREFORMAT_ASTC_6x5_FLOAT,
    SDL_GPU_TEXTUREFORMAT_ASTC_6x6_FLOAT,
    SDL_GPU_TEXTUREFORMAT_ASTC_8x5_FLOAT,
    SDL_GPU_TEXTUREFORMAT_ASTC_8x6_FLOAT,
    SDL_GPU_TEXTUREFORMAT_ASTC_8x8_FLOAT,
    SDL_GPU_TEXTUREFORMAT_ASTC_10x5_FLOAT,
    SDL_GPU_TEXTUREFORMAT_ASTC_10x6_FLOAT,
    SDL_GPU_TEXTUREFORMAT_ASTC_10x8_FLOAT,
    SDL_GPU_TEXTUREFORMAT_ASTC_10x10_FLOAT,
    SDL_GPU_TEXTUREFORMAT_ASTC_12x10_FLOAT,
    SDL_GPU_TEXTUREFORMAT_ASTC_12x12_FLOAT
} SDL_GPUTextureFormat;
typedef Uint32 SDL_GPUTextureUsageFlags;
typedef enum SDL_GPUTextureType
{
    SDL_GPU_TEXTURETYPE_2D,         
    SDL_GPU_TEXTURETYPE_2D_ARRAY,   
    SDL_GPU_TEXTURETYPE_3D,         
    SDL_GPU_TEXTURETYPE_CUBE,       
    SDL_GPU_TEXTURETYPE_CUBE_ARRAY  
} SDL_GPUTextureType;
typedef enum SDL_GPUSampleCount
{
    SDL_GPU_SAMPLECOUNT_1,  
    SDL_GPU_SAMPLECOUNT_2,  
    SDL_GPU_SAMPLECOUNT_4,  
    SDL_GPU_SAMPLECOUNT_8   
} SDL_GPUSampleCount;
typedef enum SDL_GPUCubeMapFace
{
    SDL_GPU_CUBEMAPFACE_POSITIVEX,
    SDL_GPU_CUBEMAPFACE_NEGATIVEX,
    SDL_GPU_CUBEMAPFACE_POSITIVEY,
    SDL_GPU_CUBEMAPFACE_NEGATIVEY,
    SDL_GPU_CUBEMAPFACE_POSITIVEZ,
    SDL_GPU_CUBEMAPFACE_NEGATIVEZ
} SDL_GPUCubeMapFace;
typedef Uint32 SDL_GPUBufferUsageFlags;
typedef enum SDL_GPUTransferBufferUsage
{
    SDL_GPU_TRANSFERBUFFERUSAGE_UPLOAD,
    SDL_GPU_TRANSFERBUFFERUSAGE_DOWNLOAD
} SDL_GPUTransferBufferUsage;
typedef enum SDL_GPUShaderStage
{
    SDL_GPU_SHADERSTAGE_VERTEX,
    SDL_GPU_SHADERSTAGE_FRAGMENT
} SDL_GPUShaderStage;
typedef Uint32 SDL_GPUShaderFormat;
typedef enum SDL_GPUVertexElementFormat
{
    SDL_GPU_VERTEXELEMENTFORMAT_INVALID,
    SDL_GPU_VERTEXELEMENTFORMAT_INT,
    SDL_GPU_VERTEXELEMENTFORMAT_INT2,
    SDL_GPU_VERTEXELEMENTFORMAT_INT3,
    SDL_GPU_VERTEXELEMENTFORMAT_INT4,
    SDL_GPU_VERTEXELEMENTFORMAT_UINT,
    SDL_GPU_VERTEXELEMENTFORMAT_UINT2,
    SDL_GPU_VERTEXELEMENTFORMAT_UINT3,
    SDL_GPU_VERTEXELEMENTFORMAT_UINT4,
    SDL_GPU_VERTEXELEMENTFORMAT_FLOAT,
    SDL_GPU_VERTEXELEMENTFORMAT_FLOAT2,
    SDL_GPU_VERTEXELEMENTFORMAT_FLOAT3,
    SDL_GPU_VERTEXELEMENTFORMAT_FLOAT4,
    SDL_GPU_VERTEXELEMENTFORMAT_BYTE2,
    SDL_GPU_VERTEXELEMENTFORMAT_BYTE4,
    SDL_GPU_VERTEXELEMENTFORMAT_UBYTE2,
    SDL_GPU_VERTEXELEMENTFORMAT_UBYTE4,
    SDL_GPU_VERTEXELEMENTFORMAT_BYTE2_NORM,
    SDL_GPU_VERTEXELEMENTFORMAT_BYTE4_NORM,
    SDL_GPU_VERTEXELEMENTFORMAT_UBYTE2_NORM,
    SDL_GPU_VERTEXELEMENTFORMAT_UBYTE4_NORM,
    SDL_GPU_VERTEXELEMENTFORMAT_SHORT2,
    SDL_GPU_VERTEXELEMENTFORMAT_SHORT4,
    SDL_GPU_VERTEXELEMENTFORMAT_USHORT2,
    SDL_GPU_VERTEXELEMENTFORMAT_USHORT4,
    SDL_GPU_VERTEXELEMENTFORMAT_SHORT2_NORM,
    SDL_GPU_VERTEXELEMENTFORMAT_SHORT4_NORM,
    SDL_GPU_VERTEXELEMENTFORMAT_USHORT2_NORM,
    SDL_GPU_VERTEXELEMENTFORMAT_USHORT4_NORM,
    SDL_GPU_VERTEXELEMENTFORMAT_HALF2,
    SDL_GPU_VERTEXELEMENTFORMAT_HALF4
} SDL_GPUVertexElementFormat;
typedef enum SDL_GPUVertexInputRate
{
    SDL_GPU_VERTEXINPUTRATE_VERTEX,   
    SDL_GPU_VERTEXINPUTRATE_INSTANCE  
} SDL_GPUVertexInputRate;
typedef enum SDL_GPUFillMode
{
    SDL_GPU_FILLMODE_FILL,  
    SDL_GPU_FILLMODE_LINE   
} SDL_GPUFillMode;
typedef enum SDL_GPUCullMode
{
    SDL_GPU_CULLMODE_NONE,   
    SDL_GPU_CULLMODE_FRONT,  
    SDL_GPU_CULLMODE_BACK    
} SDL_GPUCullMode;
typedef enum SDL_GPUFrontFace
{
    SDL_GPU_FRONTFACE_COUNTER_CLOCKWISE,  
    SDL_GPU_FRONTFACE_CLOCKWISE           
} SDL_GPUFrontFace;
typedef enum SDL_GPUCompareOp
{
    SDL_GPU_COMPAREOP_INVALID,
    SDL_GPU_COMPAREOP_NEVER,             
    SDL_GPU_COMPAREOP_LESS,              
    SDL_GPU_COMPAREOP_EQUAL,             
    SDL_GPU_COMPAREOP_LESS_OR_EQUAL,     
    SDL_GPU_COMPAREOP_GREATER,           
    SDL_GPU_COMPAREOP_NOT_EQUAL,         
    SDL_GPU_COMPAREOP_GREATER_OR_EQUAL,  
    SDL_GPU_COMPAREOP_ALWAYS             
} SDL_GPUCompareOp;
typedef enum SDL_GPUStencilOp
{
    SDL_GPU_STENCILOP_INVALID,
    SDL_GPU_STENCILOP_KEEP,                 
    SDL_GPU_STENCILOP_ZERO,                 
    SDL_GPU_STENCILOP_REPLACE,              
    SDL_GPU_STENCILOP_INCREMENT_AND_CLAMP,  
    SDL_GPU_STENCILOP_DECREMENT_AND_CLAMP,  
    SDL_GPU_STENCILOP_INVERT,               
    SDL_GPU_STENCILOP_INCREMENT_AND_WRAP,   
    SDL_GPU_STENCILOP_DECREMENT_AND_WRAP    
} SDL_GPUStencilOp;
typedef enum SDL_GPUBlendOp
{
    SDL_GPU_BLENDOP_INVALID,
    SDL_GPU_BLENDOP_ADD,               
    SDL_GPU_BLENDOP_SUBTRACT,          
    SDL_GPU_BLENDOP_REVERSE_SUBTRACT,  
    SDL_GPU_BLENDOP_MIN,               
    SDL_GPU_BLENDOP_MAX                
} SDL_GPUBlendOp;
typedef enum SDL_GPUBlendFactor
{
    SDL_GPU_BLENDFACTOR_INVALID,
    SDL_GPU_BLENDFACTOR_ZERO,                      
    SDL_GPU_BLENDFACTOR_ONE,                       
    SDL_GPU_BLENDFACTOR_SRC_COLOR,                 
    SDL_GPU_BLENDFACTOR_ONE_MINUS_SRC_COLOR,       
    SDL_GPU_BLENDFACTOR_DST_COLOR,                 
    SDL_GPU_BLENDFACTOR_ONE_MINUS_DST_COLOR,       
    SDL_GPU_BLENDFACTOR_SRC_ALPHA,                 
    SDL_GPU_BLENDFACTOR_ONE_MINUS_SRC_ALPHA,       
    SDL_GPU_BLENDFACTOR_DST_ALPHA,                 
    SDL_GPU_BLENDFACTOR_ONE_MINUS_DST_ALPHA,       
    SDL_GPU_BLENDFACTOR_CONSTANT_COLOR,            
    SDL_GPU_BLENDFACTOR_ONE_MINUS_CONSTANT_COLOR,  
    SDL_GPU_BLENDFACTOR_SRC_ALPHA_SATURATE         
} SDL_GPUBlendFactor;
typedef Uint8 SDL_GPUColorComponentFlags;
typedef enum SDL_GPUFilter
{
    SDL_GPU_FILTER_NEAREST,  
    SDL_GPU_FILTER_LINEAR    
} SDL_GPUFilter;
typedef enum SDL_GPUSamplerMipmapMode
{
    SDL_GPU_SAMPLERMIPMAPMODE_NEAREST,  
    SDL_GPU_SAMPLERMIPMAPMODE_LINEAR    
} SDL_GPUSamplerMipmapMode;
typedef enum SDL_GPUSamplerAddressMode
{
    SDL_GPU_SAMPLERADDRESSMODE_REPEAT,           
    SDL_GPU_SAMPLERADDRESSMODE_MIRRORED_REPEAT,  
    SDL_GPU_SAMPLERADDRESSMODE_CLAMP_TO_EDGE     
} SDL_GPUSamplerAddressMode;
typedef enum SDL_GPUPresentMode
{
    SDL_GPU_PRESENTMODE_VSYNC,
    SDL_GPU_PRESENTMODE_IMMEDIATE,
    SDL_GPU_PRESENTMODE_MAILBOX
} SDL_GPUPresentMode;
typedef enum SDL_GPUSwapchainComposition
{
    SDL_GPU_SWAPCHAINCOMPOSITION_SDR,
    SDL_GPU_SWAPCHAINCOMPOSITION_SDR_LINEAR,
    SDL_GPU_SWAPCHAINCOMPOSITION_HDR_EXTENDED_LINEAR,
    SDL_GPU_SWAPCHAINCOMPOSITION_HDR10_ST2048
} SDL_GPUSwapchainComposition;
typedef struct SDL_GPUViewport
{
    float x;          
    float y;          
    float w;          
    float h;          
    float min_depth;  
    float max_depth;  
} SDL_GPUViewport;
typedef struct SDL_GPUTextureTransferInfo
{
    SDL_GPUTransferBuffer *transfer_buffer;  
    Uint32 offset;                           
    Uint32 pixels_per_row;                   
    Uint32 rows_per_layer;                   
} SDL_GPUTextureTransferInfo;
typedef struct SDL_GPUTransferBufferLocation
{
    SDL_GPUTransferBuffer *transfer_buffer;  
    Uint32 offset;                           
} SDL_GPUTransferBufferLocation;
typedef struct SDL_GPUTextureLocation
{
    SDL_GPUTexture *texture;  
    Uint32 mip_level;         
    Uint32 layer;             
    Uint32 x;                 
    Uint32 y;                 
    Uint32 z;                 
} SDL_GPUTextureLocation;
typedef struct SDL_GPUTextureRegion
{
    SDL_GPUTexture *texture;  
    Uint32 mip_level;         
    Uint32 layer;             
    Uint32 x;                 
    Uint32 y;                 
    Uint32 z;                 
    Uint32 w;                 
    Uint32 h;                 
    Uint32 d;                 
} SDL_GPUTextureRegion;
typedef struct SDL_GPUBlitRegion
{
    SDL_GPUTexture *texture;  
    Uint32 mip_level;             
    Uint32 layer_or_depth_plane;  
    Uint32 x;                     
    Uint32 y;                     
    Uint32 w;                     
    Uint32 h;                     
} SDL_GPUBlitRegion;
typedef struct SDL_GPUBufferLocation
{
    SDL_GPUBuffer *buffer;  
    Uint32 offset;          
} SDL_GPUBufferLocation;
typedef struct SDL_GPUBufferRegion
{
    SDL_GPUBuffer *buffer;  
    Uint32 offset;          
    Uint32 size;            
} SDL_GPUBufferRegion;
typedef struct SDL_GPUIndirectDrawCommand
{
    Uint32 num_vertices;   
    Uint32 num_instances;  
    Uint32 first_vertex;   
    Uint32 first_instance; 
} SDL_GPUIndirectDrawCommand;
typedef struct SDL_GPUIndexedIndirectDrawCommand
{
    Uint32 num_indices;    
    Uint32 num_instances;  
    Uint32 first_index;    
    Sint32 vertex_offset;  
    Uint32 first_instance; 
} SDL_GPUIndexedIndirectDrawCommand;
typedef struct SDL_GPUIndirectDispatchCommand
{
    Uint32 groupcount_x;  
    Uint32 groupcount_y;  
    Uint32 groupcount_z;  
} SDL_GPUIndirectDispatchCommand;
typedef struct SDL_GPUSamplerCreateInfo
{
    SDL_GPUFilter min_filter;                  
    SDL_GPUFilter mag_filter;                  
    SDL_GPUSamplerMipmapMode mipmap_mode;      
    SDL_GPUSamplerAddressMode address_mode_u;  
    SDL_GPUSamplerAddressMode address_mode_v;  
    SDL_GPUSamplerAddressMode address_mode_w;  
    float mip_lod_bias;                        
    float max_anisotropy;                      
    SDL_GPUCompareOp compare_op;               
    float min_lod;                             
    float max_lod;                             
    bool enable_anisotropy;                
    bool enable_compare;                   
    Uint8 padding1;
    Uint8 padding2;
    SDL_PropertiesID props;                    
} SDL_GPUSamplerCreateInfo;
typedef struct SDL_GPUVertexBufferDescription
{
    Uint32 slot;                        
    Uint32 pitch;                       
    SDL_GPUVertexInputRate input_rate;  
    Uint32 instance_step_rate;          
} SDL_GPUVertexBufferDescription;
typedef struct SDL_GPUVertexAttribute
{
    Uint32 location;                    
    Uint32 buffer_slot;                 
    SDL_GPUVertexElementFormat format;  
    Uint32 offset;                      
} SDL_GPUVertexAttribute;
typedef struct SDL_GPUVertexInputState
{
    const SDL_GPUVertexBufferDescription *vertex_buffer_descriptions; 
    Uint32 num_vertex_buffers;                                        
    const SDL_GPUVertexAttribute *vertex_attributes;                  
    Uint32 num_vertex_attributes;                                     
} SDL_GPUVertexInputState;
typedef struct SDL_GPUStencilOpState
{
    SDL_GPUStencilOp fail_op;        
    SDL_GPUStencilOp pass_op;        
    SDL_GPUStencilOp depth_fail_op;  
    SDL_GPUCompareOp compare_op;     
} SDL_GPUStencilOpState;
typedef struct SDL_GPUColorTargetBlendState
{
    SDL_GPUBlendFactor src_color_blendfactor;     
    SDL_GPUBlendFactor dst_color_blendfactor;     
    SDL_GPUBlendOp color_blend_op;                
    SDL_GPUBlendFactor src_alpha_blendfactor;     
    SDL_GPUBlendFactor dst_alpha_blendfactor;     
    SDL_GPUBlendOp alpha_blend_op;                
    SDL_GPUColorComponentFlags color_write_mask;  
    bool enable_blend;                        
    bool enable_color_write_mask;             
    Uint8 padding1;
    Uint8 padding2;
} SDL_GPUColorTargetBlendState;
typedef struct SDL_GPUShaderCreateInfo
{
    size_t code_size;             
    const Uint8 *code;            
    const char *entrypoint;       
    SDL_GPUShaderFormat format;   
    SDL_GPUShaderStage stage;     
    Uint32 num_samplers;          
    Uint32 num_storage_textures;  
    Uint32 num_storage_buffers;   
    Uint32 num_uniform_buffers;   
    SDL_PropertiesID props;       
} SDL_GPUShaderCreateInfo;
typedef struct SDL_GPUTextureCreateInfo
{
    SDL_GPUTextureType type;          
    SDL_GPUTextureFormat format;      
    SDL_GPUTextureUsageFlags usage;   
    Uint32 width;                     
    Uint32 height;                    
    Uint32 layer_count_or_depth;      
    Uint32 num_levels;                
    SDL_GPUSampleCount sample_count;  
    SDL_PropertiesID props;           
} SDL_GPUTextureCreateInfo;
typedef struct SDL_GPUBufferCreateInfo
{
    SDL_GPUBufferUsageFlags usage;  
    Uint32 size;                    
    SDL_PropertiesID props;         
} SDL_GPUBufferCreateInfo;
typedef struct SDL_GPUTransferBufferCreateInfo
{
    SDL_GPUTransferBufferUsage usage;  
    Uint32 size;                       
    SDL_PropertiesID props;            
} SDL_GPUTransferBufferCreateInfo;
typedef struct SDL_GPURasterizerState
{
    SDL_GPUFillMode fill_mode;         
    SDL_GPUCullMode cull_mode;         
    SDL_GPUFrontFace front_face;       
    float depth_bias_constant_factor;  
    float depth_bias_clamp;            
    float depth_bias_slope_factor;     
    bool enable_depth_bias;        
    bool enable_depth_clip;        
    Uint8 padding1;
    Uint8 padding2;
} SDL_GPURasterizerState;
typedef struct SDL_GPUMultisampleState
{
    SDL_GPUSampleCount sample_count;  
    Uint32 sample_mask;               
    bool enable_mask;             
    Uint8 padding1;
    Uint8 padding2;
    Uint8 padding3;
} SDL_GPUMultisampleState;
typedef struct SDL_GPUDepthStencilState
{
    SDL_GPUCompareOp compare_op;                
    SDL_GPUStencilOpState back_stencil_state;   
    SDL_GPUStencilOpState front_stencil_state;  
    Uint8 compare_mask;                         
    Uint8 write_mask;                           
    bool enable_depth_test;                 
    bool enable_depth_write;                
    bool enable_stencil_test;               
    Uint8 padding1;
    Uint8 padding2;
    Uint8 padding3;
} SDL_GPUDepthStencilState;
typedef struct SDL_GPUColorTargetDescription
{
    SDL_GPUTextureFormat format;               
    SDL_GPUColorTargetBlendState blend_state;  
} SDL_GPUColorTargetDescription;
typedef struct SDL_GPUGraphicsPipelineTargetInfo
{
    const SDL_GPUColorTargetDescription *color_target_descriptions;  
    Uint32 num_color_targets;                                        
    SDL_GPUTextureFormat depth_stencil_format;                       
    bool has_depth_stencil_target;                               
    Uint8 padding1;
    Uint8 padding2;
    Uint8 padding3;
} SDL_GPUGraphicsPipelineTargetInfo;
typedef struct SDL_GPUGraphicsPipelineCreateInfo
{
    SDL_GPUShader *vertex_shader;                   
    SDL_GPUShader *fragment_shader;                 
    SDL_GPUVertexInputState vertex_input_state;     
    SDL_GPUPrimitiveType primitive_type;            
    SDL_GPURasterizerState rasterizer_state;        
    SDL_GPUMultisampleState multisample_state;      
    SDL_GPUDepthStencilState depth_stencil_state;   
    SDL_GPUGraphicsPipelineTargetInfo target_info;  
    SDL_PropertiesID props;                         
} SDL_GPUGraphicsPipelineCreateInfo;
typedef struct SDL_GPUComputePipelineCreateInfo
{
    size_t code_size;                       
    const Uint8 *code;                      
    const char *entrypoint;                 
    SDL_GPUShaderFormat format;             
    Uint32 num_samplers;                    
    Uint32 num_readonly_storage_textures;   
    Uint32 num_readonly_storage_buffers;    
    Uint32 num_readwrite_storage_textures;  
    Uint32 num_readwrite_storage_buffers;   
    Uint32 num_uniform_buffers;             
    Uint32 threadcount_x;                   
    Uint32 threadcount_y;                   
    Uint32 threadcount_z;                   
    SDL_PropertiesID props;                 
} SDL_GPUComputePipelineCreateInfo;
typedef struct SDL_GPUColorTargetInfo
{
    SDL_GPUTexture *texture;         
    Uint32 mip_level;                
    Uint32 layer_or_depth_plane;     
    SDL_FColor clear_color;          
    SDL_GPULoadOp load_op;           
    SDL_GPUStoreOp store_op;         
    SDL_GPUTexture *resolve_texture; 
    Uint32 resolve_mip_level;        
    Uint32 resolve_layer;            
    bool cycle;                  
    bool cycle_resolve_texture;  
    Uint8 padding1;
    Uint8 padding2;
} SDL_GPUColorTargetInfo;
typedef struct SDL_GPUDepthStencilTargetInfo
{
    SDL_GPUTexture *texture;               
    float clear_depth;                     
    SDL_GPULoadOp load_op;                 
    SDL_GPUStoreOp store_op;               
    SDL_GPULoadOp stencil_load_op;         
    SDL_GPUStoreOp stencil_store_op;       
    bool cycle;                        
    Uint8 clear_stencil;                   
    Uint8 padding1;
    Uint8 padding2;
} SDL_GPUDepthStencilTargetInfo;
typedef struct SDL_GPUBlitInfo {
    SDL_GPUBlitRegion source;       
    SDL_GPUBlitRegion destination;  
    SDL_GPULoadOp load_op;          
    SDL_FColor clear_color;         
    SDL_FlipMode flip_mode;         
    SDL_GPUFilter filter;           
    bool cycle;                 
    Uint8 padding1;
    Uint8 padding2;
    Uint8 padding3;
} SDL_GPUBlitInfo;
typedef struct SDL_GPUBufferBinding
{
    SDL_GPUBuffer *buffer;  
    Uint32 offset;          
} SDL_GPUBufferBinding;
typedef struct SDL_GPUTextureSamplerBinding
{
    SDL_GPUTexture *texture;  
    SDL_GPUSampler *sampler;  
} SDL_GPUTextureSamplerBinding;
typedef struct SDL_GPUStorageBufferReadWriteBinding
{
    SDL_GPUBuffer *buffer;  
    bool cycle;             
    Uint8 padding1;
    Uint8 padding2;
    Uint8 padding3;
} SDL_GPUStorageBufferReadWriteBinding;
typedef struct SDL_GPUStorageTextureReadWriteBinding
{
    SDL_GPUTexture *texture;  
    Uint32 mip_level;         
    Uint32 layer;             
    bool cycle;               
    Uint8 padding1;
    Uint8 padding2;
    Uint8 padding3;
} SDL_GPUStorageTextureReadWriteBinding;
extern  bool __cdecl SDL_GPUSupportsShaderFormats(
    SDL_GPUShaderFormat format_flags,
    const char *name);
extern  bool __cdecl SDL_GPUSupportsProperties(
    SDL_PropertiesID props);
extern  SDL_GPUDevice *__cdecl SDL_CreateGPUDevice(
    SDL_GPUShaderFormat format_flags,
    bool debug_mode,
    const char *name);
extern  SDL_GPUDevice *__cdecl SDL_CreateGPUDeviceWithProperties(
    SDL_PropertiesID props);
extern  void __cdecl SDL_DestroyGPUDevice(SDL_GPUDevice *device);
extern  int __cdecl SDL_GetNumGPUDrivers(void);
extern  const char * __cdecl SDL_GetGPUDriver(int index);
extern  const char * __cdecl SDL_GetGPUDeviceDriver(SDL_GPUDevice *device);
extern  SDL_GPUShaderFormat __cdecl SDL_GetGPUShaderFormats(SDL_GPUDevice *device);
extern  SDL_GPUComputePipeline *__cdecl SDL_CreateGPUComputePipeline(
    SDL_GPUDevice *device,
    const SDL_GPUComputePipelineCreateInfo *createinfo);
extern  SDL_GPUGraphicsPipeline *__cdecl SDL_CreateGPUGraphicsPipeline(
    SDL_GPUDevice *device,
    const SDL_GPUGraphicsPipelineCreateInfo *createinfo);
extern  SDL_GPUSampler *__cdecl SDL_CreateGPUSampler(
    SDL_GPUDevice *device,
    const SDL_GPUSamplerCreateInfo *createinfo);
extern  SDL_GPUShader *__cdecl SDL_CreateGPUShader(
    SDL_GPUDevice *device,
    const SDL_GPUShaderCreateInfo *createinfo);
extern  SDL_GPUTexture *__cdecl SDL_CreateGPUTexture(
    SDL_GPUDevice *device,
    const SDL_GPUTextureCreateInfo *createinfo);
extern  SDL_GPUBuffer *__cdecl SDL_CreateGPUBuffer(
    SDL_GPUDevice *device,
    const SDL_GPUBufferCreateInfo *createinfo);
extern  SDL_GPUTransferBuffer *__cdecl SDL_CreateGPUTransferBuffer(
    SDL_GPUDevice *device,
    const SDL_GPUTransferBufferCreateInfo *createinfo);
extern  void __cdecl SDL_SetGPUBufferName(
    SDL_GPUDevice *device,
    SDL_GPUBuffer *buffer,
    const char *text);
extern  void __cdecl SDL_SetGPUTextureName(
    SDL_GPUDevice *device,
    SDL_GPUTexture *texture,
    const char *text);
extern  void __cdecl SDL_InsertGPUDebugLabel(
    SDL_GPUCommandBuffer *command_buffer,
    const char *text);
extern  void __cdecl SDL_PushGPUDebugGroup(
    SDL_GPUCommandBuffer *command_buffer,
    const char *name);
extern  void __cdecl SDL_PopGPUDebugGroup(
    SDL_GPUCommandBuffer *command_buffer);
extern  void __cdecl SDL_ReleaseGPUTexture(
    SDL_GPUDevice *device,
    SDL_GPUTexture *texture);
extern  void __cdecl SDL_ReleaseGPUSampler(
    SDL_GPUDevice *device,
    SDL_GPUSampler *sampler);
extern  void __cdecl SDL_ReleaseGPUBuffer(
    SDL_GPUDevice *device,
    SDL_GPUBuffer *buffer);
extern  void __cdecl SDL_ReleaseGPUTransferBuffer(
    SDL_GPUDevice *device,
    SDL_GPUTransferBuffer *transfer_buffer);
extern  void __cdecl SDL_ReleaseGPUComputePipeline(
    SDL_GPUDevice *device,
    SDL_GPUComputePipeline *compute_pipeline);
extern  void __cdecl SDL_ReleaseGPUShader(
    SDL_GPUDevice *device,
    SDL_GPUShader *shader);
extern  void __cdecl SDL_ReleaseGPUGraphicsPipeline(
    SDL_GPUDevice *device,
    SDL_GPUGraphicsPipeline *graphics_pipeline);
extern  SDL_GPUCommandBuffer *__cdecl SDL_AcquireGPUCommandBuffer(
    SDL_GPUDevice *device);
extern  void __cdecl SDL_PushGPUVertexUniformData(
    SDL_GPUCommandBuffer *command_buffer,
    Uint32 slot_index,
    const void *data,
    Uint32 length);
extern  void __cdecl SDL_PushGPUFragmentUniformData(
    SDL_GPUCommandBuffer *command_buffer,
    Uint32 slot_index,
    const void *data,
    Uint32 length);
extern  void __cdecl SDL_PushGPUComputeUniformData(
    SDL_GPUCommandBuffer *command_buffer,
    Uint32 slot_index,
    const void *data,
    Uint32 length);
extern  SDL_GPURenderPass *__cdecl SDL_BeginGPURenderPass(
    SDL_GPUCommandBuffer *command_buffer,
    const SDL_GPUColorTargetInfo *color_target_infos,
    Uint32 num_color_targets,
    const SDL_GPUDepthStencilTargetInfo *depth_stencil_target_info);
extern  void __cdecl SDL_BindGPUGraphicsPipeline(
    SDL_GPURenderPass *render_pass,
    SDL_GPUGraphicsPipeline *graphics_pipeline);
extern  void __cdecl SDL_SetGPUViewport(
    SDL_GPURenderPass *render_pass,
    const SDL_GPUViewport *viewport);
extern  void __cdecl SDL_SetGPUScissor(
    SDL_GPURenderPass *render_pass,
    const SDL_Rect *scissor);
extern  void __cdecl SDL_SetGPUBlendConstants(
    SDL_GPURenderPass *render_pass,
    SDL_FColor blend_constants);
extern  void __cdecl SDL_SetGPUStencilReference(
    SDL_GPURenderPass *render_pass,
    Uint8 reference);
extern  void __cdecl SDL_BindGPUVertexBuffers(
    SDL_GPURenderPass *render_pass,
    Uint32 first_slot,
    const SDL_GPUBufferBinding *bindings,
    Uint32 num_bindings);
extern  void __cdecl SDL_BindGPUIndexBuffer(
    SDL_GPURenderPass *render_pass,
    const SDL_GPUBufferBinding *binding,
    SDL_GPUIndexElementSize index_element_size);
extern  void __cdecl SDL_BindGPUVertexSamplers(
    SDL_GPURenderPass *render_pass,
    Uint32 first_slot,
    const SDL_GPUTextureSamplerBinding *texture_sampler_bindings,
    Uint32 num_bindings);
extern  void __cdecl SDL_BindGPUVertexStorageTextures(
    SDL_GPURenderPass *render_pass,
    Uint32 first_slot,
    SDL_GPUTexture *const *storage_textures,
    Uint32 num_bindings);
extern  void __cdecl SDL_BindGPUVertexStorageBuffers(
    SDL_GPURenderPass *render_pass,
    Uint32 first_slot,
    SDL_GPUBuffer *const *storage_buffers,
    Uint32 num_bindings);
extern  void __cdecl SDL_BindGPUFragmentSamplers(
    SDL_GPURenderPass *render_pass,
    Uint32 first_slot,
    const SDL_GPUTextureSamplerBinding *texture_sampler_bindings,
    Uint32 num_bindings);
extern  void __cdecl SDL_BindGPUFragmentStorageTextures(
    SDL_GPURenderPass *render_pass,
    Uint32 first_slot,
    SDL_GPUTexture *const *storage_textures,
    Uint32 num_bindings);
extern  void __cdecl SDL_BindGPUFragmentStorageBuffers(
    SDL_GPURenderPass *render_pass,
    Uint32 first_slot,
    SDL_GPUBuffer *const *storage_buffers,
    Uint32 num_bindings);
extern  void __cdecl SDL_DrawGPUIndexedPrimitives(
    SDL_GPURenderPass *render_pass,
    Uint32 num_indices,
    Uint32 num_instances,
    Uint32 first_index,
    Sint32 vertex_offset,
    Uint32 first_instance);
extern  void __cdecl SDL_DrawGPUPrimitives(
    SDL_GPURenderPass *render_pass,
    Uint32 num_vertices,
    Uint32 num_instances,
    Uint32 first_vertex,
    Uint32 first_instance);
extern  void __cdecl SDL_DrawGPUPrimitivesIndirect(
    SDL_GPURenderPass *render_pass,
    SDL_GPUBuffer *buffer,
    Uint32 offset,
    Uint32 draw_count);
extern  void __cdecl SDL_DrawGPUIndexedPrimitivesIndirect(
    SDL_GPURenderPass *render_pass,
    SDL_GPUBuffer *buffer,
    Uint32 offset,
    Uint32 draw_count);
extern  void __cdecl SDL_EndGPURenderPass(
    SDL_GPURenderPass *render_pass);
extern  SDL_GPUComputePass *__cdecl SDL_BeginGPUComputePass(
    SDL_GPUCommandBuffer *command_buffer,
    const SDL_GPUStorageTextureReadWriteBinding *storage_texture_bindings,
    Uint32 num_storage_texture_bindings,
    const SDL_GPUStorageBufferReadWriteBinding *storage_buffer_bindings,
    Uint32 num_storage_buffer_bindings);
extern  void __cdecl SDL_BindGPUComputePipeline(
    SDL_GPUComputePass *compute_pass,
    SDL_GPUComputePipeline *compute_pipeline);
extern  void __cdecl SDL_BindGPUComputeSamplers(
    SDL_GPUComputePass *compute_pass,
    Uint32 first_slot,
    const SDL_GPUTextureSamplerBinding *texture_sampler_bindings,
    Uint32 num_bindings);
extern  void __cdecl SDL_BindGPUComputeStorageTextures(
    SDL_GPUComputePass *compute_pass,
    Uint32 first_slot,
    SDL_GPUTexture *const *storage_textures,
    Uint32 num_bindings);
extern  void __cdecl SDL_BindGPUComputeStorageBuffers(
    SDL_GPUComputePass *compute_pass,
    Uint32 first_slot,
    SDL_GPUBuffer *const *storage_buffers,
    Uint32 num_bindings);
extern  void __cdecl SDL_DispatchGPUCompute(
    SDL_GPUComputePass *compute_pass,
    Uint32 groupcount_x,
    Uint32 groupcount_y,
    Uint32 groupcount_z);
extern  void __cdecl SDL_DispatchGPUComputeIndirect(
    SDL_GPUComputePass *compute_pass,
    SDL_GPUBuffer *buffer,
    Uint32 offset);
extern  void __cdecl SDL_EndGPUComputePass(
    SDL_GPUComputePass *compute_pass);
extern  void *__cdecl SDL_MapGPUTransferBuffer(
    SDL_GPUDevice *device,
    SDL_GPUTransferBuffer *transfer_buffer,
    bool cycle);
extern  void __cdecl SDL_UnmapGPUTransferBuffer(
    SDL_GPUDevice *device,
    SDL_GPUTransferBuffer *transfer_buffer);
extern  SDL_GPUCopyPass *__cdecl SDL_BeginGPUCopyPass(
    SDL_GPUCommandBuffer *command_buffer);
extern  void __cdecl SDL_UploadToGPUTexture(
    SDL_GPUCopyPass *copy_pass,
    const SDL_GPUTextureTransferInfo *source,
    const SDL_GPUTextureRegion *destination,
    bool cycle);
extern  void __cdecl SDL_UploadToGPUBuffer(
    SDL_GPUCopyPass *copy_pass,
    const SDL_GPUTransferBufferLocation *source,
    const SDL_GPUBufferRegion *destination,
    bool cycle);
extern  void __cdecl SDL_CopyGPUTextureToTexture(
    SDL_GPUCopyPass *copy_pass,
    const SDL_GPUTextureLocation *source,
    const SDL_GPUTextureLocation *destination,
    Uint32 w,
    Uint32 h,
    Uint32 d,
    bool cycle);
extern  void __cdecl SDL_CopyGPUBufferToBuffer(
    SDL_GPUCopyPass *copy_pass,
    const SDL_GPUBufferLocation *source,
    const SDL_GPUBufferLocation *destination,
    Uint32 size,
    bool cycle);
extern  void __cdecl SDL_DownloadFromGPUTexture(
    SDL_GPUCopyPass *copy_pass,
    const SDL_GPUTextureRegion *source,
    const SDL_GPUTextureTransferInfo *destination);
extern  void __cdecl SDL_DownloadFromGPUBuffer(
    SDL_GPUCopyPass *copy_pass,
    const SDL_GPUBufferRegion *source,
    const SDL_GPUTransferBufferLocation *destination);
extern  void __cdecl SDL_EndGPUCopyPass(
    SDL_GPUCopyPass *copy_pass);
extern  void __cdecl SDL_GenerateMipmapsForGPUTexture(
    SDL_GPUCommandBuffer *command_buffer,
    SDL_GPUTexture *texture);
extern  void __cdecl SDL_BlitGPUTexture(
    SDL_GPUCommandBuffer *command_buffer,
    const SDL_GPUBlitInfo *info);
extern  bool __cdecl SDL_WindowSupportsGPUSwapchainComposition(
    SDL_GPUDevice *device,
    SDL_Window *window,
    SDL_GPUSwapchainComposition swapchain_composition);
extern  bool __cdecl SDL_WindowSupportsGPUPresentMode(
    SDL_GPUDevice *device,
    SDL_Window *window,
    SDL_GPUPresentMode present_mode);
extern  bool __cdecl SDL_ClaimWindowForGPUDevice(
    SDL_GPUDevice *device,
    SDL_Window *window);
extern  void __cdecl SDL_ReleaseWindowFromGPUDevice(
    SDL_GPUDevice *device,
    SDL_Window *window);
extern  bool __cdecl SDL_SetGPUSwapchainParameters(
    SDL_GPUDevice *device,
    SDL_Window *window,
    SDL_GPUSwapchainComposition swapchain_composition,
    SDL_GPUPresentMode present_mode);
extern  SDL_GPUTextureFormat __cdecl SDL_GetGPUSwapchainTextureFormat(
    SDL_GPUDevice *device,
    SDL_Window *window);
extern  bool __cdecl SDL_AcquireGPUSwapchainTexture(
    SDL_GPUCommandBuffer *command_buffer,
    SDL_Window *window,
    SDL_GPUTexture **swapchain_texture,
    Uint32 *swapchain_texture_width,
    Uint32 *swapchain_texture_height);
extern  bool __cdecl SDL_SubmitGPUCommandBuffer(
    SDL_GPUCommandBuffer *command_buffer);
extern  SDL_GPUFence *__cdecl SDL_SubmitGPUCommandBufferAndAcquireFence(
    SDL_GPUCommandBuffer *command_buffer);
extern  bool __cdecl SDL_CancelGPUCommandBuffer(
    SDL_GPUCommandBuffer *command_buffer);
extern  bool __cdecl SDL_WaitForGPUIdle(
    SDL_GPUDevice *device);
extern  bool __cdecl SDL_WaitForGPUFences(
    SDL_GPUDevice *device,
    bool wait_all,
    SDL_GPUFence *const *fences,
    Uint32 num_fences);
extern  bool __cdecl SDL_QueryGPUFence(
    SDL_GPUDevice *device,
    SDL_GPUFence *fence);
extern  void __cdecl SDL_ReleaseGPUFence(
    SDL_GPUDevice *device,
    SDL_GPUFence *fence);
extern  Uint32 __cdecl SDL_GPUTextureFormatTexelBlockSize(
    SDL_GPUTextureFormat format);
extern  bool __cdecl SDL_GPUTextureSupportsFormat(
    SDL_GPUDevice *device,
    SDL_GPUTextureFormat format,
    SDL_GPUTextureType type,
    SDL_GPUTextureUsageFlags usage);
extern  bool __cdecl SDL_GPUTextureSupportsSampleCount(
    SDL_GPUDevice *device,
    SDL_GPUTextureFormat format,
    SDL_GPUSampleCount sample_count);
extern  Uint32 __cdecl SDL_CalculateGPUTextureFormatSize(
    SDL_GPUTextureFormat format,
    Uint32 width,
    Uint32 height,
    Uint32 depth_or_layer_count);
#pragma pack(pop)
#pragma pack(push,8)
typedef struct SDL_Haptic SDL_Haptic;
typedef struct SDL_HapticDirection
{
    Uint8 type;         
    Sint32 dir[3];      
} SDL_HapticDirection;
typedef struct SDL_HapticConstant
{
    Uint16 type;            
    SDL_HapticDirection direction;  
    Uint32 length;          
    Uint16 delay;           
    Uint16 button;          
    Uint16 interval;        
    Sint16 level;           
    Uint16 attack_length;   
    Uint16 attack_level;    
    Uint16 fade_length;     
    Uint16 fade_level;      
} SDL_HapticConstant;
typedef struct SDL_HapticPeriodic
{
    Uint16 type;        
    SDL_HapticDirection direction;  
    Uint32 length;      
    Uint16 delay;       
    Uint16 button;      
    Uint16 interval;    
    Uint16 period;      
    Sint16 magnitude;   
    Sint16 offset;      
    Uint16 phase;       
    Uint16 attack_length;   
    Uint16 attack_level;    
    Uint16 fade_length; 
    Uint16 fade_level;  
} SDL_HapticPeriodic;
typedef struct SDL_HapticCondition
{
    Uint16 type;            
    SDL_HapticDirection direction;  
    Uint32 length;          
    Uint16 delay;           
    Uint16 button;          
    Uint16 interval;        
    Uint16 right_sat[3];    
    Uint16 left_sat[3];     
    Sint16 right_coeff[3];  
    Sint16 left_coeff[3];   
    Uint16 deadband[3];     
    Sint16 center[3];       
} SDL_HapticCondition;
typedef struct SDL_HapticRamp
{
    Uint16 type;            
    SDL_HapticDirection direction;  
    Uint32 length;          
    Uint16 delay;           
    Uint16 button;          
    Uint16 interval;        
    Sint16 start;           
    Sint16 end;             
    Uint16 attack_length;   
    Uint16 attack_level;    
    Uint16 fade_length;     
    Uint16 fade_level;      
} SDL_HapticRamp;
typedef struct SDL_HapticLeftRight
{
    Uint16 type;            
    Uint32 length;          
    Uint16 large_magnitude; 
    Uint16 small_magnitude; 
} SDL_HapticLeftRight;
typedef struct SDL_HapticCustom
{
    Uint16 type;            
    SDL_HapticDirection direction;  
    Uint32 length;          
    Uint16 delay;           
    Uint16 button;          
    Uint16 interval;        
    Uint8 channels;         
    Uint16 period;          
    Uint16 samples;         
    Uint16 *data;           
    Uint16 attack_length;   
    Uint16 attack_level;    
    Uint16 fade_length;     
    Uint16 fade_level;      
} SDL_HapticCustom;
typedef union SDL_HapticEffect
{
    Uint16 type;                    
    SDL_HapticConstant constant;    
    SDL_HapticPeriodic periodic;    
    SDL_HapticCondition condition;  
    SDL_HapticRamp ramp;            
    SDL_HapticLeftRight leftright;  
    SDL_HapticCustom custom;        
} SDL_HapticEffect;
typedef Uint32 SDL_HapticID;
extern  SDL_HapticID * __cdecl SDL_GetHaptics(int *count);
extern  const char * __cdecl SDL_GetHapticNameForID(SDL_HapticID instance_id);
extern  SDL_Haptic * __cdecl SDL_OpenHaptic(SDL_HapticID instance_id);
extern  SDL_Haptic * __cdecl SDL_GetHapticFromID(SDL_HapticID instance_id);
extern  SDL_HapticID __cdecl SDL_GetHapticID(SDL_Haptic *haptic);
extern  const char * __cdecl SDL_GetHapticName(SDL_Haptic *haptic);
extern  bool __cdecl SDL_IsMouseHaptic(void);
extern  SDL_Haptic * __cdecl SDL_OpenHapticFromMouse(void);
extern  bool __cdecl SDL_IsJoystickHaptic(SDL_Joystick *joystick);
extern  SDL_Haptic * __cdecl SDL_OpenHapticFromJoystick(SDL_Joystick *joystick);
extern  void __cdecl SDL_CloseHaptic(SDL_Haptic *haptic);
extern  int __cdecl SDL_GetMaxHapticEffects(SDL_Haptic *haptic);
extern  int __cdecl SDL_GetMaxHapticEffectsPlaying(SDL_Haptic *haptic);
extern  Uint32 __cdecl SDL_GetHapticFeatures(SDL_Haptic *haptic);
extern  int __cdecl SDL_GetNumHapticAxes(SDL_Haptic *haptic);
extern  bool __cdecl SDL_HapticEffectSupported(SDL_Haptic *haptic, const SDL_HapticEffect *effect);
extern  int __cdecl SDL_CreateHapticEffect(SDL_Haptic *haptic, const SDL_HapticEffect *effect);
extern  bool __cdecl SDL_UpdateHapticEffect(SDL_Haptic *haptic, int effect, const SDL_HapticEffect *data);
extern  bool __cdecl SDL_RunHapticEffect(SDL_Haptic *haptic, int effect, Uint32 iterations);
extern  bool __cdecl SDL_StopHapticEffect(SDL_Haptic *haptic, int effect);
extern  void __cdecl SDL_DestroyHapticEffect(SDL_Haptic *haptic, int effect);
extern  bool __cdecl SDL_GetHapticEffectStatus(SDL_Haptic *haptic, int effect);
extern  bool __cdecl SDL_SetHapticGain(SDL_Haptic *haptic, int gain);
extern  bool __cdecl SDL_SetHapticAutocenter(SDL_Haptic *haptic, int autocenter);
extern  bool __cdecl SDL_PauseHaptic(SDL_Haptic *haptic);
extern  bool __cdecl SDL_ResumeHaptic(SDL_Haptic *haptic);
extern  bool __cdecl SDL_StopHapticEffects(SDL_Haptic *haptic);
extern  bool __cdecl SDL_HapticRumbleSupported(SDL_Haptic *haptic);
extern  bool __cdecl SDL_InitHapticRumble(SDL_Haptic *haptic);
extern  bool __cdecl SDL_PlayHapticRumble(SDL_Haptic *haptic, float strength, Uint32 length);
extern  bool __cdecl SDL_StopHapticRumble(SDL_Haptic *haptic);
#pragma pack(pop)
#pragma pack(push,8)
typedef struct SDL_hid_device SDL_hid_device;
typedef enum SDL_hid_bus_type {
    SDL_HID_API_BUS_UNKNOWN = 0x00,
    SDL_HID_API_BUS_USB = 0x01,
    SDL_HID_API_BUS_BLUETOOTH = 0x02,
    SDL_HID_API_BUS_I2C = 0x03,
    SDL_HID_API_BUS_SPI = 0x04
} SDL_hid_bus_type;
typedef struct SDL_hid_device_info
{
    char *path;
    unsigned short vendor_id;
    unsigned short product_id;
    wchar_t *serial_number;
    unsigned short release_number;
    wchar_t *manufacturer_string;
    wchar_t *product_string;
    unsigned short usage_page;
    unsigned short usage;
    int interface_number;
    int interface_class;
    int interface_subclass;
    int interface_protocol;
    SDL_hid_bus_type bus_type;
    struct SDL_hid_device_info *next;
} SDL_hid_device_info;
extern  int __cdecl SDL_hid_init(void);
extern  int __cdecl SDL_hid_exit(void);
extern  Uint32 __cdecl SDL_hid_device_change_count(void);
extern  SDL_hid_device_info * __cdecl SDL_hid_enumerate(unsigned short vendor_id, unsigned short product_id);
extern  void __cdecl SDL_hid_free_enumeration(SDL_hid_device_info *devs);
extern  SDL_hid_device * __cdecl SDL_hid_open(unsigned short vendor_id, unsigned short product_id, const wchar_t *serial_number);
extern  SDL_hid_device * __cdecl SDL_hid_open_path(const char *path);
extern  int __cdecl SDL_hid_write(SDL_hid_device *dev, const unsigned char *data, size_t length);
extern  int __cdecl SDL_hid_read_timeout(SDL_hid_device *dev, unsigned char *data, size_t length, int milliseconds);
extern  int __cdecl SDL_hid_read(SDL_hid_device *dev, unsigned char *data, size_t length);
extern  int __cdecl SDL_hid_set_nonblocking(SDL_hid_device *dev, int nonblock);
extern  int __cdecl SDL_hid_send_feature_report(SDL_hid_device *dev, const unsigned char *data, size_t length);
extern  int __cdecl SDL_hid_get_feature_report(SDL_hid_device *dev, unsigned char *data, size_t length);
extern  int __cdecl SDL_hid_get_input_report(SDL_hid_device *dev, unsigned char *data, size_t length);
extern  int __cdecl SDL_hid_close(SDL_hid_device *dev);
extern  int __cdecl SDL_hid_get_manufacturer_string(SDL_hid_device *dev, wchar_t *string, size_t maxlen);
extern  int __cdecl SDL_hid_get_product_string(SDL_hid_device *dev, wchar_t *string, size_t maxlen);
extern  int __cdecl SDL_hid_get_serial_number_string(SDL_hid_device *dev, wchar_t *string, size_t maxlen);
extern  int __cdecl SDL_hid_get_indexed_string(SDL_hid_device *dev, int string_index, wchar_t *string, size_t maxlen);
extern  SDL_hid_device_info * __cdecl SDL_hid_get_device_info(SDL_hid_device *dev);
extern  int __cdecl SDL_hid_get_report_descriptor(SDL_hid_device *dev, unsigned char *buf, size_t buf_size);
extern  void __cdecl SDL_hid_ble_scan(bool active);
#pragma pack(pop)
#pragma pack(push,8)
typedef enum SDL_HintPriority
{
    SDL_HINT_DEFAULT,
    SDL_HINT_NORMAL,
    SDL_HINT_OVERRIDE
} SDL_HintPriority;
extern  bool __cdecl SDL_SetHintWithPriority(const char *name, const char *value, SDL_HintPriority priority);
extern  bool __cdecl SDL_SetHint(const char *name, const char *value);
extern  bool __cdecl SDL_ResetHint(const char *name);
extern  void __cdecl SDL_ResetHints(void);
extern  const char *__cdecl SDL_GetHint(const char *name);
extern  bool __cdecl SDL_GetHintBoolean(const char *name, bool default_value);
typedef void(__cdecl *SDL_HintCallback)(void *userdata, const char *name, const char *oldValue, const char *newValue);
extern  bool __cdecl SDL_AddHintCallback(const char *name, SDL_HintCallback callback, void *userdata);
extern  void __cdecl SDL_RemoveHintCallback(const char *name,
                                                     SDL_HintCallback callback,
                                                     void *userdata);
#pragma pack(pop)
#pragma pack(push,8)
typedef Uint32 SDL_InitFlags;
typedef enum SDL_AppResult
{
    SDL_APP_CONTINUE,   
    SDL_APP_SUCCESS,    
    SDL_APP_FAILURE     
} SDL_AppResult;
typedef SDL_AppResult (__cdecl *SDL_AppInit_func)(void **appstate, int argc, char *argv[]);
typedef SDL_AppResult (__cdecl *SDL_AppIterate_func)(void *appstate);
typedef SDL_AppResult (__cdecl *SDL_AppEvent_func)(void *appstate, SDL_Event *event);
typedef void (__cdecl *SDL_AppQuit_func)(void *appstate, SDL_AppResult result);
extern  bool __cdecl SDL_Init(SDL_InitFlags flags);
extern  bool __cdecl SDL_InitSubSystem(SDL_InitFlags flags);
extern  void __cdecl SDL_QuitSubSystem(SDL_InitFlags flags);
extern  SDL_InitFlags __cdecl SDL_WasInit(SDL_InitFlags flags);
extern  void __cdecl SDL_Quit(void);
extern  bool __cdecl SDL_SetAppMetadata(const char *appname, const char *appversion, const char *appidentifier);
extern  bool __cdecl SDL_SetAppMetadataProperty(const char *name, const char *value);
extern  const char * __cdecl SDL_GetAppMetadataProperty(const char *name);
#pragma pack(pop)
#pragma pack(push,8)
typedef struct SDL_SharedObject SDL_SharedObject;
extern  SDL_SharedObject * __cdecl SDL_LoadObject(const char *sofile);
extern  SDL_FunctionPointer __cdecl SDL_LoadFunction(SDL_SharedObject *handle, const char *name);
extern  void __cdecl SDL_UnloadObject(SDL_SharedObject *handle);
#pragma pack(pop)
#pragma pack(push,8)
typedef struct SDL_Locale
{
    const char *language;  
    const char *country;  
} SDL_Locale;
extern  SDL_Locale ** __cdecl SDL_GetPreferredLocales(int *count);
#pragma pack(pop)
#pragma pack(push,8)
typedef enum SDL_LogCategory
{
    SDL_LOG_CATEGORY_APPLICATION,
    SDL_LOG_CATEGORY_ERROR,
    SDL_LOG_CATEGORY_ASSERT,
    SDL_LOG_CATEGORY_SYSTEM,
    SDL_LOG_CATEGORY_AUDIO,
    SDL_LOG_CATEGORY_VIDEO,
    SDL_LOG_CATEGORY_RENDER,
    SDL_LOG_CATEGORY_INPUT,
    SDL_LOG_CATEGORY_TEST,
    SDL_LOG_CATEGORY_GPU,
    SDL_LOG_CATEGORY_RESERVED2,
    SDL_LOG_CATEGORY_RESERVED3,
    SDL_LOG_CATEGORY_RESERVED4,
    SDL_LOG_CATEGORY_RESERVED5,
    SDL_LOG_CATEGORY_RESERVED6,
    SDL_LOG_CATEGORY_RESERVED7,
    SDL_LOG_CATEGORY_RESERVED8,
    SDL_LOG_CATEGORY_RESERVED9,
    SDL_LOG_CATEGORY_RESERVED10,
    SDL_LOG_CATEGORY_CUSTOM
} SDL_LogCategory;
typedef enum SDL_LogPriority
{
    SDL_LOG_PRIORITY_INVALID,
    SDL_LOG_PRIORITY_TRACE,
    SDL_LOG_PRIORITY_VERBOSE,
    SDL_LOG_PRIORITY_DEBUG,
    SDL_LOG_PRIORITY_INFO,
    SDL_LOG_PRIORITY_WARN,
    SDL_LOG_PRIORITY_ERROR,
    SDL_LOG_PRIORITY_CRITICAL,
    SDL_LOG_PRIORITY_COUNT
} SDL_LogPriority;
extern  void __cdecl SDL_SetLogPriorities(SDL_LogPriority priority);
extern  void __cdecl SDL_SetLogPriority(int category, SDL_LogPriority priority);
extern  SDL_LogPriority __cdecl SDL_GetLogPriority(int category);
extern  void __cdecl SDL_ResetLogPriorities(void);
extern  bool __cdecl SDL_SetLogPriorityPrefix(SDL_LogPriority priority, const char *prefix);
extern  void __cdecl SDL_Log(  const char *fmt, ...) ;
extern  void __cdecl SDL_LogTrace(int category,   const char *fmt, ...) ;
extern  void __cdecl SDL_LogVerbose(int category,   const char *fmt, ...) ;
extern  void __cdecl SDL_LogDebug(int category,   const char *fmt, ...) ;
extern  void __cdecl SDL_LogInfo(int category,   const char *fmt, ...) ;
extern  void __cdecl SDL_LogWarn(int category,   const char *fmt, ...) ;
extern  void __cdecl SDL_LogError(int category,   const char *fmt, ...) ;
extern  void __cdecl SDL_LogCritical(int category,   const char *fmt, ...) ;
extern  void __cdecl SDL_LogMessage(int category,
                                            SDL_LogPriority priority,
                                              const char *fmt, ...) ;
extern  void __cdecl SDL_LogMessageV(int category,
                                             SDL_LogPriority priority,
                                               const char *fmt, va_list ap) ;
typedef void (__cdecl *SDL_LogOutputFunction)(void *userdata, int category, SDL_LogPriority priority, const char *message);
extern  SDL_LogOutputFunction __cdecl SDL_GetDefaultLogOutputFunction(void);
extern  void __cdecl SDL_GetLogOutputFunction(SDL_LogOutputFunction *callback, void **userdata);
extern  void __cdecl SDL_SetLogOutputFunction(SDL_LogOutputFunction callback, void *userdata);
#pragma pack(pop)
#pragma pack(push,8)
typedef Uint32 SDL_MessageBoxFlags;
typedef Uint32 SDL_MessageBoxButtonFlags;
typedef struct SDL_MessageBoxButtonData
{
    SDL_MessageBoxButtonFlags flags;
    int buttonID;       
    const char *text;   
} SDL_MessageBoxButtonData;
typedef struct SDL_MessageBoxColor
{
    Uint8 r, g, b;
} SDL_MessageBoxColor;
typedef enum SDL_MessageBoxColorType
{
    SDL_MESSAGEBOX_COLOR_BACKGROUND,
    SDL_MESSAGEBOX_COLOR_TEXT,
    SDL_MESSAGEBOX_COLOR_BUTTON_BORDER,
    SDL_MESSAGEBOX_COLOR_BUTTON_BACKGROUND,
    SDL_MESSAGEBOX_COLOR_BUTTON_SELECTED,
    SDL_MESSAGEBOX_COLOR_COUNT                    
} SDL_MessageBoxColorType;
typedef struct SDL_MessageBoxColorScheme
{
    SDL_MessageBoxColor colors[SDL_MESSAGEBOX_COLOR_COUNT];
} SDL_MessageBoxColorScheme;
typedef struct SDL_MessageBoxData
{
    SDL_MessageBoxFlags flags;
    SDL_Window *window;                 
    const char *title;                  
    const char *message;                
    int numbuttons;
    const SDL_MessageBoxButtonData *buttons;
    const SDL_MessageBoxColorScheme *colorScheme;   
} SDL_MessageBoxData;
extern  bool __cdecl SDL_ShowMessageBox(const SDL_MessageBoxData *messageboxdata, int *buttonid);
extern  bool __cdecl SDL_ShowSimpleMessageBox(SDL_MessageBoxFlags flags, const char *title, const char *message, SDL_Window *window);
#pragma pack(pop)
#pragma pack(push,8)
typedef void *SDL_MetalView;
extern  SDL_MetalView __cdecl SDL_Metal_CreateView(SDL_Window *window);
extern  void __cdecl SDL_Metal_DestroyView(SDL_MetalView view);
extern  void * __cdecl SDL_Metal_GetLayer(SDL_MetalView view);
#pragma pack(pop)
#pragma pack(push,8)
extern  bool __cdecl SDL_OpenURL(const char *url);
#pragma pack(pop)
#pragma pack(push,8)
extern  const char * __cdecl SDL_GetPlatform(void);
#pragma pack(pop)
#pragma pack(push,8)
typedef struct SDL_Process SDL_Process;
extern  SDL_Process *__cdecl SDL_CreateProcess(const char * const *args, bool pipe_stdio);
typedef enum SDL_ProcessIO
{
    SDL_PROCESS_STDIO_INHERITED,    
    SDL_PROCESS_STDIO_NULL,         
    SDL_PROCESS_STDIO_APP,          
    SDL_PROCESS_STDIO_REDIRECT      
} SDL_ProcessIO;
extern  SDL_Process *__cdecl SDL_CreateProcessWithProperties(SDL_PropertiesID props);
extern  SDL_PropertiesID __cdecl SDL_GetProcessProperties(SDL_Process *process);
extern  void * __cdecl SDL_ReadProcess(SDL_Process *process, size_t *datasize, int *exitcode);
extern  SDL_IOStream *__cdecl SDL_GetProcessInput(SDL_Process *process);
extern  SDL_IOStream *__cdecl SDL_GetProcessOutput(SDL_Process *process);
extern  bool __cdecl SDL_KillProcess(SDL_Process *process, bool force);
extern  bool __cdecl SDL_WaitProcess(SDL_Process *process, bool block, int *exitcode);
extern  void __cdecl SDL_DestroyProcess(SDL_Process *process);
#pragma pack(pop)
#pragma pack(push,8)
typedef struct SDL_Vertex
{
    SDL_FPoint position;        
    SDL_FColor color;           
    SDL_FPoint tex_coord;       
} SDL_Vertex;
typedef enum SDL_TextureAccess
{
    SDL_TEXTUREACCESS_STATIC,    
    SDL_TEXTUREACCESS_STREAMING, 
    SDL_TEXTUREACCESS_TARGET     
} SDL_TextureAccess;
typedef enum SDL_RendererLogicalPresentation
{
    SDL_LOGICAL_PRESENTATION_DISABLED,  
    SDL_LOGICAL_PRESENTATION_STRETCH,   
    SDL_LOGICAL_PRESENTATION_LETTERBOX, 
    SDL_LOGICAL_PRESENTATION_OVERSCAN,  
    SDL_LOGICAL_PRESENTATION_INTEGER_SCALE   
} SDL_RendererLogicalPresentation;
typedef struct SDL_Renderer SDL_Renderer;
struct SDL_Texture
{
    SDL_PixelFormat format;     
    int w;                      
    int h;                      
    int refcount;               
};
typedef struct SDL_Texture SDL_Texture;
extern  int __cdecl SDL_GetNumRenderDrivers(void);
extern  const char * __cdecl SDL_GetRenderDriver(int index);
extern  bool __cdecl SDL_CreateWindowAndRenderer(const char *title, int width, int height, SDL_WindowFlags window_flags, SDL_Window **window, SDL_Renderer **renderer);
extern  SDL_Renderer * __cdecl SDL_CreateRenderer(SDL_Window *window, const char *name);
extern  SDL_Renderer * __cdecl SDL_CreateRendererWithProperties(SDL_PropertiesID props);
extern  SDL_Renderer * __cdecl SDL_CreateSoftwareRenderer(SDL_Surface *surface);
extern  SDL_Renderer * __cdecl SDL_GetRenderer(SDL_Window *window);
extern  SDL_Window * __cdecl SDL_GetRenderWindow(SDL_Renderer *renderer);
extern  const char * __cdecl SDL_GetRendererName(SDL_Renderer *renderer);
extern  SDL_PropertiesID __cdecl SDL_GetRendererProperties(SDL_Renderer *renderer);
extern  bool __cdecl SDL_GetRenderOutputSize(SDL_Renderer *renderer, int *w, int *h);
extern  bool __cdecl SDL_GetCurrentRenderOutputSize(SDL_Renderer *renderer, int *w, int *h);
extern  SDL_Texture * __cdecl SDL_CreateTexture(SDL_Renderer *renderer, SDL_PixelFormat format, SDL_TextureAccess access, int w, int h);
extern  SDL_Texture * __cdecl SDL_CreateTextureFromSurface(SDL_Renderer *renderer, SDL_Surface *surface);
extern  SDL_Texture * __cdecl SDL_CreateTextureWithProperties(SDL_Renderer *renderer, SDL_PropertiesID props);
extern  SDL_PropertiesID __cdecl SDL_GetTextureProperties(SDL_Texture *texture);
extern  SDL_Renderer * __cdecl SDL_GetRendererFromTexture(SDL_Texture *texture);
extern  bool __cdecl SDL_GetTextureSize(SDL_Texture *texture, float *w, float *h);
extern  bool __cdecl SDL_SetTextureColorMod(SDL_Texture *texture, Uint8 r, Uint8 g, Uint8 b);
extern  bool __cdecl SDL_SetTextureColorModFloat(SDL_Texture *texture, float r, float g, float b);
extern  bool __cdecl SDL_GetTextureColorMod(SDL_Texture *texture, Uint8 *r, Uint8 *g, Uint8 *b);
extern  bool __cdecl SDL_GetTextureColorModFloat(SDL_Texture *texture, float *r, float *g, float *b);
extern  bool __cdecl SDL_SetTextureAlphaMod(SDL_Texture *texture, Uint8 alpha);
extern  bool __cdecl SDL_SetTextureAlphaModFloat(SDL_Texture *texture, float alpha);
extern  bool __cdecl SDL_GetTextureAlphaMod(SDL_Texture *texture, Uint8 *alpha);
extern  bool __cdecl SDL_GetTextureAlphaModFloat(SDL_Texture *texture, float *alpha);
extern  bool __cdecl SDL_SetTextureBlendMode(SDL_Texture *texture, SDL_BlendMode blendMode);
extern  bool __cdecl SDL_GetTextureBlendMode(SDL_Texture *texture, SDL_BlendMode *blendMode);
extern  bool __cdecl SDL_SetTextureScaleMode(SDL_Texture *texture, SDL_ScaleMode scaleMode);
extern  bool __cdecl SDL_GetTextureScaleMode(SDL_Texture *texture, SDL_ScaleMode *scaleMode);
extern  bool __cdecl SDL_UpdateTexture(SDL_Texture *texture, const SDL_Rect *rect, const void *pixels, int pitch);
extern  bool __cdecl SDL_UpdateYUVTexture(SDL_Texture *texture,
                                                 const SDL_Rect *rect,
                                                 const Uint8 *Yplane, int Ypitch,
                                                 const Uint8 *Uplane, int Upitch,
                                                 const Uint8 *Vplane, int Vpitch);
extern  bool __cdecl SDL_UpdateNVTexture(SDL_Texture *texture,
                                                 const SDL_Rect *rect,
                                                 const Uint8 *Yplane, int Ypitch,
                                                 const Uint8 *UVplane, int UVpitch);
extern  bool __cdecl SDL_LockTexture(SDL_Texture *texture,
                                            const SDL_Rect *rect,
                                            void **pixels, int *pitch);
extern  bool __cdecl SDL_LockTextureToSurface(SDL_Texture *texture, const SDL_Rect *rect, SDL_Surface **surface);
extern  void __cdecl SDL_UnlockTexture(SDL_Texture *texture);
extern  bool __cdecl SDL_SetRenderTarget(SDL_Renderer *renderer, SDL_Texture *texture);
extern  SDL_Texture * __cdecl SDL_GetRenderTarget(SDL_Renderer *renderer);
extern  bool __cdecl SDL_SetRenderLogicalPresentation(SDL_Renderer *renderer, int w, int h, SDL_RendererLogicalPresentation mode);
extern  bool __cdecl SDL_GetRenderLogicalPresentation(SDL_Renderer *renderer, int *w, int *h, SDL_RendererLogicalPresentation *mode);
extern  bool __cdecl SDL_GetRenderLogicalPresentationRect(SDL_Renderer *renderer, SDL_FRect *rect);
extern  bool __cdecl SDL_RenderCoordinatesFromWindow(SDL_Renderer *renderer, float window_x, float window_y, float *x, float *y);
extern  bool __cdecl SDL_RenderCoordinatesToWindow(SDL_Renderer *renderer, float x, float y, float *window_x, float *window_y);
extern  bool __cdecl SDL_ConvertEventToRenderCoordinates(SDL_Renderer *renderer, SDL_Event *event);
extern  bool __cdecl SDL_SetRenderViewport(SDL_Renderer *renderer, const SDL_Rect *rect);
extern  bool __cdecl SDL_GetRenderViewport(SDL_Renderer *renderer, SDL_Rect *rect);
extern  bool __cdecl SDL_RenderViewportSet(SDL_Renderer *renderer);
extern  bool __cdecl SDL_GetRenderSafeArea(SDL_Renderer *renderer, SDL_Rect *rect);
extern  bool __cdecl SDL_SetRenderClipRect(SDL_Renderer *renderer, const SDL_Rect *rect);
extern  bool __cdecl SDL_GetRenderClipRect(SDL_Renderer *renderer, SDL_Rect *rect);
extern  bool __cdecl SDL_RenderClipEnabled(SDL_Renderer *renderer);
extern  bool __cdecl SDL_SetRenderScale(SDL_Renderer *renderer, float scaleX, float scaleY);
extern  bool __cdecl SDL_GetRenderScale(SDL_Renderer *renderer, float *scaleX, float *scaleY);
extern  bool __cdecl SDL_SetRenderDrawColor(SDL_Renderer *renderer, Uint8 r, Uint8 g, Uint8 b, Uint8 a);
extern  bool __cdecl SDL_SetRenderDrawColorFloat(SDL_Renderer *renderer, float r, float g, float b, float a);
extern  bool __cdecl SDL_GetRenderDrawColor(SDL_Renderer *renderer, Uint8 *r, Uint8 *g, Uint8 *b, Uint8 *a);
extern  bool __cdecl SDL_GetRenderDrawColorFloat(SDL_Renderer *renderer, float *r, float *g, float *b, float *a);
extern  bool __cdecl SDL_SetRenderColorScale(SDL_Renderer *renderer, float scale);
extern  bool __cdecl SDL_GetRenderColorScale(SDL_Renderer *renderer, float *scale);
extern  bool __cdecl SDL_SetRenderDrawBlendMode(SDL_Renderer *renderer, SDL_BlendMode blendMode);
extern  bool __cdecl SDL_GetRenderDrawBlendMode(SDL_Renderer *renderer, SDL_BlendMode *blendMode);
extern  bool __cdecl SDL_RenderClear(SDL_Renderer *renderer);
extern  bool __cdecl SDL_RenderPoint(SDL_Renderer *renderer, float x, float y);
extern  bool __cdecl SDL_RenderPoints(SDL_Renderer *renderer, const SDL_FPoint *points, int count);
extern  bool __cdecl SDL_RenderLine(SDL_Renderer *renderer, float x1, float y1, float x2, float y2);
extern  bool __cdecl SDL_RenderLines(SDL_Renderer *renderer, const SDL_FPoint *points, int count);
extern  bool __cdecl SDL_RenderRect(SDL_Renderer *renderer, const SDL_FRect *rect);
extern  bool __cdecl SDL_RenderRects(SDL_Renderer *renderer, const SDL_FRect *rects, int count);
extern  bool __cdecl SDL_RenderFillRect(SDL_Renderer *renderer, const SDL_FRect *rect);
extern  bool __cdecl SDL_RenderFillRects(SDL_Renderer *renderer, const SDL_FRect *rects, int count);
extern  bool __cdecl SDL_RenderTexture(SDL_Renderer *renderer, SDL_Texture *texture, const SDL_FRect *srcrect, const SDL_FRect *dstrect);
extern  bool __cdecl SDL_RenderTextureRotated(SDL_Renderer *renderer, SDL_Texture *texture,
                                                     const SDL_FRect *srcrect, const SDL_FRect *dstrect,
                                                     double angle, const SDL_FPoint *center,
                                                     SDL_FlipMode flip);
extern  bool __cdecl SDL_RenderTextureTiled(SDL_Renderer *renderer, SDL_Texture *texture, const SDL_FRect *srcrect, float scale, const SDL_FRect *dstrect);
extern  bool __cdecl SDL_RenderTexture9Grid(SDL_Renderer *renderer, SDL_Texture *texture, const SDL_FRect *srcrect, float left_width, float right_width, float top_height, float bottom_height, float scale, const SDL_FRect *dstrect);
extern  bool __cdecl SDL_RenderGeometry(SDL_Renderer *renderer,
                                               SDL_Texture *texture,
                                               const SDL_Vertex *vertices, int num_vertices,
                                               const int *indices, int num_indices);
extern  bool __cdecl SDL_RenderGeometryRaw(SDL_Renderer *renderer,
                                               SDL_Texture *texture,
                                               const float *xy, int xy_stride,
                                               const SDL_FColor *color, int color_stride,
                                               const float *uv, int uv_stride,
                                               int num_vertices,
                                               const void *indices, int num_indices, int size_indices);
extern  SDL_Surface * __cdecl SDL_RenderReadPixels(SDL_Renderer *renderer, const SDL_Rect *rect);
extern  bool __cdecl SDL_RenderPresent(SDL_Renderer *renderer);
extern  void __cdecl SDL_DestroyTexture(SDL_Texture *texture);
extern  void __cdecl SDL_DestroyRenderer(SDL_Renderer *renderer);
extern  bool __cdecl SDL_FlushRenderer(SDL_Renderer *renderer);
extern  void * __cdecl SDL_GetRenderMetalLayer(SDL_Renderer *renderer);
extern  void * __cdecl SDL_GetRenderMetalCommandEncoder(SDL_Renderer *renderer);
extern  bool __cdecl SDL_AddVulkanRenderSemaphores(SDL_Renderer *renderer, Uint32 wait_stage_mask, Sint64 wait_semaphore, Sint64 signal_semaphore);
extern  bool __cdecl SDL_SetRenderVSync(SDL_Renderer *renderer, int vsync);
extern  bool __cdecl SDL_GetRenderVSync(SDL_Renderer *renderer, int *vsync);
extern  bool __cdecl SDL_RenderDebugText(SDL_Renderer *renderer, float x, float y, const char *str);
#pragma pack(pop)
#pragma pack(push,8)
typedef struct SDL_StorageInterface
{
    Uint32 version;
    bool (__cdecl *close)(void *userdata);
    bool (__cdecl *ready)(void *userdata);
    bool (__cdecl *enumerate)(void *userdata, const char *path, SDL_EnumerateDirectoryCallback callback, void *callback_userdata);
    bool (__cdecl *info)(void *userdata, const char *path, SDL_PathInfo *info);
    bool (__cdecl *read_file)(void *userdata, const char *path, void *destination, Uint64 length);
    bool (__cdecl *write_file)(void *userdata, const char *path, const void *source, Uint64 length);
    bool (__cdecl *mkdir)(void *userdata, const char *path);
    bool (__cdecl *remove)(void *userdata, const char *path);
    bool (__cdecl *rename)(void *userdata, const char *oldpath, const char *newpath);
    bool (__cdecl *copy)(void *userdata, const char *oldpath, const char *newpath);
    Uint64 (__cdecl *space_remaining)(void *userdata);
} SDL_StorageInterface;
typedef int SDL_compile_time_assert_SDL_StorageInterface_SIZE[((sizeof(void *) == 4 && sizeof(SDL_StorageInterface) == 48) || (sizeof(void *) == 8 && sizeof(SDL_StorageInterface) == 96)) * 2 - 1];
typedef struct SDL_Storage SDL_Storage;
extern  SDL_Storage * __cdecl SDL_OpenTitleStorage(const char *override, SDL_PropertiesID props);
extern  SDL_Storage * __cdecl SDL_OpenUserStorage(const char *org, const char *app, SDL_PropertiesID props);
extern  SDL_Storage * __cdecl SDL_OpenFileStorage(const char *path);
extern  SDL_Storage * __cdecl SDL_OpenStorage(const SDL_StorageInterface *iface, void *userdata);
extern  bool __cdecl SDL_CloseStorage(SDL_Storage *storage);
extern  bool __cdecl SDL_StorageReady(SDL_Storage *storage);
extern  bool __cdecl SDL_GetStorageFileSize(SDL_Storage *storage, const char *path, Uint64 *length);
extern  bool __cdecl SDL_ReadStorageFile(SDL_Storage *storage, const char *path, void *destination, Uint64 length);
extern  bool __cdecl SDL_WriteStorageFile(SDL_Storage *storage, const char *path, const void *source, Uint64 length);
extern  bool __cdecl SDL_CreateStorageDirectory(SDL_Storage *storage, const char *path);
extern  bool __cdecl SDL_EnumerateStorageDirectory(SDL_Storage *storage, const char *path, SDL_EnumerateDirectoryCallback callback, void *userdata);
extern  bool __cdecl SDL_RemoveStoragePath(SDL_Storage *storage, const char *path);
extern  bool __cdecl SDL_RenameStoragePath(SDL_Storage *storage, const char *oldpath, const char *newpath);
extern  bool __cdecl SDL_CopyStorageFile(SDL_Storage *storage, const char *oldpath, const char *newpath);
extern  bool __cdecl SDL_GetStoragePathInfo(SDL_Storage *storage, const char *path, SDL_PathInfo *info);
extern  Uint64 __cdecl SDL_GetStorageSpaceRemaining(SDL_Storage *storage);
extern  char ** __cdecl SDL_GlobStorageDirectory(SDL_Storage *storage, const char *path, const char *pattern, SDL_GlobFlags flags, int *count);
#pragma pack(pop)
#pragma pack(push,8)
typedef struct tagMSG MSG;
typedef bool (__cdecl *SDL_WindowsMessageHook)(void *userdata, MSG *msg);
extern  void __cdecl SDL_SetWindowsMessageHook(SDL_WindowsMessageHook callback, void *userdata);
extern  int __cdecl SDL_GetDirect3D9AdapterIndex(SDL_DisplayID displayID);
extern  bool __cdecl SDL_GetDXGIOutputInfo(SDL_DisplayID displayID, int *adapterIndex, int *outputIndex);
typedef union _XEvent XEvent;
typedef bool (__cdecl *SDL_X11EventHook)(void *userdata, XEvent *xevent);
extern  void __cdecl SDL_SetX11EventHook(SDL_X11EventHook callback, void *userdata);
extern  bool __cdecl SDL_IsTablet(void);
extern  bool __cdecl SDL_IsTV(void);
typedef enum SDL_Sandbox
{
    SDL_SANDBOX_NONE = 0,
    SDL_SANDBOX_UNKNOWN_CONTAINER,
    SDL_SANDBOX_FLATPAK,
    SDL_SANDBOX_SNAP,
    SDL_SANDBOX_MACOS
} SDL_Sandbox;
extern  SDL_Sandbox __cdecl SDL_GetSandbox(void);
extern  void __cdecl SDL_OnApplicationWillTerminate(void);
extern  void __cdecl SDL_OnApplicationDidReceiveMemoryWarning(void);
extern  void __cdecl SDL_OnApplicationWillEnterBackground(void);
extern  void __cdecl SDL_OnApplicationDidEnterBackground(void);
extern  void __cdecl SDL_OnApplicationWillEnterForeground(void);
extern  void __cdecl SDL_OnApplicationDidEnterForeground(void);
#pragma pack(pop)
#pragma pack(push,8)
typedef struct SDL_DateTime
{
    int year;                  
    int month;                 
    int day;                   
    int hour;                  
    int minute;                
    int second;                
    int nanosecond;            
    int day_of_week;           
    int utc_offset;            
} SDL_DateTime;
typedef enum SDL_DateFormat
{
    SDL_DATE_FORMAT_YYYYMMDD = 0, 
    SDL_DATE_FORMAT_DDMMYYYY = 1, 
    SDL_DATE_FORMAT_MMDDYYYY = 2  
} SDL_DateFormat;
typedef enum SDL_TimeFormat
{
    SDL_TIME_FORMAT_24HR = 0, 
    SDL_TIME_FORMAT_12HR = 1  
} SDL_TimeFormat;
extern  bool __cdecl SDL_GetDateTimeLocalePreferences(SDL_DateFormat *dateFormat, SDL_TimeFormat *timeFormat);
extern  bool __cdecl SDL_GetCurrentTime(SDL_Time *ticks);
extern  bool __cdecl SDL_TimeToDateTime(SDL_Time ticks, SDL_DateTime *dt, bool localTime);
extern  bool __cdecl SDL_DateTimeToTime(const SDL_DateTime *dt, SDL_Time *ticks);
extern  void __cdecl SDL_TimeToWindows(SDL_Time ticks, Uint32 *dwLowDateTime, Uint32 *dwHighDateTime);
extern  SDL_Time __cdecl SDL_TimeFromWindows(Uint32 dwLowDateTime, Uint32 dwHighDateTime);
extern  int __cdecl SDL_GetDaysInMonth(int year, int month);
extern  int __cdecl SDL_GetDayOfYear(int year, int month, int day);
extern  int __cdecl SDL_GetDayOfWeek(int year, int month, int day);
#pragma pack(pop)
#pragma pack(push,8)
extern  Uint64 __cdecl SDL_GetTicks(void);
extern  Uint64 __cdecl SDL_GetTicksNS(void);
extern  Uint64 __cdecl SDL_GetPerformanceCounter(void);
extern  Uint64 __cdecl SDL_GetPerformanceFrequency(void);
extern  void __cdecl SDL_Delay(Uint32 ms);
extern  void __cdecl SDL_DelayNS(Uint64 ns);
extern  void __cdecl SDL_DelayPrecise(Uint64 ns);
typedef Uint32 SDL_TimerID;
typedef Uint32 (__cdecl *SDL_TimerCallback)(void *userdata, SDL_TimerID timerID, Uint32 interval);
extern  SDL_TimerID __cdecl SDL_AddTimer(Uint32 interval, SDL_TimerCallback callback, void *userdata);
typedef Uint64 (__cdecl *SDL_NSTimerCallback)(void *userdata, SDL_TimerID timerID, Uint64 interval);
extern  SDL_TimerID __cdecl SDL_AddTimerNS(Uint64 interval, SDL_NSTimerCallback callback, void *userdata);
extern  bool __cdecl SDL_RemoveTimer(SDL_TimerID id);
#pragma pack(pop)
#pragma pack(push,8)
extern  int __cdecl SDL_GetVersion(void);
extern  const char * __cdecl SDL_GetRevision(void);
#pragma pack(pop)
typedef unsigned __int64 ImU64;
typedef struct ImDrawChannel ImDrawChannel;
typedef struct ImDrawCmd ImDrawCmd;
typedef struct ImDrawData ImDrawData;
typedef struct ImDrawList ImDrawList;
typedef struct ImDrawListSharedData ImDrawListSharedData;
typedef struct ImDrawListSplitter ImDrawListSplitter;
typedef struct ImDrawVert ImDrawVert;
typedef struct ImFont ImFont;
typedef struct ImFontAtlas ImFontAtlas;
typedef struct ImFontBuilderIO ImFontBuilderIO;
typedef struct ImFontConfig ImFontConfig;
typedef struct ImFontGlyph ImFontGlyph;
typedef struct ImFontGlyphRangesBuilder ImFontGlyphRangesBuilder;
typedef struct ImColor ImColor;
typedef struct ImGuiContext ImGuiContext;
typedef struct ImGuiIO ImGuiIO;
typedef struct ImGuiInputTextCallbackData ImGuiInputTextCallbackData;
typedef struct ImGuiKeyData ImGuiKeyData;
typedef struct ImGuiListClipper ImGuiListClipper;
typedef struct ImGuiMultiSelectIO ImGuiMultiSelectIO;
typedef struct ImGuiOnceUponAFrame ImGuiOnceUponAFrame;
typedef struct ImGuiPayload ImGuiPayload;
typedef struct ImGuiPlatformIO ImGuiPlatformIO;
typedef struct ImGuiPlatformImeData ImGuiPlatformImeData;
typedef struct ImGuiPlatformMonitor ImGuiPlatformMonitor;
typedef struct ImGuiSelectionBasicStorage ImGuiSelectionBasicStorage;
typedef struct ImGuiSelectionExternalStorage ImGuiSelectionExternalStorage;
typedef struct ImGuiSelectionRequest ImGuiSelectionRequest;
typedef struct ImGuiSizeCallbackData ImGuiSizeCallbackData;
typedef struct ImGuiStorage ImGuiStorage;
typedef struct ImGuiStoragePair ImGuiStoragePair;
typedef struct ImGuiStyle ImGuiStyle;
typedef struct ImGuiTableSortSpecs ImGuiTableSortSpecs;
typedef struct ImGuiTableColumnSortSpecs ImGuiTableColumnSortSpecs;
typedef struct ImGuiTextBuffer ImGuiTextBuffer;
typedef struct ImGuiTextFilter ImGuiTextFilter;
typedef struct ImGuiViewport ImGuiViewport;
typedef struct ImGuiWindowClass ImGuiWindowClass;
typedef struct ImBitVector ImBitVector;
typedef struct ImRect ImRect;
typedef struct ImDrawDataBuilder ImDrawDataBuilder;
typedef struct ImGuiBoxSelectState ImGuiBoxSelectState;
typedef struct ImGuiColorMod ImGuiColorMod;
typedef struct ImGuiContextHook ImGuiContextHook;
typedef struct ImGuiDataVarInfo ImGuiDataVarInfo;
typedef struct ImGuiDataTypeInfo ImGuiDataTypeInfo;
typedef struct ImGuiDockContext ImGuiDockContext;
typedef struct ImGuiDockRequest ImGuiDockRequest;
typedef struct ImGuiDockNode ImGuiDockNode;
typedef struct ImGuiDockNodeSettings ImGuiDockNodeSettings;
typedef struct ImGuiErrorRecoveryState ImGuiErrorRecoveryState;
typedef struct ImGuiGroupData ImGuiGroupData;
typedef struct ImGuiInputTextState ImGuiInputTextState;
typedef struct ImGuiInputTextDeactivateData ImGuiInputTextDeactivateData;
typedef struct ImGuiLastItemData ImGuiLastItemData;
typedef struct ImGuiLocEntry ImGuiLocEntry;
typedef struct ImGuiMenuColumns ImGuiMenuColumns;
typedef struct ImGuiMultiSelectState ImGuiMultiSelectState;
typedef struct ImGuiMultiSelectTempData ImGuiMultiSelectTempData;
typedef struct ImGuiNavItemData ImGuiNavItemData;
typedef struct ImGuiMetricsConfig ImGuiMetricsConfig;
typedef struct ImGuiNextWindowData ImGuiNextWindowData;
typedef struct ImGuiNextItemData ImGuiNextItemData;
typedef struct ImGuiOldColumnData ImGuiOldColumnData;
typedef struct ImGuiOldColumns ImGuiOldColumns;
typedef struct ImGuiPopupData ImGuiPopupData;
typedef struct ImGuiSettingsHandler ImGuiSettingsHandler;
typedef struct ImGuiStyleMod ImGuiStyleMod;
typedef struct ImGuiTabBar ImGuiTabBar;
typedef struct ImGuiTabItem ImGuiTabItem;
typedef struct ImGuiTable ImGuiTable;
typedef struct ImGuiTableHeaderData ImGuiTableHeaderData;
typedef struct ImGuiTableColumn ImGuiTableColumn;
typedef struct ImGuiTableInstanceData ImGuiTableInstanceData;
typedef struct ImGuiTableTempData ImGuiTableTempData;
typedef struct ImGuiTableSettings ImGuiTableSettings;
typedef struct ImGuiTableColumnsSettings ImGuiTableColumnsSettings;
typedef struct ImGuiTreeNodeStackData ImGuiTreeNodeStackData;
typedef struct ImGuiTypingSelectState ImGuiTypingSelectState;
typedef struct ImGuiTypingSelectRequest ImGuiTypingSelectRequest;
typedef struct ImGuiWindow ImGuiWindow;
typedef struct ImGuiWindowDockStyle ImGuiWindowDockStyle;
typedef struct ImGuiWindowTempData ImGuiWindowTempData;
typedef struct ImGuiWindowSettings ImGuiWindowSettings;
typedef struct STB_TexteditState STB_TexteditState;
typedef struct ImVector_const_charPtr {int Size;int Capacity;const char** Data;} ImVector_const_charPtr;
typedef unsigned int ImGuiID;
typedef signed char ImS8;
typedef unsigned char ImU8;
typedef signed short ImS16;
typedef unsigned short ImU16;
typedef signed int ImS32;
typedef unsigned int ImU32;
typedef signed long long ImS64;
typedef unsigned long long ImU64;
struct ImDrawChannel;
struct ImDrawCmd;
struct ImDrawData;
struct ImDrawList;
struct ImDrawListSharedData;
struct ImDrawListSplitter;
struct ImDrawVert;
struct ImFont;
struct ImFontAtlas;
struct ImFontBuilderIO;
struct ImFontConfig;
struct ImFontGlyph;
struct ImFontGlyphRangesBuilder;
struct ImColor;
struct ImGuiContext;
struct ImGuiIO;
struct ImGuiInputTextCallbackData;
struct ImGuiKeyData;
struct ImGuiListClipper;
struct ImGuiMultiSelectIO;
struct ImGuiOnceUponAFrame;
struct ImGuiPayload;
struct ImGuiPlatformIO;
struct ImGuiPlatformImeData;
struct ImGuiPlatformMonitor;
struct ImGuiSelectionBasicStorage;
struct ImGuiSelectionExternalStorage;
struct ImGuiSelectionRequest;
struct ImGuiSizeCallbackData;
struct ImGuiStorage;
struct ImGuiStoragePair;
struct ImGuiStyle;
struct ImGuiTableSortSpecs;
struct ImGuiTableColumnSortSpecs;
struct ImGuiTextBuffer;
struct ImGuiTextFilter;
struct ImGuiViewport;
struct ImGuiWindowClass;
typedef int ImGuiCol;
typedef int ImGuiCond;
typedef int ImGuiDataType;
typedef int ImGuiMouseButton;
typedef int ImGuiMouseCursor;
typedef int ImGuiStyleVar;
typedef int ImGuiTableBgTarget;
typedef int ImDrawFlags;
typedef int ImDrawListFlags;
typedef int ImFontAtlasFlags;
typedef int ImGuiBackendFlags;
typedef int ImGuiButtonFlags;
typedef int ImGuiChildFlags;
typedef int ImGuiColorEditFlags;
typedef int ImGuiConfigFlags;
typedef int ImGuiComboFlags;
typedef int ImGuiDockNodeFlags;
typedef int ImGuiDragDropFlags;
typedef int ImGuiFocusedFlags;
typedef int ImGuiHoveredFlags;
typedef int ImGuiInputFlags;
typedef int ImGuiInputTextFlags;
typedef int ImGuiItemFlags;
typedef int ImGuiKeyChord;
typedef int ImGuiPopupFlags;
typedef int ImGuiMultiSelectFlags;
typedef int ImGuiSelectableFlags;
typedef int ImGuiSliderFlags;
typedef int ImGuiTabBarFlags;
typedef int ImGuiTabItemFlags;
typedef int ImGuiTableFlags;
typedef int ImGuiTableColumnFlags;
typedef int ImGuiTableRowFlags;
typedef int ImGuiTreeNodeFlags;
typedef int ImGuiViewportFlags;
typedef int ImGuiWindowFlags;
typedef ImU64 ImTextureID;
typedef unsigned short ImDrawIdx;
typedef unsigned int ImWchar32;
typedef unsigned short ImWchar16;
typedef ImWchar16 ImWchar;
typedef ImS64 ImGuiSelectionUserData;
typedef int (*ImGuiInputTextCallback)(ImGuiInputTextCallbackData* data);
typedef void (*ImGuiSizeCallback)(ImGuiSizeCallbackData* data);
typedef void* (*ImGuiMemAllocFunc)(size_t sz, void* user_data);
typedef void (*ImGuiMemFreeFunc)(void* ptr, void* user_data);
typedef struct ImVec2 ImVec2;
struct ImVec2
{
    float x, y;
};
typedef struct ImVec4 ImVec4;
struct ImVec4
{
    float x, y, z, w;
};
typedef enum {
    ImGuiWindowFlags_None = 0,
    ImGuiWindowFlags_NoTitleBar = 1 << 0,
    ImGuiWindowFlags_NoResize = 1 << 1,
    ImGuiWindowFlags_NoMove = 1 << 2,
    ImGuiWindowFlags_NoScrollbar = 1 << 3,
    ImGuiWindowFlags_NoScrollWithMouse = 1 << 4,
    ImGuiWindowFlags_NoCollapse = 1 << 5,
    ImGuiWindowFlags_AlwaysAutoResize = 1 << 6,
    ImGuiWindowFlags_NoBackground = 1 << 7,
    ImGuiWindowFlags_NoSavedSettings = 1 << 8,
    ImGuiWindowFlags_NoMouseInputs = 1 << 9,
    ImGuiWindowFlags_MenuBar = 1 << 10,
    ImGuiWindowFlags_HorizontalScrollbar = 1 << 11,
    ImGuiWindowFlags_NoFocusOnAppearing = 1 << 12,
    ImGuiWindowFlags_NoBringToFrontOnFocus = 1 << 13,
    ImGuiWindowFlags_AlwaysVerticalScrollbar= 1 << 14,
    ImGuiWindowFlags_AlwaysHorizontalScrollbar=1<< 15,
    ImGuiWindowFlags_NoNavInputs = 1 << 16,
    ImGuiWindowFlags_NoNavFocus = 1 << 17,
    ImGuiWindowFlags_UnsavedDocument = 1 << 18,
    ImGuiWindowFlags_NoDocking = 1 << 19,
    ImGuiWindowFlags_NoNav = ImGuiWindowFlags_NoNavInputs | ImGuiWindowFlags_NoNavFocus,
    ImGuiWindowFlags_NoDecoration = ImGuiWindowFlags_NoTitleBar | ImGuiWindowFlags_NoResize | ImGuiWindowFlags_NoScrollbar | ImGuiWindowFlags_NoCollapse,
    ImGuiWindowFlags_NoInputs = ImGuiWindowFlags_NoMouseInputs | ImGuiWindowFlags_NoNavInputs | ImGuiWindowFlags_NoNavFocus,
    ImGuiWindowFlags_ChildWindow = 1 << 24,
    ImGuiWindowFlags_Tooltip = 1 << 25,
    ImGuiWindowFlags_Popup = 1 << 26,
    ImGuiWindowFlags_Modal = 1 << 27,
    ImGuiWindowFlags_ChildMenu = 1 << 28,
    ImGuiWindowFlags_DockNodeHost = 1 << 29,
}ImGuiWindowFlags_;
typedef enum {
    ImGuiChildFlags_None = 0,
    ImGuiChildFlags_Borders = 1 << 0,
    ImGuiChildFlags_AlwaysUseWindowPadding = 1 << 1,
    ImGuiChildFlags_ResizeX = 1 << 2,
    ImGuiChildFlags_ResizeY = 1 << 3,
    ImGuiChildFlags_AutoResizeX = 1 << 4,
    ImGuiChildFlags_AutoResizeY = 1 << 5,
    ImGuiChildFlags_AlwaysAutoResize = 1 << 6,
    ImGuiChildFlags_FrameStyle = 1 << 7,
    ImGuiChildFlags_NavFlattened = 1 << 8,
}ImGuiChildFlags_;
typedef enum {
    ImGuiItemFlags_None = 0,
    ImGuiItemFlags_NoTabStop = 1 << 0,
    ImGuiItemFlags_NoNav = 1 << 1,
    ImGuiItemFlags_NoNavDefaultFocus = 1 << 2,
    ImGuiItemFlags_ButtonRepeat = 1 << 3,
    ImGuiItemFlags_AutoClosePopups = 1 << 4,
    ImGuiItemFlags_AllowDuplicateId = 1 << 5,
}ImGuiItemFlags_;
typedef enum {
    ImGuiInputTextFlags_None = 0,
    ImGuiInputTextFlags_CharsDecimal = 1 << 0,
    ImGuiInputTextFlags_CharsHexadecimal = 1 << 1,
    ImGuiInputTextFlags_CharsScientific = 1 << 2,
    ImGuiInputTextFlags_CharsUppercase = 1 << 3,
    ImGuiInputTextFlags_CharsNoBlank = 1 << 4,
    ImGuiInputTextFlags_AllowTabInput = 1 << 5,
    ImGuiInputTextFlags_EnterReturnsTrue = 1 << 6,
    ImGuiInputTextFlags_EscapeClearsAll = 1 << 7,
    ImGuiInputTextFlags_CtrlEnterForNewLine = 1 << 8,
    ImGuiInputTextFlags_ReadOnly = 1 << 9,
    ImGuiInputTextFlags_Password = 1 << 10,
    ImGuiInputTextFlags_AlwaysOverwrite = 1 << 11,
    ImGuiInputTextFlags_AutoSelectAll = 1 << 12,
    ImGuiInputTextFlags_ParseEmptyRefVal = 1 << 13,
    ImGuiInputTextFlags_DisplayEmptyRefVal = 1 << 14,
    ImGuiInputTextFlags_NoHorizontalScroll = 1 << 15,
    ImGuiInputTextFlags_NoUndoRedo = 1 << 16,
    ImGuiInputTextFlags_CallbackCompletion = 1 << 17,
    ImGuiInputTextFlags_CallbackHistory = 1 << 18,
    ImGuiInputTextFlags_CallbackAlways = 1 << 19,
    ImGuiInputTextFlags_CallbackCharFilter = 1 << 20,
    ImGuiInputTextFlags_CallbackResize = 1 << 21,
    ImGuiInputTextFlags_CallbackEdit = 1 << 22,
}ImGuiInputTextFlags_;
typedef enum {
    ImGuiTreeNodeFlags_None = 0,
    ImGuiTreeNodeFlags_Selected = 1 << 0,
    ImGuiTreeNodeFlags_Framed = 1 << 1,
    ImGuiTreeNodeFlags_AllowOverlap = 1 << 2,
    ImGuiTreeNodeFlags_NoTreePushOnOpen = 1 << 3,
    ImGuiTreeNodeFlags_NoAutoOpenOnLog = 1 << 4,
    ImGuiTreeNodeFlags_DefaultOpen = 1 << 5,
    ImGuiTreeNodeFlags_OpenOnDoubleClick = 1 << 6,
    ImGuiTreeNodeFlags_OpenOnArrow = 1 << 7,
    ImGuiTreeNodeFlags_Leaf = 1 << 8,
    ImGuiTreeNodeFlags_Bullet = 1 << 9,
    ImGuiTreeNodeFlags_FramePadding = 1 << 10,
    ImGuiTreeNodeFlags_SpanAvailWidth = 1 << 11,
    ImGuiTreeNodeFlags_SpanFullWidth = 1 << 12,
    ImGuiTreeNodeFlags_SpanTextWidth = 1 << 13,
    ImGuiTreeNodeFlags_SpanAllColumns = 1 << 14,
    ImGuiTreeNodeFlags_NavLeftJumpsBackHere = 1 << 15,
    ImGuiTreeNodeFlags_CollapsingHeader = ImGuiTreeNodeFlags_Framed | ImGuiTreeNodeFlags_NoTreePushOnOpen | ImGuiTreeNodeFlags_NoAutoOpenOnLog,
}ImGuiTreeNodeFlags_;
typedef enum {
    ImGuiPopupFlags_None = 0,
    ImGuiPopupFlags_MouseButtonLeft = 0,
    ImGuiPopupFlags_MouseButtonRight = 1,
    ImGuiPopupFlags_MouseButtonMiddle = 2,
    ImGuiPopupFlags_MouseButtonMask_ = 0x1F,
    ImGuiPopupFlags_MouseButtonDefault_ = 1,
    ImGuiPopupFlags_NoReopen = 1 << 5,
    ImGuiPopupFlags_NoOpenOverExistingPopup = 1 << 7,
    ImGuiPopupFlags_NoOpenOverItems = 1 << 8,
    ImGuiPopupFlags_AnyPopupId = 1 << 10,
    ImGuiPopupFlags_AnyPopupLevel = 1 << 11,
    ImGuiPopupFlags_AnyPopup = ImGuiPopupFlags_AnyPopupId | ImGuiPopupFlags_AnyPopupLevel,
}ImGuiPopupFlags_;
typedef enum {
    ImGuiSelectableFlags_None = 0,
    ImGuiSelectableFlags_NoAutoClosePopups = 1 << 0,
    ImGuiSelectableFlags_SpanAllColumns = 1 << 1,
    ImGuiSelectableFlags_AllowDoubleClick = 1 << 2,
    ImGuiSelectableFlags_Disabled = 1 << 3,
    ImGuiSelectableFlags_AllowOverlap = 1 << 4,
    ImGuiSelectableFlags_Highlight = 1 << 5,
}ImGuiSelectableFlags_;
typedef enum {
    ImGuiComboFlags_None = 0,
    ImGuiComboFlags_PopupAlignLeft = 1 << 0,
    ImGuiComboFlags_HeightSmall = 1 << 1,
    ImGuiComboFlags_HeightRegular = 1 << 2,
    ImGuiComboFlags_HeightLarge = 1 << 3,
    ImGuiComboFlags_HeightLargest = 1 << 4,
    ImGuiComboFlags_NoArrowButton = 1 << 5,
    ImGuiComboFlags_NoPreview = 1 << 6,
    ImGuiComboFlags_WidthFitPreview = 1 << 7,
    ImGuiComboFlags_HeightMask_ = ImGuiComboFlags_HeightSmall | ImGuiComboFlags_HeightRegular | ImGuiComboFlags_HeightLarge | ImGuiComboFlags_HeightLargest,
}ImGuiComboFlags_;
typedef enum {
    ImGuiTabBarFlags_None = 0,
    ImGuiTabBarFlags_Reorderable = 1 << 0,
    ImGuiTabBarFlags_AutoSelectNewTabs = 1 << 1,
    ImGuiTabBarFlags_TabListPopupButton = 1 << 2,
    ImGuiTabBarFlags_NoCloseWithMiddleMouseButton = 1 << 3,
    ImGuiTabBarFlags_NoTabListScrollingButtons = 1 << 4,
    ImGuiTabBarFlags_NoTooltip = 1 << 5,
    ImGuiTabBarFlags_DrawSelectedOverline = 1 << 6,
    ImGuiTabBarFlags_FittingPolicyResizeDown = 1 << 7,
    ImGuiTabBarFlags_FittingPolicyScroll = 1 << 8,
    ImGuiTabBarFlags_FittingPolicyMask_ = ImGuiTabBarFlags_FittingPolicyResizeDown | ImGuiTabBarFlags_FittingPolicyScroll,
    ImGuiTabBarFlags_FittingPolicyDefault_ = ImGuiTabBarFlags_FittingPolicyResizeDown,
}ImGuiTabBarFlags_;
typedef enum {
    ImGuiTabItemFlags_None = 0,
    ImGuiTabItemFlags_UnsavedDocument = 1 << 0,
    ImGuiTabItemFlags_SetSelected = 1 << 1,
    ImGuiTabItemFlags_NoCloseWithMiddleMouseButton = 1 << 2,
    ImGuiTabItemFlags_NoPushId = 1 << 3,
    ImGuiTabItemFlags_NoTooltip = 1 << 4,
    ImGuiTabItemFlags_NoReorder = 1 << 5,
    ImGuiTabItemFlags_Leading = 1 << 6,
    ImGuiTabItemFlags_Trailing = 1 << 7,
    ImGuiTabItemFlags_NoAssumedClosure = 1 << 8,
}ImGuiTabItemFlags_;
typedef enum {
    ImGuiFocusedFlags_None = 0,
    ImGuiFocusedFlags_ChildWindows = 1 << 0,
    ImGuiFocusedFlags_RootWindow = 1 << 1,
    ImGuiFocusedFlags_AnyWindow = 1 << 2,
    ImGuiFocusedFlags_NoPopupHierarchy = 1 << 3,
    ImGuiFocusedFlags_DockHierarchy = 1 << 4,
    ImGuiFocusedFlags_RootAndChildWindows = ImGuiFocusedFlags_RootWindow | ImGuiFocusedFlags_ChildWindows,
}ImGuiFocusedFlags_;
typedef enum {
    ImGuiHoveredFlags_None = 0,
    ImGuiHoveredFlags_ChildWindows = 1 << 0,
    ImGuiHoveredFlags_RootWindow = 1 << 1,
    ImGuiHoveredFlags_AnyWindow = 1 << 2,
    ImGuiHoveredFlags_NoPopupHierarchy = 1 << 3,
    ImGuiHoveredFlags_DockHierarchy = 1 << 4,
    ImGuiHoveredFlags_AllowWhenBlockedByPopup = 1 << 5,
    ImGuiHoveredFlags_AllowWhenBlockedByActiveItem = 1 << 7,
    ImGuiHoveredFlags_AllowWhenOverlappedByItem = 1 << 8,
    ImGuiHoveredFlags_AllowWhenOverlappedByWindow = 1 << 9,
    ImGuiHoveredFlags_AllowWhenDisabled = 1 << 10,
    ImGuiHoveredFlags_NoNavOverride = 1 << 11,
    ImGuiHoveredFlags_AllowWhenOverlapped = ImGuiHoveredFlags_AllowWhenOverlappedByItem | ImGuiHoveredFlags_AllowWhenOverlappedByWindow,
    ImGuiHoveredFlags_RectOnly = ImGuiHoveredFlags_AllowWhenBlockedByPopup | ImGuiHoveredFlags_AllowWhenBlockedByActiveItem | ImGuiHoveredFlags_AllowWhenOverlapped,
    ImGuiHoveredFlags_RootAndChildWindows = ImGuiHoveredFlags_RootWindow | ImGuiHoveredFlags_ChildWindows,
    ImGuiHoveredFlags_ForTooltip = 1 << 12,
    ImGuiHoveredFlags_Stationary = 1 << 13,
    ImGuiHoveredFlags_DelayNone = 1 << 14,
    ImGuiHoveredFlags_DelayShort = 1 << 15,
    ImGuiHoveredFlags_DelayNormal = 1 << 16,
    ImGuiHoveredFlags_NoSharedDelay = 1 << 17,
}ImGuiHoveredFlags_;
typedef enum {
    ImGuiDockNodeFlags_None = 0,
    ImGuiDockNodeFlags_KeepAliveOnly = 1 << 0,
    ImGuiDockNodeFlags_NoDockingOverCentralNode = 1 << 2,
    ImGuiDockNodeFlags_PassthruCentralNode = 1 << 3,
    ImGuiDockNodeFlags_NoDockingSplit = 1 << 4,
    ImGuiDockNodeFlags_NoResize = 1 << 5,
    ImGuiDockNodeFlags_AutoHideTabBar = 1 << 6,
    ImGuiDockNodeFlags_NoUndocking = 1 << 7,
}ImGuiDockNodeFlags_;
typedef enum {
    ImGuiDragDropFlags_None = 0,
    ImGuiDragDropFlags_SourceNoPreviewTooltip = 1 << 0,
    ImGuiDragDropFlags_SourceNoDisableHover = 1 << 1,
    ImGuiDragDropFlags_SourceNoHoldToOpenOthers = 1 << 2,
    ImGuiDragDropFlags_SourceAllowNullID = 1 << 3,
    ImGuiDragDropFlags_SourceExtern = 1 << 4,
    ImGuiDragDropFlags_PayloadAutoExpire = 1 << 5,
    ImGuiDragDropFlags_PayloadNoCrossContext = 1 << 6,
    ImGuiDragDropFlags_PayloadNoCrossProcess = 1 << 7,
    ImGuiDragDropFlags_AcceptBeforeDelivery = 1 << 10,
    ImGuiDragDropFlags_AcceptNoDrawDefaultRect = 1 << 11,
    ImGuiDragDropFlags_AcceptNoPreviewTooltip = 1 << 12,
    ImGuiDragDropFlags_AcceptPeekOnly = ImGuiDragDropFlags_AcceptBeforeDelivery | ImGuiDragDropFlags_AcceptNoDrawDefaultRect,
}ImGuiDragDropFlags_;
typedef enum {
    ImGuiDataType_S8,
    ImGuiDataType_U8,
    ImGuiDataType_S16,
    ImGuiDataType_U16,
    ImGuiDataType_S32,
    ImGuiDataType_U32,
    ImGuiDataType_S64,
    ImGuiDataType_U64,
    ImGuiDataType_Float,
    ImGuiDataType_Double,
    ImGuiDataType_Bool,
    ImGuiDataType_COUNT
}ImGuiDataType_;
typedef enum {
ImGuiDir_None=-1,
ImGuiDir_Left=0,
ImGuiDir_Right=1,
ImGuiDir_Up=2,
ImGuiDir_Down=3,
ImGuiDir_COUNT=4,
}ImGuiDir;
typedef enum {
ImGuiSortDirection_None=0,
ImGuiSortDirection_Ascending=1,
ImGuiSortDirection_Descending=2,
}ImGuiSortDirection;
typedef enum {
ImGuiKey_None=0,
ImGuiKey_Tab=512,
ImGuiKey_LeftArrow=513,
ImGuiKey_RightArrow=514,
ImGuiKey_UpArrow=515,
ImGuiKey_DownArrow=516,
ImGuiKey_PageUp=517,
ImGuiKey_PageDown=518,
ImGuiKey_Home=519,
ImGuiKey_End=520,
ImGuiKey_Insert=521,
ImGuiKey_Delete=522,
ImGuiKey_Backspace=523,
ImGuiKey_Space=524,
ImGuiKey_Enter=525,
ImGuiKey_Escape=526,
ImGuiKey_LeftCtrl=527,
ImGuiKey_LeftShift=528,
ImGuiKey_LeftAlt=529,
ImGuiKey_LeftSuper=530,
ImGuiKey_RightCtrl=531,
ImGuiKey_RightShift=532,
ImGuiKey_RightAlt=533,
ImGuiKey_RightSuper=534,
ImGuiKey_Menu=535,
ImGuiKey_0=536,
ImGuiKey_1=537,
ImGuiKey_2=538,
ImGuiKey_3=539,
ImGuiKey_4=540,
ImGuiKey_5=541,
ImGuiKey_6=542,
ImGuiKey_7=543,
ImGuiKey_8=544,
ImGuiKey_9=545,
ImGuiKey_A=546,
ImGuiKey_B=547,
ImGuiKey_C=548,
ImGuiKey_D=549,
ImGuiKey_E=550,
ImGuiKey_F=551,
ImGuiKey_G=552,
ImGuiKey_H=553,
ImGuiKey_I=554,
ImGuiKey_J=555,
ImGuiKey_K=556,
ImGuiKey_L=557,
ImGuiKey_M=558,
ImGuiKey_N=559,
ImGuiKey_O=560,
ImGuiKey_P=561,
ImGuiKey_Q=562,
ImGuiKey_R=563,
ImGuiKey_S=564,
ImGuiKey_T=565,
ImGuiKey_U=566,
ImGuiKey_V=567,
ImGuiKey_W=568,
ImGuiKey_X=569,
ImGuiKey_Y=570,
ImGuiKey_Z=571,
ImGuiKey_F1=572,
ImGuiKey_F2=573,
ImGuiKey_F3=574,
ImGuiKey_F4=575,
ImGuiKey_F5=576,
ImGuiKey_F6=577,
ImGuiKey_F7=578,
ImGuiKey_F8=579,
ImGuiKey_F9=580,
ImGuiKey_F10=581,
ImGuiKey_F11=582,
ImGuiKey_F12=583,
ImGuiKey_F13=584,
ImGuiKey_F14=585,
ImGuiKey_F15=586,
ImGuiKey_F16=587,
ImGuiKey_F17=588,
ImGuiKey_F18=589,
ImGuiKey_F19=590,
ImGuiKey_F20=591,
ImGuiKey_F21=592,
ImGuiKey_F22=593,
ImGuiKey_F23=594,
ImGuiKey_F24=595,
ImGuiKey_Apostrophe=596,
ImGuiKey_Comma=597,
ImGuiKey_Minus=598,
ImGuiKey_Period=599,
ImGuiKey_Slash=600,
ImGuiKey_Semicolon=601,
ImGuiKey_Equal=602,
ImGuiKey_LeftBracket=603,
ImGuiKey_Backslash=604,
ImGuiKey_RightBracket=605,
ImGuiKey_GraveAccent=606,
ImGuiKey_CapsLock=607,
ImGuiKey_ScrollLock=608,
ImGuiKey_NumLock=609,
ImGuiKey_PrintScreen=610,
ImGuiKey_Pause=611,
ImGuiKey_Keypad0=612,
ImGuiKey_Keypad1=613,
ImGuiKey_Keypad2=614,
ImGuiKey_Keypad3=615,
ImGuiKey_Keypad4=616,
ImGuiKey_Keypad5=617,
ImGuiKey_Keypad6=618,
ImGuiKey_Keypad7=619,
ImGuiKey_Keypad8=620,
ImGuiKey_Keypad9=621,
ImGuiKey_KeypadDecimal=622,
ImGuiKey_KeypadDivide=623,
ImGuiKey_KeypadMultiply=624,
ImGuiKey_KeypadSubtract=625,
ImGuiKey_KeypadAdd=626,
ImGuiKey_KeypadEnter=627,
ImGuiKey_KeypadEqual=628,
ImGuiKey_AppBack=629,
ImGuiKey_AppForward=630,
ImGuiKey_GamepadStart=631,
ImGuiKey_GamepadBack=632,
ImGuiKey_GamepadFaceLeft=633,
ImGuiKey_GamepadFaceRight=634,
ImGuiKey_GamepadFaceUp=635,
ImGuiKey_GamepadFaceDown=636,
ImGuiKey_GamepadDpadLeft=637,
ImGuiKey_GamepadDpadRight=638,
ImGuiKey_GamepadDpadUp=639,
ImGuiKey_GamepadDpadDown=640,
ImGuiKey_GamepadL1=641,
ImGuiKey_GamepadR1=642,
ImGuiKey_GamepadL2=643,
ImGuiKey_GamepadR2=644,
ImGuiKey_GamepadL3=645,
ImGuiKey_GamepadR3=646,
ImGuiKey_GamepadLStickLeft=647,
ImGuiKey_GamepadLStickRight=648,
ImGuiKey_GamepadLStickUp=649,
ImGuiKey_GamepadLStickDown=650,
ImGuiKey_GamepadRStickLeft=651,
ImGuiKey_GamepadRStickRight=652,
ImGuiKey_GamepadRStickUp=653,
ImGuiKey_GamepadRStickDown=654,
ImGuiKey_MouseLeft=655,
ImGuiKey_MouseRight=656,
ImGuiKey_MouseMiddle=657,
ImGuiKey_MouseX1=658,
ImGuiKey_MouseX2=659,
ImGuiKey_MouseWheelX=660,
ImGuiKey_MouseWheelY=661,
ImGuiKey_ReservedForModCtrl=662,
ImGuiKey_ReservedForModShift=663,
ImGuiKey_ReservedForModAlt=664,
ImGuiKey_ReservedForModSuper=665,
ImGuiKey_COUNT=666,
ImGuiMod_None=0,
ImGuiMod_Ctrl=1 << 12,
ImGuiMod_Shift=1 << 13,
ImGuiMod_Alt=1 << 14,
ImGuiMod_Super=1 << 15,
ImGuiMod_Mask_=0xF000,
ImGuiKey_NamedKey_BEGIN=512,
ImGuiKey_NamedKey_END=ImGuiKey_COUNT,
ImGuiKey_NamedKey_COUNT=ImGuiKey_NamedKey_END - ImGuiKey_NamedKey_BEGIN,
ImGuiKey_KeysData_SIZE=ImGuiKey_NamedKey_COUNT,
ImGuiKey_KeysData_OFFSET=ImGuiKey_NamedKey_BEGIN,
}ImGuiKey;
typedef enum {
    ImGuiInputFlags_None = 0,
    ImGuiInputFlags_Repeat = 1 << 0,
    ImGuiInputFlags_RouteActive = 1 << 10,
    ImGuiInputFlags_RouteFocused = 1 << 11,
    ImGuiInputFlags_RouteGlobal = 1 << 12,
    ImGuiInputFlags_RouteAlways = 1 << 13,
    ImGuiInputFlags_RouteOverFocused = 1 << 14,
    ImGuiInputFlags_RouteOverActive = 1 << 15,
    ImGuiInputFlags_RouteUnlessBgFocused = 1 << 16,
    ImGuiInputFlags_RouteFromRootWindow = 1 << 17,
    ImGuiInputFlags_Tooltip = 1 << 18,
}ImGuiInputFlags_;
typedef enum {
    ImGuiConfigFlags_None = 0,
    ImGuiConfigFlags_NavEnableKeyboard = 1 << 0,
    ImGuiConfigFlags_NavEnableGamepad = 1 << 1,
    ImGuiConfigFlags_NoMouse = 1 << 4,
    ImGuiConfigFlags_NoMouseCursorChange = 1 << 5,
    ImGuiConfigFlags_NoKeyboard = 1 << 6,
    ImGuiConfigFlags_DockingEnable = 1 << 7,
    ImGuiConfigFlags_ViewportsEnable = 1 << 10,
    ImGuiConfigFlags_DpiEnableScaleViewports= 1 << 14,
    ImGuiConfigFlags_DpiEnableScaleFonts = 1 << 15,
    ImGuiConfigFlags_IsSRGB = 1 << 20,
    ImGuiConfigFlags_IsTouchScreen = 1 << 21,
}ImGuiConfigFlags_;
typedef enum {
    ImGuiBackendFlags_None = 0,
    ImGuiBackendFlags_HasGamepad = 1 << 0,
    ImGuiBackendFlags_HasMouseCursors = 1 << 1,
    ImGuiBackendFlags_HasSetMousePos = 1 << 2,
    ImGuiBackendFlags_RendererHasVtxOffset = 1 << 3,
    ImGuiBackendFlags_PlatformHasViewports = 1 << 10,
    ImGuiBackendFlags_HasMouseHoveredViewport=1 << 11,
    ImGuiBackendFlags_RendererHasViewports = 1 << 12,
}ImGuiBackendFlags_;
typedef enum {
    ImGuiCol_Text,
    ImGuiCol_TextDisabled,
    ImGuiCol_WindowBg,
    ImGuiCol_ChildBg,
    ImGuiCol_PopupBg,
    ImGuiCol_Border,
    ImGuiCol_BorderShadow,
    ImGuiCol_FrameBg,
    ImGuiCol_FrameBgHovered,
    ImGuiCol_FrameBgActive,
    ImGuiCol_TitleBg,
    ImGuiCol_TitleBgActive,
    ImGuiCol_TitleBgCollapsed,
    ImGuiCol_MenuBarBg,
    ImGuiCol_ScrollbarBg,
    ImGuiCol_ScrollbarGrab,
    ImGuiCol_ScrollbarGrabHovered,
    ImGuiCol_ScrollbarGrabActive,
    ImGuiCol_CheckMark,
    ImGuiCol_SliderGrab,
    ImGuiCol_SliderGrabActive,
    ImGuiCol_Button,
    ImGuiCol_ButtonHovered,
    ImGuiCol_ButtonActive,
    ImGuiCol_Header,
    ImGuiCol_HeaderHovered,
    ImGuiCol_HeaderActive,
    ImGuiCol_Separator,
    ImGuiCol_SeparatorHovered,
    ImGuiCol_SeparatorActive,
    ImGuiCol_ResizeGrip,
    ImGuiCol_ResizeGripHovered,
    ImGuiCol_ResizeGripActive,
    ImGuiCol_TabHovered,
    ImGuiCol_Tab,
    ImGuiCol_TabSelected,
    ImGuiCol_TabSelectedOverline,
    ImGuiCol_TabDimmed,
    ImGuiCol_TabDimmedSelected,
    ImGuiCol_TabDimmedSelectedOverline,
    ImGuiCol_DockingPreview,
    ImGuiCol_DockingEmptyBg,
    ImGuiCol_PlotLines,
    ImGuiCol_PlotLinesHovered,
    ImGuiCol_PlotHistogram,
    ImGuiCol_PlotHistogramHovered,
    ImGuiCol_TableHeaderBg,
    ImGuiCol_TableBorderStrong,
    ImGuiCol_TableBorderLight,
    ImGuiCol_TableRowBg,
    ImGuiCol_TableRowBgAlt,
    ImGuiCol_TextLink,
    ImGuiCol_TextSelectedBg,
    ImGuiCol_DragDropTarget,
    ImGuiCol_NavCursor,
    ImGuiCol_NavWindowingHighlight,
    ImGuiCol_NavWindowingDimBg,
    ImGuiCol_ModalWindowDimBg,
    ImGuiCol_COUNT,
}ImGuiCol_;
typedef enum {
    ImGuiStyleVar_Alpha,
    ImGuiStyleVar_DisabledAlpha,
    ImGuiStyleVar_WindowPadding,
    ImGuiStyleVar_WindowRounding,
    ImGuiStyleVar_WindowBorderSize,
    ImGuiStyleVar_WindowMinSize,
    ImGuiStyleVar_WindowTitleAlign,
    ImGuiStyleVar_ChildRounding,
    ImGuiStyleVar_ChildBorderSize,
    ImGuiStyleVar_PopupRounding,
    ImGuiStyleVar_PopupBorderSize,
    ImGuiStyleVar_FramePadding,
    ImGuiStyleVar_FrameRounding,
    ImGuiStyleVar_FrameBorderSize,
    ImGuiStyleVar_ItemSpacing,
    ImGuiStyleVar_ItemInnerSpacing,
    ImGuiStyleVar_IndentSpacing,
    ImGuiStyleVar_CellPadding,
    ImGuiStyleVar_ScrollbarSize,
    ImGuiStyleVar_ScrollbarRounding,
    ImGuiStyleVar_GrabMinSize,
    ImGuiStyleVar_GrabRounding,
    ImGuiStyleVar_TabRounding,
    ImGuiStyleVar_TabBorderSize,
    ImGuiStyleVar_TabBarBorderSize,
    ImGuiStyleVar_TabBarOverlineSize,
    ImGuiStyleVar_TableAngledHeadersAngle,
    ImGuiStyleVar_TableAngledHeadersTextAlign,
    ImGuiStyleVar_ButtonTextAlign,
    ImGuiStyleVar_SelectableTextAlign,
    ImGuiStyleVar_SeparatorTextBorderSize,
    ImGuiStyleVar_SeparatorTextAlign,
    ImGuiStyleVar_SeparatorTextPadding,
    ImGuiStyleVar_DockingSeparatorSize,
    ImGuiStyleVar_COUNT
}ImGuiStyleVar_;
typedef enum {
    ImGuiButtonFlags_None = 0,
    ImGuiButtonFlags_MouseButtonLeft = 1 << 0,
    ImGuiButtonFlags_MouseButtonRight = 1 << 1,
    ImGuiButtonFlags_MouseButtonMiddle = 1 << 2,
    ImGuiButtonFlags_MouseButtonMask_ = ImGuiButtonFlags_MouseButtonLeft | ImGuiButtonFlags_MouseButtonRight | ImGuiButtonFlags_MouseButtonMiddle,
    ImGuiButtonFlags_EnableNav = 1 << 3,
}ImGuiButtonFlags_;
typedef enum {
    ImGuiColorEditFlags_None = 0,
    ImGuiColorEditFlags_NoAlpha = 1 << 1,
    ImGuiColorEditFlags_NoPicker = 1 << 2,
    ImGuiColorEditFlags_NoOptions = 1 << 3,
    ImGuiColorEditFlags_NoSmallPreview = 1 << 4,
    ImGuiColorEditFlags_NoInputs = 1 << 5,
    ImGuiColorEditFlags_NoTooltip = 1 << 6,
    ImGuiColorEditFlags_NoLabel = 1 << 7,
    ImGuiColorEditFlags_NoSidePreview = 1 << 8,
    ImGuiColorEditFlags_NoDragDrop = 1 << 9,
    ImGuiColorEditFlags_NoBorder = 1 << 10,
    ImGuiColorEditFlags_AlphaBar = 1 << 16,
    ImGuiColorEditFlags_AlphaPreview = 1 << 17,
    ImGuiColorEditFlags_AlphaPreviewHalf= 1 << 18,
    ImGuiColorEditFlags_HDR = 1 << 19,
    ImGuiColorEditFlags_DisplayRGB = 1 << 20,
    ImGuiColorEditFlags_DisplayHSV = 1 << 21,
    ImGuiColorEditFlags_DisplayHex = 1 << 22,
    ImGuiColorEditFlags_Uint8 = 1 << 23,
    ImGuiColorEditFlags_Float = 1 << 24,
    ImGuiColorEditFlags_PickerHueBar = 1 << 25,
    ImGuiColorEditFlags_PickerHueWheel = 1 << 26,
    ImGuiColorEditFlags_InputRGB = 1 << 27,
    ImGuiColorEditFlags_InputHSV = 1 << 28,
    ImGuiColorEditFlags_DefaultOptions_ = ImGuiColorEditFlags_Uint8 | ImGuiColorEditFlags_DisplayRGB | ImGuiColorEditFlags_InputRGB | ImGuiColorEditFlags_PickerHueBar,
    ImGuiColorEditFlags_DisplayMask_ = ImGuiColorEditFlags_DisplayRGB | ImGuiColorEditFlags_DisplayHSV | ImGuiColorEditFlags_DisplayHex,
    ImGuiColorEditFlags_DataTypeMask_ = ImGuiColorEditFlags_Uint8 | ImGuiColorEditFlags_Float,
    ImGuiColorEditFlags_PickerMask_ = ImGuiColorEditFlags_PickerHueWheel | ImGuiColorEditFlags_PickerHueBar,
    ImGuiColorEditFlags_InputMask_ = ImGuiColorEditFlags_InputRGB | ImGuiColorEditFlags_InputHSV,
}ImGuiColorEditFlags_;
typedef enum {
    ImGuiSliderFlags_None = 0,
    ImGuiSliderFlags_Logarithmic = 1 << 5,
    ImGuiSliderFlags_NoRoundToFormat = 1 << 6,
    ImGuiSliderFlags_NoInput = 1 << 7,
    ImGuiSliderFlags_WrapAround = 1 << 8,
    ImGuiSliderFlags_ClampOnInput = 1 << 9,
    ImGuiSliderFlags_ClampZeroRange = 1 << 10,
    ImGuiSliderFlags_AlwaysClamp = ImGuiSliderFlags_ClampOnInput | ImGuiSliderFlags_ClampZeroRange,
    ImGuiSliderFlags_InvalidMask_ = 0x7000000F,
}ImGuiSliderFlags_;
typedef enum {
    ImGuiMouseButton_Left = 0,
    ImGuiMouseButton_Right = 1,
    ImGuiMouseButton_Middle = 2,
    ImGuiMouseButton_COUNT = 5
}ImGuiMouseButton_;
typedef enum {
    ImGuiMouseCursor_None = -1,
    ImGuiMouseCursor_Arrow = 0,
    ImGuiMouseCursor_TextInput,
    ImGuiMouseCursor_ResizeAll,
    ImGuiMouseCursor_ResizeNS,
    ImGuiMouseCursor_ResizeEW,
    ImGuiMouseCursor_ResizeNESW,
    ImGuiMouseCursor_ResizeNWSE,
    ImGuiMouseCursor_Hand,
    ImGuiMouseCursor_NotAllowed,
    ImGuiMouseCursor_COUNT
}ImGuiMouseCursor_;
typedef enum {
ImGuiMouseSource_Mouse=0,
ImGuiMouseSource_TouchScreen=1,
ImGuiMouseSource_Pen=2,
ImGuiMouseSource_COUNT=3,
}ImGuiMouseSource;
typedef enum {
    ImGuiCond_None = 0,
    ImGuiCond_Always = 1 << 0,
    ImGuiCond_Once = 1 << 1,
    ImGuiCond_FirstUseEver = 1 << 2,
    ImGuiCond_Appearing = 1 << 3,
}ImGuiCond_;
typedef enum {
    ImGuiTableFlags_None = 0,
    ImGuiTableFlags_Resizable = 1 << 0,
    ImGuiTableFlags_Reorderable = 1 << 1,
    ImGuiTableFlags_Hideable = 1 << 2,
    ImGuiTableFlags_Sortable = 1 << 3,
    ImGuiTableFlags_NoSavedSettings = 1 << 4,
    ImGuiTableFlags_ContextMenuInBody = 1 << 5,
    ImGuiTableFlags_RowBg = 1 << 6,
    ImGuiTableFlags_BordersInnerH = 1 << 7,
    ImGuiTableFlags_BordersOuterH = 1 << 8,
    ImGuiTableFlags_BordersInnerV = 1 << 9,
    ImGuiTableFlags_BordersOuterV = 1 << 10,
    ImGuiTableFlags_BordersH = ImGuiTableFlags_BordersInnerH | ImGuiTableFlags_BordersOuterH,
    ImGuiTableFlags_BordersV = ImGuiTableFlags_BordersInnerV | ImGuiTableFlags_BordersOuterV,
    ImGuiTableFlags_BordersInner = ImGuiTableFlags_BordersInnerV | ImGuiTableFlags_BordersInnerH,
    ImGuiTableFlags_BordersOuter = ImGuiTableFlags_BordersOuterV | ImGuiTableFlags_BordersOuterH,
    ImGuiTableFlags_Borders = ImGuiTableFlags_BordersInner | ImGuiTableFlags_BordersOuter,
    ImGuiTableFlags_NoBordersInBody = 1 << 11,
    ImGuiTableFlags_NoBordersInBodyUntilResize = 1 << 12,
    ImGuiTableFlags_SizingFixedFit = 1 << 13,
    ImGuiTableFlags_SizingFixedSame = 2 << 13,
    ImGuiTableFlags_SizingStretchProp = 3 << 13,
    ImGuiTableFlags_SizingStretchSame = 4 << 13,
    ImGuiTableFlags_NoHostExtendX = 1 << 16,
    ImGuiTableFlags_NoHostExtendY = 1 << 17,
    ImGuiTableFlags_NoKeepColumnsVisible = 1 << 18,
    ImGuiTableFlags_PreciseWidths = 1 << 19,
    ImGuiTableFlags_NoClip = 1 << 20,
    ImGuiTableFlags_PadOuterX = 1 << 21,
    ImGuiTableFlags_NoPadOuterX = 1 << 22,
    ImGuiTableFlags_NoPadInnerX = 1 << 23,
    ImGuiTableFlags_ScrollX = 1 << 24,
    ImGuiTableFlags_ScrollY = 1 << 25,
    ImGuiTableFlags_SortMulti = 1 << 26,
    ImGuiTableFlags_SortTristate = 1 << 27,
    ImGuiTableFlags_HighlightHoveredColumn = 1 << 28,
    ImGuiTableFlags_SizingMask_ = ImGuiTableFlags_SizingFixedFit | ImGuiTableFlags_SizingFixedSame | ImGuiTableFlags_SizingStretchProp | ImGuiTableFlags_SizingStretchSame,
}ImGuiTableFlags_;
typedef enum {
    ImGuiTableColumnFlags_None = 0,
    ImGuiTableColumnFlags_Disabled = 1 << 0,
    ImGuiTableColumnFlags_DefaultHide = 1 << 1,
    ImGuiTableColumnFlags_DefaultSort = 1 << 2,
    ImGuiTableColumnFlags_WidthStretch = 1 << 3,
    ImGuiTableColumnFlags_WidthFixed = 1 << 4,
    ImGuiTableColumnFlags_NoResize = 1 << 5,
    ImGuiTableColumnFlags_NoReorder = 1 << 6,
    ImGuiTableColumnFlags_NoHide = 1 << 7,
    ImGuiTableColumnFlags_NoClip = 1 << 8,
    ImGuiTableColumnFlags_NoSort = 1 << 9,
    ImGuiTableColumnFlags_NoSortAscending = 1 << 10,
    ImGuiTableColumnFlags_NoSortDescending = 1 << 11,
    ImGuiTableColumnFlags_NoHeaderLabel = 1 << 12,
    ImGuiTableColumnFlags_NoHeaderWidth = 1 << 13,
    ImGuiTableColumnFlags_PreferSortAscending = 1 << 14,
    ImGuiTableColumnFlags_PreferSortDescending = 1 << 15,
    ImGuiTableColumnFlags_IndentEnable = 1 << 16,
    ImGuiTableColumnFlags_IndentDisable = 1 << 17,
    ImGuiTableColumnFlags_AngledHeader = 1 << 18,
    ImGuiTableColumnFlags_IsEnabled = 1 << 24,
    ImGuiTableColumnFlags_IsVisible = 1 << 25,
    ImGuiTableColumnFlags_IsSorted = 1 << 26,
    ImGuiTableColumnFlags_IsHovered = 1 << 27,
    ImGuiTableColumnFlags_WidthMask_ = ImGuiTableColumnFlags_WidthStretch | ImGuiTableColumnFlags_WidthFixed,
    ImGuiTableColumnFlags_IndentMask_ = ImGuiTableColumnFlags_IndentEnable | ImGuiTableColumnFlags_IndentDisable,
    ImGuiTableColumnFlags_StatusMask_ = ImGuiTableColumnFlags_IsEnabled | ImGuiTableColumnFlags_IsVisible | ImGuiTableColumnFlags_IsSorted | ImGuiTableColumnFlags_IsHovered,
    ImGuiTableColumnFlags_NoDirectResize_ = 1 << 30,
}ImGuiTableColumnFlags_;
typedef enum {
    ImGuiTableRowFlags_None = 0,
    ImGuiTableRowFlags_Headers = 1 << 0,
}ImGuiTableRowFlags_;
typedef enum {
    ImGuiTableBgTarget_None = 0,
    ImGuiTableBgTarget_RowBg0 = 1,
    ImGuiTableBgTarget_RowBg1 = 2,
    ImGuiTableBgTarget_CellBg = 3,
}ImGuiTableBgTarget_;
struct ImGuiTableSortSpecs
{
    const ImGuiTableColumnSortSpecs* Specs;
    int SpecsCount;
    bool SpecsDirty;
};
struct ImGuiTableColumnSortSpecs
{
    ImGuiID ColumnUserID;
    ImS16 ColumnIndex;
    ImS16 SortOrder;
    ImGuiSortDirection SortDirection;
};
struct ImGuiStyle
{
    float Alpha;
    float DisabledAlpha;
    ImVec2 WindowPadding;
    float WindowRounding;
    float WindowBorderSize;
    ImVec2 WindowMinSize;
    ImVec2 WindowTitleAlign;
    ImGuiDir WindowMenuButtonPosition;
    float ChildRounding;
    float ChildBorderSize;
    float PopupRounding;
    float PopupBorderSize;
    ImVec2 FramePadding;
    float FrameRounding;
    float FrameBorderSize;
    ImVec2 ItemSpacing;
    ImVec2 ItemInnerSpacing;
    ImVec2 CellPadding;
    ImVec2 TouchExtraPadding;
    float IndentSpacing;
    float ColumnsMinSpacing;
    float ScrollbarSize;
    float ScrollbarRounding;
    float GrabMinSize;
    float GrabRounding;
    float LogSliderDeadzone;
    float TabRounding;
    float TabBorderSize;
    float TabMinWidthForCloseButton;
    float TabBarBorderSize;
    float TabBarOverlineSize;
    float TableAngledHeadersAngle;
    ImVec2 TableAngledHeadersTextAlign;
    ImGuiDir ColorButtonPosition;
    ImVec2 ButtonTextAlign;
    ImVec2 SelectableTextAlign;
    float SeparatorTextBorderSize;
    ImVec2 SeparatorTextAlign;
    ImVec2 SeparatorTextPadding;
    ImVec2 DisplayWindowPadding;
    ImVec2 DisplaySafeAreaPadding;
    float DockingSeparatorSize;
    float MouseCursorScale;
    bool AntiAliasedLines;
    bool AntiAliasedLinesUseTex;
    bool AntiAliasedFill;
    float CurveTessellationTol;
    float CircleTessellationMaxError;
    ImVec4 Colors[ImGuiCol_COUNT];
    float HoverStationaryDelay;
    float HoverDelayShort;
    float HoverDelayNormal;
    ImGuiHoveredFlags HoverFlagsForTooltipMouse;
    ImGuiHoveredFlags HoverFlagsForTooltipNav;
};
struct ImGuiKeyData
{
    bool Down;
    float DownDuration;
    float DownDurationPrev;
    float AnalogValue;
};
typedef struct ImVector_ImWchar {int Size;int Capacity;ImWchar* Data;} ImVector_ImWchar;
struct ImGuiIO
{
    ImGuiConfigFlags ConfigFlags;
    ImGuiBackendFlags BackendFlags;
    ImVec2 DisplaySize;
    float DeltaTime;
    float IniSavingRate;
    const char* IniFilename;
    const char* LogFilename;
    void* UserData;
    ImFontAtlas*Fonts;
    float FontGlobalScale;
    bool FontAllowUserScaling;
    ImFont* FontDefault;
    ImVec2 DisplayFramebufferScale;
    bool ConfigNavSwapGamepadButtons;
    bool ConfigNavMoveSetMousePos;
    bool ConfigNavCaptureKeyboard;
    bool ConfigNavEscapeClearFocusItem;
    bool ConfigNavEscapeClearFocusWindow;
    bool ConfigNavCursorVisibleAuto;
    bool ConfigNavCursorVisibleAlways;
    bool ConfigDockingNoSplit;
    bool ConfigDockingWithShift;
    bool ConfigDockingAlwaysTabBar;
    bool ConfigDockingTransparentPayload;
    bool ConfigViewportsNoAutoMerge;
    bool ConfigViewportsNoTaskBarIcon;
    bool ConfigViewportsNoDecoration;
    bool ConfigViewportsNoDefaultParent;
    bool MouseDrawCursor;
    bool ConfigMacOSXBehaviors;
    bool ConfigInputTrickleEventQueue;
    bool ConfigInputTextCursorBlink;
    bool ConfigInputTextEnterKeepActive;
    bool ConfigDragClickToInputText;
    bool ConfigWindowsResizeFromEdges;
    bool ConfigWindowsMoveFromTitleBarOnly;
    bool ConfigScrollbarScrollByPage;
    float ConfigMemoryCompactTimer;
    float MouseDoubleClickTime;
    float MouseDoubleClickMaxDist;
    float MouseDragThreshold;
    float KeyRepeatDelay;
    float KeyRepeatRate;
    bool ConfigErrorRecovery;
    bool ConfigErrorRecoveryEnableAssert;
    bool ConfigErrorRecoveryEnableDebugLog;
    bool ConfigErrorRecoveryEnableTooltip;
    bool ConfigDebugIsDebuggerPresent;
    bool ConfigDebugHighlightIdConflicts;
    bool ConfigDebugBeginReturnValueOnce;
    bool ConfigDebugBeginReturnValueLoop;
    bool ConfigDebugIgnoreFocusLoss;
    bool ConfigDebugIniSettings;
    const char* BackendPlatformName;
    const char* BackendRendererName;
    void* BackendPlatformUserData;
    void* BackendRendererUserData;
    void* BackendLanguageUserData;
    bool WantCaptureMouse;
    bool WantCaptureKeyboard;
    bool WantTextInput;
    bool WantSetMousePos;
    bool WantSaveIniSettings;
    bool NavActive;
    bool NavVisible;
    float Framerate;
    int MetricsRenderVertices;
    int MetricsRenderIndices;
    int MetricsRenderWindows;
    int MetricsActiveWindows;
    ImVec2 MouseDelta;
    ImGuiContext* Ctx;
    ImVec2 MousePos;
    bool MouseDown[5];
    float MouseWheel;
    float MouseWheelH;
    ImGuiMouseSource MouseSource;
    ImGuiID MouseHoveredViewport;
    bool KeyCtrl;
    bool KeyShift;
    bool KeyAlt;
    bool KeySuper;
    ImGuiKeyChord KeyMods;
    ImGuiKeyData KeysData[ImGuiKey_KeysData_SIZE];
    bool WantCaptureMouseUnlessPopupClose;
    ImVec2 MousePosPrev;
    ImVec2 MouseClickedPos[5];
    double MouseClickedTime[5];
    bool MouseClicked[5];
    bool MouseDoubleClicked[5];
    ImU16 MouseClickedCount[5];
    ImU16 MouseClickedLastCount[5];
    bool MouseReleased[5];
    bool MouseDownOwned[5];
    bool MouseDownOwnedUnlessPopupClose[5];
    bool MouseWheelRequestAxisSwap;
    bool MouseCtrlLeftAsRightClick;
    float MouseDownDuration[5];
    float MouseDownDurationPrev[5];
    ImVec2 MouseDragMaxDistanceAbs[5];
    float MouseDragMaxDistanceSqr[5];
    float PenPressure;
    bool AppFocusLost;
    bool AppAcceptingEvents;
    ImS8 BackendUsingLegacyKeyArrays;
    bool BackendUsingLegacyNavInputArray;
    ImWchar16 InputQueueSurrogate;
    ImVector_ImWchar InputQueueCharacters;
};
struct ImGuiInputTextCallbackData
{
    ImGuiContext* Ctx;
    ImGuiInputTextFlags EventFlag;
    ImGuiInputTextFlags Flags;
    void* UserData;
    ImWchar EventChar;
    ImGuiKey EventKey;
    char* Buf;
    int BufTextLen;
    int BufSize;
    bool BufDirty;
    int CursorPos;
    int SelectionStart;
    int SelectionEnd;
};
struct ImGuiSizeCallbackData
{
    void* UserData;
    ImVec2 Pos;
    ImVec2 CurrentSize;
    ImVec2 DesiredSize;
};
struct ImGuiWindowClass
{
    ImGuiID ClassId;
    ImGuiID ParentViewportId;
    ImGuiID FocusRouteParentWindowId;
    ImGuiViewportFlags ViewportFlagsOverrideSet;
    ImGuiViewportFlags ViewportFlagsOverrideClear;
    ImGuiTabItemFlags TabItemFlagsOverrideSet;
    ImGuiDockNodeFlags DockNodeFlagsOverrideSet;
    bool DockingAlwaysTabBar;
    bool DockingAllowUnclassed;
};
struct ImGuiPayload
{
    void* Data;
    int DataSize;
    ImGuiID SourceId;
    ImGuiID SourceParentId;
    int DataFrameCount;
    char DataType[32 + 1];
    bool Preview;
    bool Delivery;
};
struct ImGuiOnceUponAFrame
{
     int RefFrame;
};
struct ImGuiTextRange
{
        const char* b;
        const char* e;
};
typedef struct ImGuiTextRange ImGuiTextRange;
typedef struct ImVector_ImGuiTextRange {int Size;int Capacity;ImGuiTextRange* Data;} ImVector_ImGuiTextRange;
struct ImGuiTextFilter
{
    char InputBuf[256];
    ImVector_ImGuiTextRange Filters;
    int CountGrep;
};
typedef struct ImGuiTextRange ImGuiTextRange;
typedef struct ImVector_char {int Size;int Capacity;char* Data;} ImVector_char;
struct ImGuiTextBuffer
{
    ImVector_char Buf;
};
struct ImGuiStoragePair
{
    ImGuiID key;
    union { int val_i; float val_f; void* val_p; };
};
typedef struct ImVector_ImGuiStoragePair {int Size;int Capacity;ImGuiStoragePair* Data;} ImVector_ImGuiStoragePair;
struct ImGuiStorage
{
    ImVector_ImGuiStoragePair Data;
};
struct ImGuiListClipper
{
    ImGuiContext* Ctx;
    int DisplayStart;
    int DisplayEnd;
    int ItemsCount;
    float ItemsHeight;
    float StartPosY;
    double StartSeekOffsetY;
    void* TempData;
};
struct ImColor
{
    ImVec4 Value;
};
typedef enum {
    ImGuiMultiSelectFlags_None = 0,
    ImGuiMultiSelectFlags_SingleSelect = 1 << 0,
    ImGuiMultiSelectFlags_NoSelectAll = 1 << 1,
    ImGuiMultiSelectFlags_NoRangeSelect = 1 << 2,
    ImGuiMultiSelectFlags_NoAutoSelect = 1 << 3,
    ImGuiMultiSelectFlags_NoAutoClear = 1 << 4,
    ImGuiMultiSelectFlags_NoAutoClearOnReselect = 1 << 5,
    ImGuiMultiSelectFlags_BoxSelect1d = 1 << 6,
    ImGuiMultiSelectFlags_BoxSelect2d = 1 << 7,
    ImGuiMultiSelectFlags_BoxSelectNoScroll = 1 << 8,
    ImGuiMultiSelectFlags_ClearOnEscape = 1 << 9,
    ImGuiMultiSelectFlags_ClearOnClickVoid = 1 << 10,
    ImGuiMultiSelectFlags_ScopeWindow = 1 << 11,
    ImGuiMultiSelectFlags_ScopeRect = 1 << 12,
    ImGuiMultiSelectFlags_SelectOnClick = 1 << 13,
    ImGuiMultiSelectFlags_SelectOnClickRelease = 1 << 14,
    ImGuiMultiSelectFlags_NavWrapX = 1 << 16,
}ImGuiMultiSelectFlags_;
typedef struct ImVector_ImGuiSelectionRequest {int Size;int Capacity;ImGuiSelectionRequest* Data;} ImVector_ImGuiSelectionRequest;
struct ImGuiMultiSelectIO
{
    ImVector_ImGuiSelectionRequest Requests;
    ImGuiSelectionUserData RangeSrcItem;
    ImGuiSelectionUserData NavIdItem;
    bool NavIdSelected;
    bool RangeSrcReset;
    int ItemsCount;
};
typedef enum {
    ImGuiSelectionRequestType_None = 0,
    ImGuiSelectionRequestType_SetAll,
    ImGuiSelectionRequestType_SetRange,
}ImGuiSelectionRequestType;
struct ImGuiSelectionRequest
{
    ImGuiSelectionRequestType Type;
    bool Selected;
    ImS8 RangeDirection;
    ImGuiSelectionUserData RangeFirstItem;
    ImGuiSelectionUserData RangeLastItem;
};
struct ImGuiSelectionBasicStorage
{
    int Size;
    bool PreserveOrder;
    void* UserData;
    ImGuiID (*AdapterIndexToStorageId)(ImGuiSelectionBasicStorage* self, int idx);
    int _SelectionOrder;
    ImGuiStorage _Storage;
};
struct ImGuiSelectionExternalStorage
{
    void* UserData;
    void (*AdapterSetItemSelected)(ImGuiSelectionExternalStorage* self, int idx, bool selected);
};
typedef void (*ImDrawCallback)(const ImDrawList* parent_list, const ImDrawCmd* cmd);
struct ImDrawCmd
{
    ImVec4 ClipRect;
    ImTextureID TextureId;
    unsigned int VtxOffset;
    unsigned int IdxOffset;
    unsigned int ElemCount;
    ImDrawCallback UserCallback;
    void* UserCallbackData;
    int UserCallbackDataSize;
    int UserCallbackDataOffset;
};
struct ImDrawVert
{
    ImVec2 pos;
    ImVec2 uv;
    ImU32 col;
};
typedef struct ImDrawCmdHeader ImDrawCmdHeader;
struct ImDrawCmdHeader
{
    ImVec4 ClipRect;
    ImTextureID TextureId;
    unsigned int VtxOffset;
};
typedef struct ImVector_ImDrawCmd {int Size;int Capacity;ImDrawCmd* Data;} ImVector_ImDrawCmd;
typedef struct ImVector_ImDrawIdx {int Size;int Capacity;ImDrawIdx* Data;} ImVector_ImDrawIdx;
struct ImDrawChannel
{
    ImVector_ImDrawCmd _CmdBuffer;
    ImVector_ImDrawIdx _IdxBuffer;
};
typedef struct ImVector_ImDrawChannel {int Size;int Capacity;ImDrawChannel* Data;} ImVector_ImDrawChannel;
struct ImDrawListSplitter
{
    int _Current;
    int _Count;
    ImVector_ImDrawChannel _Channels;
};
typedef enum {
    ImDrawFlags_None = 0,
    ImDrawFlags_Closed = 1 << 0,
    ImDrawFlags_RoundCornersTopLeft = 1 << 4,
    ImDrawFlags_RoundCornersTopRight = 1 << 5,
    ImDrawFlags_RoundCornersBottomLeft = 1 << 6,
    ImDrawFlags_RoundCornersBottomRight = 1 << 7,
    ImDrawFlags_RoundCornersNone = 1 << 8,
    ImDrawFlags_RoundCornersTop = ImDrawFlags_RoundCornersTopLeft | ImDrawFlags_RoundCornersTopRight,
    ImDrawFlags_RoundCornersBottom = ImDrawFlags_RoundCornersBottomLeft | ImDrawFlags_RoundCornersBottomRight,
    ImDrawFlags_RoundCornersLeft = ImDrawFlags_RoundCornersBottomLeft | ImDrawFlags_RoundCornersTopLeft,
    ImDrawFlags_RoundCornersRight = ImDrawFlags_RoundCornersBottomRight | ImDrawFlags_RoundCornersTopRight,
    ImDrawFlags_RoundCornersAll = ImDrawFlags_RoundCornersTopLeft | ImDrawFlags_RoundCornersTopRight | ImDrawFlags_RoundCornersBottomLeft | ImDrawFlags_RoundCornersBottomRight,
    ImDrawFlags_RoundCornersDefault_ = ImDrawFlags_RoundCornersAll,
    ImDrawFlags_RoundCornersMask_ = ImDrawFlags_RoundCornersAll | ImDrawFlags_RoundCornersNone,
}ImDrawFlags_;
typedef enum {
    ImDrawListFlags_None = 0,
    ImDrawListFlags_AntiAliasedLines = 1 << 0,
    ImDrawListFlags_AntiAliasedLinesUseTex = 1 << 1,
    ImDrawListFlags_AntiAliasedFill = 1 << 2,
    ImDrawListFlags_AllowVtxOffset = 1 << 3,
}ImDrawListFlags_;
typedef struct ImVector_ImDrawVert {int Size;int Capacity;ImDrawVert* Data;} ImVector_ImDrawVert;
typedef struct ImVector_ImVec2 {int Size;int Capacity;ImVec2* Data;} ImVector_ImVec2;
typedef struct ImVector_ImVec4 {int Size;int Capacity;ImVec4* Data;} ImVector_ImVec4;
typedef struct ImVector_ImTextureID {int Size;int Capacity;ImTextureID* Data;} ImVector_ImTextureID;
typedef struct ImVector_ImU8 {int Size;int Capacity;ImU8* Data;} ImVector_ImU8;
struct ImDrawList
{
    ImVector_ImDrawCmd CmdBuffer;
    ImVector_ImDrawIdx IdxBuffer;
    ImVector_ImDrawVert VtxBuffer;
    ImDrawListFlags Flags;
    unsigned int _VtxCurrentIdx;
    ImDrawListSharedData* _Data;
    ImDrawVert* _VtxWritePtr;
    ImDrawIdx* _IdxWritePtr;
    ImVector_ImVec2 _Path;
    ImDrawCmdHeader _CmdHeader;
    ImDrawListSplitter _Splitter;
    ImVector_ImVec4 _ClipRectStack;
    ImVector_ImTextureID _TextureIdStack;
    ImVector_ImU8 _CallbacksDataBuf;
    float _FringeScale;
    const char* _OwnerName;
};
typedef struct ImVector_ImDrawListPtr {int Size;int Capacity;ImDrawList** Data;} ImVector_ImDrawListPtr;
struct ImDrawData
{
    bool Valid;
    int CmdListsCount;
    int TotalIdxCount;
    int TotalVtxCount;
    ImVector_ImDrawListPtr CmdLists;
    ImVec2 DisplayPos;
    ImVec2 DisplaySize;
    ImVec2 FramebufferScale;
    ImGuiViewport* OwnerViewport;
};
struct ImFontConfig
{
    void* FontData;
    int FontDataSize;
    bool FontDataOwnedByAtlas;
    int FontNo;
    float SizePixels;
    int OversampleH;
    int OversampleV;
    bool PixelSnapH;
    ImVec2 GlyphExtraSpacing;
    ImVec2 GlyphOffset;
    const ImWchar* GlyphRanges;
    float GlyphMinAdvanceX;
    float GlyphMaxAdvanceX;
    bool MergeMode;
    unsigned int FontBuilderFlags;
    float RasterizerMultiply;
    float RasterizerDensity;
    ImWchar EllipsisChar;
    char Name[40];
    ImFont* DstFont;
};
struct ImFontGlyph
{
    unsigned int Colored : 1;
    unsigned int Visible : 1;
    unsigned int Codepoint : 30;
    float AdvanceX;
    float X0, Y0, X1, Y1;
    float U0, V0, U1, V1;
};
typedef struct ImVector_ImU32 {int Size;int Capacity;ImU32* Data;} ImVector_ImU32;
struct ImFontGlyphRangesBuilder
{
    ImVector_ImU32 UsedChars;
};
typedef struct ImFontAtlasCustomRect ImFontAtlasCustomRect;
struct ImFontAtlasCustomRect
{
    unsigned short Width, Height;
    unsigned short X, Y;
    unsigned int GlyphID;
    float GlyphAdvanceX;
    ImVec2 GlyphOffset;
    ImFont* Font;
};
typedef enum {
    ImFontAtlasFlags_None = 0,
    ImFontAtlasFlags_NoPowerOfTwoHeight = 1 << 0,
    ImFontAtlasFlags_NoMouseCursors = 1 << 1,
    ImFontAtlasFlags_NoBakedLines = 1 << 2,
}ImFontAtlasFlags_;
typedef struct ImVector_ImFontPtr {int Size;int Capacity;ImFont** Data;} ImVector_ImFontPtr;
typedef struct ImVector_ImFontAtlasCustomRect {int Size;int Capacity;ImFontAtlasCustomRect* Data;} ImVector_ImFontAtlasCustomRect;
typedef struct ImVector_ImFontConfig {int Size;int Capacity;ImFontConfig* Data;} ImVector_ImFontConfig;
struct ImFontAtlas
{
    ImFontAtlasFlags Flags;
    ImTextureID TexID;
    int TexDesiredWidth;
    int TexGlyphPadding;
    bool Locked;
    void* UserData;
    bool TexReady;
    bool TexPixelsUseColors;
    unsigned char* TexPixelsAlpha8;
    unsigned int* TexPixelsRGBA32;
    int TexWidth;
    int TexHeight;
    ImVec2 TexUvScale;
    ImVec2 TexUvWhitePixel;
    ImVector_ImFontPtr Fonts;
    ImVector_ImFontAtlasCustomRect CustomRects;
    ImVector_ImFontConfig ConfigData;
    ImVec4 TexUvLines[(63) + 1];
    const ImFontBuilderIO* FontBuilderIO;
    unsigned int FontBuilderFlags;
    int PackIdMouseCursors;
    int PackIdLines;
};
typedef struct ImVector_float {int Size;int Capacity;float* Data;} ImVector_float;
typedef struct ImVector_ImFontGlyph {int Size;int Capacity;ImFontGlyph* Data;} ImVector_ImFontGlyph;
struct ImFont
{
    ImVector_float IndexAdvanceX;
    float FallbackAdvanceX;
    float FontSize;
    ImVector_ImWchar IndexLookup;
    ImVector_ImFontGlyph Glyphs;
    const ImFontGlyph* FallbackGlyph;
    ImFontAtlas* ContainerAtlas;
    const ImFontConfig* ConfigData;
    short ConfigDataCount;
    ImWchar FallbackChar;
    ImWchar EllipsisChar;
    short EllipsisCharCount;
    float EllipsisWidth;
    float EllipsisCharStep;
    bool DirtyLookupTables;
    float Scale;
    float Ascent, Descent;
    int MetricsTotalSurface;
    ImU8 Used4kPagesMap[(0xFFFF +1)/4096/8];
};
typedef enum {
    ImGuiViewportFlags_None = 0,
    ImGuiViewportFlags_IsPlatformWindow = 1 << 0,
    ImGuiViewportFlags_IsPlatformMonitor = 1 << 1,
    ImGuiViewportFlags_OwnedByApp = 1 << 2,
    ImGuiViewportFlags_NoDecoration = 1 << 3,
    ImGuiViewportFlags_NoTaskBarIcon = 1 << 4,
    ImGuiViewportFlags_NoFocusOnAppearing = 1 << 5,
    ImGuiViewportFlags_NoFocusOnClick = 1 << 6,
    ImGuiViewportFlags_NoInputs = 1 << 7,
    ImGuiViewportFlags_NoRendererClear = 1 << 8,
    ImGuiViewportFlags_NoAutoMerge = 1 << 9,
    ImGuiViewportFlags_TopMost = 1 << 10,
    ImGuiViewportFlags_CanHostOtherWindows = 1 << 11,
    ImGuiViewportFlags_IsMinimized = 1 << 12,
    ImGuiViewportFlags_IsFocused = 1 << 13,
}ImGuiViewportFlags_;
struct ImGuiViewport
{
    ImGuiID ID;
    ImGuiViewportFlags Flags;
    ImVec2 Pos;
    ImVec2 Size;
    ImVec2 WorkPos;
    ImVec2 WorkSize;
    float DpiScale;
    ImGuiID ParentViewportId;
    ImDrawData* DrawData;
    void* RendererUserData;
    void* PlatformUserData;
    void* PlatformHandle;
    void* PlatformHandleRaw;
    bool PlatformWindowCreated;
    bool PlatformRequestMove;
    bool PlatformRequestResize;
    bool PlatformRequestClose;
};
typedef struct ImVector_ImGuiPlatformMonitor {int Size;int Capacity;ImGuiPlatformMonitor* Data;} ImVector_ImGuiPlatformMonitor;
typedef struct ImVector_ImGuiViewportPtr {int Size;int Capacity;ImGuiViewport** Data;} ImVector_ImGuiViewportPtr;
struct ImGuiPlatformIO
{
    const char* (*Platform_GetClipboardTextFn)(ImGuiContext* ctx);
    void (*Platform_SetClipboardTextFn)(ImGuiContext* ctx, const char* text);
    void* Platform_ClipboardUserData;
    bool (*Platform_OpenInShellFn)(ImGuiContext* ctx, const char* path);
    void* Platform_OpenInShellUserData;
    void (*Platform_SetImeDataFn)(ImGuiContext* ctx, ImGuiViewport* viewport, ImGuiPlatformImeData* data);
    void* Platform_ImeUserData;
    ImWchar Platform_LocaleDecimalPoint;
    void* Renderer_RenderState;
    void (*Platform_CreateWindow)(ImGuiViewport* vp);
    void (*Platform_DestroyWindow)(ImGuiViewport* vp);
    void (*Platform_ShowWindow)(ImGuiViewport* vp);
    void (*Platform_SetWindowPos)(ImGuiViewport* vp, ImVec2 pos);
    ImVec2 (*Platform_GetWindowPos)(ImGuiViewport* vp);
    void (*Platform_SetWindowSize)(ImGuiViewport* vp, ImVec2 size);
    ImVec2 (*Platform_GetWindowSize)(ImGuiViewport* vp);
    void (*Platform_SetWindowFocus)(ImGuiViewport* vp);
    bool (*Platform_GetWindowFocus)(ImGuiViewport* vp);
    bool (*Platform_GetWindowMinimized)(ImGuiViewport* vp);
    void (*Platform_SetWindowTitle)(ImGuiViewport* vp, const char* str);
    void (*Platform_SetWindowAlpha)(ImGuiViewport* vp, float alpha);
    void (*Platform_UpdateWindow)(ImGuiViewport* vp);
    void (*Platform_RenderWindow)(ImGuiViewport* vp, void* render_arg);
    void (*Platform_SwapBuffers)(ImGuiViewport* vp, void* render_arg);
    float (*Platform_GetWindowDpiScale)(ImGuiViewport* vp);
    void (*Platform_OnChangedViewport)(ImGuiViewport* vp);
    ImVec4 (*Platform_GetWindowWorkAreaInsets)(ImGuiViewport* vp);
    int (*Platform_CreateVkSurface)(ImGuiViewport* vp, ImU64 vk_inst, const void* vk_allocators, ImU64* out_vk_surface);
    void (*Renderer_CreateWindow)(ImGuiViewport* vp);
    void (*Renderer_DestroyWindow)(ImGuiViewport* vp);
    void (*Renderer_SetWindowSize)(ImGuiViewport* vp, ImVec2 size);
    void (*Renderer_RenderWindow)(ImGuiViewport* vp, void* render_arg);
    void (*Renderer_SwapBuffers)(ImGuiViewport* vp, void* render_arg);
    ImVector_ImGuiPlatformMonitor Monitors;
    ImVector_ImGuiViewportPtr Viewports;
};
struct ImGuiPlatformMonitor
{
    ImVec2 MainPos, MainSize;
    ImVec2 WorkPos, WorkSize;
    float DpiScale;
    void* PlatformHandle;
};
struct ImGuiPlatformImeData
{
    bool WantVisible;
    ImVec2 InputPos;
    float InputLineHeight;
};
struct ImBitVector;
struct ImRect;
struct ImDrawDataBuilder;
struct ImDrawListSharedData;
struct ImGuiBoxSelectState;
struct ImGuiColorMod;
struct ImGuiContext;
struct ImGuiContextHook;
struct ImGuiDataVarInfo;
struct ImGuiDataTypeInfo;
struct ImGuiDockContext;
struct ImGuiDockRequest;
struct ImGuiDockNode;
struct ImGuiDockNodeSettings;
struct ImGuiErrorRecoveryState;
struct ImGuiGroupData;
struct ImGuiInputTextState;
struct ImGuiInputTextDeactivateData;
struct ImGuiLastItemData;
struct ImGuiLocEntry;
struct ImGuiMenuColumns;
struct ImGuiMultiSelectState;
struct ImGuiMultiSelectTempData;
struct ImGuiNavItemData;
struct ImGuiMetricsConfig;
struct ImGuiNextWindowData;
struct ImGuiNextItemData;
struct ImGuiOldColumnData;
struct ImGuiOldColumns;
struct ImGuiPopupData;
struct ImGuiSettingsHandler;
struct ImGuiStyleMod;
struct ImGuiTabBar;
struct ImGuiTabItem;
struct ImGuiTable;
struct ImGuiTableHeaderData;
struct ImGuiTableColumn;
struct ImGuiTableInstanceData;
struct ImGuiTableTempData;
struct ImGuiTableSettings;
struct ImGuiTableColumnsSettings;
struct ImGuiTreeNodeStackData;
struct ImGuiTypingSelectState;
struct ImGuiTypingSelectRequest;
struct ImGuiWindow;
struct ImGuiWindowDockStyle;
struct ImGuiWindowTempData;
struct ImGuiWindowSettings;
typedef int ImGuiDataAuthority;
typedef int ImGuiLayoutType;
typedef int ImGuiActivateFlags;
typedef int ImGuiDebugLogFlags;
typedef int ImGuiFocusRequestFlags;
typedef int ImGuiItemStatusFlags;
typedef int ImGuiOldColumnFlags;
typedef int ImGuiNavRenderCursorFlags;
typedef int ImGuiNavMoveFlags;
typedef int ImGuiNextItemDataFlags;
typedef int ImGuiNextWindowDataFlags;
typedef int ImGuiScrollFlags;
typedef int ImGuiSeparatorFlags;
typedef int ImGuiTextFlags;
typedef int ImGuiTooltipFlags;
typedef int ImGuiTypingSelectFlags;
typedef int ImGuiWindowRefreshFlags;
extern ImGuiContext* GImGui;
typedef FILE* ImFileHandle;
typedef struct ImVec1 ImVec1;
struct ImVec1
{
    float x;
};
typedef struct ImVec2ih ImVec2ih;
struct ImVec2ih
{
    short x, y;
};
struct ImRect
{
    ImVec2 Min;
    ImVec2 Max;
};
typedef ImU32* ImBitArrayPtr;
struct ImBitVector
{
    ImVector_ImU32 Storage;
};
typedef int ImPoolIdx;
typedef struct ImGuiTextIndex ImGuiTextIndex;
typedef struct ImVector_int {int Size;int Capacity;int* Data;} ImVector_int;
struct ImGuiTextIndex
{
    ImVector_int LineOffsets;
    int EndOffset;
};
struct ImDrawListSharedData
{
    ImVec2 TexUvWhitePixel;
    ImFont* Font;
    float FontSize;
    float FontScale;
    float CurveTessellationTol;
    float CircleSegmentMaxError;
    ImVec4 ClipRectFullscreen;
    ImDrawListFlags InitialFlags;
    ImVector_ImVec2 TempBuffer;
    ImVec2 ArcFastVtx[48];
    float ArcFastRadiusCutoff;
    ImU8 CircleSegmentCounts[64];
    const ImVec4* TexUvLines;
};
struct ImDrawDataBuilder
{
    ImVector_ImDrawListPtr* Layers[2];
    ImVector_ImDrawListPtr LayerData1;
};
struct ImGuiDataVarInfo
{
    ImGuiDataType Type;
    ImU32 Count;
    ImU32 Offset;
};
typedef struct ImGuiDataTypeStorage ImGuiDataTypeStorage;
struct ImGuiDataTypeStorage
{
    ImU8 Data[8];
};
struct ImGuiDataTypeInfo
{
    size_t Size;
    const char* Name;
    const char* PrintFmt;
    const char* ScanFmt;
};
typedef enum {
    ImGuiDataType_String = ImGuiDataType_COUNT + 1,
    ImGuiDataType_Pointer,
    ImGuiDataType_ID,
}ImGuiDataTypePrivate_;
typedef enum {
    ImGuiItemFlags_Disabled = 1 << 10,
    ImGuiItemFlags_ReadOnly = 1 << 11,
    ImGuiItemFlags_MixedValue = 1 << 12,
    ImGuiItemFlags_NoWindowHoverableCheck = 1 << 13,
    ImGuiItemFlags_AllowOverlap = 1 << 14,
    ImGuiItemFlags_NoNavDisableMouseHover = 1 << 15,
    ImGuiItemFlags_NoMarkEdited = 1 << 16,
    ImGuiItemFlags_Inputable = 1 << 20,
    ImGuiItemFlags_HasSelectionUserData = 1 << 21,
    ImGuiItemFlags_IsMultiSelect = 1 << 22,
    ImGuiItemFlags_Default_ = ImGuiItemFlags_AutoClosePopups,
}ImGuiItemFlagsPrivate_;
typedef enum {
    ImGuiItemStatusFlags_None = 0,
    ImGuiItemStatusFlags_HoveredRect = 1 << 0,
    ImGuiItemStatusFlags_HasDisplayRect = 1 << 1,
    ImGuiItemStatusFlags_Edited = 1 << 2,
    ImGuiItemStatusFlags_ToggledSelection = 1 << 3,
    ImGuiItemStatusFlags_ToggledOpen = 1 << 4,
    ImGuiItemStatusFlags_HasDeactivated = 1 << 5,
    ImGuiItemStatusFlags_Deactivated = 1 << 6,
    ImGuiItemStatusFlags_HoveredWindow = 1 << 7,
    ImGuiItemStatusFlags_Visible = 1 << 8,
    ImGuiItemStatusFlags_HasClipRect = 1 << 9,
    ImGuiItemStatusFlags_HasShortcut = 1 << 10,
}ImGuiItemStatusFlags_;
typedef enum {
    ImGuiHoveredFlags_DelayMask_ = ImGuiHoveredFlags_DelayNone | ImGuiHoveredFlags_DelayShort | ImGuiHoveredFlags_DelayNormal | ImGuiHoveredFlags_NoSharedDelay,
    ImGuiHoveredFlags_AllowedMaskForIsWindowHovered = ImGuiHoveredFlags_ChildWindows | ImGuiHoveredFlags_RootWindow | ImGuiHoveredFlags_AnyWindow | ImGuiHoveredFlags_NoPopupHierarchy | ImGuiHoveredFlags_DockHierarchy | ImGuiHoveredFlags_AllowWhenBlockedByPopup | ImGuiHoveredFlags_AllowWhenBlockedByActiveItem | ImGuiHoveredFlags_ForTooltip | ImGuiHoveredFlags_Stationary,
    ImGuiHoveredFlags_AllowedMaskForIsItemHovered = ImGuiHoveredFlags_AllowWhenBlockedByPopup | ImGuiHoveredFlags_AllowWhenBlockedByActiveItem | ImGuiHoveredFlags_AllowWhenOverlapped | ImGuiHoveredFlags_AllowWhenDisabled | ImGuiHoveredFlags_NoNavOverride | ImGuiHoveredFlags_ForTooltip | ImGuiHoveredFlags_Stationary | ImGuiHoveredFlags_DelayMask_,
}ImGuiHoveredFlagsPrivate_;
typedef enum {
    ImGuiInputTextFlags_Multiline = 1 << 26,
    ImGuiInputTextFlags_MergedItem = 1 << 27,
    ImGuiInputTextFlags_LocalizeDecimalPoint= 1 << 28,
}ImGuiInputTextFlagsPrivate_;
typedef enum {
    ImGuiButtonFlags_PressedOnClick = 1 << 4,
    ImGuiButtonFlags_PressedOnClickRelease = 1 << 5,
    ImGuiButtonFlags_PressedOnClickReleaseAnywhere = 1 << 6,
    ImGuiButtonFlags_PressedOnRelease = 1 << 7,
    ImGuiButtonFlags_PressedOnDoubleClick = 1 << 8,
    ImGuiButtonFlags_PressedOnDragDropHold = 1 << 9,
    ImGuiButtonFlags_FlattenChildren = 1 << 11,
    ImGuiButtonFlags_AllowOverlap = 1 << 12,
    ImGuiButtonFlags_AlignTextBaseLine = 1 << 15,
    ImGuiButtonFlags_NoKeyModsAllowed = 1 << 16,
    ImGuiButtonFlags_NoHoldingActiveId = 1 << 17,
    ImGuiButtonFlags_NoNavFocus = 1 << 18,
    ImGuiButtonFlags_NoHoveredOnFocus = 1 << 19,
    ImGuiButtonFlags_NoSetKeyOwner = 1 << 20,
    ImGuiButtonFlags_NoTestKeyOwner = 1 << 21,
    ImGuiButtonFlags_PressedOnMask_ = ImGuiButtonFlags_PressedOnClick | ImGuiButtonFlags_PressedOnClickRelease | ImGuiButtonFlags_PressedOnClickReleaseAnywhere | ImGuiButtonFlags_PressedOnRelease | ImGuiButtonFlags_PressedOnDoubleClick | ImGuiButtonFlags_PressedOnDragDropHold,
    ImGuiButtonFlags_PressedOnDefault_ = ImGuiButtonFlags_PressedOnClickRelease,
}ImGuiButtonFlagsPrivate_;
typedef enum {
    ImGuiComboFlags_CustomPreview = 1 << 20,
}ImGuiComboFlagsPrivate_;
typedef enum {
    ImGuiSliderFlags_Vertical = 1 << 20,
    ImGuiSliderFlags_ReadOnly = 1 << 21,
}ImGuiSliderFlagsPrivate_;
typedef enum {
    ImGuiSelectableFlags_NoHoldingActiveID = 1 << 20,
    ImGuiSelectableFlags_SelectOnNav = 1 << 21,
    ImGuiSelectableFlags_SelectOnClick = 1 << 22,
    ImGuiSelectableFlags_SelectOnRelease = 1 << 23,
    ImGuiSelectableFlags_SpanAvailWidth = 1 << 24,
    ImGuiSelectableFlags_SetNavIdOnHover = 1 << 25,
    ImGuiSelectableFlags_NoPadWithHalfSpacing = 1 << 26,
    ImGuiSelectableFlags_NoSetKeyOwner = 1 << 27,
}ImGuiSelectableFlagsPrivate_;
typedef enum {
    ImGuiTreeNodeFlags_ClipLabelForTrailingButton = 1 << 28,
    ImGuiTreeNodeFlags_UpsideDownArrow = 1 << 29,
    ImGuiTreeNodeFlags_OpenOnMask_ = ImGuiTreeNodeFlags_OpenOnDoubleClick | ImGuiTreeNodeFlags_OpenOnArrow,
}ImGuiTreeNodeFlagsPrivate_;
typedef enum {
    ImGuiSeparatorFlags_None = 0,
    ImGuiSeparatorFlags_Horizontal = 1 << 0,
    ImGuiSeparatorFlags_Vertical = 1 << 1,
    ImGuiSeparatorFlags_SpanAllColumns = 1 << 2,
}ImGuiSeparatorFlags_;
typedef enum {
    ImGuiFocusRequestFlags_None = 0,
    ImGuiFocusRequestFlags_RestoreFocusedChild = 1 << 0,
    ImGuiFocusRequestFlags_UnlessBelowModal = 1 << 1,
}ImGuiFocusRequestFlags_;
typedef enum {
    ImGuiTextFlags_None = 0,
    ImGuiTextFlags_NoWidthForLargeClippedText = 1 << 0,
}ImGuiTextFlags_;
typedef enum {
    ImGuiTooltipFlags_None = 0,
    ImGuiTooltipFlags_OverridePrevious = 1 << 1,
}ImGuiTooltipFlags_;
typedef enum {
    ImGuiLayoutType_Horizontal = 0,
    ImGuiLayoutType_Vertical = 1
}ImGuiLayoutType_;
typedef enum {
    ImGuiLogType_None = 0,
    ImGuiLogType_TTY,
    ImGuiLogType_File,
    ImGuiLogType_Buffer,
    ImGuiLogType_Clipboard,
}ImGuiLogType;
typedef enum {
    ImGuiAxis_None = -1,
    ImGuiAxis_X = 0,
    ImGuiAxis_Y = 1
}ImGuiAxis;
typedef enum {
    ImGuiPlotType_Lines,
    ImGuiPlotType_Histogram,
}ImGuiPlotType;
struct ImGuiColorMod
{
    ImGuiCol Col;
    ImVec4 BackupValue;
};
struct ImGuiStyleMod
{
    ImGuiStyleVar VarIdx;
    union { int BackupInt[2]; float BackupFloat[2]; };
};
typedef struct ImGuiComboPreviewData ImGuiComboPreviewData;
struct ImGuiComboPreviewData
{
    ImRect PreviewRect;
    ImVec2 BackupCursorPos;
    ImVec2 BackupCursorMaxPos;
    ImVec2 BackupCursorPosPrevLine;
    float BackupPrevLineTextBaseOffset;
    ImGuiLayoutType BackupLayout;
};
struct ImGuiGroupData
{
    ImGuiID WindowID;
    ImVec2 BackupCursorPos;
    ImVec2 BackupCursorMaxPos;
    ImVec2 BackupCursorPosPrevLine;
    ImVec1 BackupIndent;
    ImVec1 BackupGroupOffset;
    ImVec2 BackupCurrLineSize;
    float BackupCurrLineTextBaseOffset;
    ImGuiID BackupActiveIdIsAlive;
    bool BackupActiveIdPreviousFrameIsAlive;
    bool BackupHoveredIdIsAlive;
    bool BackupIsSameLine;
    bool EmitItem;
};
struct ImGuiMenuColumns
{
    ImU32 TotalWidth;
    ImU32 NextTotalWidth;
    ImU16 Spacing;
    ImU16 OffsetIcon;
    ImU16 OffsetLabel;
    ImU16 OffsetShortcut;
    ImU16 OffsetMark;
    ImU16 Widths[4];
};
typedef struct ImGuiInputTextDeactivatedState ImGuiInputTextDeactivatedState;
struct ImGuiInputTextDeactivatedState
{
    ImGuiID ID;
    ImVector_char TextA;
}; struct STB_TexteditState;
typedef STB_TexteditState ImStbTexteditState;
struct ImGuiInputTextState
{
    ImGuiContext* Ctx;
    ImStbTexteditState* Stb;
    ImGuiID ID;
    int CurLenA;
    ImVector_char TextA;
    ImVector_char InitialTextA;
    ImVector_char CallbackTextBackup;
    int BufCapacityA;
    ImVec2 Scroll;
    float CursorAnim;
    bool CursorFollow;
    bool SelectedAllMouseLock;
    bool Edited;
    ImGuiInputTextFlags Flags;
    bool ReloadUserBuf;
    int ReloadSelectionStart;
    int ReloadSelectionEnd;
};
typedef enum {
    ImGuiWindowRefreshFlags_None = 0,
    ImGuiWindowRefreshFlags_TryToAvoidRefresh = 1 << 0,
    ImGuiWindowRefreshFlags_RefreshOnHover = 1 << 1,
    ImGuiWindowRefreshFlags_RefreshOnFocus = 1 << 2,
}ImGuiWindowRefreshFlags_;
typedef enum {
    ImGuiNextWindowDataFlags_None = 0,
    ImGuiNextWindowDataFlags_HasPos = 1 << 0,
    ImGuiNextWindowDataFlags_HasSize = 1 << 1,
    ImGuiNextWindowDataFlags_HasContentSize = 1 << 2,
    ImGuiNextWindowDataFlags_HasCollapsed = 1 << 3,
    ImGuiNextWindowDataFlags_HasSizeConstraint = 1 << 4,
    ImGuiNextWindowDataFlags_HasFocus = 1 << 5,
    ImGuiNextWindowDataFlags_HasBgAlpha = 1 << 6,
    ImGuiNextWindowDataFlags_HasScroll = 1 << 7,
    ImGuiNextWindowDataFlags_HasChildFlags = 1 << 8,
    ImGuiNextWindowDataFlags_HasRefreshPolicy = 1 << 9,
    ImGuiNextWindowDataFlags_HasViewport = 1 << 10,
    ImGuiNextWindowDataFlags_HasDock = 1 << 11,
    ImGuiNextWindowDataFlags_HasWindowClass = 1 << 12,
}ImGuiNextWindowDataFlags_;
struct ImGuiNextWindowData
{
    ImGuiNextWindowDataFlags Flags;
    ImGuiCond PosCond;
    ImGuiCond SizeCond;
    ImGuiCond CollapsedCond;
    ImGuiCond DockCond;
    ImVec2 PosVal;
    ImVec2 PosPivotVal;
    ImVec2 SizeVal;
    ImVec2 ContentSizeVal;
    ImVec2 ScrollVal;
    ImGuiChildFlags ChildFlags;
    bool PosUndock;
    bool CollapsedVal;
    ImRect SizeConstraintRect;
    ImGuiSizeCallback SizeCallback;
    void* SizeCallbackUserData;
    float BgAlphaVal;
    ImGuiID ViewportId;
    ImGuiID DockId;
    ImGuiWindowClass WindowClass;
    ImVec2 MenuBarOffsetMinVal;
    ImGuiWindowRefreshFlags RefreshFlagsVal;
};
typedef enum {
    ImGuiNextItemDataFlags_None = 0,
    ImGuiNextItemDataFlags_HasWidth = 1 << 0,
    ImGuiNextItemDataFlags_HasOpen = 1 << 1,
    ImGuiNextItemDataFlags_HasShortcut = 1 << 2,
    ImGuiNextItemDataFlags_HasRefVal = 1 << 3,
    ImGuiNextItemDataFlags_HasStorageID = 1 << 4,
}ImGuiNextItemDataFlags_;
struct ImGuiNextItemData
{
    ImGuiNextItemDataFlags HasFlags;
    ImGuiItemFlags ItemFlags;
    ImGuiID FocusScopeId;
    ImGuiSelectionUserData SelectionUserData;
    float Width;
    ImGuiKeyChord Shortcut;
    ImGuiInputFlags ShortcutFlags;
    bool OpenVal;
    ImU8 OpenCond;
    ImGuiDataTypeStorage RefVal;
    ImGuiID StorageId;
};
struct ImGuiLastItemData
{
    ImGuiID ID;
    ImGuiItemFlags ItemFlags;
    ImGuiItemStatusFlags StatusFlags;
    ImRect Rect;
    ImRect NavRect;
    ImRect DisplayRect;
    ImRect ClipRect;
    ImGuiKeyChord Shortcut;
};
struct ImGuiTreeNodeStackData
{
    ImGuiID ID;
    ImGuiTreeNodeFlags TreeFlags;
    ImGuiItemFlags ItemFlags;
    ImRect NavRect;
};
struct ImGuiErrorRecoveryState
{
    short SizeOfWindowStack;
    short SizeOfIDStack;
    short SizeOfTreeStack;
    short SizeOfColorStack;
    short SizeOfStyleVarStack;
    short SizeOfFontStack;
    short SizeOfFocusScopeStack;
    short SizeOfGroupStack;
    short SizeOfItemFlagsStack;
    short SizeOfBeginPopupStack;
    short SizeOfDisabledStack;
};
typedef struct ImGuiWindowStackData ImGuiWindowStackData;
struct ImGuiWindowStackData
{
    ImGuiWindow* Window;
    ImGuiLastItemData ParentLastItemDataBackup;
    ImGuiErrorRecoveryState StackSizesInBegin;
    bool DisabledOverrideReenable;
};
typedef struct ImGuiShrinkWidthItem ImGuiShrinkWidthItem;
struct ImGuiShrinkWidthItem
{
    int Index;
    float Width;
    float InitialWidth;
};
typedef struct ImGuiPtrOrIndex ImGuiPtrOrIndex;
struct ImGuiPtrOrIndex
{
    void* Ptr;
    int Index;
};
typedef enum {
    ImGuiPopupPositionPolicy_Default,
    ImGuiPopupPositionPolicy_ComboBox,
    ImGuiPopupPositionPolicy_Tooltip,
}ImGuiPopupPositionPolicy;
struct ImGuiPopupData
{
    ImGuiID PopupId;
    ImGuiWindow* Window;
    ImGuiWindow* RestoreNavWindow;
    int ParentNavLayer;
    int OpenFrameCount;
    ImGuiID OpenParentId;
    ImVec2 OpenPopupPos;
    ImVec2 OpenMousePos;
};
typedef struct ImBitArray_ImGuiKey_NamedKey_COUNT__lessImGuiKey_NamedKey_BEGIN {ImU32 Storage[(ImGuiKey_NamedKey_COUNT+31)>>5];} ImBitArray_ImGuiKey_NamedKey_COUNT__lessImGuiKey_NamedKey_BEGIN;
typedef ImBitArray_ImGuiKey_NamedKey_COUNT__lessImGuiKey_NamedKey_BEGIN ImBitArrayForNamedKeys;
typedef enum {
    ImGuiInputEventType_None = 0,
    ImGuiInputEventType_MousePos,
    ImGuiInputEventType_MouseWheel,
    ImGuiInputEventType_MouseButton,
    ImGuiInputEventType_MouseViewport,
    ImGuiInputEventType_Key,
    ImGuiInputEventType_Text,
    ImGuiInputEventType_Focus,
    ImGuiInputEventType_COUNT
}ImGuiInputEventType;
typedef enum {
    ImGuiInputSource_None = 0,
    ImGuiInputSource_Mouse,
    ImGuiInputSource_Keyboard,
    ImGuiInputSource_Gamepad,
    ImGuiInputSource_COUNT
}ImGuiInputSource;
typedef struct ImGuiInputEventMousePos ImGuiInputEventMousePos;
struct ImGuiInputEventMousePos
{ float PosX, PosY; ImGuiMouseSource MouseSource;
};
typedef struct ImGuiInputEventMouseWheel ImGuiInputEventMouseWheel;
struct ImGuiInputEventMouseWheel
{ float WheelX, WheelY; ImGuiMouseSource MouseSource;
};
typedef struct ImGuiInputEventMouseButton ImGuiInputEventMouseButton;
struct ImGuiInputEventMouseButton
{ int Button; bool Down; ImGuiMouseSource MouseSource;
};
typedef struct ImGuiInputEventMouseViewport ImGuiInputEventMouseViewport;
struct ImGuiInputEventMouseViewport
{ ImGuiID HoveredViewportID;
};
typedef struct ImGuiInputEventKey ImGuiInputEventKey;
struct ImGuiInputEventKey
{ ImGuiKey Key; bool Down; float AnalogValue;
};
typedef struct ImGuiInputEventText ImGuiInputEventText;
struct ImGuiInputEventText
{ unsigned int Char;
};
typedef struct ImGuiInputEventAppFocused ImGuiInputEventAppFocused;
struct ImGuiInputEventAppFocused
{ bool Focused;
};
typedef struct ImGuiInputEvent ImGuiInputEvent;
struct ImGuiInputEvent
{
    ImGuiInputEventType Type;
    ImGuiInputSource Source;
    ImU32 EventId;
    union
    {
        ImGuiInputEventMousePos MousePos;
        ImGuiInputEventMouseWheel MouseWheel;
        ImGuiInputEventMouseButton MouseButton;
        ImGuiInputEventMouseViewport MouseViewport;
        ImGuiInputEventKey Key;
        ImGuiInputEventText Text;
        ImGuiInputEventAppFocused AppFocused;
    };
    bool AddedByTestEngine;
};
typedef ImS16 ImGuiKeyRoutingIndex;
typedef struct ImGuiKeyRoutingData ImGuiKeyRoutingData;
struct ImGuiKeyRoutingData
{
    ImGuiKeyRoutingIndex NextEntryIndex;
    ImU16 Mods;
    ImU8 RoutingCurrScore;
    ImU8 RoutingNextScore;
    ImGuiID RoutingCurr;
    ImGuiID RoutingNext;
};
typedef struct ImGuiKeyRoutingTable ImGuiKeyRoutingTable;
typedef struct ImVector_ImGuiKeyRoutingData {int Size;int Capacity;ImGuiKeyRoutingData* Data;} ImVector_ImGuiKeyRoutingData;
struct ImGuiKeyRoutingTable
{
    ImGuiKeyRoutingIndex Index[ImGuiKey_NamedKey_COUNT];
    ImVector_ImGuiKeyRoutingData Entries;
    ImVector_ImGuiKeyRoutingData EntriesNext;
};
typedef struct ImGuiKeyOwnerData ImGuiKeyOwnerData;
struct ImGuiKeyOwnerData
{
    ImGuiID OwnerCurr;
    ImGuiID OwnerNext;
    bool LockThisFrame;
    bool LockUntilRelease;
};
typedef enum {
    ImGuiInputFlags_RepeatRateDefault = 1 << 1,
    ImGuiInputFlags_RepeatRateNavMove = 1 << 2,
    ImGuiInputFlags_RepeatRateNavTweak = 1 << 3,
    ImGuiInputFlags_RepeatUntilRelease = 1 << 4,
    ImGuiInputFlags_RepeatUntilKeyModsChange = 1 << 5,
    ImGuiInputFlags_RepeatUntilKeyModsChangeFromNone = 1 << 6,
    ImGuiInputFlags_RepeatUntilOtherKeyPress = 1 << 7,
    ImGuiInputFlags_LockThisFrame = 1 << 20,
    ImGuiInputFlags_LockUntilRelease = 1 << 21,
    ImGuiInputFlags_CondHovered = 1 << 22,
    ImGuiInputFlags_CondActive = 1 << 23,
    ImGuiInputFlags_CondDefault_ = ImGuiInputFlags_CondHovered | ImGuiInputFlags_CondActive,
    ImGuiInputFlags_RepeatRateMask_ = ImGuiInputFlags_RepeatRateDefault | ImGuiInputFlags_RepeatRateNavMove | ImGuiInputFlags_RepeatRateNavTweak,
    ImGuiInputFlags_RepeatUntilMask_ = ImGuiInputFlags_RepeatUntilRelease | ImGuiInputFlags_RepeatUntilKeyModsChange | ImGuiInputFlags_RepeatUntilKeyModsChangeFromNone | ImGuiInputFlags_RepeatUntilOtherKeyPress,
    ImGuiInputFlags_RepeatMask_ = ImGuiInputFlags_Repeat | ImGuiInputFlags_RepeatRateMask_ | ImGuiInputFlags_RepeatUntilMask_,
    ImGuiInputFlags_CondMask_ = ImGuiInputFlags_CondHovered | ImGuiInputFlags_CondActive,
    ImGuiInputFlags_RouteTypeMask_ = ImGuiInputFlags_RouteActive | ImGuiInputFlags_RouteFocused | ImGuiInputFlags_RouteGlobal | ImGuiInputFlags_RouteAlways,
    ImGuiInputFlags_RouteOptionsMask_ = ImGuiInputFlags_RouteOverFocused | ImGuiInputFlags_RouteOverActive | ImGuiInputFlags_RouteUnlessBgFocused | ImGuiInputFlags_RouteFromRootWindow,
    ImGuiInputFlags_SupportedByIsKeyPressed = ImGuiInputFlags_RepeatMask_,
    ImGuiInputFlags_SupportedByIsMouseClicked = ImGuiInputFlags_Repeat,
    ImGuiInputFlags_SupportedByShortcut = ImGuiInputFlags_RepeatMask_ | ImGuiInputFlags_RouteTypeMask_ | ImGuiInputFlags_RouteOptionsMask_,
    ImGuiInputFlags_SupportedBySetNextItemShortcut = ImGuiInputFlags_RepeatMask_ | ImGuiInputFlags_RouteTypeMask_ | ImGuiInputFlags_RouteOptionsMask_ | ImGuiInputFlags_Tooltip,
    ImGuiInputFlags_SupportedBySetKeyOwner = ImGuiInputFlags_LockThisFrame | ImGuiInputFlags_LockUntilRelease,
    ImGuiInputFlags_SupportedBySetItemKeyOwner = ImGuiInputFlags_SupportedBySetKeyOwner | ImGuiInputFlags_CondMask_,
}ImGuiInputFlagsPrivate_;
typedef struct ImGuiListClipperRange ImGuiListClipperRange;
struct ImGuiListClipperRange
{
    int Min;
    int Max;
    bool PosToIndexConvert;
    ImS8 PosToIndexOffsetMin;
    ImS8 PosToIndexOffsetMax;
};
typedef struct ImGuiListClipperData ImGuiListClipperData;
typedef struct ImVector_ImGuiListClipperRange {int Size;int Capacity;ImGuiListClipperRange* Data;} ImVector_ImGuiListClipperRange;
struct ImGuiListClipperData
{
    ImGuiListClipper* ListClipper;
    float LossynessOffset;
    int StepNo;
    int ItemsFrozen;
    ImVector_ImGuiListClipperRange Ranges;
};
typedef enum {
    ImGuiActivateFlags_None = 0,
    ImGuiActivateFlags_PreferInput = 1 << 0,
    ImGuiActivateFlags_PreferTweak = 1 << 1,
    ImGuiActivateFlags_TryToPreserveState = 1 << 2,
    ImGuiActivateFlags_FromTabbing = 1 << 3,
    ImGuiActivateFlags_FromShortcut = 1 << 4,
}ImGuiActivateFlags_;
typedef enum {
    ImGuiScrollFlags_None = 0,
    ImGuiScrollFlags_KeepVisibleEdgeX = 1 << 0,
    ImGuiScrollFlags_KeepVisibleEdgeY = 1 << 1,
    ImGuiScrollFlags_KeepVisibleCenterX = 1 << 2,
    ImGuiScrollFlags_KeepVisibleCenterY = 1 << 3,
    ImGuiScrollFlags_AlwaysCenterX = 1 << 4,
    ImGuiScrollFlags_AlwaysCenterY = 1 << 5,
    ImGuiScrollFlags_NoScrollParent = 1 << 6,
    ImGuiScrollFlags_MaskX_ = ImGuiScrollFlags_KeepVisibleEdgeX | ImGuiScrollFlags_KeepVisibleCenterX | ImGuiScrollFlags_AlwaysCenterX,
    ImGuiScrollFlags_MaskY_ = ImGuiScrollFlags_KeepVisibleEdgeY | ImGuiScrollFlags_KeepVisibleCenterY | ImGuiScrollFlags_AlwaysCenterY,
}ImGuiScrollFlags_;
typedef enum {
    ImGuiNavRenderCursorFlags_None = 0,
    ImGuiNavRenderCursorFlags_Compact = 1 << 1,
    ImGuiNavRenderCursorFlags_AlwaysDraw = 1 << 2,
    ImGuiNavRenderCursorFlags_NoRounding = 1 << 3,
}ImGuiNavRenderCursorFlags_;
typedef enum {
    ImGuiNavMoveFlags_None = 0,
    ImGuiNavMoveFlags_LoopX = 1 << 0,
    ImGuiNavMoveFlags_LoopY = 1 << 1,
    ImGuiNavMoveFlags_WrapX = 1 << 2,
    ImGuiNavMoveFlags_WrapY = 1 << 3,
    ImGuiNavMoveFlags_WrapMask_ = ImGuiNavMoveFlags_LoopX | ImGuiNavMoveFlags_LoopY | ImGuiNavMoveFlags_WrapX | ImGuiNavMoveFlags_WrapY,
    ImGuiNavMoveFlags_AllowCurrentNavId = 1 << 4,
    ImGuiNavMoveFlags_AlsoScoreVisibleSet = 1 << 5,
    ImGuiNavMoveFlags_ScrollToEdgeY = 1 << 6,
    ImGuiNavMoveFlags_Forwarded = 1 << 7,
    ImGuiNavMoveFlags_DebugNoResult = 1 << 8,
    ImGuiNavMoveFlags_FocusApi = 1 << 9,
    ImGuiNavMoveFlags_IsTabbing = 1 << 10,
    ImGuiNavMoveFlags_IsPageMove = 1 << 11,
    ImGuiNavMoveFlags_Activate = 1 << 12,
    ImGuiNavMoveFlags_NoSelect = 1 << 13,
    ImGuiNavMoveFlags_NoSetNavCursorVisible = 1 << 14,
    ImGuiNavMoveFlags_NoClearActiveId = 1 << 15,
}ImGuiNavMoveFlags_;
typedef enum {
    ImGuiNavLayer_Main = 0,
    ImGuiNavLayer_Menu = 1,
    ImGuiNavLayer_COUNT
}ImGuiNavLayer;
struct ImGuiNavItemData
{
    ImGuiWindow* Window;
    ImGuiID ID;
    ImGuiID FocusScopeId;
    ImRect RectRel;
    ImGuiItemFlags ItemFlags;
    float DistBox;
    float DistCenter;
    float DistAxial;
    ImGuiSelectionUserData SelectionUserData;
};
typedef struct ImGuiFocusScopeData ImGuiFocusScopeData;
struct ImGuiFocusScopeData
{
    ImGuiID ID;
    ImGuiID WindowID;
};
typedef enum {
    ImGuiTypingSelectFlags_None = 0,
    ImGuiTypingSelectFlags_AllowBackspace = 1 << 0,
    ImGuiTypingSelectFlags_AllowSingleCharMode = 1 << 1,
}ImGuiTypingSelectFlags_;
struct ImGuiTypingSelectRequest
{
    ImGuiTypingSelectFlags Flags;
    int SearchBufferLen;
    const char* SearchBuffer;
    bool SelectRequest;
    bool SingleCharMode;
    ImS8 SingleCharSize;
};
struct ImGuiTypingSelectState
{
    ImGuiTypingSelectRequest Request;
    char SearchBuffer[64];
    ImGuiID FocusScope;
    int LastRequestFrame;
    float LastRequestTime;
    bool SingleCharModeLock;
};
typedef enum {
    ImGuiOldColumnFlags_None = 0,
    ImGuiOldColumnFlags_NoBorder = 1 << 0,
    ImGuiOldColumnFlags_NoResize = 1 << 1,
    ImGuiOldColumnFlags_NoPreserveWidths = 1 << 2,
    ImGuiOldColumnFlags_NoForceWithinWindow = 1 << 3,
    ImGuiOldColumnFlags_GrowParentContentsSize = 1 << 4,
}ImGuiOldColumnFlags_;
struct ImGuiOldColumnData
{
    float OffsetNorm;
    float OffsetNormBeforeResize;
    ImGuiOldColumnFlags Flags;
    ImRect ClipRect;
};
typedef struct ImVector_ImGuiOldColumnData {int Size;int Capacity;ImGuiOldColumnData* Data;} ImVector_ImGuiOldColumnData;
struct ImGuiOldColumns
{
    ImGuiID ID;
    ImGuiOldColumnFlags Flags;
    bool IsFirstFrame;
    bool IsBeingResized;
    int Current;
    int Count;
    float OffMinX, OffMaxX;
    float LineMinY, LineMaxY;
    float HostCursorPosY;
    float HostCursorMaxPosX;
    ImRect HostInitialClipRect;
    ImRect HostBackupClipRect;
    ImRect HostBackupParentWorkRect;
    ImVector_ImGuiOldColumnData Columns;
    ImDrawListSplitter Splitter;
};
struct ImGuiBoxSelectState
{
    ImGuiID ID;
    bool IsActive;
    bool IsStarting;
    bool IsStartedFromVoid;
    bool IsStartedSetNavIdOnce;
    bool RequestClear;
    ImGuiKeyChord KeyMods : 16;
    ImVec2 StartPosRel;
    ImVec2 EndPosRel;
    ImVec2 ScrollAccum;
    ImGuiWindow* Window;
    bool UnclipMode;
    ImRect UnclipRect;
    ImRect BoxSelectRectPrev;
    ImRect BoxSelectRectCurr;
};
struct ImGuiMultiSelectTempData
{
    ImGuiMultiSelectIO IO;
    ImGuiMultiSelectState* Storage;
    ImGuiID FocusScopeId;
    ImGuiMultiSelectFlags Flags;
    ImVec2 ScopeRectMin;
    ImVec2 BackupCursorMaxPos;
    ImGuiSelectionUserData LastSubmittedItem;
    ImGuiID BoxSelectId;
    ImGuiKeyChord KeyMods;
    ImS8 LoopRequestSetAll;
    bool IsEndIO;
    bool IsFocused;
    bool IsKeyboardSetRange;
    bool NavIdPassedBy;
    bool RangeSrcPassedBy;
    bool RangeDstPassedBy;
};
struct ImGuiMultiSelectState
{
    ImGuiWindow* Window;
    ImGuiID ID;
    int LastFrameActive;
    int LastSelectionSize;
    ImS8 RangeSelected;
    ImS8 NavIdSelected;
    ImGuiSelectionUserData RangeSrcItem;
    ImGuiSelectionUserData NavIdItem;
};
typedef enum {
    ImGuiDockNodeFlags_DockSpace = 1 << 10,
    ImGuiDockNodeFlags_CentralNode = 1 << 11,
    ImGuiDockNodeFlags_NoTabBar = 1 << 12,
    ImGuiDockNodeFlags_HiddenTabBar = 1 << 13,
    ImGuiDockNodeFlags_NoWindowMenuButton = 1 << 14,
    ImGuiDockNodeFlags_NoCloseButton = 1 << 15,
    ImGuiDockNodeFlags_NoResizeX = 1 << 16,
    ImGuiDockNodeFlags_NoResizeY = 1 << 17,
    ImGuiDockNodeFlags_DockedWindowsInFocusRoute= 1 << 18,
    ImGuiDockNodeFlags_NoDockingSplitOther = 1 << 19,
    ImGuiDockNodeFlags_NoDockingOverMe = 1 << 20,
    ImGuiDockNodeFlags_NoDockingOverOther = 1 << 21,
    ImGuiDockNodeFlags_NoDockingOverEmpty = 1 << 22,
    ImGuiDockNodeFlags_NoDocking = ImGuiDockNodeFlags_NoDockingOverMe | ImGuiDockNodeFlags_NoDockingOverOther | ImGuiDockNodeFlags_NoDockingOverEmpty | ImGuiDockNodeFlags_NoDockingSplit | ImGuiDockNodeFlags_NoDockingSplitOther,
    ImGuiDockNodeFlags_SharedFlagsInheritMask_ = ~0,
    ImGuiDockNodeFlags_NoResizeFlagsMask_ = (int)ImGuiDockNodeFlags_NoResize | ImGuiDockNodeFlags_NoResizeX | ImGuiDockNodeFlags_NoResizeY,
    ImGuiDockNodeFlags_LocalFlagsTransferMask_ = (int)ImGuiDockNodeFlags_NoDockingSplit | ImGuiDockNodeFlags_NoResizeFlagsMask_ | (int)ImGuiDockNodeFlags_AutoHideTabBar | ImGuiDockNodeFlags_CentralNode | ImGuiDockNodeFlags_NoTabBar | ImGuiDockNodeFlags_HiddenTabBar | ImGuiDockNodeFlags_NoWindowMenuButton | ImGuiDockNodeFlags_NoCloseButton,
    ImGuiDockNodeFlags_SavedFlagsMask_ = ImGuiDockNodeFlags_NoResizeFlagsMask_ | ImGuiDockNodeFlags_DockSpace | ImGuiDockNodeFlags_CentralNode | ImGuiDockNodeFlags_NoTabBar | ImGuiDockNodeFlags_HiddenTabBar | ImGuiDockNodeFlags_NoWindowMenuButton | ImGuiDockNodeFlags_NoCloseButton,
}ImGuiDockNodeFlagsPrivate_;
typedef enum {
    ImGuiDataAuthority_Auto,
    ImGuiDataAuthority_DockNode,
    ImGuiDataAuthority_Window,
}ImGuiDataAuthority_;
typedef enum {
    ImGuiDockNodeState_Unknown,
    ImGuiDockNodeState_HostWindowHiddenBecauseSingleWindow,
    ImGuiDockNodeState_HostWindowHiddenBecauseWindowsAreResizing,
    ImGuiDockNodeState_HostWindowVisible,
}ImGuiDockNodeState;
typedef struct ImVector_ImGuiWindowPtr {int Size;int Capacity;ImGuiWindow** Data;} ImVector_ImGuiWindowPtr;
struct ImGuiDockNode
{
    ImGuiID ID;
    ImGuiDockNodeFlags SharedFlags;
    ImGuiDockNodeFlags LocalFlags;
    ImGuiDockNodeFlags LocalFlagsInWindows;
    ImGuiDockNodeFlags MergedFlags;
    ImGuiDockNodeState State;
    ImGuiDockNode* ParentNode;
    ImGuiDockNode* ChildNodes[2];
    ImVector_ImGuiWindowPtr Windows;
    ImGuiTabBar* TabBar;
    ImVec2 Pos;
    ImVec2 Size;
    ImVec2 SizeRef;
    ImGuiAxis SplitAxis;
    ImGuiWindowClass WindowClass;
    ImU32 LastBgColor;
    ImGuiWindow* HostWindow;
    ImGuiWindow* VisibleWindow;
    ImGuiDockNode* CentralNode;
    ImGuiDockNode* OnlyNodeWithWindows;
    int CountNodeWithWindows;
    int LastFrameAlive;
    int LastFrameActive;
    int LastFrameFocused;
    ImGuiID LastFocusedNodeId;
    ImGuiID SelectedTabId;
    ImGuiID WantCloseTabId;
    ImGuiID RefViewportId;
    ImGuiDataAuthority AuthorityForPos :3;
    ImGuiDataAuthority AuthorityForSize :3;
    ImGuiDataAuthority AuthorityForViewport :3;
    bool IsVisible :1;
    bool IsFocused :1;
    bool IsBgDrawnThisFrame :1;
    bool HasCloseButton :1;
    bool HasWindowMenuButton :1;
    bool HasCentralNodeChild :1;
    bool WantCloseAll :1;
    bool WantLockSizeOnce :1;
    bool WantMouseMove :1;
    bool WantHiddenTabBarUpdate :1;
    bool WantHiddenTabBarToggle :1;
};
typedef enum {
    ImGuiWindowDockStyleCol_Text,
    ImGuiWindowDockStyleCol_TabHovered,
    ImGuiWindowDockStyleCol_TabFocused,
    ImGuiWindowDockStyleCol_TabSelected,
    ImGuiWindowDockStyleCol_TabSelectedOverline,
    ImGuiWindowDockStyleCol_TabDimmed,
    ImGuiWindowDockStyleCol_TabDimmedSelected,
    ImGuiWindowDockStyleCol_TabDimmedSelectedOverline,
    ImGuiWindowDockStyleCol_COUNT
}ImGuiWindowDockStyleCol;
struct ImGuiWindowDockStyle
{
    ImU32 Colors[ImGuiWindowDockStyleCol_COUNT];
};
typedef struct ImVector_ImGuiDockRequest {int Size;int Capacity;ImGuiDockRequest* Data;} ImVector_ImGuiDockRequest;
typedef struct ImVector_ImGuiDockNodeSettings {int Size;int Capacity;ImGuiDockNodeSettings* Data;} ImVector_ImGuiDockNodeSettings;
struct ImGuiDockContext
{
    ImGuiStorage Nodes;
    ImVector_ImGuiDockRequest Requests;
    ImVector_ImGuiDockNodeSettings NodesSettings;
    bool WantFullRebuild;
};
typedef struct ImGuiViewportP ImGuiViewportP;
struct ImGuiViewportP
{
    ImGuiViewport _ImGuiViewport;
    ImGuiWindow* Window;
    int Idx;
    int LastFrameActive;
    int LastFocusedStampCount;
    ImGuiID LastNameHash;
    ImVec2 LastPos;
    ImVec2 LastSize;
    float Alpha;
    float LastAlpha;
    bool LastFocusedHadNavWindow;
    short PlatformMonitor;
    int BgFgDrawListsLastFrame[2];
    ImDrawList* BgFgDrawLists[2];
    ImDrawData DrawDataP;
    ImDrawDataBuilder DrawDataBuilder;
    ImVec2 LastPlatformPos;
    ImVec2 LastPlatformSize;
    ImVec2 LastRendererSize;
    ImVec2 WorkInsetMin;
    ImVec2 WorkInsetMax;
    ImVec2 BuildWorkInsetMin;
    ImVec2 BuildWorkInsetMax;
};
struct ImGuiWindowSettings
{
    ImGuiID ID;
    ImVec2ih Pos;
    ImVec2ih Size;
    ImVec2ih ViewportPos;
    ImGuiID ViewportId;
    ImGuiID DockId;
    ImGuiID ClassId;
    short DockOrder;
    bool Collapsed;
    bool IsChild;
    bool WantApply;
    bool WantDelete;
};
struct ImGuiSettingsHandler
{
    const char* TypeName;
    ImGuiID TypeHash;
    void (*ClearAllFn)(ImGuiContext* ctx, ImGuiSettingsHandler* handler);
    void (*ReadInitFn)(ImGuiContext* ctx, ImGuiSettingsHandler* handler);
    void* (*ReadOpenFn)(ImGuiContext* ctx, ImGuiSettingsHandler* handler, const char* name);
    void (*ReadLineFn)(ImGuiContext* ctx, ImGuiSettingsHandler* handler, void* entry, const char* line);
    void (*ApplyAllFn)(ImGuiContext* ctx, ImGuiSettingsHandler* handler);
    void (*WriteAllFn)(ImGuiContext* ctx, ImGuiSettingsHandler* handler, ImGuiTextBuffer* out_buf);
    void* UserData;
};
typedef enum {
ImGuiLocKey_VersionStr=0,
ImGuiLocKey_TableSizeOne=1,
ImGuiLocKey_TableSizeAllFit=2,
ImGuiLocKey_TableSizeAllDefault=3,
ImGuiLocKey_TableResetOrder=4,
ImGuiLocKey_WindowingMainMenuBar=5,
ImGuiLocKey_WindowingPopup=6,
ImGuiLocKey_WindowingUntitled=7,
ImGuiLocKey_OpenLink_s=8,
ImGuiLocKey_CopyLink=9,
ImGuiLocKey_DockingHideTabBar=10,
ImGuiLocKey_DockingHoldShiftToDock=11,
ImGuiLocKey_DockingDragToUndockOrMoveNode=12,
ImGuiLocKey_COUNT=13,
}ImGuiLocKey;
struct ImGuiLocEntry
{
    ImGuiLocKey Key;
    const char* Text;
};
typedef void (*ImGuiErrorCallback)(ImGuiContext* ctx, void* user_data, const char* msg);
typedef enum {
    ImGuiDebugLogFlags_None = 0,
    ImGuiDebugLogFlags_EventError = 1 << 0,
    ImGuiDebugLogFlags_EventActiveId = 1 << 1,
    ImGuiDebugLogFlags_EventFocus = 1 << 2,
    ImGuiDebugLogFlags_EventPopup = 1 << 3,
    ImGuiDebugLogFlags_EventNav = 1 << 4,
    ImGuiDebugLogFlags_EventClipper = 1 << 5,
    ImGuiDebugLogFlags_EventSelection = 1 << 6,
    ImGuiDebugLogFlags_EventIO = 1 << 7,
    ImGuiDebugLogFlags_EventInputRouting = 1 << 8,
    ImGuiDebugLogFlags_EventDocking = 1 << 9,
    ImGuiDebugLogFlags_EventViewport = 1 << 10,
    ImGuiDebugLogFlags_EventMask_ = ImGuiDebugLogFlags_EventError | ImGuiDebugLogFlags_EventActiveId | ImGuiDebugLogFlags_EventFocus | ImGuiDebugLogFlags_EventPopup | ImGuiDebugLogFlags_EventNav | ImGuiDebugLogFlags_EventClipper | ImGuiDebugLogFlags_EventSelection | ImGuiDebugLogFlags_EventIO | ImGuiDebugLogFlags_EventInputRouting | ImGuiDebugLogFlags_EventDocking | ImGuiDebugLogFlags_EventViewport,
    ImGuiDebugLogFlags_OutputToTTY = 1 << 20,
    ImGuiDebugLogFlags_OutputToTestEngine = 1 << 21,
}ImGuiDebugLogFlags_;
typedef struct ImGuiDebugAllocEntry ImGuiDebugAllocEntry;
struct ImGuiDebugAllocEntry
{
    int FrameCount;
    ImS16 AllocCount;
    ImS16 FreeCount;
};
typedef struct ImGuiDebugAllocInfo ImGuiDebugAllocInfo;
struct ImGuiDebugAllocInfo
{
    int TotalAllocCount;
    int TotalFreeCount;
    ImS16 LastEntriesIdx;
    ImGuiDebugAllocEntry LastEntriesBuf[6];
};
struct ImGuiMetricsConfig
{
    bool ShowDebugLog;
    bool ShowIDStackTool;
    bool ShowWindowsRects;
    bool ShowWindowsBeginOrder;
    bool ShowTablesRects;
    bool ShowDrawCmdMesh;
    bool ShowDrawCmdBoundingBoxes;
    bool ShowTextEncodingViewer;
    bool ShowAtlasTintedWithTextColor;
    bool ShowDockingNodes;
    int ShowWindowsRectsType;
    int ShowTablesRectsType;
    int HighlightMonitorIdx;
    ImGuiID HighlightViewportID;
};
typedef struct ImGuiStackLevelInfo ImGuiStackLevelInfo;
struct ImGuiStackLevelInfo
{
    ImGuiID ID;
    ImS8 QueryFrameCount;
    bool QuerySuccess;
    ImGuiDataType DataType : 8;
    char Desc[57];
};
typedef struct ImGuiIDStackTool ImGuiIDStackTool;
typedef struct ImVector_ImGuiStackLevelInfo {int Size;int Capacity;ImGuiStackLevelInfo* Data;} ImVector_ImGuiStackLevelInfo;
struct ImGuiIDStackTool
{
    int LastActiveFrame;
    int StackLevel;
    ImGuiID QueryId;
    ImVector_ImGuiStackLevelInfo Results;
    bool CopyToClipboardOnCtrlC;
    float CopyToClipboardLastTime;
};
typedef void (*ImGuiContextHookCallback)(ImGuiContext* ctx, ImGuiContextHook* hook);
typedef enum { ImGuiContextHookType_NewFramePre, ImGuiContextHookType_NewFramePost, ImGuiContextHookType_EndFramePre, ImGuiContextHookType_EndFramePost, ImGuiContextHookType_RenderPre, ImGuiContextHookType_RenderPost, ImGuiContextHookType_Shutdown, ImGuiContextHookType_PendingRemoval_ }ImGuiContextHookType;
struct ImGuiContextHook
{
    ImGuiID HookId;
    ImGuiContextHookType Type;
    ImGuiID Owner;
    ImGuiContextHookCallback Callback;
    void* UserData;
};
typedef struct ImVector_ImGuiInputEvent {int Size;int Capacity;ImGuiInputEvent* Data;} ImVector_ImGuiInputEvent;
typedef struct ImVector_ImGuiWindowStackData {int Size;int Capacity;ImGuiWindowStackData* Data;} ImVector_ImGuiWindowStackData;
typedef struct ImVector_ImGuiColorMod {int Size;int Capacity;ImGuiColorMod* Data;} ImVector_ImGuiColorMod;
typedef struct ImVector_ImGuiStyleMod {int Size;int Capacity;ImGuiStyleMod* Data;} ImVector_ImGuiStyleMod;
typedef struct ImVector_ImGuiFocusScopeData {int Size;int Capacity;ImGuiFocusScopeData* Data;} ImVector_ImGuiFocusScopeData;
typedef struct ImVector_ImGuiItemFlags {int Size;int Capacity;ImGuiItemFlags* Data;} ImVector_ImGuiItemFlags;
typedef struct ImVector_ImGuiGroupData {int Size;int Capacity;ImGuiGroupData* Data;} ImVector_ImGuiGroupData;
typedef struct ImVector_ImGuiPopupData {int Size;int Capacity;ImGuiPopupData* Data;} ImVector_ImGuiPopupData;
typedef struct ImVector_ImGuiTreeNodeStackData {int Size;int Capacity;ImGuiTreeNodeStackData* Data;} ImVector_ImGuiTreeNodeStackData;
typedef struct ImVector_ImGuiViewportPPtr {int Size;int Capacity;ImGuiViewportP** Data;} ImVector_ImGuiViewportPPtr;
typedef struct ImVector_unsigned_char {int Size;int Capacity;unsigned char* Data;} ImVector_unsigned_char;
typedef struct ImVector_ImGuiListClipperData {int Size;int Capacity;ImGuiListClipperData* Data;} ImVector_ImGuiListClipperData;
typedef struct ImVector_ImGuiTableTempData {int Size;int Capacity;ImGuiTableTempData* Data;} ImVector_ImGuiTableTempData;
typedef struct ImVector_ImGuiTable {int Size;int Capacity;ImGuiTable* Data;} ImVector_ImGuiTable;
typedef struct ImPool_ImGuiTable {ImVector_ImGuiTable Buf;ImGuiStorage Map;ImPoolIdx FreeIdx;ImPoolIdx AliveCount;} ImPool_ImGuiTable;
typedef struct ImVector_ImGuiTabBar {int Size;int Capacity;ImGuiTabBar* Data;} ImVector_ImGuiTabBar;
typedef struct ImPool_ImGuiTabBar {ImVector_ImGuiTabBar Buf;ImGuiStorage Map;ImPoolIdx FreeIdx;ImPoolIdx AliveCount;} ImPool_ImGuiTabBar;
typedef struct ImVector_ImGuiPtrOrIndex {int Size;int Capacity;ImGuiPtrOrIndex* Data;} ImVector_ImGuiPtrOrIndex;
typedef struct ImVector_ImGuiShrinkWidthItem {int Size;int Capacity;ImGuiShrinkWidthItem* Data;} ImVector_ImGuiShrinkWidthItem;
typedef struct ImVector_ImGuiMultiSelectTempData {int Size;int Capacity;ImGuiMultiSelectTempData* Data;} ImVector_ImGuiMultiSelectTempData;
typedef struct ImVector_ImGuiMultiSelectState {int Size;int Capacity;ImGuiMultiSelectState* Data;} ImVector_ImGuiMultiSelectState;
typedef struct ImPool_ImGuiMultiSelectState {ImVector_ImGuiMultiSelectState Buf;ImGuiStorage Map;ImPoolIdx FreeIdx;ImPoolIdx AliveCount;} ImPool_ImGuiMultiSelectState;
typedef struct ImVector_ImGuiID {int Size;int Capacity;ImGuiID* Data;} ImVector_ImGuiID;
typedef struct ImVector_ImGuiSettingsHandler {int Size;int Capacity;ImGuiSettingsHandler* Data;} ImVector_ImGuiSettingsHandler;
typedef struct ImChunkStream_ImGuiWindowSettings {ImVector_char Buf;} ImChunkStream_ImGuiWindowSettings;
typedef struct ImChunkStream_ImGuiTableSettings {ImVector_char Buf;} ImChunkStream_ImGuiTableSettings;
typedef struct ImVector_ImGuiContextHook {int Size;int Capacity;ImGuiContextHook* Data;} ImVector_ImGuiContextHook;
struct ImGuiContext
{
    bool Initialized;
    bool FontAtlasOwnedByContext;
    ImGuiIO IO;
    ImGuiPlatformIO PlatformIO;
    ImGuiStyle Style;
    ImGuiConfigFlags ConfigFlagsCurrFrame;
    ImGuiConfigFlags ConfigFlagsLastFrame;
    ImFont* Font;
    float FontSize;
    float FontBaseSize;
    float FontScale;
    float CurrentDpiScale;
    ImDrawListSharedData DrawListSharedData;
    double Time;
    int FrameCount;
    int FrameCountEnded;
    int FrameCountPlatformEnded;
    int FrameCountRendered;
    bool WithinFrameScope;
    bool WithinFrameScopeWithImplicitWindow;
    bool WithinEndChild;
    bool GcCompactAll;
    bool TestEngineHookItems;
    void* TestEngine;
    char ContextName[16];
    ImVector_ImGuiInputEvent InputEventsQueue;
    ImVector_ImGuiInputEvent InputEventsTrail;
    ImGuiMouseSource InputEventsNextMouseSource;
    ImU32 InputEventsNextEventId;
    ImVector_ImGuiWindowPtr Windows;
    ImVector_ImGuiWindowPtr WindowsFocusOrder;
    ImVector_ImGuiWindowPtr WindowsTempSortBuffer;
    ImVector_ImGuiWindowStackData CurrentWindowStack;
    ImGuiStorage WindowsById;
    int WindowsActiveCount;
    ImVec2 WindowsHoverPadding;
    ImGuiID DebugBreakInWindow;
    ImGuiWindow* CurrentWindow;
    ImGuiWindow* HoveredWindow;
    ImGuiWindow* HoveredWindowUnderMovingWindow;
    ImGuiWindow* HoveredWindowBeforeClear;
    ImGuiWindow* MovingWindow;
    ImGuiWindow* WheelingWindow;
    ImVec2 WheelingWindowRefMousePos;
    int WheelingWindowStartFrame;
    int WheelingWindowScrolledFrame;
    float WheelingWindowReleaseTimer;
    ImVec2 WheelingWindowWheelRemainder;
    ImVec2 WheelingAxisAvg;
    ImGuiID DebugDrawIdConflicts;
    ImGuiID DebugHookIdInfo;
    ImGuiID HoveredId;
    ImGuiID HoveredIdPreviousFrame;
    int HoveredIdPreviousFrameItemCount;
    float HoveredIdTimer;
    float HoveredIdNotActiveTimer;
    bool HoveredIdAllowOverlap;
    bool HoveredIdIsDisabled;
    bool ItemUnclipByLog;
    ImGuiID ActiveId;
    ImGuiID ActiveIdIsAlive;
    float ActiveIdTimer;
    bool ActiveIdIsJustActivated;
    bool ActiveIdAllowOverlap;
    bool ActiveIdNoClearOnFocusLoss;
    bool ActiveIdHasBeenPressedBefore;
    bool ActiveIdHasBeenEditedBefore;
    bool ActiveIdHasBeenEditedThisFrame;
    bool ActiveIdFromShortcut;
    int ActiveIdMouseButton : 8;
    ImVec2 ActiveIdClickOffset;
    ImGuiWindow* ActiveIdWindow;
    ImGuiInputSource ActiveIdSource;
    ImGuiID ActiveIdPreviousFrame;
    bool ActiveIdPreviousFrameIsAlive;
    bool ActiveIdPreviousFrameHasBeenEditedBefore;
    ImGuiWindow* ActiveIdPreviousFrameWindow;
    ImGuiID LastActiveId;
    float LastActiveIdTimer;
    double LastKeyModsChangeTime;
    double LastKeyModsChangeFromNoneTime;
    double LastKeyboardKeyPressTime;
    ImBitArrayForNamedKeys KeysMayBeCharInput;
    ImGuiKeyOwnerData KeysOwnerData[ImGuiKey_NamedKey_COUNT];
    ImGuiKeyRoutingTable KeysRoutingTable;
    ImU32 ActiveIdUsingNavDirMask;
    bool ActiveIdUsingAllKeyboardKeys;
    ImGuiKeyChord DebugBreakInShortcutRouting;
    ImGuiID CurrentFocusScopeId;
    ImGuiItemFlags CurrentItemFlags;
    ImGuiID DebugLocateId;
    ImGuiNextItemData NextItemData;
    ImGuiLastItemData LastItemData;
    ImGuiNextWindowData NextWindowData;
    bool DebugShowGroupRects;
    ImGuiCol DebugFlashStyleColorIdx;
    ImVector_ImGuiColorMod ColorStack;
    ImVector_ImGuiStyleMod StyleVarStack;
    ImVector_ImFontPtr FontStack;
    ImVector_ImGuiFocusScopeData FocusScopeStack;
    ImVector_ImGuiItemFlags ItemFlagsStack;
    ImVector_ImGuiGroupData GroupStack;
    ImVector_ImGuiPopupData OpenPopupStack;
    ImVector_ImGuiPopupData BeginPopupStack;
    ImVector_ImGuiTreeNodeStackData TreeNodeStack;
    ImVector_ImGuiViewportPPtr Viewports;
    ImGuiViewportP* CurrentViewport;
    ImGuiViewportP* MouseViewport;
    ImGuiViewportP* MouseLastHoveredViewport;
    ImGuiID PlatformLastFocusedViewportId;
    ImGuiPlatformMonitor FallbackMonitor;
    ImRect PlatformMonitorsFullWorkRect;
    int ViewportCreatedCount;
    int PlatformWindowsCreatedCount;
    int ViewportFocusedStampCount;
    bool NavCursorVisible;
    bool NavHighlightItemUnderNav;
    bool NavMousePosDirty;
    bool NavIdIsAlive;
    ImGuiID NavId;
    ImGuiWindow* NavWindow;
    ImGuiID NavFocusScopeId;
    ImGuiNavLayer NavLayer;
    ImGuiID NavActivateId;
    ImGuiID NavActivateDownId;
    ImGuiID NavActivatePressedId;
    ImGuiActivateFlags NavActivateFlags;
    ImVector_ImGuiFocusScopeData NavFocusRoute;
    ImGuiID NavHighlightActivatedId;
    float NavHighlightActivatedTimer;
    ImGuiID NavNextActivateId;
    ImGuiActivateFlags NavNextActivateFlags;
    ImGuiInputSource NavInputSource;
    ImGuiSelectionUserData NavLastValidSelectionUserData;
    ImS8 NavCursorHideFrames;
    bool NavAnyRequest;
    bool NavInitRequest;
    bool NavInitRequestFromMove;
    ImGuiNavItemData NavInitResult;
    bool NavMoveSubmitted;
    bool NavMoveScoringItems;
    bool NavMoveForwardToNextFrame;
    ImGuiNavMoveFlags NavMoveFlags;
    ImGuiScrollFlags NavMoveScrollFlags;
    ImGuiKeyChord NavMoveKeyMods;
    ImGuiDir NavMoveDir;
    ImGuiDir NavMoveDirForDebug;
    ImGuiDir NavMoveClipDir;
    ImRect NavScoringRect;
    ImRect NavScoringNoClipRect;
    int NavScoringDebugCount;
    int NavTabbingDir;
    int NavTabbingCounter;
    ImGuiNavItemData NavMoveResultLocal;
    ImGuiNavItemData NavMoveResultLocalVisible;
    ImGuiNavItemData NavMoveResultOther;
    ImGuiNavItemData NavTabbingResultFirst;
    ImGuiID NavJustMovedFromFocusScopeId;
    ImGuiID NavJustMovedToId;
    ImGuiID NavJustMovedToFocusScopeId;
    ImGuiKeyChord NavJustMovedToKeyMods;
    bool NavJustMovedToIsTabbing;
    bool NavJustMovedToHasSelectionData;
    ImGuiKeyChord ConfigNavWindowingKeyNext;
    ImGuiKeyChord ConfigNavWindowingKeyPrev;
    ImGuiWindow* NavWindowingTarget;
    ImGuiWindow* NavWindowingTargetAnim;
    ImGuiWindow* NavWindowingListWindow;
    float NavWindowingTimer;
    float NavWindowingHighlightAlpha;
    bool NavWindowingToggleLayer;
    ImGuiKey NavWindowingToggleKey;
    ImVec2 NavWindowingAccumDeltaPos;
    ImVec2 NavWindowingAccumDeltaSize;
    float DimBgRatio;
    bool DragDropActive;
    bool DragDropWithinSource;
    bool DragDropWithinTarget;
    ImGuiDragDropFlags DragDropSourceFlags;
    int DragDropSourceFrameCount;
    int DragDropMouseButton;
    ImGuiPayload DragDropPayload;
    ImRect DragDropTargetRect;
    ImRect DragDropTargetClipRect;
    ImGuiID DragDropTargetId;
    ImGuiDragDropFlags DragDropAcceptFlags;
    float DragDropAcceptIdCurrRectSurface;
    ImGuiID DragDropAcceptIdCurr;
    ImGuiID DragDropAcceptIdPrev;
    int DragDropAcceptFrameCount;
    ImGuiID DragDropHoldJustPressedId;
    ImVector_unsigned_char DragDropPayloadBufHeap;
    unsigned char DragDropPayloadBufLocal[16];
    int ClipperTempDataStacked;
    ImVector_ImGuiListClipperData ClipperTempData;
    ImGuiTable* CurrentTable;
    ImGuiID DebugBreakInTable;
    int TablesTempDataStacked;
    ImVector_ImGuiTableTempData TablesTempData;
    ImPool_ImGuiTable Tables;
    ImVector_float TablesLastTimeActive;
    ImVector_ImDrawChannel DrawChannelsTempMergeBuffer;
    ImGuiTabBar* CurrentTabBar;
    ImPool_ImGuiTabBar TabBars;
    ImVector_ImGuiPtrOrIndex CurrentTabBarStack;
    ImVector_ImGuiShrinkWidthItem ShrinkWidthBuffer;
    ImGuiBoxSelectState BoxSelectState;
    ImGuiMultiSelectTempData* CurrentMultiSelect;
    int MultiSelectTempDataStacked;
    ImVector_ImGuiMultiSelectTempData MultiSelectTempData;
    ImPool_ImGuiMultiSelectState MultiSelectStorage;
    ImGuiID HoverItemDelayId;
    ImGuiID HoverItemDelayIdPreviousFrame;
    float HoverItemDelayTimer;
    float HoverItemDelayClearTimer;
    ImGuiID HoverItemUnlockedStationaryId;
    ImGuiID HoverWindowUnlockedStationaryId;
    ImGuiMouseCursor MouseCursor;
    float MouseStationaryTimer;
    ImVec2 MouseLastValidPos;
    ImGuiInputTextState InputTextState;
    ImGuiInputTextDeactivatedState InputTextDeactivatedState;
    ImFont InputTextPasswordFont;
    ImGuiID TempInputId;
    ImGuiDataTypeStorage DataTypeZeroValue;
    int BeginMenuDepth;
    int BeginComboDepth;
    ImGuiColorEditFlags ColorEditOptions;
    ImGuiID ColorEditCurrentID;
    ImGuiID ColorEditSavedID;
    float ColorEditSavedHue;
    float ColorEditSavedSat;
    ImU32 ColorEditSavedColor;
    ImVec4 ColorPickerRef;
    ImGuiComboPreviewData ComboPreviewData;
    ImRect WindowResizeBorderExpectedRect;
    bool WindowResizeRelativeMode;
    short ScrollbarSeekMode;
    float ScrollbarClickDeltaToGrabCenter;
    float SliderGrabClickOffset;
    float SliderCurrentAccum;
    bool SliderCurrentAccumDirty;
    bool DragCurrentAccumDirty;
    float DragCurrentAccum;
    float DragSpeedDefaultRatio;
    float DisabledAlphaBackup;
    short DisabledStackSize;
    short TooltipOverrideCount;
    ImGuiWindow* TooltipPreviousWindow;
    ImVector_char ClipboardHandlerData;
    ImVector_ImGuiID MenusIdSubmittedThisFrame;
    ImGuiTypingSelectState TypingSelectState;
    ImGuiPlatformImeData PlatformImeData;
    ImGuiPlatformImeData PlatformImeDataPrev;
    ImGuiID PlatformImeViewport;
    ImGuiDockContext DockContext;
    void (*DockNodeWindowMenuHandler)(ImGuiContext* ctx, ImGuiDockNode* node, ImGuiTabBar* tab_bar);
    bool SettingsLoaded;
    float SettingsDirtyTimer;
    ImGuiTextBuffer SettingsIniData;
    ImVector_ImGuiSettingsHandler SettingsHandlers;
    ImChunkStream_ImGuiWindowSettings SettingsWindows;
    ImChunkStream_ImGuiTableSettings SettingsTables;
    ImVector_ImGuiContextHook Hooks;
    ImGuiID HookIdNext;
    const char* LocalizationTable[ImGuiLocKey_COUNT];
    bool LogEnabled;
    ImGuiLogType LogType;
    ImFileHandle LogFile;
    ImGuiTextBuffer LogBuffer;
    const char* LogNextPrefix;
    const char* LogNextSuffix;
    float LogLinePosY;
    bool LogLineFirstItem;
    int LogDepthRef;
    int LogDepthToExpand;
    int LogDepthToExpandDefault;
    ImGuiErrorCallback ErrorCallback;
    void* ErrorCallbackUserData;
    ImVec2 ErrorTooltipLockedPos;
    bool ErrorFirst;
    int ErrorCountCurrentFrame;
    ImGuiErrorRecoveryState StackSizesInNewFrame;
    ImGuiErrorRecoveryState*StackSizesInBeginForCurrentWindow;
    int DebugDrawIdConflictsCount;
    ImGuiDebugLogFlags DebugLogFlags;
    ImGuiTextBuffer DebugLogBuf;
    ImGuiTextIndex DebugLogIndex;
    int DebugLogSkippedErrors;
    ImGuiDebugLogFlags DebugLogAutoDisableFlags;
    ImU8 DebugLogAutoDisableFrames;
    ImU8 DebugLocateFrames;
    bool DebugBreakInLocateId;
    ImGuiKeyChord DebugBreakKeyChord;
    ImS8 DebugBeginReturnValueCullDepth;
    bool DebugItemPickerActive;
    ImU8 DebugItemPickerMouseButton;
    ImGuiID DebugItemPickerBreakId;
    float DebugFlashStyleColorTime;
    ImVec4 DebugFlashStyleColorBackup;
    ImGuiMetricsConfig DebugMetricsConfig;
    ImGuiIDStackTool DebugIDStackTool;
    ImGuiDebugAllocInfo DebugAllocInfo;
    ImGuiDockNode* DebugHoveredDockNode;
    float FramerateSecPerFrame[60];
    int FramerateSecPerFrameIdx;
    int FramerateSecPerFrameCount;
    float FramerateSecPerFrameAccum;
    int WantCaptureMouseNextFrame;
    int WantCaptureKeyboardNextFrame;
    int WantTextInputNextFrame;
    ImVector_char TempBuffer;
    char TempKeychordName[64];
};
struct ImGuiWindowTempData
{
    ImVec2 CursorPos;
    ImVec2 CursorPosPrevLine;
    ImVec2 CursorStartPos;
    ImVec2 CursorMaxPos;
    ImVec2 IdealMaxPos;
    ImVec2 CurrLineSize;
    ImVec2 PrevLineSize;
    float CurrLineTextBaseOffset;
    float PrevLineTextBaseOffset;
    bool IsSameLine;
    bool IsSetPos;
    ImVec1 Indent;
    ImVec1 ColumnsOffset;
    ImVec1 GroupOffset;
    ImVec2 CursorStartPosLossyness;
    ImGuiNavLayer NavLayerCurrent;
    short NavLayersActiveMask;
    short NavLayersActiveMaskNext;
    bool NavIsScrollPushableX;
    bool NavHideHighlightOneFrame;
    bool NavWindowHasScrollY;
    bool MenuBarAppending;
    ImVec2 MenuBarOffset;
    ImGuiMenuColumns MenuColumns;
    int TreeDepth;
    ImU32 TreeHasStackDataDepthMask;
    ImVector_ImGuiWindowPtr ChildWindows;
    ImGuiStorage* StateStorage;
    ImGuiOldColumns* CurrentColumns;
    int CurrentTableIdx;
    ImGuiLayoutType LayoutType;
    ImGuiLayoutType ParentLayoutType;
    ImU32 ModalDimBgColor;
    float ItemWidth;
    float TextWrapPos;
    ImVector_float ItemWidthStack;
    ImVector_float TextWrapPosStack;
};
typedef struct ImVector_ImGuiOldColumns {int Size;int Capacity;ImGuiOldColumns* Data;} ImVector_ImGuiOldColumns;
struct ImGuiWindow
{
    ImGuiContext* Ctx;
    char* Name;
    ImGuiID ID;
    ImGuiWindowFlags Flags, FlagsPreviousFrame;
    ImGuiChildFlags ChildFlags;
    ImGuiWindowClass WindowClass;
    ImGuiViewportP* Viewport;
    ImGuiID ViewportId;
    ImVec2 ViewportPos;
    int ViewportAllowPlatformMonitorExtend;
    ImVec2 Pos;
    ImVec2 Size;
    ImVec2 SizeFull;
    ImVec2 ContentSize;
    ImVec2 ContentSizeIdeal;
    ImVec2 ContentSizeExplicit;
    ImVec2 WindowPadding;
    float WindowRounding;
    float WindowBorderSize;
    float TitleBarHeight, MenuBarHeight;
    float DecoOuterSizeX1, DecoOuterSizeY1;
    float DecoOuterSizeX2, DecoOuterSizeY2;
    float DecoInnerSizeX1, DecoInnerSizeY1;
    int NameBufLen;
    ImGuiID MoveId;
    ImGuiID TabId;
    ImGuiID ChildId;
    ImGuiID PopupId;
    ImVec2 Scroll;
    ImVec2 ScrollMax;
    ImVec2 ScrollTarget;
    ImVec2 ScrollTargetCenterRatio;
    ImVec2 ScrollTargetEdgeSnapDist;
    ImVec2 ScrollbarSizes;
    bool ScrollbarX, ScrollbarY;
    bool ViewportOwned;
    bool Active;
    bool WasActive;
    bool WriteAccessed;
    bool Collapsed;
    bool WantCollapseToggle;
    bool SkipItems;
    bool SkipRefresh;
    bool Appearing;
    bool Hidden;
    bool IsFallbackWindow;
    bool IsExplicitChild;
    bool HasCloseButton;
    signed char ResizeBorderHovered;
    signed char ResizeBorderHeld;
    short BeginCount;
    short BeginCountPreviousFrame;
    short BeginOrderWithinParent;
    short BeginOrderWithinContext;
    short FocusOrder;
    ImS8 AutoFitFramesX, AutoFitFramesY;
    bool AutoFitOnlyGrows;
    ImGuiDir AutoPosLastDirection;
    ImS8 HiddenFramesCanSkipItems;
    ImS8 HiddenFramesCannotSkipItems;
    ImS8 HiddenFramesForRenderOnly;
    ImS8 DisableInputsFrames;
    ImGuiCond SetWindowPosAllowFlags : 8;
    ImGuiCond SetWindowSizeAllowFlags : 8;
    ImGuiCond SetWindowCollapsedAllowFlags : 8;
    ImGuiCond SetWindowDockAllowFlags : 8;
    ImVec2 SetWindowPosVal;
    ImVec2 SetWindowPosPivot;
    ImVector_ImGuiID IDStack;
    ImGuiWindowTempData DC;
    ImRect OuterRectClipped;
    ImRect InnerRect;
    ImRect InnerClipRect;
    ImRect WorkRect;
    ImRect ParentWorkRect;
    ImRect ClipRect;
    ImRect ContentRegionRect;
    ImVec2ih HitTestHoleSize;
    ImVec2ih HitTestHoleOffset;
    int LastFrameActive;
    int LastFrameJustFocused;
    float LastTimeActive;
    float ItemWidthDefault;
    ImGuiStorage StateStorage;
    ImVector_ImGuiOldColumns ColumnsStorage;
    float FontWindowScale;
    float FontDpiScale;
    int SettingsOffset;
    ImDrawList* DrawList;
    ImDrawList DrawListInst;
    ImGuiWindow* ParentWindow;
    ImGuiWindow* ParentWindowInBeginStack;
    ImGuiWindow* RootWindow;
    ImGuiWindow* RootWindowPopupTree;
    ImGuiWindow* RootWindowDockTree;
    ImGuiWindow* RootWindowForTitleBarHighlight;
    ImGuiWindow* RootWindowForNav;
    ImGuiWindow* ParentWindowForFocusRoute;
    ImGuiWindow* NavLastChildNavWindow;
    ImGuiID NavLastIds[ImGuiNavLayer_COUNT];
    ImRect NavRectRel[ImGuiNavLayer_COUNT];
    ImVec2 NavPreferredScoringPosRel[ImGuiNavLayer_COUNT];
    ImGuiID NavRootFocusScopeId;
    int MemoryDrawListIdxCapacity;
    int MemoryDrawListVtxCapacity;
    bool MemoryCompacted;
    bool DockIsActive :1;
    bool DockNodeIsVisible :1;
    bool DockTabIsVisible :1;
    bool DockTabWantClose :1;
    short DockOrder;
    ImGuiWindowDockStyle DockStyle;
    ImGuiDockNode* DockNode;
    ImGuiDockNode* DockNodeAsHost;
    ImGuiID DockId;
    ImGuiItemStatusFlags DockTabItemStatusFlags;
    ImRect DockTabItemRect;
};
typedef enum {
    ImGuiTabBarFlags_DockNode = 1 << 20,
    ImGuiTabBarFlags_IsFocused = 1 << 21,
    ImGuiTabBarFlags_SaveSettings = 1 << 22,
}ImGuiTabBarFlagsPrivate_;
typedef enum {
    ImGuiTabItemFlags_SectionMask_ = ImGuiTabItemFlags_Leading | ImGuiTabItemFlags_Trailing,
    ImGuiTabItemFlags_NoCloseButton = 1 << 20,
    ImGuiTabItemFlags_Button = 1 << 21,
    ImGuiTabItemFlags_Unsorted = 1 << 22,
}ImGuiTabItemFlagsPrivate_;
struct ImGuiTabItem
{
    ImGuiID ID;
    ImGuiTabItemFlags Flags;
    ImGuiWindow* Window;
    int LastFrameVisible;
    int LastFrameSelected;
    float Offset;
    float Width;
    float ContentWidth;
    float RequestedWidth;
    ImS32 NameOffset;
    ImS16 BeginOrder;
    ImS16 IndexDuringLayout;
    bool WantClose;
};
typedef struct ImVector_ImGuiTabItem {int Size;int Capacity;ImGuiTabItem* Data;} ImVector_ImGuiTabItem;
struct ImGuiTabBar
{
    ImGuiWindow* Window;
    ImVector_ImGuiTabItem Tabs;
    ImGuiTabBarFlags Flags;
    ImGuiID ID;
    ImGuiID SelectedTabId;
    ImGuiID NextSelectedTabId;
    ImGuiID VisibleTabId;
    int CurrFrameVisible;
    int PrevFrameVisible;
    ImRect BarRect;
    float CurrTabsContentsHeight;
    float PrevTabsContentsHeight;
    float WidthAllTabs;
    float WidthAllTabsIdeal;
    float ScrollingAnim;
    float ScrollingTarget;
    float ScrollingTargetDistToVisibility;
    float ScrollingSpeed;
    float ScrollingRectMinX;
    float ScrollingRectMaxX;
    float SeparatorMinX;
    float SeparatorMaxX;
    ImGuiID ReorderRequestTabId;
    ImS16 ReorderRequestOffset;
    ImS8 BeginCount;
    bool WantLayout;
    bool VisibleTabWasSubmitted;
    bool TabsAddedNew;
    ImS16 TabsActiveCount;
    ImS16 LastTabItemIdx;
    float ItemSpacingY;
    ImVec2 FramePadding;
    ImVec2 BackupCursorPos;
    ImGuiTextBuffer TabsNames;
};
typedef ImS16 ImGuiTableColumnIdx;
typedef ImU16 ImGuiTableDrawChannelIdx;
struct ImGuiTableColumn
{
    ImGuiTableColumnFlags Flags;
    float WidthGiven;
    float MinX;
    float MaxX;
    float WidthRequest;
    float WidthAuto;
    float WidthMax;
    float StretchWeight;
    float InitStretchWeightOrWidth;
    ImRect ClipRect;
    ImGuiID UserID;
    float WorkMinX;
    float WorkMaxX;
    float ItemWidth;
    float ContentMaxXFrozen;
    float ContentMaxXUnfrozen;
    float ContentMaxXHeadersUsed;
    float ContentMaxXHeadersIdeal;
    ImS16 NameOffset;
    ImGuiTableColumnIdx DisplayOrder;
    ImGuiTableColumnIdx IndexWithinEnabledSet;
    ImGuiTableColumnIdx PrevEnabledColumn;
    ImGuiTableColumnIdx NextEnabledColumn;
    ImGuiTableColumnIdx SortOrder;
    ImGuiTableDrawChannelIdx DrawChannelCurrent;
    ImGuiTableDrawChannelIdx DrawChannelFrozen;
    ImGuiTableDrawChannelIdx DrawChannelUnfrozen;
    bool IsEnabled;
    bool IsUserEnabled;
    bool IsUserEnabledNextFrame;
    bool IsVisibleX;
    bool IsVisibleY;
    bool IsRequestOutput;
    bool IsSkipItems;
    bool IsPreserveWidthAuto;
    ImS8 NavLayerCurrent;
    ImU8 AutoFitQueue;
    ImU8 CannotSkipItemsQueue;
    ImU8 SortDirection : 2;
    ImU8 SortDirectionsAvailCount : 2;
    ImU8 SortDirectionsAvailMask : 4;
    ImU8 SortDirectionsAvailList;
};
typedef struct ImGuiTableCellData ImGuiTableCellData;
struct ImGuiTableCellData
{
    ImU32 BgColor;
    ImGuiTableColumnIdx Column;
};
struct ImGuiTableHeaderData
{
    ImGuiTableColumnIdx Index;
    ImU32 TextColor;
    ImU32 BgColor0;
    ImU32 BgColor1;
};
struct ImGuiTableInstanceData
{
    ImGuiID TableInstanceID;
    float LastOuterHeight;
    float LastTopHeadersRowHeight;
    float LastFrozenHeight;
    int HoveredRowLast;
    int HoveredRowNext;
};
typedef struct ImSpan_ImGuiTableColumn {ImGuiTableColumn* Data;ImGuiTableColumn* DataEnd;} ImSpan_ImGuiTableColumn;
typedef struct ImSpan_ImGuiTableColumnIdx {ImGuiTableColumnIdx* Data;ImGuiTableColumnIdx* DataEnd;} ImSpan_ImGuiTableColumnIdx;
typedef struct ImSpan_ImGuiTableCellData {ImGuiTableCellData* Data;ImGuiTableCellData* DataEnd;} ImSpan_ImGuiTableCellData;
typedef struct ImVector_ImGuiTableInstanceData {int Size;int Capacity;ImGuiTableInstanceData* Data;} ImVector_ImGuiTableInstanceData;
typedef struct ImVector_ImGuiTableColumnSortSpecs {int Size;int Capacity;ImGuiTableColumnSortSpecs* Data;} ImVector_ImGuiTableColumnSortSpecs;
struct ImGuiTable
{
    ImGuiID ID;
    ImGuiTableFlags Flags;
    void* RawData;
    ImGuiTableTempData* TempData;
    ImSpan_ImGuiTableColumn Columns;
    ImSpan_ImGuiTableColumnIdx DisplayOrderToIndex;
    ImSpan_ImGuiTableCellData RowCellData;
    ImBitArrayPtr EnabledMaskByDisplayOrder;
    ImBitArrayPtr EnabledMaskByIndex;
    ImBitArrayPtr VisibleMaskByIndex;
    ImGuiTableFlags SettingsLoadedFlags;
    int SettingsOffset;
    int LastFrameActive;
    int ColumnsCount;
    int CurrentRow;
    int CurrentColumn;
    ImS16 InstanceCurrent;
    ImS16 InstanceInteracted;
    float RowPosY1;
    float RowPosY2;
    float RowMinHeight;
    float RowCellPaddingY;
    float RowTextBaseline;
    float RowIndentOffsetX;
    ImGuiTableRowFlags RowFlags : 16;
    ImGuiTableRowFlags LastRowFlags : 16;
    int RowBgColorCounter;
    ImU32 RowBgColor[2];
    ImU32 BorderColorStrong;
    ImU32 BorderColorLight;
    float BorderX1;
    float BorderX2;
    float HostIndentX;
    float MinColumnWidth;
    float OuterPaddingX;
    float CellPaddingX;
    float CellSpacingX1;
    float CellSpacingX2;
    float InnerWidth;
    float ColumnsGivenWidth;
    float ColumnsAutoFitWidth;
    float ColumnsStretchSumWeights;
    float ResizedColumnNextWidth;
    float ResizeLockMinContentsX2;
    float RefScale;
    float AngledHeadersHeight;
    float AngledHeadersSlope;
    ImRect OuterRect;
    ImRect InnerRect;
    ImRect WorkRect;
    ImRect InnerClipRect;
    ImRect BgClipRect;
    ImRect Bg0ClipRectForDrawCmd;
    ImRect Bg2ClipRectForDrawCmd;
    ImRect HostClipRect;
    ImRect HostBackupInnerClipRect;
    ImGuiWindow* OuterWindow;
    ImGuiWindow* InnerWindow;
    ImGuiTextBuffer ColumnsNames;
    ImDrawListSplitter* DrawSplitter;
    ImGuiTableInstanceData InstanceDataFirst;
    ImVector_ImGuiTableInstanceData InstanceDataExtra;
    ImGuiTableColumnSortSpecs SortSpecsSingle;
    ImVector_ImGuiTableColumnSortSpecs SortSpecsMulti;
    ImGuiTableSortSpecs SortSpecs;
    ImGuiTableColumnIdx SortSpecsCount;
    ImGuiTableColumnIdx ColumnsEnabledCount;
    ImGuiTableColumnIdx ColumnsEnabledFixedCount;
    ImGuiTableColumnIdx DeclColumnsCount;
    ImGuiTableColumnIdx AngledHeadersCount;
    ImGuiTableColumnIdx HoveredColumnBody;
    ImGuiTableColumnIdx HoveredColumnBorder;
    ImGuiTableColumnIdx HighlightColumnHeader;
    ImGuiTableColumnIdx AutoFitSingleColumn;
    ImGuiTableColumnIdx ResizedColumn;
    ImGuiTableColumnIdx LastResizedColumn;
    ImGuiTableColumnIdx HeldHeaderColumn;
    ImGuiTableColumnIdx ReorderColumn;
    ImGuiTableColumnIdx ReorderColumnDir;
    ImGuiTableColumnIdx LeftMostEnabledColumn;
    ImGuiTableColumnIdx RightMostEnabledColumn;
    ImGuiTableColumnIdx LeftMostStretchedColumn;
    ImGuiTableColumnIdx RightMostStretchedColumn;
    ImGuiTableColumnIdx ContextPopupColumn;
    ImGuiTableColumnIdx FreezeRowsRequest;
    ImGuiTableColumnIdx FreezeRowsCount;
    ImGuiTableColumnIdx FreezeColumnsRequest;
    ImGuiTableColumnIdx FreezeColumnsCount;
    ImGuiTableColumnIdx RowCellDataCurrent;
    ImGuiTableDrawChannelIdx DummyDrawChannel;
    ImGuiTableDrawChannelIdx Bg2DrawChannelCurrent;
    ImGuiTableDrawChannelIdx Bg2DrawChannelUnfrozen;
    bool IsLayoutLocked;
    bool IsInsideRow;
    bool IsInitializing;
    bool IsSortSpecsDirty;
    bool IsUsingHeaders;
    bool IsContextPopupOpen;
    bool DisableDefaultContextMenu;
    bool IsSettingsRequestLoad;
    bool IsSettingsDirty;
    bool IsDefaultDisplayOrder;
    bool IsResetAllRequest;
    bool IsResetDisplayOrderRequest;
    bool IsUnfrozenRows;
    bool IsDefaultSizingPolicy;
    bool IsActiveIdAliveBeforeTable;
    bool IsActiveIdInTable;
    bool HasScrollbarYCurr;
    bool HasScrollbarYPrev;
    bool MemoryCompacted;
    bool HostSkipItems;
};
typedef struct ImVector_ImGuiTableHeaderData {int Size;int Capacity;ImGuiTableHeaderData* Data;} ImVector_ImGuiTableHeaderData;
struct ImGuiTableTempData
{
    int TableIndex;
    float LastTimeActive;
    float AngledHeadersExtraWidth;
    ImVector_ImGuiTableHeaderData AngledHeadersRequests;
    ImVec2 UserOuterSize;
    ImDrawListSplitter DrawSplitter;
    ImRect HostBackupWorkRect;
    ImRect HostBackupParentWorkRect;
    ImVec2 HostBackupPrevLineSize;
    ImVec2 HostBackupCurrLineSize;
    ImVec2 HostBackupCursorMaxPos;
    ImVec1 HostBackupColumnsOffset;
    float HostBackupItemWidth;
    int HostBackupItemWidthStackSize;
};
typedef struct ImGuiTableColumnSettings ImGuiTableColumnSettings;
struct ImGuiTableColumnSettings
{
    float WidthOrWeight;
    ImGuiID UserID;
    ImGuiTableColumnIdx Index;
    ImGuiTableColumnIdx DisplayOrder;
    ImGuiTableColumnIdx SortOrder;
    ImU8 SortDirection : 2;
    ImU8 IsEnabled : 1;
    ImU8 IsStretch : 1;
};
struct ImGuiTableSettings
{
    ImGuiID ID;
    ImGuiTableFlags SaveFlags;
    float RefScale;
    ImGuiTableColumnIdx ColumnsCount;
    ImGuiTableColumnIdx ColumnsCountMax;
    bool WantApply;
};
struct ImFontBuilderIO
{
    bool (*FontBuilder_Build)(ImFontAtlas* atlas);
};
extern __declspec(dllexport) ImVec2* ImVec2_ImVec2_Nil(void);
extern __declspec(dllexport) void ImVec2_destroy(ImVec2* self);
extern __declspec(dllexport) ImVec2* ImVec2_ImVec2_Float(float _x,float _y);
extern __declspec(dllexport) ImVec4* ImVec4_ImVec4_Nil(void);
extern __declspec(dllexport) void ImVec4_destroy(ImVec4* self);
extern __declspec(dllexport) ImVec4* ImVec4_ImVec4_Float(float _x,float _y,float _z,float _w);
extern __declspec(dllexport) ImGuiContext* igCreateContext(ImFontAtlas* shared_font_atlas);
extern __declspec(dllexport) void igDestroyContext(ImGuiContext* ctx);
extern __declspec(dllexport) ImGuiContext* igGetCurrentContext(void);
extern __declspec(dllexport) void igSetCurrentContext(ImGuiContext* ctx);
extern __declspec(dllexport) ImGuiIO* igGetIO(void);
extern __declspec(dllexport) ImGuiPlatformIO* igGetPlatformIO(void);
extern __declspec(dllexport) ImGuiStyle* igGetStyle(void);
extern __declspec(dllexport) void igNewFrame(void);
extern __declspec(dllexport) void igEndFrame(void);
extern __declspec(dllexport) void igRender(void);
extern __declspec(dllexport) ImDrawData* igGetDrawData(void);
extern __declspec(dllexport) void igShowDemoWindow(bool* p_open);
extern __declspec(dllexport) void igShowMetricsWindow(bool* p_open);
extern __declspec(dllexport) void igShowDebugLogWindow(bool* p_open);
extern __declspec(dllexport) void igShowIDStackToolWindow(bool* p_open);
extern __declspec(dllexport) void igShowAboutWindow(bool* p_open);
extern __declspec(dllexport) void igShowStyleEditor(ImGuiStyle* ref);
extern __declspec(dllexport) bool igShowStyleSelector(const char* label);
extern __declspec(dllexport) void igShowFontSelector(const char* label);
extern __declspec(dllexport) void igShowUserGuide(void);
extern __declspec(dllexport) const char* igGetVersion(void);
extern __declspec(dllexport) void igStyleColorsDark(ImGuiStyle* dst);
extern __declspec(dllexport) void igStyleColorsLight(ImGuiStyle* dst);
extern __declspec(dllexport) void igStyleColorsClassic(ImGuiStyle* dst);
extern __declspec(dllexport) bool igBegin(const char* name,bool* p_open,ImGuiWindowFlags flags);
extern __declspec(dllexport) void igEnd(void);
extern __declspec(dllexport) bool igBeginChild_Str(const char* str_id,const ImVec2 size,ImGuiChildFlags child_flags,ImGuiWindowFlags window_flags);
extern __declspec(dllexport) bool igBeginChild_ID(ImGuiID id,const ImVec2 size,ImGuiChildFlags child_flags,ImGuiWindowFlags window_flags);
extern __declspec(dllexport) void igEndChild(void);
extern __declspec(dllexport) bool igIsWindowAppearing(void);
extern __declspec(dllexport) bool igIsWindowCollapsed(void);
extern __declspec(dllexport) bool igIsWindowFocused(ImGuiFocusedFlags flags);
extern __declspec(dllexport) bool igIsWindowHovered(ImGuiHoveredFlags flags);
extern __declspec(dllexport) ImDrawList* igGetWindowDrawList(void);
extern __declspec(dllexport) float igGetWindowDpiScale(void);
extern __declspec(dllexport) void igGetWindowPos(ImVec2 *pOut);
extern __declspec(dllexport) void igGetWindowSize(ImVec2 *pOut);
extern __declspec(dllexport) float igGetWindowWidth(void);
extern __declspec(dllexport) float igGetWindowHeight(void);
extern __declspec(dllexport) ImGuiViewport* igGetWindowViewport(void);
extern __declspec(dllexport) void igSetNextWindowPos(const ImVec2 pos,ImGuiCond cond,const ImVec2 pivot);
extern __declspec(dllexport) void igSetNextWindowSize(const ImVec2 size,ImGuiCond cond);
extern __declspec(dllexport) void igSetNextWindowSizeConstraints(const ImVec2 size_min,const ImVec2 size_max,ImGuiSizeCallback custom_callback,void* custom_callback_data);
extern __declspec(dllexport) void igSetNextWindowContentSize(const ImVec2 size);
extern __declspec(dllexport) void igSetNextWindowCollapsed(bool collapsed,ImGuiCond cond);
extern __declspec(dllexport) void igSetNextWindowFocus(void);
extern __declspec(dllexport) void igSetNextWindowScroll(const ImVec2 scroll);
extern __declspec(dllexport) void igSetNextWindowBgAlpha(float alpha);
extern __declspec(dllexport) void igSetNextWindowViewport(ImGuiID viewport_id);
extern __declspec(dllexport) void igSetWindowPos_Vec2(const ImVec2 pos,ImGuiCond cond);
extern __declspec(dllexport) void igSetWindowSize_Vec2(const ImVec2 size,ImGuiCond cond);
extern __declspec(dllexport) void igSetWindowCollapsed_Bool(bool collapsed,ImGuiCond cond);
extern __declspec(dllexport) void igSetWindowFocus_Nil(void);
extern __declspec(dllexport) void igSetWindowFontScale(float scale);
extern __declspec(dllexport) void igSetWindowPos_Str(const char* name,const ImVec2 pos,ImGuiCond cond);
extern __declspec(dllexport) void igSetWindowSize_Str(const char* name,const ImVec2 size,ImGuiCond cond);
extern __declspec(dllexport) void igSetWindowCollapsed_Str(const char* name,bool collapsed,ImGuiCond cond);
extern __declspec(dllexport) void igSetWindowFocus_Str(const char* name);
extern __declspec(dllexport) float igGetScrollX(void);
extern __declspec(dllexport) float igGetScrollY(void);
extern __declspec(dllexport) void igSetScrollX_Float(float scroll_x);
extern __declspec(dllexport) void igSetScrollY_Float(float scroll_y);
extern __declspec(dllexport) float igGetScrollMaxX(void);
extern __declspec(dllexport) float igGetScrollMaxY(void);
extern __declspec(dllexport) void igSetScrollHereX(float center_x_ratio);
extern __declspec(dllexport) void igSetScrollHereY(float center_y_ratio);
extern __declspec(dllexport) void igSetScrollFromPosX_Float(float local_x,float center_x_ratio);
extern __declspec(dllexport) void igSetScrollFromPosY_Float(float local_y,float center_y_ratio);
extern __declspec(dllexport) void igPushFont(ImFont* font);
extern __declspec(dllexport) void igPopFont(void);
extern __declspec(dllexport) void igPushStyleColor_U32(ImGuiCol idx,ImU32 col);
extern __declspec(dllexport) void igPushStyleColor_Vec4(ImGuiCol idx,const ImVec4 col);
extern __declspec(dllexport) void igPopStyleColor(int count);
extern __declspec(dllexport) void igPushStyleVar_Float(ImGuiStyleVar idx,float val);
extern __declspec(dllexport) void igPushStyleVar_Vec2(ImGuiStyleVar idx,const ImVec2 val);
extern __declspec(dllexport) void igPushStyleVarX(ImGuiStyleVar idx,float val_x);
extern __declspec(dllexport) void igPushStyleVarY(ImGuiStyleVar idx,float val_y);
extern __declspec(dllexport) void igPopStyleVar(int count);
extern __declspec(dllexport) void igPushItemFlag(ImGuiItemFlags option,bool enabled);
extern __declspec(dllexport) void igPopItemFlag(void);
extern __declspec(dllexport) void igPushItemWidth(float item_width);
extern __declspec(dllexport) void igPopItemWidth(void);
extern __declspec(dllexport) void igSetNextItemWidth(float item_width);
extern __declspec(dllexport) float igCalcItemWidth(void);
extern __declspec(dllexport) void igPushTextWrapPos(float wrap_local_pos_x);
extern __declspec(dllexport) void igPopTextWrapPos(void);
extern __declspec(dllexport) ImFont* igGetFont(void);
extern __declspec(dllexport) float igGetFontSize(void);
extern __declspec(dllexport) void igGetFontTexUvWhitePixel(ImVec2 *pOut);
extern __declspec(dllexport) ImU32 igGetColorU32_Col(ImGuiCol idx,float alpha_mul);
extern __declspec(dllexport) ImU32 igGetColorU32_Vec4(const ImVec4 col);
extern __declspec(dllexport) ImU32 igGetColorU32_U32(ImU32 col,float alpha_mul);
extern __declspec(dllexport) const ImVec4* igGetStyleColorVec4(ImGuiCol idx);
extern __declspec(dllexport) void igGetCursorScreenPos(ImVec2 *pOut);
extern __declspec(dllexport) void igSetCursorScreenPos(const ImVec2 pos);
extern __declspec(dllexport) void igGetContentRegionAvail(ImVec2 *pOut);
extern __declspec(dllexport) void igGetCursorPos(ImVec2 *pOut);
extern __declspec(dllexport) float igGetCursorPosX(void);
extern __declspec(dllexport) float igGetCursorPosY(void);
extern __declspec(dllexport) void igSetCursorPos(const ImVec2 local_pos);
extern __declspec(dllexport) void igSetCursorPosX(float local_x);
extern __declspec(dllexport) void igSetCursorPosY(float local_y);
extern __declspec(dllexport) void igGetCursorStartPos(ImVec2 *pOut);
extern __declspec(dllexport) void igSeparator(void);
extern __declspec(dllexport) void igSameLine(float offset_from_start_x,float spacing);
extern __declspec(dllexport) void igNewLine(void);
extern __declspec(dllexport) void igSpacing(void);
extern __declspec(dllexport) void igDummy(const ImVec2 size);
extern __declspec(dllexport) void igIndent(float indent_w);
extern __declspec(dllexport) void igUnindent(float indent_w);
extern __declspec(dllexport) void igBeginGroup(void);
extern __declspec(dllexport) void igEndGroup(void);
extern __declspec(dllexport) void igAlignTextToFramePadding(void);
extern __declspec(dllexport) float igGetTextLineHeight(void);
extern __declspec(dllexport) float igGetTextLineHeightWithSpacing(void);
extern __declspec(dllexport) float igGetFrameHeight(void);
extern __declspec(dllexport) float igGetFrameHeightWithSpacing(void);
extern __declspec(dllexport) void igPushID_Str(const char* str_id);
extern __declspec(dllexport) void igPushID_StrStr(const char* str_id_begin,const char* str_id_end);
extern __declspec(dllexport) void igPushID_Ptr(const void* ptr_id);
extern __declspec(dllexport) void igPushID_Int(int int_id);
extern __declspec(dllexport) void igPopID(void);
extern __declspec(dllexport) ImGuiID igGetID_Str(const char* str_id);
extern __declspec(dllexport) ImGuiID igGetID_StrStr(const char* str_id_begin,const char* str_id_end);
extern __declspec(dllexport) ImGuiID igGetID_Ptr(const void* ptr_id);
extern __declspec(dllexport) ImGuiID igGetID_Int(int int_id);
extern __declspec(dllexport) void igTextUnformatted(const char* text,const char* text_end);
extern __declspec(dllexport) void igText(const char* fmt,...);
extern __declspec(dllexport) void igTextV(const char* fmt,va_list args);
extern __declspec(dllexport) void igTextColored(const ImVec4 col,const char* fmt,...);
extern __declspec(dllexport) void igTextColoredV(const ImVec4 col,const char* fmt,va_list args);
extern __declspec(dllexport) void igTextDisabled(const char* fmt,...);
extern __declspec(dllexport) void igTextDisabledV(const char* fmt,va_list args);
extern __declspec(dllexport) void igTextWrapped(const char* fmt,...);
extern __declspec(dllexport) void igTextWrappedV(const char* fmt,va_list args);
extern __declspec(dllexport) void igLabelText(const char* label,const char* fmt,...);
extern __declspec(dllexport) void igLabelTextV(const char* label,const char* fmt,va_list args);
extern __declspec(dllexport) void igBulletText(const char* fmt,...);
extern __declspec(dllexport) void igBulletTextV(const char* fmt,va_list args);
extern __declspec(dllexport) void igSeparatorText(const char* label);
extern __declspec(dllexport) bool igButton(const char* label,const ImVec2 size);
extern __declspec(dllexport) bool igSmallButton(const char* label);
extern __declspec(dllexport) bool igInvisibleButton(const char* str_id,const ImVec2 size,ImGuiButtonFlags flags);
extern __declspec(dllexport) bool igArrowButton(const char* str_id,ImGuiDir dir);
extern __declspec(dllexport) bool igCheckbox(const char* label,bool* v);
extern __declspec(dllexport) bool igCheckboxFlags_IntPtr(const char* label,int* flags,int flags_value);
extern __declspec(dllexport) bool igCheckboxFlags_UintPtr(const char* label,unsigned int* flags,unsigned int flags_value);
extern __declspec(dllexport) bool igRadioButton_Bool(const char* label,bool active);
extern __declspec(dllexport) bool igRadioButton_IntPtr(const char* label,int* v,int v_button);
extern __declspec(dllexport) void igProgressBar(float fraction,const ImVec2 size_arg,const char* overlay);
extern __declspec(dllexport) void igBullet(void);
extern __declspec(dllexport) bool igTextLink(const char* label);
extern __declspec(dllexport) void igTextLinkOpenURL(const char* label,const char* url);
extern __declspec(dllexport) void igImage(ImTextureID user_texture_id,const ImVec2 image_size,const ImVec2 uv0,const ImVec2 uv1,const ImVec4 tint_col,const ImVec4 border_col);
extern __declspec(dllexport) bool igImageButton(const char* str_id,ImTextureID user_texture_id,const ImVec2 image_size,const ImVec2 uv0,const ImVec2 uv1,const ImVec4 bg_col,const ImVec4 tint_col);
extern __declspec(dllexport) bool igBeginCombo(const char* label,const char* preview_value,ImGuiComboFlags flags);
extern __declspec(dllexport) void igEndCombo(void);
extern __declspec(dllexport) bool igCombo_Str_arr(const char* label,int* current_item,const char* const items[],int items_count,int popup_max_height_in_items);
extern __declspec(dllexport) bool igCombo_Str(const char* label,int* current_item,const char* items_separated_by_zeros,int popup_max_height_in_items);
extern __declspec(dllexport) bool igCombo_FnStrPtr(const char* label,int* current_item,const char*(*getter)(void* user_data,int idx),void* user_data,int items_count,int popup_max_height_in_items);
extern __declspec(dllexport) bool igDragFloat(const char* label,float* v,float v_speed,float v_min,float v_max,const char* format,ImGuiSliderFlags flags);
extern __declspec(dllexport) bool igDragFloat2(const char* label,float v[2],float v_speed,float v_min,float v_max,const char* format,ImGuiSliderFlags flags);
extern __declspec(dllexport) bool igDragFloat3(const char* label,float v[3],float v_speed,float v_min,float v_max,const char* format,ImGuiSliderFlags flags);
extern __declspec(dllexport) bool igDragFloat4(const char* label,float v[4],float v_speed,float v_min,float v_max,const char* format,ImGuiSliderFlags flags);
extern __declspec(dllexport) bool igDragFloatRange2(const char* label,float* v_current_min,float* v_current_max,float v_speed,float v_min,float v_max,const char* format,const char* format_max,ImGuiSliderFlags flags);
extern __declspec(dllexport) bool igDragInt(const char* label,int* v,float v_speed,int v_min,int v_max,const char* format,ImGuiSliderFlags flags);
extern __declspec(dllexport) bool igDragInt2(const char* label,int v[2],float v_speed,int v_min,int v_max,const char* format,ImGuiSliderFlags flags);
extern __declspec(dllexport) bool igDragInt3(const char* label,int v[3],float v_speed,int v_min,int v_max,const char* format,ImGuiSliderFlags flags);
extern __declspec(dllexport) bool igDragInt4(const char* label,int v[4],float v_speed,int v_min,int v_max,const char* format,ImGuiSliderFlags flags);
extern __declspec(dllexport) bool igDragIntRange2(const char* label,int* v_current_min,int* v_current_max,float v_speed,int v_min,int v_max,const char* format,const char* format_max,ImGuiSliderFlags flags);
extern __declspec(dllexport) bool igDragScalar(const char* label,ImGuiDataType data_type,void* p_data,float v_speed,const void* p_min,const void* p_max,const char* format,ImGuiSliderFlags flags);
extern __declspec(dllexport) bool igDragScalarN(const char* label,ImGuiDataType data_type,void* p_data,int components,float v_speed,const void* p_min,const void* p_max,const char* format,ImGuiSliderFlags flags);
extern __declspec(dllexport) bool igSliderFloat(const char* label,float* v,float v_min,float v_max,const char* format,ImGuiSliderFlags flags);
extern __declspec(dllexport) bool igSliderFloat2(const char* label,float v[2],float v_min,float v_max,const char* format,ImGuiSliderFlags flags);
extern __declspec(dllexport) bool igSliderFloat3(const char* label,float v[3],float v_min,float v_max,const char* format,ImGuiSliderFlags flags);
extern __declspec(dllexport) bool igSliderFloat4(const char* label,float v[4],float v_min,float v_max,const char* format,ImGuiSliderFlags flags);
extern __declspec(dllexport) bool igSliderAngle(const char* label,float* v_rad,float v_degrees_min,float v_degrees_max,const char* format,ImGuiSliderFlags flags);
extern __declspec(dllexport) bool igSliderInt(const char* label,int* v,int v_min,int v_max,const char* format,ImGuiSliderFlags flags);
extern __declspec(dllexport) bool igSliderInt2(const char* label,int v[2],int v_min,int v_max,const char* format,ImGuiSliderFlags flags);
extern __declspec(dllexport) bool igSliderInt3(const char* label,int v[3],int v_min,int v_max,const char* format,ImGuiSliderFlags flags);
extern __declspec(dllexport) bool igSliderInt4(const char* label,int v[4],int v_min,int v_max,const char* format,ImGuiSliderFlags flags);
extern __declspec(dllexport) bool igSliderScalar(const char* label,ImGuiDataType data_type,void* p_data,const void* p_min,const void* p_max,const char* format,ImGuiSliderFlags flags);
extern __declspec(dllexport) bool igSliderScalarN(const char* label,ImGuiDataType data_type,void* p_data,int components,const void* p_min,const void* p_max,const char* format,ImGuiSliderFlags flags);
extern __declspec(dllexport) bool igVSliderFloat(const char* label,const ImVec2 size,float* v,float v_min,float v_max,const char* format,ImGuiSliderFlags flags);
extern __declspec(dllexport) bool igVSliderInt(const char* label,const ImVec2 size,int* v,int v_min,int v_max,const char* format,ImGuiSliderFlags flags);
extern __declspec(dllexport) bool igVSliderScalar(const char* label,const ImVec2 size,ImGuiDataType data_type,void* p_data,const void* p_min,const void* p_max,const char* format,ImGuiSliderFlags flags);
extern __declspec(dllexport) bool igInputText(const char* label,char* buf,size_t buf_size,ImGuiInputTextFlags flags,ImGuiInputTextCallback callback,void* user_data);
extern __declspec(dllexport) bool igInputTextMultiline(const char* label,char* buf,size_t buf_size,const ImVec2 size,ImGuiInputTextFlags flags,ImGuiInputTextCallback callback,void* user_data);
extern __declspec(dllexport) bool igInputTextWithHint(const char* label,const char* hint,char* buf,size_t buf_size,ImGuiInputTextFlags flags,ImGuiInputTextCallback callback,void* user_data);
extern __declspec(dllexport) bool igInputFloat(const char* label,float* v,float step,float step_fast,const char* format,ImGuiInputTextFlags flags);
extern __declspec(dllexport) bool igInputFloat2(const char* label,float v[2],const char* format,ImGuiInputTextFlags flags);
extern __declspec(dllexport) bool igInputFloat3(const char* label,float v[3],const char* format,ImGuiInputTextFlags flags);
extern __declspec(dllexport) bool igInputFloat4(const char* label,float v[4],const char* format,ImGuiInputTextFlags flags);
extern __declspec(dllexport) bool igInputInt(const char* label,int* v,int step,int step_fast,ImGuiInputTextFlags flags);
extern __declspec(dllexport) bool igInputInt2(const char* label,int v[2],ImGuiInputTextFlags flags);
extern __declspec(dllexport) bool igInputInt3(const char* label,int v[3],ImGuiInputTextFlags flags);
extern __declspec(dllexport) bool igInputInt4(const char* label,int v[4],ImGuiInputTextFlags flags);
extern __declspec(dllexport) bool igInputDouble(const char* label,double* v,double step,double step_fast,const char* format,ImGuiInputTextFlags flags);
extern __declspec(dllexport) bool igInputScalar(const char* label,ImGuiDataType data_type,void* p_data,const void* p_step,const void* p_step_fast,const char* format,ImGuiInputTextFlags flags);
extern __declspec(dllexport) bool igInputScalarN(const char* label,ImGuiDataType data_type,void* p_data,int components,const void* p_step,const void* p_step_fast,const char* format,ImGuiInputTextFlags flags);
extern __declspec(dllexport) bool igColorEdit3(const char* label,float col[3],ImGuiColorEditFlags flags);
extern __declspec(dllexport) bool igColorEdit4(const char* label,float col[4],ImGuiColorEditFlags flags);
extern __declspec(dllexport) bool igColorPicker3(const char* label,float col[3],ImGuiColorEditFlags flags);
extern __declspec(dllexport) bool igColorPicker4(const char* label,float col[4],ImGuiColorEditFlags flags,const float* ref_col);
extern __declspec(dllexport) bool igColorButton(const char* desc_id,const ImVec4 col,ImGuiColorEditFlags flags,const ImVec2 size);
extern __declspec(dllexport) void igSetColorEditOptions(ImGuiColorEditFlags flags);
extern __declspec(dllexport) bool igTreeNode_Str(const char* label);
extern __declspec(dllexport) bool igTreeNode_StrStr(const char* str_id,const char* fmt,...);
extern __declspec(dllexport) bool igTreeNode_Ptr(const void* ptr_id,const char* fmt,...);
extern __declspec(dllexport) bool igTreeNodeV_Str(const char* str_id,const char* fmt,va_list args);
extern __declspec(dllexport) bool igTreeNodeV_Ptr(const void* ptr_id,const char* fmt,va_list args);
extern __declspec(dllexport) bool igTreeNodeEx_Str(const char* label,ImGuiTreeNodeFlags flags);
extern __declspec(dllexport) bool igTreeNodeEx_StrStr(const char* str_id,ImGuiTreeNodeFlags flags,const char* fmt,...);
extern __declspec(dllexport) bool igTreeNodeEx_Ptr(const void* ptr_id,ImGuiTreeNodeFlags flags,const char* fmt,...);
extern __declspec(dllexport) bool igTreeNodeExV_Str(const char* str_id,ImGuiTreeNodeFlags flags,const char* fmt,va_list args);
extern __declspec(dllexport) bool igTreeNodeExV_Ptr(const void* ptr_id,ImGuiTreeNodeFlags flags,const char* fmt,va_list args);
extern __declspec(dllexport) void igTreePush_Str(const char* str_id);
extern __declspec(dllexport) void igTreePush_Ptr(const void* ptr_id);
extern __declspec(dllexport) void igTreePop(void);
extern __declspec(dllexport) float igGetTreeNodeToLabelSpacing(void);
extern __declspec(dllexport) bool igCollapsingHeader_TreeNodeFlags(const char* label,ImGuiTreeNodeFlags flags);
extern __declspec(dllexport) bool igCollapsingHeader_BoolPtr(const char* label,bool* p_visible,ImGuiTreeNodeFlags flags);
extern __declspec(dllexport) void igSetNextItemOpen(bool is_open,ImGuiCond cond);
extern __declspec(dllexport) void igSetNextItemStorageID(ImGuiID storage_id);
extern __declspec(dllexport) bool igSelectable_Bool(const char* label,bool selected,ImGuiSelectableFlags flags,const ImVec2 size);
extern __declspec(dllexport) bool igSelectable_BoolPtr(const char* label,bool* p_selected,ImGuiSelectableFlags flags,const ImVec2 size);
extern __declspec(dllexport) ImGuiMultiSelectIO* igBeginMultiSelect(ImGuiMultiSelectFlags flags,int selection_size,int items_count);
extern __declspec(dllexport) ImGuiMultiSelectIO* igEndMultiSelect(void);
extern __declspec(dllexport) void igSetNextItemSelectionUserData(ImGuiSelectionUserData selection_user_data);
extern __declspec(dllexport) bool igIsItemToggledSelection(void);
extern __declspec(dllexport) bool igBeginListBox(const char* label,const ImVec2 size);
extern __declspec(dllexport) void igEndListBox(void);
extern __declspec(dllexport) bool igListBox_Str_arr(const char* label,int* current_item,const char* const items[],int items_count,int height_in_items);
extern __declspec(dllexport) bool igListBox_FnStrPtr(const char* label,int* current_item,const char*(*getter)(void* user_data,int idx),void* user_data,int items_count,int height_in_items);
extern __declspec(dllexport) void igPlotLines_FloatPtr(const char* label,const float* values,int values_count,int values_offset,const char* overlay_text,float scale_min,float scale_max,ImVec2 graph_size,int stride);
extern __declspec(dllexport) void igPlotLines_FnFloatPtr(const char* label,float(*values_getter)(void* data,int idx),void* data,int values_count,int values_offset,const char* overlay_text,float scale_min,float scale_max,ImVec2 graph_size);
extern __declspec(dllexport) void igPlotHistogram_FloatPtr(const char* label,const float* values,int values_count,int values_offset,const char* overlay_text,float scale_min,float scale_max,ImVec2 graph_size,int stride);
extern __declspec(dllexport) void igPlotHistogram_FnFloatPtr(const char* label,float(*values_getter)(void* data,int idx),void* data,int values_count,int values_offset,const char* overlay_text,float scale_min,float scale_max,ImVec2 graph_size);
extern __declspec(dllexport) void igValue_Bool(const char* prefix,bool b);
extern __declspec(dllexport) void igValue_Int(const char* prefix,int v);
extern __declspec(dllexport) void igValue_Uint(const char* prefix,unsigned int v);
extern __declspec(dllexport) void igValue_Float(const char* prefix,float v,const char* float_format);
extern __declspec(dllexport) bool igBeginMenuBar(void);
extern __declspec(dllexport) void igEndMenuBar(void);
extern __declspec(dllexport) bool igBeginMainMenuBar(void);
extern __declspec(dllexport) void igEndMainMenuBar(void);
extern __declspec(dllexport) bool igBeginMenu(const char* label,bool enabled);
extern __declspec(dllexport) void igEndMenu(void);
extern __declspec(dllexport) bool igMenuItem_Bool(const char* label,const char* shortcut,bool selected,bool enabled);
extern __declspec(dllexport) bool igMenuItem_BoolPtr(const char* label,const char* shortcut,bool* p_selected,bool enabled);
extern __declspec(dllexport) bool igBeginTooltip(void);
extern __declspec(dllexport) void igEndTooltip(void);
extern __declspec(dllexport) void igSetTooltip(const char* fmt,...);
extern __declspec(dllexport) void igSetTooltipV(const char* fmt,va_list args);
extern __declspec(dllexport) bool igBeginItemTooltip(void);
extern __declspec(dllexport) void igSetItemTooltip(const char* fmt,...);
extern __declspec(dllexport) void igSetItemTooltipV(const char* fmt,va_list args);
extern __declspec(dllexport) bool igBeginPopup(const char* str_id,ImGuiWindowFlags flags);
extern __declspec(dllexport) bool igBeginPopupModal(const char* name,bool* p_open,ImGuiWindowFlags flags);
extern __declspec(dllexport) void igEndPopup(void);
extern __declspec(dllexport) void igOpenPopup_Str(const char* str_id,ImGuiPopupFlags popup_flags);
extern __declspec(dllexport) void igOpenPopup_ID(ImGuiID id,ImGuiPopupFlags popup_flags);
extern __declspec(dllexport) void igOpenPopupOnItemClick(const char* str_id,ImGuiPopupFlags popup_flags);
extern __declspec(dllexport) void igCloseCurrentPopup(void);
extern __declspec(dllexport) bool igBeginPopupContextItem(const char* str_id,ImGuiPopupFlags popup_flags);
extern __declspec(dllexport) bool igBeginPopupContextWindow(const char* str_id,ImGuiPopupFlags popup_flags);
extern __declspec(dllexport) bool igBeginPopupContextVoid(const char* str_id,ImGuiPopupFlags popup_flags);
extern __declspec(dllexport) bool igIsPopupOpen_Str(const char* str_id,ImGuiPopupFlags flags);
extern __declspec(dllexport) bool igBeginTable(const char* str_id,int columns,ImGuiTableFlags flags,const ImVec2 outer_size,float inner_width);
extern __declspec(dllexport) void igEndTable(void);
extern __declspec(dllexport) void igTableNextRow(ImGuiTableRowFlags row_flags,float min_row_height);
extern __declspec(dllexport) bool igTableNextColumn(void);
extern __declspec(dllexport) bool igTableSetColumnIndex(int column_n);
extern __declspec(dllexport) void igTableSetupColumn(const char* label,ImGuiTableColumnFlags flags,float init_width_or_weight,ImGuiID user_id);
extern __declspec(dllexport) void igTableSetupScrollFreeze(int cols,int rows);
extern __declspec(dllexport) void igTableHeader(const char* label);
extern __declspec(dllexport) void igTableHeadersRow(void);
extern __declspec(dllexport) void igTableAngledHeadersRow(void);
extern __declspec(dllexport) ImGuiTableSortSpecs* igTableGetSortSpecs(void);
extern __declspec(dllexport) int igTableGetColumnCount(void);
extern __declspec(dllexport) int igTableGetColumnIndex(void);
extern __declspec(dllexport) int igTableGetRowIndex(void);
extern __declspec(dllexport) const char* igTableGetColumnName_Int(int column_n);
extern __declspec(dllexport) ImGuiTableColumnFlags igTableGetColumnFlags(int column_n);
extern __declspec(dllexport) void igTableSetColumnEnabled(int column_n,bool v);
extern __declspec(dllexport) int igTableGetHoveredColumn(void);
extern __declspec(dllexport) void igTableSetBgColor(ImGuiTableBgTarget target,ImU32 color,int column_n);
extern __declspec(dllexport) void igColumns(int count,const char* id,bool borders);
extern __declspec(dllexport) void igNextColumn(void);
extern __declspec(dllexport) int igGetColumnIndex(void);
extern __declspec(dllexport) float igGetColumnWidth(int column_index);
extern __declspec(dllexport) void igSetColumnWidth(int column_index,float width);
extern __declspec(dllexport) float igGetColumnOffset(int column_index);
extern __declspec(dllexport) void igSetColumnOffset(int column_index,float offset_x);
extern __declspec(dllexport) int igGetColumnsCount(void);
extern __declspec(dllexport) bool igBeginTabBar(const char* str_id,ImGuiTabBarFlags flags);
extern __declspec(dllexport) void igEndTabBar(void);
extern __declspec(dllexport) bool igBeginTabItem(const char* label,bool* p_open,ImGuiTabItemFlags flags);
extern __declspec(dllexport) void igEndTabItem(void);
extern __declspec(dllexport) bool igTabItemButton(const char* label,ImGuiTabItemFlags flags);
extern __declspec(dllexport) void igSetTabItemClosed(const char* tab_or_docked_window_label);
extern __declspec(dllexport) ImGuiID igDockSpace(ImGuiID dockspace_id,const ImVec2 size,ImGuiDockNodeFlags flags,const ImGuiWindowClass* window_class);
extern __declspec(dllexport) ImGuiID igDockSpaceOverViewport(ImGuiID dockspace_id,const ImGuiViewport* viewport,ImGuiDockNodeFlags flags,const ImGuiWindowClass* window_class);
extern __declspec(dllexport) void igSetNextWindowDockID(ImGuiID dock_id,ImGuiCond cond);
extern __declspec(dllexport) void igSetNextWindowClass(const ImGuiWindowClass* window_class);
extern __declspec(dllexport) ImGuiID igGetWindowDockID(void);
extern __declspec(dllexport) bool igIsWindowDocked(void);
extern __declspec(dllexport) void igLogToTTY(int auto_open_depth);
extern __declspec(dllexport) void igLogToFile(int auto_open_depth,const char* filename);
extern __declspec(dllexport) void igLogToClipboard(int auto_open_depth);
extern __declspec(dllexport) void igLogFinish(void);
extern __declspec(dllexport) void igLogButtons(void);
extern __declspec(dllexport) void igLogTextV(const char* fmt,va_list args);
extern __declspec(dllexport) bool igBeginDragDropSource(ImGuiDragDropFlags flags);
extern __declspec(dllexport) bool igSetDragDropPayload(const char* type,const void* data,size_t sz,ImGuiCond cond);
extern __declspec(dllexport) void igEndDragDropSource(void);
extern __declspec(dllexport) bool igBeginDragDropTarget(void);
extern __declspec(dllexport) const ImGuiPayload* igAcceptDragDropPayload(const char* type,ImGuiDragDropFlags flags);
extern __declspec(dllexport) void igEndDragDropTarget(void);
extern __declspec(dllexport) const ImGuiPayload* igGetDragDropPayload(void);
extern __declspec(dllexport) void igBeginDisabled(bool disabled);
extern __declspec(dllexport) void igEndDisabled(void);
extern __declspec(dllexport) void igPushClipRect(const ImVec2 clip_rect_min,const ImVec2 clip_rect_max,bool intersect_with_current_clip_rect);
extern __declspec(dllexport) void igPopClipRect(void);
extern __declspec(dllexport) void igSetItemDefaultFocus(void);
extern __declspec(dllexport) void igSetKeyboardFocusHere(int offset);
extern __declspec(dllexport) void igSetNavCursorVisible(bool visible);
extern __declspec(dllexport) void igSetNextItemAllowOverlap(void);
extern __declspec(dllexport) bool igIsItemHovered(ImGuiHoveredFlags flags);
extern __declspec(dllexport) bool igIsItemActive(void);
extern __declspec(dllexport) bool igIsItemFocused(void);
extern __declspec(dllexport) bool igIsItemClicked(ImGuiMouseButton mouse_button);
extern __declspec(dllexport) bool igIsItemVisible(void);
extern __declspec(dllexport) bool igIsItemEdited(void);
extern __declspec(dllexport) bool igIsItemActivated(void);
extern __declspec(dllexport) bool igIsItemDeactivated(void);
extern __declspec(dllexport) bool igIsItemDeactivatedAfterEdit(void);
extern __declspec(dllexport) bool igIsItemToggledOpen(void);
extern __declspec(dllexport) bool igIsAnyItemHovered(void);
extern __declspec(dllexport) bool igIsAnyItemActive(void);
extern __declspec(dllexport) bool igIsAnyItemFocused(void);
extern __declspec(dllexport) ImGuiID igGetItemID(void);
extern __declspec(dllexport) void igGetItemRectMin(ImVec2 *pOut);
extern __declspec(dllexport) void igGetItemRectMax(ImVec2 *pOut);
extern __declspec(dllexport) void igGetItemRectSize(ImVec2 *pOut);
extern __declspec(dllexport) ImGuiViewport* igGetMainViewport(void);
extern __declspec(dllexport) ImDrawList* igGetBackgroundDrawList(ImGuiViewport* viewport);
extern __declspec(dllexport) ImDrawList* igGetForegroundDrawList_ViewportPtr(ImGuiViewport* viewport);
extern __declspec(dllexport) bool igIsRectVisible_Nil(const ImVec2 size);
extern __declspec(dllexport) bool igIsRectVisible_Vec2(const ImVec2 rect_min,const ImVec2 rect_max);
extern __declspec(dllexport) double igGetTime(void);
extern __declspec(dllexport) int igGetFrameCount(void);
extern __declspec(dllexport) ImDrawListSharedData* igGetDrawListSharedData(void);
extern __declspec(dllexport) const char* igGetStyleColorName(ImGuiCol idx);
extern __declspec(dllexport) void igSetStateStorage(ImGuiStorage* storage);
extern __declspec(dllexport) ImGuiStorage* igGetStateStorage(void);
extern __declspec(dllexport) void igCalcTextSize(ImVec2 *pOut,const char* text,const char* text_end,bool hide_text_after_double_hash,float wrap_width);
extern __declspec(dllexport) void igColorConvertU32ToFloat4(ImVec4 *pOut,ImU32 in);
extern __declspec(dllexport) ImU32 igColorConvertFloat4ToU32(const ImVec4 in);
extern __declspec(dllexport) void igColorConvertRGBtoHSV(float r,float g,float b,float* out_h,float* out_s,float* out_v);
extern __declspec(dllexport) void igColorConvertHSVtoRGB(float h,float s,float v,float* out_r,float* out_g,float* out_b);
extern __declspec(dllexport) bool igIsKeyDown_Nil(ImGuiKey key);
extern __declspec(dllexport) bool igIsKeyPressed_Bool(ImGuiKey key,bool repeat);
extern __declspec(dllexport) bool igIsKeyReleased_Nil(ImGuiKey key);
extern __declspec(dllexport) bool igIsKeyChordPressed_Nil(ImGuiKeyChord key_chord);
extern __declspec(dllexport) int igGetKeyPressedAmount(ImGuiKey key,float repeat_delay,float rate);
extern __declspec(dllexport) const char* igGetKeyName(ImGuiKey key);
extern __declspec(dllexport) void igSetNextFrameWantCaptureKeyboard(bool want_capture_keyboard);
extern __declspec(dllexport) bool igShortcut_Nil(ImGuiKeyChord key_chord,ImGuiInputFlags flags);
extern __declspec(dllexport) void igSetNextItemShortcut(ImGuiKeyChord key_chord,ImGuiInputFlags flags);
extern __declspec(dllexport) void igSetItemKeyOwner_Nil(ImGuiKey key);
extern __declspec(dllexport) bool igIsMouseDown_Nil(ImGuiMouseButton button);
extern __declspec(dllexport) bool igIsMouseClicked_Bool(ImGuiMouseButton button,bool repeat);
extern __declspec(dllexport) bool igIsMouseReleased_Nil(ImGuiMouseButton button);
extern __declspec(dllexport) bool igIsMouseDoubleClicked_Nil(ImGuiMouseButton button);
extern __declspec(dllexport) int igGetMouseClickedCount(ImGuiMouseButton button);
extern __declspec(dllexport) bool igIsMouseHoveringRect(const ImVec2 r_min,const ImVec2 r_max,bool clip);
extern __declspec(dllexport) bool igIsMousePosValid(const ImVec2* mouse_pos);
extern __declspec(dllexport) bool igIsAnyMouseDown(void);
extern __declspec(dllexport) void igGetMousePos(ImVec2 *pOut);
extern __declspec(dllexport) void igGetMousePosOnOpeningCurrentPopup(ImVec2 *pOut);
extern __declspec(dllexport) bool igIsMouseDragging(ImGuiMouseButton button,float lock_threshold);
extern __declspec(dllexport) void igGetMouseDragDelta(ImVec2 *pOut,ImGuiMouseButton button,float lock_threshold);
extern __declspec(dllexport) void igResetMouseDragDelta(ImGuiMouseButton button);
extern __declspec(dllexport) ImGuiMouseCursor igGetMouseCursor(void);
extern __declspec(dllexport) void igSetMouseCursor(ImGuiMouseCursor cursor_type);
extern __declspec(dllexport) void igSetNextFrameWantCaptureMouse(bool want_capture_mouse);
extern __declspec(dllexport) const char* igGetClipboardText(void);
extern __declspec(dllexport) void igSetClipboardText(const char* text);
extern __declspec(dllexport) void igLoadIniSettingsFromDisk(const char* ini_filename);
extern __declspec(dllexport) void igLoadIniSettingsFromMemory(const char* ini_data,size_t ini_size);
extern __declspec(dllexport) void igSaveIniSettingsToDisk(const char* ini_filename);
extern __declspec(dllexport) const char* igSaveIniSettingsToMemory(size_t* out_ini_size);
extern __declspec(dllexport) void igDebugTextEncoding(const char* text);
extern __declspec(dllexport) void igDebugFlashStyleColor(ImGuiCol idx);
extern __declspec(dllexport) void igDebugStartItemPicker(void);
extern __declspec(dllexport) bool igDebugCheckVersionAndDataLayout(const char* version_str,size_t sz_io,size_t sz_style,size_t sz_vec2,size_t sz_vec4,size_t sz_drawvert,size_t sz_drawidx);
extern __declspec(dllexport) void igDebugLog(const char* fmt,...);
extern __declspec(dllexport) void igDebugLogV(const char* fmt,va_list args);
extern __declspec(dllexport) void igSetAllocatorFunctions(ImGuiMemAllocFunc alloc_func,ImGuiMemFreeFunc free_func,void* user_data);
extern __declspec(dllexport) void igGetAllocatorFunctions(ImGuiMemAllocFunc* p_alloc_func,ImGuiMemFreeFunc* p_free_func,void** p_user_data);
extern __declspec(dllexport) void* igMemAlloc(size_t size);
extern __declspec(dllexport) void igMemFree(void* ptr);
extern __declspec(dllexport) void igUpdatePlatformWindows(void);
extern __declspec(dllexport) void igRenderPlatformWindowsDefault(void* platform_render_arg,void* renderer_render_arg);
extern __declspec(dllexport) void igDestroyPlatformWindows(void);
extern __declspec(dllexport) ImGuiViewport* igFindViewportByID(ImGuiID id);
extern __declspec(dllexport) ImGuiViewport* igFindViewportByPlatformHandle(void* platform_handle);
extern __declspec(dllexport) ImGuiTableSortSpecs* ImGuiTableSortSpecs_ImGuiTableSortSpecs(void);
extern __declspec(dllexport) void ImGuiTableSortSpecs_destroy(ImGuiTableSortSpecs* self);
extern __declspec(dllexport) ImGuiTableColumnSortSpecs* ImGuiTableColumnSortSpecs_ImGuiTableColumnSortSpecs(void);
extern __declspec(dllexport) void ImGuiTableColumnSortSpecs_destroy(ImGuiTableColumnSortSpecs* self);
extern __declspec(dllexport) ImGuiStyle* ImGuiStyle_ImGuiStyle(void);
extern __declspec(dllexport) void ImGuiStyle_destroy(ImGuiStyle* self);
extern __declspec(dllexport) void ImGuiStyle_ScaleAllSizes(ImGuiStyle* self,float scale_factor);
extern __declspec(dllexport) void ImGuiIO_AddKeyEvent(ImGuiIO* self,ImGuiKey key,bool down);
extern __declspec(dllexport) void ImGuiIO_AddKeyAnalogEvent(ImGuiIO* self,ImGuiKey key,bool down,float v);
extern __declspec(dllexport) void ImGuiIO_AddMousePosEvent(ImGuiIO* self,float x,float y);
extern __declspec(dllexport) void ImGuiIO_AddMouseButtonEvent(ImGuiIO* self,int button,bool down);
extern __declspec(dllexport) void ImGuiIO_AddMouseWheelEvent(ImGuiIO* self,float wheel_x,float wheel_y);
extern __declspec(dllexport) void ImGuiIO_AddMouseSourceEvent(ImGuiIO* self,ImGuiMouseSource source);
extern __declspec(dllexport) void ImGuiIO_AddMouseViewportEvent(ImGuiIO* self,ImGuiID id);
extern __declspec(dllexport) void ImGuiIO_AddFocusEvent(ImGuiIO* self,bool focused);
extern __declspec(dllexport) void ImGuiIO_AddInputCharacter(ImGuiIO* self,unsigned int c);
extern __declspec(dllexport) void ImGuiIO_AddInputCharacterUTF16(ImGuiIO* self,ImWchar16 c);
extern __declspec(dllexport) void ImGuiIO_AddInputCharactersUTF8(ImGuiIO* self,const char* str);
extern __declspec(dllexport) void ImGuiIO_SetKeyEventNativeData(ImGuiIO* self,ImGuiKey key,int native_keycode,int native_scancode,int native_legacy_index);
extern __declspec(dllexport) void ImGuiIO_SetAppAcceptingEvents(ImGuiIO* self,bool accepting_events);
extern __declspec(dllexport) void ImGuiIO_ClearEventsQueue(ImGuiIO* self);
extern __declspec(dllexport) void ImGuiIO_ClearInputKeys(ImGuiIO* self);
extern __declspec(dllexport) void ImGuiIO_ClearInputMouse(ImGuiIO* self);
extern __declspec(dllexport) ImGuiIO* ImGuiIO_ImGuiIO(void);
extern __declspec(dllexport) void ImGuiIO_destroy(ImGuiIO* self);
extern __declspec(dllexport) ImGuiInputTextCallbackData* ImGuiInputTextCallbackData_ImGuiInputTextCallbackData(void);
extern __declspec(dllexport) void ImGuiInputTextCallbackData_destroy(ImGuiInputTextCallbackData* self);
extern __declspec(dllexport) void ImGuiInputTextCallbackData_DeleteChars(ImGuiInputTextCallbackData* self,int pos,int bytes_count);
extern __declspec(dllexport) void ImGuiInputTextCallbackData_InsertChars(ImGuiInputTextCallbackData* self,int pos,const char* text,const char* text_end);
extern __declspec(dllexport) void ImGuiInputTextCallbackData_SelectAll(ImGuiInputTextCallbackData* self);
extern __declspec(dllexport) void ImGuiInputTextCallbackData_ClearSelection(ImGuiInputTextCallbackData* self);
extern __declspec(dllexport) bool ImGuiInputTextCallbackData_HasSelection(ImGuiInputTextCallbackData* self);
extern __declspec(dllexport) ImGuiWindowClass* ImGuiWindowClass_ImGuiWindowClass(void);
extern __declspec(dllexport) void ImGuiWindowClass_destroy(ImGuiWindowClass* self);
extern __declspec(dllexport) ImGuiPayload* ImGuiPayload_ImGuiPayload(void);
extern __declspec(dllexport) void ImGuiPayload_destroy(ImGuiPayload* self);
extern __declspec(dllexport) void ImGuiPayload_Clear(ImGuiPayload* self);
extern __declspec(dllexport) bool ImGuiPayload_IsDataType(ImGuiPayload* self,const char* type);
extern __declspec(dllexport) bool ImGuiPayload_IsPreview(ImGuiPayload* self);
extern __declspec(dllexport) bool ImGuiPayload_IsDelivery(ImGuiPayload* self);
extern __declspec(dllexport) ImGuiOnceUponAFrame* ImGuiOnceUponAFrame_ImGuiOnceUponAFrame(void);
extern __declspec(dllexport) void ImGuiOnceUponAFrame_destroy(ImGuiOnceUponAFrame* self);
extern __declspec(dllexport) ImGuiTextFilter* ImGuiTextFilter_ImGuiTextFilter(const char* default_filter);
extern __declspec(dllexport) void ImGuiTextFilter_destroy(ImGuiTextFilter* self);
extern __declspec(dllexport) bool ImGuiTextFilter_Draw(ImGuiTextFilter* self,const char* label,float width);
extern __declspec(dllexport) bool ImGuiTextFilter_PassFilter(ImGuiTextFilter* self,const char* text,const char* text_end);
extern __declspec(dllexport) void ImGuiTextFilter_Build(ImGuiTextFilter* self);
extern __declspec(dllexport) void ImGuiTextFilter_Clear(ImGuiTextFilter* self);
extern __declspec(dllexport) bool ImGuiTextFilter_IsActive(ImGuiTextFilter* self);
extern __declspec(dllexport) ImGuiTextRange* ImGuiTextRange_ImGuiTextRange_Nil(void);
extern __declspec(dllexport) void ImGuiTextRange_destroy(ImGuiTextRange* self);
extern __declspec(dllexport) ImGuiTextRange* ImGuiTextRange_ImGuiTextRange_Str(const char* _b,const char* _e);
extern __declspec(dllexport) bool ImGuiTextRange_empty(ImGuiTextRange* self);
extern __declspec(dllexport) void ImGuiTextRange_split(ImGuiTextRange* self,char separator,ImVector_ImGuiTextRange* out);
extern __declspec(dllexport) ImGuiTextBuffer* ImGuiTextBuffer_ImGuiTextBuffer(void);
extern __declspec(dllexport) void ImGuiTextBuffer_destroy(ImGuiTextBuffer* self);
extern __declspec(dllexport) const char* ImGuiTextBuffer_begin(ImGuiTextBuffer* self);
extern __declspec(dllexport) const char* ImGuiTextBuffer_end(ImGuiTextBuffer* self);
extern __declspec(dllexport) int ImGuiTextBuffer_size(ImGuiTextBuffer* self);
extern __declspec(dllexport) bool ImGuiTextBuffer_empty(ImGuiTextBuffer* self);
extern __declspec(dllexport) void ImGuiTextBuffer_clear(ImGuiTextBuffer* self);
extern __declspec(dllexport) void ImGuiTextBuffer_reserve(ImGuiTextBuffer* self,int capacity);
extern __declspec(dllexport) const char* ImGuiTextBuffer_c_str(ImGuiTextBuffer* self);
extern __declspec(dllexport) void ImGuiTextBuffer_append(ImGuiTextBuffer* self,const char* str,const char* str_end);
extern __declspec(dllexport) void ImGuiTextBuffer_appendfv(ImGuiTextBuffer* self,const char* fmt,va_list args);
extern __declspec(dllexport) ImGuiStoragePair* ImGuiStoragePair_ImGuiStoragePair_Int(ImGuiID _key,int _val);
extern __declspec(dllexport) void ImGuiStoragePair_destroy(ImGuiStoragePair* self);
extern __declspec(dllexport) ImGuiStoragePair* ImGuiStoragePair_ImGuiStoragePair_Float(ImGuiID _key,float _val);
extern __declspec(dllexport) ImGuiStoragePair* ImGuiStoragePair_ImGuiStoragePair_Ptr(ImGuiID _key,void* _val);
extern __declspec(dllexport) void ImGuiStorage_Clear(ImGuiStorage* self);
extern __declspec(dllexport) int ImGuiStorage_GetInt(ImGuiStorage* self,ImGuiID key,int default_val);
extern __declspec(dllexport) void ImGuiStorage_SetInt(ImGuiStorage* self,ImGuiID key,int val);
extern __declspec(dllexport) bool ImGuiStorage_GetBool(ImGuiStorage* self,ImGuiID key,bool default_val);
extern __declspec(dllexport) void ImGuiStorage_SetBool(ImGuiStorage* self,ImGuiID key,bool val);
extern __declspec(dllexport) float ImGuiStorage_GetFloat(ImGuiStorage* self,ImGuiID key,float default_val);
extern __declspec(dllexport) void ImGuiStorage_SetFloat(ImGuiStorage* self,ImGuiID key,float val);
extern __declspec(dllexport) void* ImGuiStorage_GetVoidPtr(ImGuiStorage* self,ImGuiID key);
extern __declspec(dllexport) void ImGuiStorage_SetVoidPtr(ImGuiStorage* self,ImGuiID key,void* val);
extern __declspec(dllexport) int* ImGuiStorage_GetIntRef(ImGuiStorage* self,ImGuiID key,int default_val);
extern __declspec(dllexport) bool* ImGuiStorage_GetBoolRef(ImGuiStorage* self,ImGuiID key,bool default_val);
extern __declspec(dllexport) float* ImGuiStorage_GetFloatRef(ImGuiStorage* self,ImGuiID key,float default_val);
extern __declspec(dllexport) void** ImGuiStorage_GetVoidPtrRef(ImGuiStorage* self,ImGuiID key,void* default_val);
extern __declspec(dllexport) void ImGuiStorage_BuildSortByKey(ImGuiStorage* self);
extern __declspec(dllexport) void ImGuiStorage_SetAllInt(ImGuiStorage* self,int val);
extern __declspec(dllexport) ImGuiListClipper* ImGuiListClipper_ImGuiListClipper(void);
extern __declspec(dllexport) void ImGuiListClipper_destroy(ImGuiListClipper* self);
extern __declspec(dllexport) void ImGuiListClipper_Begin(ImGuiListClipper* self,int items_count,float items_height);
extern __declspec(dllexport) void ImGuiListClipper_End(ImGuiListClipper* self);
extern __declspec(dllexport) bool ImGuiListClipper_Step(ImGuiListClipper* self);
extern __declspec(dllexport) void ImGuiListClipper_IncludeItemByIndex(ImGuiListClipper* self,int item_index);
extern __declspec(dllexport) void ImGuiListClipper_IncludeItemsByIndex(ImGuiListClipper* self,int item_begin,int item_end);
extern __declspec(dllexport) void ImGuiListClipper_SeekCursorForItem(ImGuiListClipper* self,int item_index);
extern __declspec(dllexport) ImColor* ImColor_ImColor_Nil(void);
extern __declspec(dllexport) void ImColor_destroy(ImColor* self);
extern __declspec(dllexport) ImColor* ImColor_ImColor_Float(float r,float g,float b,float a);
extern __declspec(dllexport) ImColor* ImColor_ImColor_Vec4(const ImVec4 col);
extern __declspec(dllexport) ImColor* ImColor_ImColor_Int(int r,int g,int b,int a);
extern __declspec(dllexport) ImColor* ImColor_ImColor_U32(ImU32 rgba);
extern __declspec(dllexport) void ImColor_SetHSV(ImColor* self,float h,float s,float v,float a);
extern __declspec(dllexport) void ImColor_HSV(ImColor *pOut,float h,float s,float v,float a);
extern __declspec(dllexport) ImGuiSelectionBasicStorage* ImGuiSelectionBasicStorage_ImGuiSelectionBasicStorage(void);
extern __declspec(dllexport) void ImGuiSelectionBasicStorage_destroy(ImGuiSelectionBasicStorage* self);
extern __declspec(dllexport) void ImGuiSelectionBasicStorage_ApplyRequests(ImGuiSelectionBasicStorage* self,ImGuiMultiSelectIO* ms_io);
extern __declspec(dllexport) bool ImGuiSelectionBasicStorage_Contains(ImGuiSelectionBasicStorage* self,ImGuiID id);
extern __declspec(dllexport) void ImGuiSelectionBasicStorage_Clear(ImGuiSelectionBasicStorage* self);
extern __declspec(dllexport) void ImGuiSelectionBasicStorage_Swap(ImGuiSelectionBasicStorage* self,ImGuiSelectionBasicStorage* r);
extern __declspec(dllexport) void ImGuiSelectionBasicStorage_SetItemSelected(ImGuiSelectionBasicStorage* self,ImGuiID id,bool selected);
extern __declspec(dllexport) bool ImGuiSelectionBasicStorage_GetNextSelectedItem(ImGuiSelectionBasicStorage* self,void** opaque_it,ImGuiID* out_id);
extern __declspec(dllexport) ImGuiID ImGuiSelectionBasicStorage_GetStorageIdFromIndex(ImGuiSelectionBasicStorage* self,int idx);
extern __declspec(dllexport) ImGuiSelectionExternalStorage* ImGuiSelectionExternalStorage_ImGuiSelectionExternalStorage(void);
extern __declspec(dllexport) void ImGuiSelectionExternalStorage_destroy(ImGuiSelectionExternalStorage* self);
extern __declspec(dllexport) void ImGuiSelectionExternalStorage_ApplyRequests(ImGuiSelectionExternalStorage* self,ImGuiMultiSelectIO* ms_io);
extern __declspec(dllexport) ImDrawCmd* ImDrawCmd_ImDrawCmd(void);
extern __declspec(dllexport) void ImDrawCmd_destroy(ImDrawCmd* self);
extern __declspec(dllexport) ImTextureID ImDrawCmd_GetTexID(ImDrawCmd* self);
extern __declspec(dllexport) ImDrawListSplitter* ImDrawListSplitter_ImDrawListSplitter(void);
extern __declspec(dllexport) void ImDrawListSplitter_destroy(ImDrawListSplitter* self);
extern __declspec(dllexport) void ImDrawListSplitter_Clear(ImDrawListSplitter* self);
extern __declspec(dllexport) void ImDrawListSplitter_ClearFreeMemory(ImDrawListSplitter* self);
extern __declspec(dllexport) void ImDrawListSplitter_Split(ImDrawListSplitter* self,ImDrawList* draw_list,int count);
extern __declspec(dllexport) void ImDrawListSplitter_Merge(ImDrawListSplitter* self,ImDrawList* draw_list);
extern __declspec(dllexport) void ImDrawListSplitter_SetCurrentChannel(ImDrawListSplitter* self,ImDrawList* draw_list,int channel_idx);
extern __declspec(dllexport) ImDrawList* ImDrawList_ImDrawList(ImDrawListSharedData* shared_data);
extern __declspec(dllexport) void ImDrawList_destroy(ImDrawList* self);
extern __declspec(dllexport) void ImDrawList_PushClipRect(ImDrawList* self,const ImVec2 clip_rect_min,const ImVec2 clip_rect_max,bool intersect_with_current_clip_rect);
extern __declspec(dllexport) void ImDrawList_PushClipRectFullScreen(ImDrawList* self);
extern __declspec(dllexport) void ImDrawList_PopClipRect(ImDrawList* self);
extern __declspec(dllexport) void ImDrawList_PushTextureID(ImDrawList* self,ImTextureID texture_id);
extern __declspec(dllexport) void ImDrawList_PopTextureID(ImDrawList* self);
extern __declspec(dllexport) void ImDrawList_GetClipRectMin(ImVec2 *pOut,ImDrawList* self);
extern __declspec(dllexport) void ImDrawList_GetClipRectMax(ImVec2 *pOut,ImDrawList* self);
extern __declspec(dllexport) void ImDrawList_AddLine(ImDrawList* self,const ImVec2 p1,const ImVec2 p2,ImU32 col,float thickness);
extern __declspec(dllexport) void ImDrawList_AddRect(ImDrawList* self,const ImVec2 p_min,const ImVec2 p_max,ImU32 col,float rounding,ImDrawFlags flags,float thickness);
extern __declspec(dllexport) void ImDrawList_AddRectFilled(ImDrawList* self,const ImVec2 p_min,const ImVec2 p_max,ImU32 col,float rounding,ImDrawFlags flags);
extern __declspec(dllexport) void ImDrawList_AddRectFilledMultiColor(ImDrawList* self,const ImVec2 p_min,const ImVec2 p_max,ImU32 col_upr_left,ImU32 col_upr_right,ImU32 col_bot_right,ImU32 col_bot_left);
extern __declspec(dllexport) void ImDrawList_AddQuad(ImDrawList* self,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,const ImVec2 p4,ImU32 col,float thickness);
extern __declspec(dllexport) void ImDrawList_AddQuadFilled(ImDrawList* self,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,const ImVec2 p4,ImU32 col);
extern __declspec(dllexport) void ImDrawList_AddTriangle(ImDrawList* self,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,ImU32 col,float thickness);
extern __declspec(dllexport) void ImDrawList_AddTriangleFilled(ImDrawList* self,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,ImU32 col);
extern __declspec(dllexport) void ImDrawList_AddCircle(ImDrawList* self,const ImVec2 center,float radius,ImU32 col,int num_segments,float thickness);
extern __declspec(dllexport) void ImDrawList_AddCircleFilled(ImDrawList* self,const ImVec2 center,float radius,ImU32 col,int num_segments);
extern __declspec(dllexport) void ImDrawList_AddNgon(ImDrawList* self,const ImVec2 center,float radius,ImU32 col,int num_segments,float thickness);
extern __declspec(dllexport) void ImDrawList_AddNgonFilled(ImDrawList* self,const ImVec2 center,float radius,ImU32 col,int num_segments);
extern __declspec(dllexport) void ImDrawList_AddEllipse(ImDrawList* self,const ImVec2 center,const ImVec2 radius,ImU32 col,float rot,int num_segments,float thickness);
extern __declspec(dllexport) void ImDrawList_AddEllipseFilled(ImDrawList* self,const ImVec2 center,const ImVec2 radius,ImU32 col,float rot,int num_segments);
extern __declspec(dllexport) void ImDrawList_AddText_Vec2(ImDrawList* self,const ImVec2 pos,ImU32 col,const char* text_begin,const char* text_end);
extern __declspec(dllexport) void ImDrawList_AddText_FontPtr(ImDrawList* self,const ImFont* font,float font_size,const ImVec2 pos,ImU32 col,const char* text_begin,const char* text_end,float wrap_width,const ImVec4* cpu_fine_clip_rect);
extern __declspec(dllexport) void ImDrawList_AddBezierCubic(ImDrawList* self,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,const ImVec2 p4,ImU32 col,float thickness,int num_segments);
extern __declspec(dllexport) void ImDrawList_AddBezierQuadratic(ImDrawList* self,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,ImU32 col,float thickness,int num_segments);
extern __declspec(dllexport) void ImDrawList_AddPolyline(ImDrawList* self,const ImVec2* points,int num_points,ImU32 col,ImDrawFlags flags,float thickness);
extern __declspec(dllexport) void ImDrawList_AddConvexPolyFilled(ImDrawList* self,const ImVec2* points,int num_points,ImU32 col);
extern __declspec(dllexport) void ImDrawList_AddConcavePolyFilled(ImDrawList* self,const ImVec2* points,int num_points,ImU32 col);
extern __declspec(dllexport) void ImDrawList_AddImage(ImDrawList* self,ImTextureID user_texture_id,const ImVec2 p_min,const ImVec2 p_max,const ImVec2 uv_min,const ImVec2 uv_max,ImU32 col);
extern __declspec(dllexport) void ImDrawList_AddImageQuad(ImDrawList* self,ImTextureID user_texture_id,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,const ImVec2 p4,const ImVec2 uv1,const ImVec2 uv2,const ImVec2 uv3,const ImVec2 uv4,ImU32 col);
extern __declspec(dllexport) void ImDrawList_AddImageRounded(ImDrawList* self,ImTextureID user_texture_id,const ImVec2 p_min,const ImVec2 p_max,const ImVec2 uv_min,const ImVec2 uv_max,ImU32 col,float rounding,ImDrawFlags flags);
extern __declspec(dllexport) void ImDrawList_PathClear(ImDrawList* self);
extern __declspec(dllexport) void ImDrawList_PathLineTo(ImDrawList* self,const ImVec2 pos);
extern __declspec(dllexport) void ImDrawList_PathLineToMergeDuplicate(ImDrawList* self,const ImVec2 pos);
extern __declspec(dllexport) void ImDrawList_PathFillConvex(ImDrawList* self,ImU32 col);
extern __declspec(dllexport) void ImDrawList_PathFillConcave(ImDrawList* self,ImU32 col);
extern __declspec(dllexport) void ImDrawList_PathStroke(ImDrawList* self,ImU32 col,ImDrawFlags flags,float thickness);
extern __declspec(dllexport) void ImDrawList_PathArcTo(ImDrawList* self,const ImVec2 center,float radius,float a_min,float a_max,int num_segments);
extern __declspec(dllexport) void ImDrawList_PathArcToFast(ImDrawList* self,const ImVec2 center,float radius,int a_min_of_12,int a_max_of_12);
extern __declspec(dllexport) void ImDrawList_PathEllipticalArcTo(ImDrawList* self,const ImVec2 center,const ImVec2 radius,float rot,float a_min,float a_max,int num_segments);
extern __declspec(dllexport) void ImDrawList_PathBezierCubicCurveTo(ImDrawList* self,const ImVec2 p2,const ImVec2 p3,const ImVec2 p4,int num_segments);
extern __declspec(dllexport) void ImDrawList_PathBezierQuadraticCurveTo(ImDrawList* self,const ImVec2 p2,const ImVec2 p3,int num_segments);
extern __declspec(dllexport) void ImDrawList_PathRect(ImDrawList* self,const ImVec2 rect_min,const ImVec2 rect_max,float rounding,ImDrawFlags flags);
extern __declspec(dllexport) void ImDrawList_AddCallback(ImDrawList* self,ImDrawCallback callback,void* userdata,size_t userdata_size);
extern __declspec(dllexport) void ImDrawList_AddDrawCmd(ImDrawList* self);
extern __declspec(dllexport) ImDrawList* ImDrawList_CloneOutput(ImDrawList* self);
extern __declspec(dllexport) void ImDrawList_ChannelsSplit(ImDrawList* self,int count);
extern __declspec(dllexport) void ImDrawList_ChannelsMerge(ImDrawList* self);
extern __declspec(dllexport) void ImDrawList_ChannelsSetCurrent(ImDrawList* self,int n);
extern __declspec(dllexport) void ImDrawList_PrimReserve(ImDrawList* self,int idx_count,int vtx_count);
extern __declspec(dllexport) void ImDrawList_PrimUnreserve(ImDrawList* self,int idx_count,int vtx_count);
extern __declspec(dllexport) void ImDrawList_PrimRect(ImDrawList* self,const ImVec2 a,const ImVec2 b,ImU32 col);
extern __declspec(dllexport) void ImDrawList_PrimRectUV(ImDrawList* self,const ImVec2 a,const ImVec2 b,const ImVec2 uv_a,const ImVec2 uv_b,ImU32 col);
extern __declspec(dllexport) void ImDrawList_PrimQuadUV(ImDrawList* self,const ImVec2 a,const ImVec2 b,const ImVec2 c,const ImVec2 d,const ImVec2 uv_a,const ImVec2 uv_b,const ImVec2 uv_c,const ImVec2 uv_d,ImU32 col);
extern __declspec(dllexport) void ImDrawList_PrimWriteVtx(ImDrawList* self,const ImVec2 pos,const ImVec2 uv,ImU32 col);
extern __declspec(dllexport) void ImDrawList_PrimWriteIdx(ImDrawList* self,ImDrawIdx idx);
extern __declspec(dllexport) void ImDrawList_PrimVtx(ImDrawList* self,const ImVec2 pos,const ImVec2 uv,ImU32 col);
extern __declspec(dllexport) void ImDrawList__ResetForNewFrame(ImDrawList* self);
extern __declspec(dllexport) void ImDrawList__ClearFreeMemory(ImDrawList* self);
extern __declspec(dllexport) void ImDrawList__PopUnusedDrawCmd(ImDrawList* self);
extern __declspec(dllexport) void ImDrawList__TryMergeDrawCmds(ImDrawList* self);
extern __declspec(dllexport) void ImDrawList__OnChangedClipRect(ImDrawList* self);
extern __declspec(dllexport) void ImDrawList__OnChangedTextureID(ImDrawList* self);
extern __declspec(dllexport) void ImDrawList__OnChangedVtxOffset(ImDrawList* self);
extern __declspec(dllexport) void ImDrawList__SetTextureID(ImDrawList* self,ImTextureID texture_id);
extern __declspec(dllexport) int ImDrawList__CalcCircleAutoSegmentCount(ImDrawList* self,float radius);
extern __declspec(dllexport) void ImDrawList__PathArcToFastEx(ImDrawList* self,const ImVec2 center,float radius,int a_min_sample,int a_max_sample,int a_step);
extern __declspec(dllexport) void ImDrawList__PathArcToN(ImDrawList* self,const ImVec2 center,float radius,float a_min,float a_max,int num_segments);
extern __declspec(dllexport) ImDrawData* ImDrawData_ImDrawData(void);
extern __declspec(dllexport) void ImDrawData_destroy(ImDrawData* self);
extern __declspec(dllexport) void ImDrawData_Clear(ImDrawData* self);
extern __declspec(dllexport) void ImDrawData_AddDrawList(ImDrawData* self,ImDrawList* draw_list);
extern __declspec(dllexport) void ImDrawData_DeIndexAllBuffers(ImDrawData* self);
extern __declspec(dllexport) void ImDrawData_ScaleClipRects(ImDrawData* self,const ImVec2 fb_scale);
extern __declspec(dllexport) ImFontConfig* ImFontConfig_ImFontConfig(void);
extern __declspec(dllexport) void ImFontConfig_destroy(ImFontConfig* self);
extern __declspec(dllexport) ImFontGlyphRangesBuilder* ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilder(void);
extern __declspec(dllexport) void ImFontGlyphRangesBuilder_destroy(ImFontGlyphRangesBuilder* self);
extern __declspec(dllexport) void ImFontGlyphRangesBuilder_Clear(ImFontGlyphRangesBuilder* self);
extern __declspec(dllexport) bool ImFontGlyphRangesBuilder_GetBit(ImFontGlyphRangesBuilder* self,size_t n);
extern __declspec(dllexport) void ImFontGlyphRangesBuilder_SetBit(ImFontGlyphRangesBuilder* self,size_t n);
extern __declspec(dllexport) void ImFontGlyphRangesBuilder_AddChar(ImFontGlyphRangesBuilder* self,ImWchar c);
extern __declspec(dllexport) void ImFontGlyphRangesBuilder_AddText(ImFontGlyphRangesBuilder* self,const char* text,const char* text_end);
extern __declspec(dllexport) void ImFontGlyphRangesBuilder_AddRanges(ImFontGlyphRangesBuilder* self,const ImWchar* ranges);
extern __declspec(dllexport) void ImFontGlyphRangesBuilder_BuildRanges(ImFontGlyphRangesBuilder* self,ImVector_ImWchar* out_ranges);
extern __declspec(dllexport) ImFontAtlasCustomRect* ImFontAtlasCustomRect_ImFontAtlasCustomRect(void);
extern __declspec(dllexport) void ImFontAtlasCustomRect_destroy(ImFontAtlasCustomRect* self);
extern __declspec(dllexport) bool ImFontAtlasCustomRect_IsPacked(ImFontAtlasCustomRect* self);
extern __declspec(dllexport) ImFontAtlas* ImFontAtlas_ImFontAtlas(void);
extern __declspec(dllexport) void ImFontAtlas_destroy(ImFontAtlas* self);
extern __declspec(dllexport) ImFont* ImFontAtlas_AddFont(ImFontAtlas* self,const ImFontConfig* font_cfg);
extern __declspec(dllexport) ImFont* ImFontAtlas_AddFontDefault(ImFontAtlas* self,const ImFontConfig* font_cfg);
extern __declspec(dllexport) ImFont* ImFontAtlas_AddFontFromFileTTF(ImFontAtlas* self,const char* filename,float size_pixels,const ImFontConfig* font_cfg,const ImWchar* glyph_ranges);
extern __declspec(dllexport) ImFont* ImFontAtlas_AddFontFromMemoryTTF(ImFontAtlas* self,void* font_data,int font_data_size,float size_pixels,const ImFontConfig* font_cfg,const ImWchar* glyph_ranges);
extern __declspec(dllexport) ImFont* ImFontAtlas_AddFontFromMemoryCompressedTTF(ImFontAtlas* self,const void* compressed_font_data,int compressed_font_data_size,float size_pixels,const ImFontConfig* font_cfg,const ImWchar* glyph_ranges);
extern __declspec(dllexport) ImFont* ImFontAtlas_AddFontFromMemoryCompressedBase85TTF(ImFontAtlas* self,const char* compressed_font_data_base85,float size_pixels,const ImFontConfig* font_cfg,const ImWchar* glyph_ranges);
extern __declspec(dllexport) void ImFontAtlas_ClearInputData(ImFontAtlas* self);
extern __declspec(dllexport) void ImFontAtlas_ClearTexData(ImFontAtlas* self);
extern __declspec(dllexport) void ImFontAtlas_ClearFonts(ImFontAtlas* self);
extern __declspec(dllexport) void ImFontAtlas_Clear(ImFontAtlas* self);
extern __declspec(dllexport) bool ImFontAtlas_Build(ImFontAtlas* self);
extern __declspec(dllexport) void ImFontAtlas_GetTexDataAsAlpha8(ImFontAtlas* self,unsigned char** out_pixels,int* out_width,int* out_height,int* out_bytes_per_pixel);
extern __declspec(dllexport) void ImFontAtlas_GetTexDataAsRGBA32(ImFontAtlas* self,unsigned char** out_pixels,int* out_width,int* out_height,int* out_bytes_per_pixel);
extern __declspec(dllexport) bool ImFontAtlas_IsBuilt(ImFontAtlas* self);
extern __declspec(dllexport) void ImFontAtlas_SetTexID(ImFontAtlas* self,ImTextureID id);
extern __declspec(dllexport) const ImWchar* ImFontAtlas_GetGlyphRangesDefault(ImFontAtlas* self);
extern __declspec(dllexport) const ImWchar* ImFontAtlas_GetGlyphRangesGreek(ImFontAtlas* self);
extern __declspec(dllexport) const ImWchar* ImFontAtlas_GetGlyphRangesKorean(ImFontAtlas* self);
extern __declspec(dllexport) const ImWchar* ImFontAtlas_GetGlyphRangesJapanese(ImFontAtlas* self);
extern __declspec(dllexport) const ImWchar* ImFontAtlas_GetGlyphRangesChineseFull(ImFontAtlas* self);
extern __declspec(dllexport) const ImWchar* ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon(ImFontAtlas* self);
extern __declspec(dllexport) const ImWchar* ImFontAtlas_GetGlyphRangesCyrillic(ImFontAtlas* self);
extern __declspec(dllexport) const ImWchar* ImFontAtlas_GetGlyphRangesThai(ImFontAtlas* self);
extern __declspec(dllexport) const ImWchar* ImFontAtlas_GetGlyphRangesVietnamese(ImFontAtlas* self);
extern __declspec(dllexport) int ImFontAtlas_AddCustomRectRegular(ImFontAtlas* self,int width,int height);
extern __declspec(dllexport) int ImFontAtlas_AddCustomRectFontGlyph(ImFontAtlas* self,ImFont* font,ImWchar id,int width,int height,float advance_x,const ImVec2 offset);
extern __declspec(dllexport) ImFontAtlasCustomRect* ImFontAtlas_GetCustomRectByIndex(ImFontAtlas* self,int index);
extern __declspec(dllexport) void ImFontAtlas_CalcCustomRectUV(ImFontAtlas* self,const ImFontAtlasCustomRect* rect,ImVec2* out_uv_min,ImVec2* out_uv_max);
extern __declspec(dllexport) bool ImFontAtlas_GetMouseCursorTexData(ImFontAtlas* self,ImGuiMouseCursor cursor,ImVec2* out_offset,ImVec2* out_size,ImVec2 out_uv_border[2],ImVec2 out_uv_fill[2]);
extern __declspec(dllexport) ImFont* ImFont_ImFont(void);
extern __declspec(dllexport) void ImFont_destroy(ImFont* self);
extern __declspec(dllexport) const ImFontGlyph* ImFont_FindGlyph(ImFont* self,ImWchar c);
extern __declspec(dllexport) const ImFontGlyph* ImFont_FindGlyphNoFallback(ImFont* self,ImWchar c);
extern __declspec(dllexport) float ImFont_GetCharAdvance(ImFont* self,ImWchar c);
extern __declspec(dllexport) bool ImFont_IsLoaded(ImFont* self);
extern __declspec(dllexport) const char* ImFont_GetDebugName(ImFont* self);
extern __declspec(dllexport) void ImFont_CalcTextSizeA(ImVec2 *pOut,ImFont* self,float size,float max_width,float wrap_width,const char* text_begin,const char* text_end,const char** remaining);
extern __declspec(dllexport) const char* ImFont_CalcWordWrapPositionA(ImFont* self,float scale,const char* text,const char* text_end,float wrap_width);
extern __declspec(dllexport) void ImFont_RenderChar(ImFont* self,ImDrawList* draw_list,float size,const ImVec2 pos,ImU32 col,ImWchar c);
extern __declspec(dllexport) void ImFont_RenderText(ImFont* self,ImDrawList* draw_list,float size,const ImVec2 pos,ImU32 col,const ImVec4 clip_rect,const char* text_begin,const char* text_end,float wrap_width,bool cpu_fine_clip);
extern __declspec(dllexport) void ImFont_BuildLookupTable(ImFont* self);
extern __declspec(dllexport) void ImFont_ClearOutputData(ImFont* self);
extern __declspec(dllexport) void ImFont_GrowIndex(ImFont* self,int new_size);
extern __declspec(dllexport) void ImFont_AddGlyph(ImFont* self,const ImFontConfig* src_cfg,ImWchar c,float x0,float y0,float x1,float y1,float u0,float v0,float u1,float v1,float advance_x);
extern __declspec(dllexport) void ImFont_AddRemapChar(ImFont* self,ImWchar dst,ImWchar src,bool overwrite_dst);
extern __declspec(dllexport) void ImFont_SetGlyphVisible(ImFont* self,ImWchar c,bool visible);
extern __declspec(dllexport) bool ImFont_IsGlyphRangeUnused(ImFont* self,unsigned int c_begin,unsigned int c_last);
extern __declspec(dllexport) ImGuiViewport* ImGuiViewport_ImGuiViewport(void);
extern __declspec(dllexport) void ImGuiViewport_destroy(ImGuiViewport* self);
extern __declspec(dllexport) void ImGuiViewport_GetCenter(ImVec2 *pOut,ImGuiViewport* self);
extern __declspec(dllexport) void ImGuiViewport_GetWorkCenter(ImVec2 *pOut,ImGuiViewport* self);
extern __declspec(dllexport) ImGuiPlatformIO* ImGuiPlatformIO_ImGuiPlatformIO(void);
extern __declspec(dllexport) void ImGuiPlatformIO_destroy(ImGuiPlatformIO* self);
extern __declspec(dllexport) ImGuiPlatformMonitor* ImGuiPlatformMonitor_ImGuiPlatformMonitor(void);
extern __declspec(dllexport) void ImGuiPlatformMonitor_destroy(ImGuiPlatformMonitor* self);
extern __declspec(dllexport) ImGuiPlatformImeData* ImGuiPlatformImeData_ImGuiPlatformImeData(void);
extern __declspec(dllexport) void ImGuiPlatformImeData_destroy(ImGuiPlatformImeData* self);
extern __declspec(dllexport) ImGuiID igImHashData(const void* data,size_t data_size,ImGuiID seed);
extern __declspec(dllexport) ImGuiID igImHashStr(const char* data,size_t data_size,ImGuiID seed);
extern __declspec(dllexport) void igImQsort(void* base,size_t count,size_t size_of_element,int(*compare_func)(void const*,void const*));
extern __declspec(dllexport) ImU32 igImAlphaBlendColors(ImU32 col_a,ImU32 col_b);
extern __declspec(dllexport) bool igImIsPowerOfTwo_Int(int v);
extern __declspec(dllexport) bool igImIsPowerOfTwo_U64(ImU64 v);
extern __declspec(dllexport) int igImUpperPowerOfTwo(int v);
extern __declspec(dllexport) int igImStricmp(const char* str1,const char* str2);
extern __declspec(dllexport) int igImStrnicmp(const char* str1,const char* str2,size_t count);
extern __declspec(dllexport) void igImStrncpy(char* dst,const char* src,size_t count);
extern __declspec(dllexport) char* igImStrdup(const char* str);
extern __declspec(dllexport) char* igImStrdupcpy(char* dst,size_t* p_dst_size,const char* str);
extern __declspec(dllexport) const char* igImStrchrRange(const char* str_begin,const char* str_end,char c);
extern __declspec(dllexport) const char* igImStreolRange(const char* str,const char* str_end);
extern __declspec(dllexport) const char* igImStristr(const char* haystack,const char* haystack_end,const char* needle,const char* needle_end);
extern __declspec(dllexport) void igImStrTrimBlanks(char* str);
extern __declspec(dllexport) const char* igImStrSkipBlank(const char* str);
extern __declspec(dllexport) int igImStrlenW(const ImWchar* str);
extern __declspec(dllexport) const char* igImStrbol(const char* buf_mid_line,const char* buf_begin);
extern __declspec(dllexport) char igImToUpper(char c);
extern __declspec(dllexport) bool igImCharIsBlankA(char c);
extern __declspec(dllexport) bool igImCharIsBlankW(unsigned int c);
extern __declspec(dllexport) bool igImCharIsXdigitA(char c);
extern __declspec(dllexport) int igImFormatString(char* buf,size_t buf_size,const char* fmt,...);
extern __declspec(dllexport) int igImFormatStringV(char* buf,size_t buf_size,const char* fmt,va_list args);
extern __declspec(dllexport) void igImFormatStringToTempBuffer(const char** out_buf,const char** out_buf_end,const char* fmt,...);
extern __declspec(dllexport) void igImFormatStringToTempBufferV(const char** out_buf,const char** out_buf_end,const char* fmt,va_list args);
extern __declspec(dllexport) const char* igImParseFormatFindStart(const char* format);
extern __declspec(dllexport) const char* igImParseFormatFindEnd(const char* format);
extern __declspec(dllexport) const char* igImParseFormatTrimDecorations(const char* format,char* buf,size_t buf_size);
extern __declspec(dllexport) void igImParseFormatSanitizeForPrinting(const char* fmt_in,char* fmt_out,size_t fmt_out_size);
extern __declspec(dllexport) const char* igImParseFormatSanitizeForScanning(const char* fmt_in,char* fmt_out,size_t fmt_out_size);
extern __declspec(dllexport) int igImParseFormatPrecision(const char* format,int default_value);
extern __declspec(dllexport) const char* igImTextCharToUtf8(char out_buf[5],unsigned int c);
extern __declspec(dllexport) int igImTextStrToUtf8(char* out_buf,int out_buf_size,const ImWchar* in_text,const ImWchar* in_text_end);
extern __declspec(dllexport) int igImTextCharFromUtf8(unsigned int* out_char,const char* in_text,const char* in_text_end);
extern __declspec(dllexport) int igImTextStrFromUtf8(ImWchar* out_buf,int out_buf_size,const char* in_text,const char* in_text_end,const char** in_remaining);
extern __declspec(dllexport) int igImTextCountCharsFromUtf8(const char* in_text,const char* in_text_end);
extern __declspec(dllexport) int igImTextCountUtf8BytesFromChar(const char* in_text,const char* in_text_end);
extern __declspec(dllexport) int igImTextCountUtf8BytesFromStr(const ImWchar* in_text,const ImWchar* in_text_end);
extern __declspec(dllexport) const char* igImTextFindPreviousUtf8Codepoint(const char* in_text_start,const char* in_text_curr);
extern __declspec(dllexport) int igImTextCountLines(const char* in_text,const char* in_text_end);
extern __declspec(dllexport) ImFileHandle igImFileOpen(const char* filename,const char* mode);
extern __declspec(dllexport) bool igImFileClose(ImFileHandle file);
extern __declspec(dllexport) ImU64 igImFileGetSize(ImFileHandle file);
extern __declspec(dllexport) ImU64 igImFileRead(void* data,ImU64 size,ImU64 count,ImFileHandle file);
extern __declspec(dllexport) ImU64 igImFileWrite(const void* data,ImU64 size,ImU64 count,ImFileHandle file);
extern __declspec(dllexport) void* igImFileLoadToMemory(const char* filename,const char* mode,size_t* out_file_size,int padding_bytes);
extern __declspec(dllexport) float igImPow_Float(float x,float y);
extern __declspec(dllexport) double igImPow_double(double x,double y);
extern __declspec(dllexport) float igImLog_Float(float x);
extern __declspec(dllexport) double igImLog_double(double x);
extern __declspec(dllexport) int igImAbs_Int(int x);
extern __declspec(dllexport) float igImAbs_Float(float x);
extern __declspec(dllexport) double igImAbs_double(double x);
extern __declspec(dllexport) float igImSign_Float(float x);
extern __declspec(dllexport) double igImSign_double(double x);
extern __declspec(dllexport) float igImRsqrt_Float(float x);
extern __declspec(dllexport) double igImRsqrt_double(double x);
extern __declspec(dllexport) void igImMin(ImVec2 *pOut,const ImVec2 lhs,const ImVec2 rhs);
extern __declspec(dllexport) void igImMax(ImVec2 *pOut,const ImVec2 lhs,const ImVec2 rhs);
extern __declspec(dllexport) void igImClamp(ImVec2 *pOut,const ImVec2 v,const ImVec2 mn,const ImVec2 mx);
extern __declspec(dllexport) void igImLerp_Vec2Float(ImVec2 *pOut,const ImVec2 a,const ImVec2 b,float t);
extern __declspec(dllexport) void igImLerp_Vec2Vec2(ImVec2 *pOut,const ImVec2 a,const ImVec2 b,const ImVec2 t);
extern __declspec(dllexport) void igImLerp_Vec4(ImVec4 *pOut,const ImVec4 a,const ImVec4 b,float t);
extern __declspec(dllexport) float igImSaturate(float f);
extern __declspec(dllexport) float igImLengthSqr_Vec2(const ImVec2 lhs);
extern __declspec(dllexport) float igImLengthSqr_Vec4(const ImVec4 lhs);
extern __declspec(dllexport) float igImInvLength(const ImVec2 lhs,float fail_value);
extern __declspec(dllexport) float igImTrunc_Float(float f);
extern __declspec(dllexport) void igImTrunc_Vec2(ImVec2 *pOut,const ImVec2 v);
extern __declspec(dllexport) float igImFloor_Float(float f);
extern __declspec(dllexport) void igImFloor_Vec2(ImVec2 *pOut,const ImVec2 v);
extern __declspec(dllexport) int igImModPositive(int a,int b);
extern __declspec(dllexport) float igImDot(const ImVec2 a,const ImVec2 b);
extern __declspec(dllexport) void igImRotate(ImVec2 *pOut,const ImVec2 v,float cos_a,float sin_a);
extern __declspec(dllexport) float igImLinearSweep(float current,float target,float speed);
extern __declspec(dllexport) float igImLinearRemapClamp(float s0,float s1,float d0,float d1,float x);
extern __declspec(dllexport) void igImMul(ImVec2 *pOut,const ImVec2 lhs,const ImVec2 rhs);
extern __declspec(dllexport) bool igImIsFloatAboveGuaranteedIntegerPrecision(float f);
extern __declspec(dllexport) float igImExponentialMovingAverage(float avg,float sample,int n);
extern __declspec(dllexport) void igImBezierCubicCalc(ImVec2 *pOut,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,const ImVec2 p4,float t);
extern __declspec(dllexport) void igImBezierCubicClosestPoint(ImVec2 *pOut,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,const ImVec2 p4,const ImVec2 p,int num_segments);
extern __declspec(dllexport) void igImBezierCubicClosestPointCasteljau(ImVec2 *pOut,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,const ImVec2 p4,const ImVec2 p,float tess_tol);
extern __declspec(dllexport) void igImBezierQuadraticCalc(ImVec2 *pOut,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,float t);
extern __declspec(dllexport) void igImLineClosestPoint(ImVec2 *pOut,const ImVec2 a,const ImVec2 b,const ImVec2 p);
extern __declspec(dllexport) bool igImTriangleContainsPoint(const ImVec2 a,const ImVec2 b,const ImVec2 c,const ImVec2 p);
extern __declspec(dllexport) void igImTriangleClosestPoint(ImVec2 *pOut,const ImVec2 a,const ImVec2 b,const ImVec2 c,const ImVec2 p);
extern __declspec(dllexport) void igImTriangleBarycentricCoords(const ImVec2 a,const ImVec2 b,const ImVec2 c,const ImVec2 p,float* out_u,float* out_v,float* out_w);
extern __declspec(dllexport) float igImTriangleArea(const ImVec2 a,const ImVec2 b,const ImVec2 c);
extern __declspec(dllexport) bool igImTriangleIsClockwise(const ImVec2 a,const ImVec2 b,const ImVec2 c);
extern __declspec(dllexport) ImVec1* ImVec1_ImVec1_Nil(void);
extern __declspec(dllexport) void ImVec1_destroy(ImVec1* self);
extern __declspec(dllexport) ImVec1* ImVec1_ImVec1_Float(float _x);
extern __declspec(dllexport) ImVec2ih* ImVec2ih_ImVec2ih_Nil(void);
extern __declspec(dllexport) void ImVec2ih_destroy(ImVec2ih* self);
extern __declspec(dllexport) ImVec2ih* ImVec2ih_ImVec2ih_short(short _x,short _y);
extern __declspec(dllexport) ImVec2ih* ImVec2ih_ImVec2ih_Vec2(const ImVec2 rhs);
extern __declspec(dllexport) ImRect* ImRect_ImRect_Nil(void);
extern __declspec(dllexport) void ImRect_destroy(ImRect* self);
extern __declspec(dllexport) ImRect* ImRect_ImRect_Vec2(const ImVec2 min,const ImVec2 max);
extern __declspec(dllexport) ImRect* ImRect_ImRect_Vec4(const ImVec4 v);
extern __declspec(dllexport) ImRect* ImRect_ImRect_Float(float x1,float y1,float x2,float y2);
extern __declspec(dllexport) void ImRect_GetCenter(ImVec2 *pOut,ImRect* self);
extern __declspec(dllexport) void ImRect_GetSize(ImVec2 *pOut,ImRect* self);
extern __declspec(dllexport) float ImRect_GetWidth(ImRect* self);
extern __declspec(dllexport) float ImRect_GetHeight(ImRect* self);
extern __declspec(dllexport) float ImRect_GetArea(ImRect* self);
extern __declspec(dllexport) void ImRect_GetTL(ImVec2 *pOut,ImRect* self);
extern __declspec(dllexport) void ImRect_GetTR(ImVec2 *pOut,ImRect* self);
extern __declspec(dllexport) void ImRect_GetBL(ImVec2 *pOut,ImRect* self);
extern __declspec(dllexport) void ImRect_GetBR(ImVec2 *pOut,ImRect* self);
extern __declspec(dllexport) bool ImRect_Contains_Vec2(ImRect* self,const ImVec2 p);
extern __declspec(dllexport) bool ImRect_Contains_Rect(ImRect* self,const ImRect r);
extern __declspec(dllexport) bool ImRect_ContainsWithPad(ImRect* self,const ImVec2 p,const ImVec2 pad);
extern __declspec(dllexport) bool ImRect_Overlaps(ImRect* self,const ImRect r);
extern __declspec(dllexport) void ImRect_Add_Vec2(ImRect* self,const ImVec2 p);
extern __declspec(dllexport) void ImRect_Add_Rect(ImRect* self,const ImRect r);
extern __declspec(dllexport) void ImRect_Expand_Float(ImRect* self,const float amount);
extern __declspec(dllexport) void ImRect_Expand_Vec2(ImRect* self,const ImVec2 amount);
extern __declspec(dllexport) void ImRect_Translate(ImRect* self,const ImVec2 d);
extern __declspec(dllexport) void ImRect_TranslateX(ImRect* self,float dx);
extern __declspec(dllexport) void ImRect_TranslateY(ImRect* self,float dy);
extern __declspec(dllexport) void ImRect_ClipWith(ImRect* self,const ImRect r);
extern __declspec(dllexport) void ImRect_ClipWithFull(ImRect* self,const ImRect r);
extern __declspec(dllexport) void ImRect_Floor(ImRect* self);
extern __declspec(dllexport) bool ImRect_IsInverted(ImRect* self);
extern __declspec(dllexport) void ImRect_ToVec4(ImVec4 *pOut,ImRect* self);
extern __declspec(dllexport) size_t igImBitArrayGetStorageSizeInBytes(int bitcount);
extern __declspec(dllexport) void igImBitArrayClearAllBits(ImU32* arr,int bitcount);
extern __declspec(dllexport) bool igImBitArrayTestBit(const ImU32* arr,int n);
extern __declspec(dllexport) void igImBitArrayClearBit(ImU32* arr,int n);
extern __declspec(dllexport) void igImBitArraySetBit(ImU32* arr,int n);
extern __declspec(dllexport) void igImBitArraySetBitRange(ImU32* arr,int n,int n2);
extern __declspec(dllexport) void ImBitVector_Create(ImBitVector* self,int sz);
extern __declspec(dllexport) void ImBitVector_Clear(ImBitVector* self);
extern __declspec(dllexport) bool ImBitVector_TestBit(ImBitVector* self,int n);
extern __declspec(dllexport) void ImBitVector_SetBit(ImBitVector* self,int n);
extern __declspec(dllexport) void ImBitVector_ClearBit(ImBitVector* self,int n);
extern __declspec(dllexport) void ImGuiTextIndex_clear(ImGuiTextIndex* self);
extern __declspec(dllexport) int ImGuiTextIndex_size(ImGuiTextIndex* self);
extern __declspec(dllexport) const char* ImGuiTextIndex_get_line_begin(ImGuiTextIndex* self,const char* base,int n);
extern __declspec(dllexport) const char* ImGuiTextIndex_get_line_end(ImGuiTextIndex* self,const char* base,int n);
extern __declspec(dllexport) void ImGuiTextIndex_append(ImGuiTextIndex* self,const char* base,int old_size,int new_size);
extern __declspec(dllexport) ImGuiStoragePair* igImLowerBound(ImGuiStoragePair* in_begin,ImGuiStoragePair* in_end,ImGuiID key);
extern __declspec(dllexport) ImDrawListSharedData* ImDrawListSharedData_ImDrawListSharedData(void);
extern __declspec(dllexport) void ImDrawListSharedData_destroy(ImDrawListSharedData* self);
extern __declspec(dllexport) void ImDrawListSharedData_SetCircleTessellationMaxError(ImDrawListSharedData* self,float max_error);
extern __declspec(dllexport) ImDrawDataBuilder* ImDrawDataBuilder_ImDrawDataBuilder(void);
extern __declspec(dllexport) void ImDrawDataBuilder_destroy(ImDrawDataBuilder* self);
extern __declspec(dllexport) void* ImGuiDataVarInfo_GetVarPtr(ImGuiDataVarInfo* self,void* parent);
extern __declspec(dllexport) ImGuiStyleMod* ImGuiStyleMod_ImGuiStyleMod_Int(ImGuiStyleVar idx,int v);
extern __declspec(dllexport) void ImGuiStyleMod_destroy(ImGuiStyleMod* self);
extern __declspec(dllexport) ImGuiStyleMod* ImGuiStyleMod_ImGuiStyleMod_Float(ImGuiStyleVar idx,float v);
extern __declspec(dllexport) ImGuiStyleMod* ImGuiStyleMod_ImGuiStyleMod_Vec2(ImGuiStyleVar idx,ImVec2 v);
extern __declspec(dllexport) ImGuiComboPreviewData* ImGuiComboPreviewData_ImGuiComboPreviewData(void);
extern __declspec(dllexport) void ImGuiComboPreviewData_destroy(ImGuiComboPreviewData* self);
extern __declspec(dllexport) ImGuiMenuColumns* ImGuiMenuColumns_ImGuiMenuColumns(void);
extern __declspec(dllexport) void ImGuiMenuColumns_destroy(ImGuiMenuColumns* self);
extern __declspec(dllexport) void ImGuiMenuColumns_Update(ImGuiMenuColumns* self,float spacing,bool window_reappearing);
extern __declspec(dllexport) float ImGuiMenuColumns_DeclColumns(ImGuiMenuColumns* self,float w_icon,float w_label,float w_shortcut,float w_mark);
extern __declspec(dllexport) void ImGuiMenuColumns_CalcNextTotalWidth(ImGuiMenuColumns* self,bool update_offsets);
extern __declspec(dllexport) ImGuiInputTextDeactivatedState* ImGuiInputTextDeactivatedState_ImGuiInputTextDeactivatedState(void);
extern __declspec(dllexport) void ImGuiInputTextDeactivatedState_destroy(ImGuiInputTextDeactivatedState* self);
extern __declspec(dllexport) void ImGuiInputTextDeactivatedState_ClearFreeMemory(ImGuiInputTextDeactivatedState* self);
extern __declspec(dllexport) ImGuiInputTextState* ImGuiInputTextState_ImGuiInputTextState(void);
extern __declspec(dllexport) void ImGuiInputTextState_destroy(ImGuiInputTextState* self);
extern __declspec(dllexport) void ImGuiInputTextState_ClearText(ImGuiInputTextState* self);
extern __declspec(dllexport) void ImGuiInputTextState_ClearFreeMemory(ImGuiInputTextState* self);
extern __declspec(dllexport) void ImGuiInputTextState_OnKeyPressed(ImGuiInputTextState* self,int key);
extern __declspec(dllexport) void ImGuiInputTextState_OnCharPressed(ImGuiInputTextState* self,unsigned int c);
extern __declspec(dllexport) void ImGuiInputTextState_CursorAnimReset(ImGuiInputTextState* self);
extern __declspec(dllexport) void ImGuiInputTextState_CursorClamp(ImGuiInputTextState* self);
extern __declspec(dllexport) bool ImGuiInputTextState_HasSelection(ImGuiInputTextState* self);
extern __declspec(dllexport) void ImGuiInputTextState_ClearSelection(ImGuiInputTextState* self);
extern __declspec(dllexport) int ImGuiInputTextState_GetCursorPos(ImGuiInputTextState* self);
extern __declspec(dllexport) int ImGuiInputTextState_GetSelectionStart(ImGuiInputTextState* self);
extern __declspec(dllexport) int ImGuiInputTextState_GetSelectionEnd(ImGuiInputTextState* self);
extern __declspec(dllexport) void ImGuiInputTextState_SelectAll(ImGuiInputTextState* self);
extern __declspec(dllexport) void ImGuiInputTextState_ReloadUserBufAndSelectAll(ImGuiInputTextState* self);
extern __declspec(dllexport) void ImGuiInputTextState_ReloadUserBufAndKeepSelection(ImGuiInputTextState* self);
extern __declspec(dllexport) void ImGuiInputTextState_ReloadUserBufAndMoveToEnd(ImGuiInputTextState* self);
extern __declspec(dllexport) ImGuiNextWindowData* ImGuiNextWindowData_ImGuiNextWindowData(void);
extern __declspec(dllexport) void ImGuiNextWindowData_destroy(ImGuiNextWindowData* self);
extern __declspec(dllexport) void ImGuiNextWindowData_ClearFlags(ImGuiNextWindowData* self);
extern __declspec(dllexport) ImGuiNextItemData* ImGuiNextItemData_ImGuiNextItemData(void);
extern __declspec(dllexport) void ImGuiNextItemData_destroy(ImGuiNextItemData* self);
extern __declspec(dllexport) void ImGuiNextItemData_ClearFlags(ImGuiNextItemData* self);
extern __declspec(dllexport) ImGuiLastItemData* ImGuiLastItemData_ImGuiLastItemData(void);
extern __declspec(dllexport) void ImGuiLastItemData_destroy(ImGuiLastItemData* self);
extern __declspec(dllexport) ImGuiErrorRecoveryState* ImGuiErrorRecoveryState_ImGuiErrorRecoveryState(void);
extern __declspec(dllexport) void ImGuiErrorRecoveryState_destroy(ImGuiErrorRecoveryState* self);
extern __declspec(dllexport) ImGuiPtrOrIndex* ImGuiPtrOrIndex_ImGuiPtrOrIndex_Ptr(void* ptr);
extern __declspec(dllexport) void ImGuiPtrOrIndex_destroy(ImGuiPtrOrIndex* self);
extern __declspec(dllexport) ImGuiPtrOrIndex* ImGuiPtrOrIndex_ImGuiPtrOrIndex_Int(int index);
extern __declspec(dllexport) ImGuiPopupData* ImGuiPopupData_ImGuiPopupData(void);
extern __declspec(dllexport) void ImGuiPopupData_destroy(ImGuiPopupData* self);
extern __declspec(dllexport) ImGuiInputEvent* ImGuiInputEvent_ImGuiInputEvent(void);
extern __declspec(dllexport) void ImGuiInputEvent_destroy(ImGuiInputEvent* self);
extern __declspec(dllexport) ImGuiKeyRoutingData* ImGuiKeyRoutingData_ImGuiKeyRoutingData(void);
extern __declspec(dllexport) void ImGuiKeyRoutingData_destroy(ImGuiKeyRoutingData* self);
extern __declspec(dllexport) ImGuiKeyRoutingTable* ImGuiKeyRoutingTable_ImGuiKeyRoutingTable(void);
extern __declspec(dllexport) void ImGuiKeyRoutingTable_destroy(ImGuiKeyRoutingTable* self);
extern __declspec(dllexport) void ImGuiKeyRoutingTable_Clear(ImGuiKeyRoutingTable* self);
extern __declspec(dllexport) ImGuiKeyOwnerData* ImGuiKeyOwnerData_ImGuiKeyOwnerData(void);
extern __declspec(dllexport) void ImGuiKeyOwnerData_destroy(ImGuiKeyOwnerData* self);
extern __declspec(dllexport) ImGuiListClipperRange ImGuiListClipperRange_FromIndices(int min,int max);
extern __declspec(dllexport) ImGuiListClipperRange ImGuiListClipperRange_FromPositions(float y1,float y2,int off_min,int off_max);
extern __declspec(dllexport) ImGuiListClipperData* ImGuiListClipperData_ImGuiListClipperData(void);
extern __declspec(dllexport) void ImGuiListClipperData_destroy(ImGuiListClipperData* self);
extern __declspec(dllexport) void ImGuiListClipperData_Reset(ImGuiListClipperData* self,ImGuiListClipper* clipper);
extern __declspec(dllexport) ImGuiNavItemData* ImGuiNavItemData_ImGuiNavItemData(void);
extern __declspec(dllexport) void ImGuiNavItemData_destroy(ImGuiNavItemData* self);
extern __declspec(dllexport) void ImGuiNavItemData_Clear(ImGuiNavItemData* self);
extern __declspec(dllexport) ImGuiTypingSelectState* ImGuiTypingSelectState_ImGuiTypingSelectState(void);
extern __declspec(dllexport) void ImGuiTypingSelectState_destroy(ImGuiTypingSelectState* self);
extern __declspec(dllexport) void ImGuiTypingSelectState_Clear(ImGuiTypingSelectState* self);
extern __declspec(dllexport) ImGuiOldColumnData* ImGuiOldColumnData_ImGuiOldColumnData(void);
extern __declspec(dllexport) void ImGuiOldColumnData_destroy(ImGuiOldColumnData* self);
extern __declspec(dllexport) ImGuiOldColumns* ImGuiOldColumns_ImGuiOldColumns(void);
extern __declspec(dllexport) void ImGuiOldColumns_destroy(ImGuiOldColumns* self);
extern __declspec(dllexport) ImGuiBoxSelectState* ImGuiBoxSelectState_ImGuiBoxSelectState(void);
extern __declspec(dllexport) void ImGuiBoxSelectState_destroy(ImGuiBoxSelectState* self);
extern __declspec(dllexport) ImGuiMultiSelectTempData* ImGuiMultiSelectTempData_ImGuiMultiSelectTempData(void);
extern __declspec(dllexport) void ImGuiMultiSelectTempData_destroy(ImGuiMultiSelectTempData* self);
extern __declspec(dllexport) void ImGuiMultiSelectTempData_Clear(ImGuiMultiSelectTempData* self);
extern __declspec(dllexport) void ImGuiMultiSelectTempData_ClearIO(ImGuiMultiSelectTempData* self);
extern __declspec(dllexport) ImGuiMultiSelectState* ImGuiMultiSelectState_ImGuiMultiSelectState(void);
extern __declspec(dllexport) void ImGuiMultiSelectState_destroy(ImGuiMultiSelectState* self);
extern __declspec(dllexport) ImGuiDockNode* ImGuiDockNode_ImGuiDockNode(ImGuiID id);
extern __declspec(dllexport) void ImGuiDockNode_destroy(ImGuiDockNode* self);
extern __declspec(dllexport) bool ImGuiDockNode_IsRootNode(ImGuiDockNode* self);
extern __declspec(dllexport) bool ImGuiDockNode_IsDockSpace(ImGuiDockNode* self);
extern __declspec(dllexport) bool ImGuiDockNode_IsFloatingNode(ImGuiDockNode* self);
extern __declspec(dllexport) bool ImGuiDockNode_IsCentralNode(ImGuiDockNode* self);
extern __declspec(dllexport) bool ImGuiDockNode_IsHiddenTabBar(ImGuiDockNode* self);
extern __declspec(dllexport) bool ImGuiDockNode_IsNoTabBar(ImGuiDockNode* self);
extern __declspec(dllexport) bool ImGuiDockNode_IsSplitNode(ImGuiDockNode* self);
extern __declspec(dllexport) bool ImGuiDockNode_IsLeafNode(ImGuiDockNode* self);
extern __declspec(dllexport) bool ImGuiDockNode_IsEmpty(ImGuiDockNode* self);
extern __declspec(dllexport) void ImGuiDockNode_Rect(ImRect *pOut,ImGuiDockNode* self);
extern __declspec(dllexport) void ImGuiDockNode_SetLocalFlags(ImGuiDockNode* self,ImGuiDockNodeFlags flags);
extern __declspec(dllexport) void ImGuiDockNode_UpdateMergedFlags(ImGuiDockNode* self);
extern __declspec(dllexport) ImGuiDockContext* ImGuiDockContext_ImGuiDockContext(void);
extern __declspec(dllexport) void ImGuiDockContext_destroy(ImGuiDockContext* self);
extern __declspec(dllexport) ImGuiViewportP* ImGuiViewportP_ImGuiViewportP(void);
extern __declspec(dllexport) void ImGuiViewportP_destroy(ImGuiViewportP* self);
extern __declspec(dllexport) void ImGuiViewportP_ClearRequestFlags(ImGuiViewportP* self);
extern __declspec(dllexport) void ImGuiViewportP_CalcWorkRectPos(ImVec2 *pOut,ImGuiViewportP* self,const ImVec2 inset_min);
extern __declspec(dllexport) void ImGuiViewportP_CalcWorkRectSize(ImVec2 *pOut,ImGuiViewportP* self,const ImVec2 inset_min,const ImVec2 inset_max);
extern __declspec(dllexport) void ImGuiViewportP_UpdateWorkRect(ImGuiViewportP* self);
extern __declspec(dllexport) void ImGuiViewportP_GetMainRect(ImRect *pOut,ImGuiViewportP* self);
extern __declspec(dllexport) void ImGuiViewportP_GetWorkRect(ImRect *pOut,ImGuiViewportP* self);
extern __declspec(dllexport) void ImGuiViewportP_GetBuildWorkRect(ImRect *pOut,ImGuiViewportP* self);
extern __declspec(dllexport) ImGuiWindowSettings* ImGuiWindowSettings_ImGuiWindowSettings(void);
extern __declspec(dllexport) void ImGuiWindowSettings_destroy(ImGuiWindowSettings* self);
extern __declspec(dllexport) char* ImGuiWindowSettings_GetName(ImGuiWindowSettings* self);
extern __declspec(dllexport) ImGuiSettingsHandler* ImGuiSettingsHandler_ImGuiSettingsHandler(void);
extern __declspec(dllexport) void ImGuiSettingsHandler_destroy(ImGuiSettingsHandler* self);
extern __declspec(dllexport) ImGuiDebugAllocInfo* ImGuiDebugAllocInfo_ImGuiDebugAllocInfo(void);
extern __declspec(dllexport) void ImGuiDebugAllocInfo_destroy(ImGuiDebugAllocInfo* self);
extern __declspec(dllexport) ImGuiStackLevelInfo* ImGuiStackLevelInfo_ImGuiStackLevelInfo(void);
extern __declspec(dllexport) void ImGuiStackLevelInfo_destroy(ImGuiStackLevelInfo* self);
extern __declspec(dllexport) ImGuiIDStackTool* ImGuiIDStackTool_ImGuiIDStackTool(void);
extern __declspec(dllexport) void ImGuiIDStackTool_destroy(ImGuiIDStackTool* self);
extern __declspec(dllexport) ImGuiContextHook* ImGuiContextHook_ImGuiContextHook(void);
extern __declspec(dllexport) void ImGuiContextHook_destroy(ImGuiContextHook* self);
extern __declspec(dllexport) ImGuiContext* ImGuiContext_ImGuiContext(ImFontAtlas* shared_font_atlas);
extern __declspec(dllexport) void ImGuiContext_destroy(ImGuiContext* self);
extern __declspec(dllexport) ImGuiWindow* ImGuiWindow_ImGuiWindow(ImGuiContext* context,const char* name);
extern __declspec(dllexport) void ImGuiWindow_destroy(ImGuiWindow* self);
extern __declspec(dllexport) ImGuiID ImGuiWindow_GetID_Str(ImGuiWindow* self,const char* str,const char* str_end);
extern __declspec(dllexport) ImGuiID ImGuiWindow_GetID_Ptr(ImGuiWindow* self,const void* ptr);
extern __declspec(dllexport) ImGuiID ImGuiWindow_GetID_Int(ImGuiWindow* self,int n);
extern __declspec(dllexport) ImGuiID ImGuiWindow_GetIDFromPos(ImGuiWindow* self,const ImVec2 p_abs);
extern __declspec(dllexport) ImGuiID ImGuiWindow_GetIDFromRectangle(ImGuiWindow* self,const ImRect r_abs);
extern __declspec(dllexport) void ImGuiWindow_Rect(ImRect *pOut,ImGuiWindow* self);
extern __declspec(dllexport) float ImGuiWindow_CalcFontSize(ImGuiWindow* self);
extern __declspec(dllexport) void ImGuiWindow_TitleBarRect(ImRect *pOut,ImGuiWindow* self);
extern __declspec(dllexport) void ImGuiWindow_MenuBarRect(ImRect *pOut,ImGuiWindow* self);
extern __declspec(dllexport) ImGuiTabItem* ImGuiTabItem_ImGuiTabItem(void);
extern __declspec(dllexport) void ImGuiTabItem_destroy(ImGuiTabItem* self);
extern __declspec(dllexport) ImGuiTabBar* ImGuiTabBar_ImGuiTabBar(void);
extern __declspec(dllexport) void ImGuiTabBar_destroy(ImGuiTabBar* self);
extern __declspec(dllexport) ImGuiTableColumn* ImGuiTableColumn_ImGuiTableColumn(void);
extern __declspec(dllexport) void ImGuiTableColumn_destroy(ImGuiTableColumn* self);
extern __declspec(dllexport) ImGuiTableInstanceData* ImGuiTableInstanceData_ImGuiTableInstanceData(void);
extern __declspec(dllexport) void ImGuiTableInstanceData_destroy(ImGuiTableInstanceData* self);
extern __declspec(dllexport) ImGuiTable* ImGuiTable_ImGuiTable(void);
extern __declspec(dllexport) void ImGuiTable_destroy(ImGuiTable* self);
extern __declspec(dllexport) ImGuiTableTempData* ImGuiTableTempData_ImGuiTableTempData(void);
extern __declspec(dllexport) void ImGuiTableTempData_destroy(ImGuiTableTempData* self);
extern __declspec(dllexport) ImGuiTableColumnSettings* ImGuiTableColumnSettings_ImGuiTableColumnSettings(void);
extern __declspec(dllexport) void ImGuiTableColumnSettings_destroy(ImGuiTableColumnSettings* self);
extern __declspec(dllexport) ImGuiTableSettings* ImGuiTableSettings_ImGuiTableSettings(void);
extern __declspec(dllexport) void ImGuiTableSettings_destroy(ImGuiTableSettings* self);
extern __declspec(dllexport) ImGuiTableColumnSettings* ImGuiTableSettings_GetColumnSettings(ImGuiTableSettings* self);
extern __declspec(dllexport) ImGuiWindow* igGetCurrentWindowRead(void);
extern __declspec(dllexport) ImGuiWindow* igGetCurrentWindow(void);
extern __declspec(dllexport) ImGuiWindow* igFindWindowByID(ImGuiID id);
extern __declspec(dllexport) ImGuiWindow* igFindWindowByName(const char* name);
extern __declspec(dllexport) void igUpdateWindowParentAndRootLinks(ImGuiWindow* window,ImGuiWindowFlags flags,ImGuiWindow* parent_window);
extern __declspec(dllexport) void igUpdateWindowSkipRefresh(ImGuiWindow* window);
extern __declspec(dllexport) void igCalcWindowNextAutoFitSize(ImVec2 *pOut,ImGuiWindow* window);
extern __declspec(dllexport) bool igIsWindowChildOf(ImGuiWindow* window,ImGuiWindow* potential_parent,bool popup_hierarchy,bool dock_hierarchy);
extern __declspec(dllexport) bool igIsWindowWithinBeginStackOf(ImGuiWindow* window,ImGuiWindow* potential_parent);
extern __declspec(dllexport) bool igIsWindowAbove(ImGuiWindow* potential_above,ImGuiWindow* potential_below);
extern __declspec(dllexport) bool igIsWindowNavFocusable(ImGuiWindow* window);
extern __declspec(dllexport) void igSetWindowPos_WindowPtr(ImGuiWindow* window,const ImVec2 pos,ImGuiCond cond);
extern __declspec(dllexport) void igSetWindowSize_WindowPtr(ImGuiWindow* window,const ImVec2 size,ImGuiCond cond);
extern __declspec(dllexport) void igSetWindowCollapsed_WindowPtr(ImGuiWindow* window,bool collapsed,ImGuiCond cond);
extern __declspec(dllexport) void igSetWindowHitTestHole(ImGuiWindow* window,const ImVec2 pos,const ImVec2 size);
extern __declspec(dllexport) void igSetWindowHiddenAndSkipItemsForCurrentFrame(ImGuiWindow* window);
extern __declspec(dllexport) void igSetWindowParentWindowForFocusRoute(ImGuiWindow* window,ImGuiWindow* parent_window);
extern __declspec(dllexport) void igWindowRectAbsToRel(ImRect *pOut,ImGuiWindow* window,const ImRect r);
extern __declspec(dllexport) void igWindowRectRelToAbs(ImRect *pOut,ImGuiWindow* window,const ImRect r);
extern __declspec(dllexport) void igWindowPosAbsToRel(ImVec2 *pOut,ImGuiWindow* window,const ImVec2 p);
extern __declspec(dllexport) void igWindowPosRelToAbs(ImVec2 *pOut,ImGuiWindow* window,const ImVec2 p);
extern __declspec(dllexport) void igFocusWindow(ImGuiWindow* window,ImGuiFocusRequestFlags flags);
extern __declspec(dllexport) void igFocusTopMostWindowUnderOne(ImGuiWindow* under_this_window,ImGuiWindow* ignore_window,ImGuiViewport* filter_viewport,ImGuiFocusRequestFlags flags);
extern __declspec(dllexport) void igBringWindowToFocusFront(ImGuiWindow* window);
extern __declspec(dllexport) void igBringWindowToDisplayFront(ImGuiWindow* window);
extern __declspec(dllexport) void igBringWindowToDisplayBack(ImGuiWindow* window);
extern __declspec(dllexport) void igBringWindowToDisplayBehind(ImGuiWindow* window,ImGuiWindow* above_window);
extern __declspec(dllexport) int igFindWindowDisplayIndex(ImGuiWindow* window);
extern __declspec(dllexport) ImGuiWindow* igFindBottomMostVisibleWindowWithinBeginStack(ImGuiWindow* window);
extern __declspec(dllexport) void igSetNextWindowRefreshPolicy(ImGuiWindowRefreshFlags flags);
extern __declspec(dllexport) void igSetCurrentFont(ImFont* font);
extern __declspec(dllexport) ImFont* igGetDefaultFont(void);
extern __declspec(dllexport) ImDrawList* igGetForegroundDrawList_WindowPtr(ImGuiWindow* window);
extern __declspec(dllexport) void igAddDrawListToDrawDataEx(ImDrawData* draw_data,ImVector_ImDrawListPtr* out_list,ImDrawList* draw_list);
extern __declspec(dllexport) void igInitialize(void);
extern __declspec(dllexport) void igShutdown(void);
extern __declspec(dllexport) void igUpdateInputEvents(bool trickle_fast_inputs);
extern __declspec(dllexport) void igUpdateHoveredWindowAndCaptureFlags(void);
extern __declspec(dllexport) void igFindHoveredWindowEx(const ImVec2 pos,bool find_first_and_in_any_viewport,ImGuiWindow** out_hovered_window,ImGuiWindow** out_hovered_window_under_moving_window);
extern __declspec(dllexport) void igStartMouseMovingWindow(ImGuiWindow* window);
extern __declspec(dllexport) void igStartMouseMovingWindowOrNode(ImGuiWindow* window,ImGuiDockNode* node,bool undock);
extern __declspec(dllexport) void igUpdateMouseMovingWindowNewFrame(void);
extern __declspec(dllexport) void igUpdateMouseMovingWindowEndFrame(void);
extern __declspec(dllexport) ImGuiID igAddContextHook(ImGuiContext* context,const ImGuiContextHook* hook);
extern __declspec(dllexport) void igRemoveContextHook(ImGuiContext* context,ImGuiID hook_to_remove);
extern __declspec(dllexport) void igCallContextHooks(ImGuiContext* context,ImGuiContextHookType type);
extern __declspec(dllexport) void igTranslateWindowsInViewport(ImGuiViewportP* viewport,const ImVec2 old_pos,const ImVec2 new_pos,const ImVec2 old_size,const ImVec2 new_size);
extern __declspec(dllexport) void igScaleWindowsInViewport(ImGuiViewportP* viewport,float scale);
extern __declspec(dllexport) void igDestroyPlatformWindow(ImGuiViewportP* viewport);
extern __declspec(dllexport) void igSetWindowViewport(ImGuiWindow* window,ImGuiViewportP* viewport);
extern __declspec(dllexport) void igSetCurrentViewport(ImGuiWindow* window,ImGuiViewportP* viewport);
extern __declspec(dllexport) const ImGuiPlatformMonitor* igGetViewportPlatformMonitor(ImGuiViewport* viewport);
extern __declspec(dllexport) ImGuiViewportP* igFindHoveredViewportFromPlatformWindowStack(const ImVec2 mouse_platform_pos);
extern __declspec(dllexport) void igMarkIniSettingsDirty_Nil(void);
extern __declspec(dllexport) void igMarkIniSettingsDirty_WindowPtr(ImGuiWindow* window);
extern __declspec(dllexport) void igClearIniSettings(void);
extern __declspec(dllexport) void igAddSettingsHandler(const ImGuiSettingsHandler* handler);
extern __declspec(dllexport) void igRemoveSettingsHandler(const char* type_name);
extern __declspec(dllexport) ImGuiSettingsHandler* igFindSettingsHandler(const char* type_name);
extern __declspec(dllexport) ImGuiWindowSettings* igCreateNewWindowSettings(const char* name);
extern __declspec(dllexport) ImGuiWindowSettings* igFindWindowSettingsByID(ImGuiID id);
extern __declspec(dllexport) ImGuiWindowSettings* igFindWindowSettingsByWindow(ImGuiWindow* window);
extern __declspec(dllexport) void igClearWindowSettings(const char* name);
extern __declspec(dllexport) void igLocalizeRegisterEntries(const ImGuiLocEntry* entries,int count);
extern __declspec(dllexport) const char* igLocalizeGetMsg(ImGuiLocKey key);
extern __declspec(dllexport) void igSetScrollX_WindowPtr(ImGuiWindow* window,float scroll_x);
extern __declspec(dllexport) void igSetScrollY_WindowPtr(ImGuiWindow* window,float scroll_y);
extern __declspec(dllexport) void igSetScrollFromPosX_WindowPtr(ImGuiWindow* window,float local_x,float center_x_ratio);
extern __declspec(dllexport) void igSetScrollFromPosY_WindowPtr(ImGuiWindow* window,float local_y,float center_y_ratio);
extern __declspec(dllexport) void igScrollToItem(ImGuiScrollFlags flags);
extern __declspec(dllexport) void igScrollToRect(ImGuiWindow* window,const ImRect rect,ImGuiScrollFlags flags);
extern __declspec(dllexport) void igScrollToRectEx(ImVec2 *pOut,ImGuiWindow* window,const ImRect rect,ImGuiScrollFlags flags);
extern __declspec(dllexport) void igScrollToBringRectIntoView(ImGuiWindow* window,const ImRect rect);
extern __declspec(dllexport) ImGuiItemStatusFlags igGetItemStatusFlags(void);
extern __declspec(dllexport) ImGuiItemFlags igGetItemFlags(void);
extern __declspec(dllexport) ImGuiID igGetActiveID(void);
extern __declspec(dllexport) ImGuiID igGetFocusID(void);
extern __declspec(dllexport) void igSetActiveID(ImGuiID id,ImGuiWindow* window);
extern __declspec(dllexport) void igSetFocusID(ImGuiID id,ImGuiWindow* window);
extern __declspec(dllexport) void igClearActiveID(void);
extern __declspec(dllexport) ImGuiID igGetHoveredID(void);
extern __declspec(dllexport) void igSetHoveredID(ImGuiID id);
extern __declspec(dllexport) void igKeepAliveID(ImGuiID id);
extern __declspec(dllexport) void igMarkItemEdited(ImGuiID id);
extern __declspec(dllexport) void igPushOverrideID(ImGuiID id);
extern __declspec(dllexport) ImGuiID igGetIDWithSeed_Str(const char* str_id_begin,const char* str_id_end,ImGuiID seed);
extern __declspec(dllexport) ImGuiID igGetIDWithSeed_Int(int n,ImGuiID seed);
extern __declspec(dllexport) void igItemSize_Vec2(const ImVec2 size,float text_baseline_y);
extern __declspec(dllexport) void igItemSize_Rect(const ImRect bb,float text_baseline_y);
extern __declspec(dllexport) bool igItemAdd(const ImRect bb,ImGuiID id,const ImRect* nav_bb,ImGuiItemFlags extra_flags);
extern __declspec(dllexport) bool igItemHoverable(const ImRect bb,ImGuiID id,ImGuiItemFlags item_flags);
extern __declspec(dllexport) bool igIsWindowContentHoverable(ImGuiWindow* window,ImGuiHoveredFlags flags);
extern __declspec(dllexport) bool igIsClippedEx(const ImRect bb,ImGuiID id);
extern __declspec(dllexport) void igSetLastItemData(ImGuiID item_id,ImGuiItemFlags in_flags,ImGuiItemStatusFlags status_flags,const ImRect item_rect);
extern __declspec(dllexport) void igCalcItemSize(ImVec2 *pOut,ImVec2 size,float default_w,float default_h);
extern __declspec(dllexport) float igCalcWrapWidthForPos(const ImVec2 pos,float wrap_pos_x);
extern __declspec(dllexport) void igPushMultiItemsWidths(int components,float width_full);
extern __declspec(dllexport) void igShrinkWidths(ImGuiShrinkWidthItem* items,int count,float width_excess);
extern __declspec(dllexport) const ImGuiDataVarInfo* igGetStyleVarInfo(ImGuiStyleVar idx);
extern __declspec(dllexport) void igBeginDisabledOverrideReenable(void);
extern __declspec(dllexport) void igEndDisabledOverrideReenable(void);
extern __declspec(dllexport) void igLogBegin(ImGuiLogType type,int auto_open_depth);
extern __declspec(dllexport) void igLogToBuffer(int auto_open_depth);
extern __declspec(dllexport) void igLogRenderedText(const ImVec2* ref_pos,const char* text,const char* text_end);
extern __declspec(dllexport) void igLogSetNextTextDecoration(const char* prefix,const char* suffix);
extern __declspec(dllexport) bool igBeginChildEx(const char* name,ImGuiID id,const ImVec2 size_arg,ImGuiChildFlags child_flags,ImGuiWindowFlags window_flags);
extern __declspec(dllexport) bool igBeginPopupEx(ImGuiID id,ImGuiWindowFlags extra_window_flags);
extern __declspec(dllexport) void igOpenPopupEx(ImGuiID id,ImGuiPopupFlags popup_flags);
extern __declspec(dllexport) void igClosePopupToLevel(int remaining,bool restore_focus_to_window_under_popup);
extern __declspec(dllexport) void igClosePopupsOverWindow(ImGuiWindow* ref_window,bool restore_focus_to_window_under_popup);
extern __declspec(dllexport) void igClosePopupsExceptModals(void);
extern __declspec(dllexport) bool igIsPopupOpen_ID(ImGuiID id,ImGuiPopupFlags popup_flags);
extern __declspec(dllexport) void igGetPopupAllowedExtentRect(ImRect *pOut,ImGuiWindow* window);
extern __declspec(dllexport) ImGuiWindow* igGetTopMostPopupModal(void);
extern __declspec(dllexport) ImGuiWindow* igGetTopMostAndVisiblePopupModal(void);
extern __declspec(dllexport) ImGuiWindow* igFindBlockingModal(ImGuiWindow* window);
extern __declspec(dllexport) void igFindBestWindowPosForPopup(ImVec2 *pOut,ImGuiWindow* window);
extern __declspec(dllexport) void igFindBestWindowPosForPopupEx(ImVec2 *pOut,const ImVec2 ref_pos,const ImVec2 size,ImGuiDir* last_dir,const ImRect r_outer,const ImRect r_avoid,ImGuiPopupPositionPolicy policy);
extern __declspec(dllexport) bool igBeginTooltipEx(ImGuiTooltipFlags tooltip_flags,ImGuiWindowFlags extra_window_flags);
extern __declspec(dllexport) bool igBeginTooltipHidden(void);
extern __declspec(dllexport) bool igBeginViewportSideBar(const char* name,ImGuiViewport* viewport,ImGuiDir dir,float size,ImGuiWindowFlags window_flags);
extern __declspec(dllexport) bool igBeginMenuEx(const char* label,const char* icon,bool enabled);
extern __declspec(dllexport) bool igMenuItemEx(const char* label,const char* icon,const char* shortcut,bool selected,bool enabled);
extern __declspec(dllexport) bool igBeginComboPopup(ImGuiID popup_id,const ImRect bb,ImGuiComboFlags flags);
extern __declspec(dllexport) bool igBeginComboPreview(void);
extern __declspec(dllexport) void igEndComboPreview(void);
extern __declspec(dllexport) void igNavInitWindow(ImGuiWindow* window,bool force_reinit);
extern __declspec(dllexport) void igNavInitRequestApplyResult(void);
extern __declspec(dllexport) bool igNavMoveRequestButNoResultYet(void);
extern __declspec(dllexport) void igNavMoveRequestSubmit(ImGuiDir move_dir,ImGuiDir clip_dir,ImGuiNavMoveFlags move_flags,ImGuiScrollFlags scroll_flags);
extern __declspec(dllexport) void igNavMoveRequestForward(ImGuiDir move_dir,ImGuiDir clip_dir,ImGuiNavMoveFlags move_flags,ImGuiScrollFlags scroll_flags);
extern __declspec(dllexport) void igNavMoveRequestResolveWithLastItem(ImGuiNavItemData* result);
extern __declspec(dllexport) void igNavMoveRequestResolveWithPastTreeNode(ImGuiNavItemData* result,ImGuiTreeNodeStackData* tree_node_data);
extern __declspec(dllexport) void igNavMoveRequestCancel(void);
extern __declspec(dllexport) void igNavMoveRequestApplyResult(void);
extern __declspec(dllexport) void igNavMoveRequestTryWrapping(ImGuiWindow* window,ImGuiNavMoveFlags move_flags);
extern __declspec(dllexport) void igNavHighlightActivated(ImGuiID id);
extern __declspec(dllexport) void igNavClearPreferredPosForAxis(ImGuiAxis axis);
extern __declspec(dllexport) void igSetNavCursorVisibleAfterMove(void);
extern __declspec(dllexport) void igNavUpdateCurrentWindowIsScrollPushableX(void);
extern __declspec(dllexport) void igSetNavWindow(ImGuiWindow* window);
extern __declspec(dllexport) void igSetNavID(ImGuiID id,ImGuiNavLayer nav_layer,ImGuiID focus_scope_id,const ImRect rect_rel);
extern __declspec(dllexport) void igSetNavFocusScope(ImGuiID focus_scope_id);
extern __declspec(dllexport) void igFocusItem(void);
extern __declspec(dllexport) void igActivateItemByID(ImGuiID id);
extern __declspec(dllexport) bool igIsNamedKey(ImGuiKey key);
extern __declspec(dllexport) bool igIsNamedKeyOrMod(ImGuiKey key);
extern __declspec(dllexport) bool igIsLegacyKey(ImGuiKey key);
extern __declspec(dllexport) bool igIsKeyboardKey(ImGuiKey key);
extern __declspec(dllexport) bool igIsGamepadKey(ImGuiKey key);
extern __declspec(dllexport) bool igIsMouseKey(ImGuiKey key);
extern __declspec(dllexport) bool igIsAliasKey(ImGuiKey key);
extern __declspec(dllexport) bool igIsLRModKey(ImGuiKey key);
extern __declspec(dllexport) ImGuiKeyChord igFixupKeyChord(ImGuiKeyChord key_chord);
extern __declspec(dllexport) ImGuiKey igConvertSingleModFlagToKey(ImGuiKey key);
extern __declspec(dllexport) ImGuiKeyData* igGetKeyData_ContextPtr(ImGuiContext* ctx,ImGuiKey key);
extern __declspec(dllexport) ImGuiKeyData* igGetKeyData_Key(ImGuiKey key);
extern __declspec(dllexport) const char* igGetKeyChordName(ImGuiKeyChord key_chord);
extern __declspec(dllexport) ImGuiKey igMouseButtonToKey(ImGuiMouseButton button);
extern __declspec(dllexport) bool igIsMouseDragPastThreshold(ImGuiMouseButton button,float lock_threshold);
extern __declspec(dllexport) void igGetKeyMagnitude2d(ImVec2 *pOut,ImGuiKey key_left,ImGuiKey key_right,ImGuiKey key_up,ImGuiKey key_down);
extern __declspec(dllexport) float igGetNavTweakPressedAmount(ImGuiAxis axis);
extern __declspec(dllexport) int igCalcTypematicRepeatAmount(float t0,float t1,float repeat_delay,float repeat_rate);
extern __declspec(dllexport) void igGetTypematicRepeatRate(ImGuiInputFlags flags,float* repeat_delay,float* repeat_rate);
extern __declspec(dllexport) void igTeleportMousePos(const ImVec2 pos);
extern __declspec(dllexport) void igSetActiveIdUsingAllKeyboardKeys(void);
extern __declspec(dllexport) bool igIsActiveIdUsingNavDir(ImGuiDir dir);
extern __declspec(dllexport) ImGuiID igGetKeyOwner(ImGuiKey key);
extern __declspec(dllexport) void igSetKeyOwner(ImGuiKey key,ImGuiID owner_id,ImGuiInputFlags flags);
extern __declspec(dllexport) void igSetKeyOwnersForKeyChord(ImGuiKeyChord key,ImGuiID owner_id,ImGuiInputFlags flags);
extern __declspec(dllexport) void igSetItemKeyOwner_InputFlags(ImGuiKey key,ImGuiInputFlags flags);
extern __declspec(dllexport) bool igTestKeyOwner(ImGuiKey key,ImGuiID owner_id);
extern __declspec(dllexport) ImGuiKeyOwnerData* igGetKeyOwnerData(ImGuiContext* ctx,ImGuiKey key);
extern __declspec(dllexport) bool igIsKeyDown_ID(ImGuiKey key,ImGuiID owner_id);
extern __declspec(dllexport) bool igIsKeyPressed_InputFlags(ImGuiKey key,ImGuiInputFlags flags,ImGuiID owner_id);
extern __declspec(dllexport) bool igIsKeyReleased_ID(ImGuiKey key,ImGuiID owner_id);
extern __declspec(dllexport) bool igIsKeyChordPressed_InputFlags(ImGuiKeyChord key_chord,ImGuiInputFlags flags,ImGuiID owner_id);
extern __declspec(dllexport) bool igIsMouseDown_ID(ImGuiMouseButton button,ImGuiID owner_id);
extern __declspec(dllexport) bool igIsMouseClicked_InputFlags(ImGuiMouseButton button,ImGuiInputFlags flags,ImGuiID owner_id);
extern __declspec(dllexport) bool igIsMouseReleased_ID(ImGuiMouseButton button,ImGuiID owner_id);
extern __declspec(dllexport) bool igIsMouseDoubleClicked_ID(ImGuiMouseButton button,ImGuiID owner_id);
extern __declspec(dllexport) bool igShortcut_ID(ImGuiKeyChord key_chord,ImGuiInputFlags flags,ImGuiID owner_id);
extern __declspec(dllexport) bool igSetShortcutRouting(ImGuiKeyChord key_chord,ImGuiInputFlags flags,ImGuiID owner_id);
extern __declspec(dllexport) bool igTestShortcutRouting(ImGuiKeyChord key_chord,ImGuiID owner_id);
extern __declspec(dllexport) ImGuiKeyRoutingData* igGetShortcutRoutingData(ImGuiKeyChord key_chord);
extern __declspec(dllexport) void igDockContextInitialize(ImGuiContext* ctx);
extern __declspec(dllexport) void igDockContextShutdown(ImGuiContext* ctx);
extern __declspec(dllexport) void igDockContextClearNodes(ImGuiContext* ctx,ImGuiID root_id,bool clear_settings_refs);
extern __declspec(dllexport) void igDockContextRebuildNodes(ImGuiContext* ctx);
extern __declspec(dllexport) void igDockContextNewFrameUpdateUndocking(ImGuiContext* ctx);
extern __declspec(dllexport) void igDockContextNewFrameUpdateDocking(ImGuiContext* ctx);
extern __declspec(dllexport) void igDockContextEndFrame(ImGuiContext* ctx);
extern __declspec(dllexport) ImGuiID igDockContextGenNodeID(ImGuiContext* ctx);
extern __declspec(dllexport) void igDockContextQueueDock(ImGuiContext* ctx,ImGuiWindow* target,ImGuiDockNode* target_node,ImGuiWindow* payload,ImGuiDir split_dir,float split_ratio,bool split_outer);
extern __declspec(dllexport) void igDockContextQueueUndockWindow(ImGuiContext* ctx,ImGuiWindow* window);
extern __declspec(dllexport) void igDockContextQueueUndockNode(ImGuiContext* ctx,ImGuiDockNode* node);
extern __declspec(dllexport) void igDockContextProcessUndockWindow(ImGuiContext* ctx,ImGuiWindow* window,bool clear_persistent_docking_ref);
extern __declspec(dllexport) void igDockContextProcessUndockNode(ImGuiContext* ctx,ImGuiDockNode* node);
extern __declspec(dllexport) bool igDockContextCalcDropPosForDocking(ImGuiWindow* target,ImGuiDockNode* target_node,ImGuiWindow* payload_window,ImGuiDockNode* payload_node,ImGuiDir split_dir,bool split_outer,ImVec2* out_pos);
extern __declspec(dllexport) ImGuiDockNode* igDockContextFindNodeByID(ImGuiContext* ctx,ImGuiID id);
extern __declspec(dllexport) void igDockNodeWindowMenuHandler_Default(ImGuiContext* ctx,ImGuiDockNode* node,ImGuiTabBar* tab_bar);
extern __declspec(dllexport) bool igDockNodeBeginAmendTabBar(ImGuiDockNode* node);
extern __declspec(dllexport) void igDockNodeEndAmendTabBar(void);
extern __declspec(dllexport) ImGuiDockNode* igDockNodeGetRootNode(ImGuiDockNode* node);
extern __declspec(dllexport) bool igDockNodeIsInHierarchyOf(ImGuiDockNode* node,ImGuiDockNode* parent);
extern __declspec(dllexport) int igDockNodeGetDepth(const ImGuiDockNode* node);
extern __declspec(dllexport) ImGuiID igDockNodeGetWindowMenuButtonId(const ImGuiDockNode* node);
extern __declspec(dllexport) ImGuiDockNode* igGetWindowDockNode(void);
extern __declspec(dllexport) bool igGetWindowAlwaysWantOwnTabBar(ImGuiWindow* window);
extern __declspec(dllexport) void igBeginDocked(ImGuiWindow* window,bool* p_open);
extern __declspec(dllexport) void igBeginDockableDragDropSource(ImGuiWindow* window);
extern __declspec(dllexport) void igBeginDockableDragDropTarget(ImGuiWindow* window);
extern __declspec(dllexport) void igSetWindowDock(ImGuiWindow* window,ImGuiID dock_id,ImGuiCond cond);
extern __declspec(dllexport) void igDockBuilderDockWindow(const char* window_name,ImGuiID node_id);
extern __declspec(dllexport) ImGuiDockNode* igDockBuilderGetNode(ImGuiID node_id);
extern __declspec(dllexport) ImGuiDockNode* igDockBuilderGetCentralNode(ImGuiID node_id);
extern __declspec(dllexport) ImGuiID igDockBuilderAddNode(ImGuiID node_id,ImGuiDockNodeFlags flags);
extern __declspec(dllexport) void igDockBuilderRemoveNode(ImGuiID node_id);
extern __declspec(dllexport) void igDockBuilderRemoveNodeDockedWindows(ImGuiID node_id,bool clear_settings_refs);
extern __declspec(dllexport) void igDockBuilderRemoveNodeChildNodes(ImGuiID node_id);
extern __declspec(dllexport) void igDockBuilderSetNodePos(ImGuiID node_id,ImVec2 pos);
extern __declspec(dllexport) void igDockBuilderSetNodeSize(ImGuiID node_id,ImVec2 size);
extern __declspec(dllexport) ImGuiID igDockBuilderSplitNode(ImGuiID node_id,ImGuiDir split_dir,float size_ratio_for_node_at_dir,ImGuiID* out_id_at_dir,ImGuiID* out_id_at_opposite_dir);
extern __declspec(dllexport) void igDockBuilderCopyDockSpace(ImGuiID src_dockspace_id,ImGuiID dst_dockspace_id,ImVector_const_charPtr* in_window_remap_pairs);
extern __declspec(dllexport) void igDockBuilderCopyNode(ImGuiID src_node_id,ImGuiID dst_node_id,ImVector_ImGuiID* out_node_remap_pairs);
extern __declspec(dllexport) void igDockBuilderCopyWindowSettings(const char* src_name,const char* dst_name);
extern __declspec(dllexport) void igDockBuilderFinish(ImGuiID node_id);
extern __declspec(dllexport) void igPushFocusScope(ImGuiID id);
extern __declspec(dllexport) void igPopFocusScope(void);
extern __declspec(dllexport) ImGuiID igGetCurrentFocusScope(void);
extern __declspec(dllexport) bool igIsDragDropActive(void);
extern __declspec(dllexport) bool igBeginDragDropTargetCustom(const ImRect bb,ImGuiID id);
extern __declspec(dllexport) void igClearDragDrop(void);
extern __declspec(dllexport) bool igIsDragDropPayloadBeingAccepted(void);
extern __declspec(dllexport) void igRenderDragDropTargetRect(const ImRect bb,const ImRect item_clip_rect);
extern __declspec(dllexport) ImGuiTypingSelectRequest* igGetTypingSelectRequest(ImGuiTypingSelectFlags flags);
extern __declspec(dllexport) int igTypingSelectFindMatch(ImGuiTypingSelectRequest* req,int items_count,const char*(*get_item_name_func)(void*,int),void* user_data,int nav_item_idx);
extern __declspec(dllexport) int igTypingSelectFindNextSingleCharMatch(ImGuiTypingSelectRequest* req,int items_count,const char*(*get_item_name_func)(void*,int),void* user_data,int nav_item_idx);
extern __declspec(dllexport) int igTypingSelectFindBestLeadingMatch(ImGuiTypingSelectRequest* req,int items_count,const char*(*get_item_name_func)(void*,int),void* user_data);
extern __declspec(dllexport) bool igBeginBoxSelect(const ImRect scope_rect,ImGuiWindow* window,ImGuiID box_select_id,ImGuiMultiSelectFlags ms_flags);
extern __declspec(dllexport) void igEndBoxSelect(const ImRect scope_rect,ImGuiMultiSelectFlags ms_flags);
extern __declspec(dllexport) void igMultiSelectItemHeader(ImGuiID id,bool* p_selected,ImGuiButtonFlags* p_button_flags);
extern __declspec(dllexport) void igMultiSelectItemFooter(ImGuiID id,bool* p_selected,bool* p_pressed);
extern __declspec(dllexport) void igMultiSelectAddSetAll(ImGuiMultiSelectTempData* ms,bool selected);
extern __declspec(dllexport) void igMultiSelectAddSetRange(ImGuiMultiSelectTempData* ms,bool selected,int range_dir,ImGuiSelectionUserData first_item,ImGuiSelectionUserData last_item);
extern __declspec(dllexport) ImGuiBoxSelectState* igGetBoxSelectState(ImGuiID id);
extern __declspec(dllexport) ImGuiMultiSelectState* igGetMultiSelectState(ImGuiID id);
extern __declspec(dllexport) void igSetWindowClipRectBeforeSetChannel(ImGuiWindow* window,const ImRect clip_rect);
extern __declspec(dllexport) void igBeginColumns(const char* str_id,int count,ImGuiOldColumnFlags flags);
extern __declspec(dllexport) void igEndColumns(void);
extern __declspec(dllexport) void igPushColumnClipRect(int column_index);
extern __declspec(dllexport) void igPushColumnsBackground(void);
extern __declspec(dllexport) void igPopColumnsBackground(void);
extern __declspec(dllexport) ImGuiID igGetColumnsID(const char* str_id,int count);
extern __declspec(dllexport) ImGuiOldColumns* igFindOrCreateColumns(ImGuiWindow* window,ImGuiID id);
extern __declspec(dllexport) float igGetColumnOffsetFromNorm(const ImGuiOldColumns* columns,float offset_norm);
extern __declspec(dllexport) float igGetColumnNormFromOffset(const ImGuiOldColumns* columns,float offset);
extern __declspec(dllexport) void igTableOpenContextMenu(int column_n);
extern __declspec(dllexport) void igTableSetColumnWidth(int column_n,float width);
extern __declspec(dllexport) void igTableSetColumnSortDirection(int column_n,ImGuiSortDirection sort_direction,bool append_to_sort_specs);
extern __declspec(dllexport) int igTableGetHoveredRow(void);
extern __declspec(dllexport) float igTableGetHeaderRowHeight(void);
extern __declspec(dllexport) float igTableGetHeaderAngledMaxLabelWidth(void);
extern __declspec(dllexport) void igTablePushBackgroundChannel(void);
extern __declspec(dllexport) void igTablePopBackgroundChannel(void);
extern __declspec(dllexport) void igTableAngledHeadersRowEx(ImGuiID row_id,float angle,float max_label_width,const ImGuiTableHeaderData* data,int data_count);
extern __declspec(dllexport) ImGuiTable* igGetCurrentTable(void);
extern __declspec(dllexport) ImGuiTable* igTableFindByID(ImGuiID id);
extern __declspec(dllexport) bool igBeginTableEx(const char* name,ImGuiID id,int columns_count,ImGuiTableFlags flags,const ImVec2 outer_size,float inner_width);
extern __declspec(dllexport) void igTableBeginInitMemory(ImGuiTable* table,int columns_count);
extern __declspec(dllexport) void igTableBeginApplyRequests(ImGuiTable* table);
extern __declspec(dllexport) void igTableSetupDrawChannels(ImGuiTable* table);
extern __declspec(dllexport) void igTableUpdateLayout(ImGuiTable* table);
extern __declspec(dllexport) void igTableUpdateBorders(ImGuiTable* table);
extern __declspec(dllexport) void igTableUpdateColumnsWeightFromWidth(ImGuiTable* table);
extern __declspec(dllexport) void igTableDrawBorders(ImGuiTable* table);
extern __declspec(dllexport) void igTableDrawDefaultContextMenu(ImGuiTable* table,ImGuiTableFlags flags_for_section_to_display);
extern __declspec(dllexport) bool igTableBeginContextMenuPopup(ImGuiTable* table);
extern __declspec(dllexport) void igTableMergeDrawChannels(ImGuiTable* table);
extern __declspec(dllexport) ImGuiTableInstanceData* igTableGetInstanceData(ImGuiTable* table,int instance_no);
extern __declspec(dllexport) ImGuiID igTableGetInstanceID(ImGuiTable* table,int instance_no);
extern __declspec(dllexport) void igTableSortSpecsSanitize(ImGuiTable* table);
extern __declspec(dllexport) void igTableSortSpecsBuild(ImGuiTable* table);
extern __declspec(dllexport) ImGuiSortDirection igTableGetColumnNextSortDirection(ImGuiTableColumn* column);
extern __declspec(dllexport) void igTableFixColumnSortDirection(ImGuiTable* table,ImGuiTableColumn* column);
extern __declspec(dllexport) float igTableGetColumnWidthAuto(ImGuiTable* table,ImGuiTableColumn* column);
extern __declspec(dllexport) void igTableBeginRow(ImGuiTable* table);
extern __declspec(dllexport) void igTableEndRow(ImGuiTable* table);
extern __declspec(dllexport) void igTableBeginCell(ImGuiTable* table,int column_n);
extern __declspec(dllexport) void igTableEndCell(ImGuiTable* table);
extern __declspec(dllexport) void igTableGetCellBgRect(ImRect *pOut,const ImGuiTable* table,int column_n);
extern __declspec(dllexport) const char* igTableGetColumnName_TablePtr(const ImGuiTable* table,int column_n);
extern __declspec(dllexport) ImGuiID igTableGetColumnResizeID(ImGuiTable* table,int column_n,int instance_no);
extern __declspec(dllexport) float igTableCalcMaxColumnWidth(const ImGuiTable* table,int column_n);
extern __declspec(dllexport) void igTableSetColumnWidthAutoSingle(ImGuiTable* table,int column_n);
extern __declspec(dllexport) void igTableSetColumnWidthAutoAll(ImGuiTable* table);
extern __declspec(dllexport) void igTableRemove(ImGuiTable* table);
extern __declspec(dllexport) void igTableGcCompactTransientBuffers_TablePtr(ImGuiTable* table);
extern __declspec(dllexport) void igTableGcCompactTransientBuffers_TableTempDataPtr(ImGuiTableTempData* table);
extern __declspec(dllexport) void igTableGcCompactSettings(void);
extern __declspec(dllexport) void igTableLoadSettings(ImGuiTable* table);
extern __declspec(dllexport) void igTableSaveSettings(ImGuiTable* table);
extern __declspec(dllexport) void igTableResetSettings(ImGuiTable* table);
extern __declspec(dllexport) ImGuiTableSettings* igTableGetBoundSettings(ImGuiTable* table);
extern __declspec(dllexport) void igTableSettingsAddSettingsHandler(void);
extern __declspec(dllexport) ImGuiTableSettings* igTableSettingsCreate(ImGuiID id,int columns_count);
extern __declspec(dllexport) ImGuiTableSettings* igTableSettingsFindByID(ImGuiID id);
extern __declspec(dllexport) ImGuiTabBar* igGetCurrentTabBar(void);
extern __declspec(dllexport) bool igBeginTabBarEx(ImGuiTabBar* tab_bar,const ImRect bb,ImGuiTabBarFlags flags);
extern __declspec(dllexport) ImGuiTabItem* igTabBarFindTabByID(ImGuiTabBar* tab_bar,ImGuiID tab_id);
extern __declspec(dllexport) ImGuiTabItem* igTabBarFindTabByOrder(ImGuiTabBar* tab_bar,int order);
extern __declspec(dllexport) ImGuiTabItem* igTabBarFindMostRecentlySelectedTabForActiveWindow(ImGuiTabBar* tab_bar);
extern __declspec(dllexport) ImGuiTabItem* igTabBarGetCurrentTab(ImGuiTabBar* tab_bar);
extern __declspec(dllexport) int igTabBarGetTabOrder(ImGuiTabBar* tab_bar,ImGuiTabItem* tab);
extern __declspec(dllexport) const char* igTabBarGetTabName(ImGuiTabBar* tab_bar,ImGuiTabItem* tab);
extern __declspec(dllexport) void igTabBarAddTab(ImGuiTabBar* tab_bar,ImGuiTabItemFlags tab_flags,ImGuiWindow* window);
extern __declspec(dllexport) void igTabBarRemoveTab(ImGuiTabBar* tab_bar,ImGuiID tab_id);
extern __declspec(dllexport) void igTabBarCloseTab(ImGuiTabBar* tab_bar,ImGuiTabItem* tab);
extern __declspec(dllexport) void igTabBarQueueFocus_TabItemPtr(ImGuiTabBar* tab_bar,ImGuiTabItem* tab);
extern __declspec(dllexport) void igTabBarQueueFocus_Str(ImGuiTabBar* tab_bar,const char* tab_name);
extern __declspec(dllexport) void igTabBarQueueReorder(ImGuiTabBar* tab_bar,ImGuiTabItem* tab,int offset);
extern __declspec(dllexport) void igTabBarQueueReorderFromMousePos(ImGuiTabBar* tab_bar,ImGuiTabItem* tab,ImVec2 mouse_pos);
extern __declspec(dllexport) bool igTabBarProcessReorder(ImGuiTabBar* tab_bar);
extern __declspec(dllexport) bool igTabItemEx(ImGuiTabBar* tab_bar,const char* label,bool* p_open,ImGuiTabItemFlags flags,ImGuiWindow* docked_window);
extern __declspec(dllexport) void igTabItemCalcSize_Str(ImVec2 *pOut,const char* label,bool has_close_button_or_unsaved_marker);
extern __declspec(dllexport) void igTabItemCalcSize_WindowPtr(ImVec2 *pOut,ImGuiWindow* window);
extern __declspec(dllexport) void igTabItemBackground(ImDrawList* draw_list,const ImRect bb,ImGuiTabItemFlags flags,ImU32 col);
extern __declspec(dllexport) void igTabItemLabelAndCloseButton(ImDrawList* draw_list,const ImRect bb,ImGuiTabItemFlags flags,ImVec2 frame_padding,const char* label,ImGuiID tab_id,ImGuiID close_button_id,bool is_contents_visible,bool* out_just_closed,bool* out_text_clipped);
extern __declspec(dllexport) void igRenderText(ImVec2 pos,const char* text,const char* text_end,bool hide_text_after_hash);
extern __declspec(dllexport) void igRenderTextWrapped(ImVec2 pos,const char* text,const char* text_end,float wrap_width);
extern __declspec(dllexport) void igRenderTextClipped(const ImVec2 pos_min,const ImVec2 pos_max,const char* text,const char* text_end,const ImVec2* text_size_if_known,const ImVec2 align,const ImRect* clip_rect);
extern __declspec(dllexport) void igRenderTextClippedEx(ImDrawList* draw_list,const ImVec2 pos_min,const ImVec2 pos_max,const char* text,const char* text_end,const ImVec2* text_size_if_known,const ImVec2 align,const ImRect* clip_rect);
extern __declspec(dllexport) void igRenderTextEllipsis(ImDrawList* draw_list,const ImVec2 pos_min,const ImVec2 pos_max,float clip_max_x,float ellipsis_max_x,const char* text,const char* text_end,const ImVec2* text_size_if_known);
extern __declspec(dllexport) void igRenderFrame(ImVec2 p_min,ImVec2 p_max,ImU32 fill_col,bool borders,float rounding);
extern __declspec(dllexport) void igRenderFrameBorder(ImVec2 p_min,ImVec2 p_max,float rounding);
extern __declspec(dllexport) void igRenderColorRectWithAlphaCheckerboard(ImDrawList* draw_list,ImVec2 p_min,ImVec2 p_max,ImU32 fill_col,float grid_step,ImVec2 grid_off,float rounding,ImDrawFlags flags);
extern __declspec(dllexport) void igRenderNavCursor(const ImRect bb,ImGuiID id,ImGuiNavRenderCursorFlags flags);
extern __declspec(dllexport) const char* igFindRenderedTextEnd(const char* text,const char* text_end);
extern __declspec(dllexport) void igRenderMouseCursor(ImVec2 pos,float scale,ImGuiMouseCursor mouse_cursor,ImU32 col_fill,ImU32 col_border,ImU32 col_shadow);
extern __declspec(dllexport) void igRenderArrow(ImDrawList* draw_list,ImVec2 pos,ImU32 col,ImGuiDir dir,float scale);
extern __declspec(dllexport) void igRenderBullet(ImDrawList* draw_list,ImVec2 pos,ImU32 col);
extern __declspec(dllexport) void igRenderCheckMark(ImDrawList* draw_list,ImVec2 pos,ImU32 col,float sz);
extern __declspec(dllexport) void igRenderArrowPointingAt(ImDrawList* draw_list,ImVec2 pos,ImVec2 half_sz,ImGuiDir direction,ImU32 col);
extern __declspec(dllexport) void igRenderArrowDockMenu(ImDrawList* draw_list,ImVec2 p_min,float sz,ImU32 col);
extern __declspec(dllexport) void igRenderRectFilledRangeH(ImDrawList* draw_list,const ImRect rect,ImU32 col,float x_start_norm,float x_end_norm,float rounding);
extern __declspec(dllexport) void igRenderRectFilledWithHole(ImDrawList* draw_list,const ImRect outer,const ImRect inner,ImU32 col,float rounding);
extern __declspec(dllexport) ImDrawFlags igCalcRoundingFlagsForRectInRect(const ImRect r_in,const ImRect r_outer,float threshold);
extern __declspec(dllexport) void igTextEx(const char* text,const char* text_end,ImGuiTextFlags flags);
extern __declspec(dllexport) bool igButtonEx(const char* label,const ImVec2 size_arg,ImGuiButtonFlags flags);
extern __declspec(dllexport) bool igArrowButtonEx(const char* str_id,ImGuiDir dir,ImVec2 size_arg,ImGuiButtonFlags flags);
extern __declspec(dllexport) bool igImageButtonEx(ImGuiID id,ImTextureID texture_id,const ImVec2 image_size,const ImVec2 uv0,const ImVec2 uv1,const ImVec4 bg_col,const ImVec4 tint_col,ImGuiButtonFlags flags);
extern __declspec(dllexport) void igSeparatorEx(ImGuiSeparatorFlags flags,float thickness);
extern __declspec(dllexport) void igSeparatorTextEx(ImGuiID id,const char* label,const char* label_end,float extra_width);
extern __declspec(dllexport) bool igCheckboxFlags_S64Ptr(const char* label,ImS64* flags,ImS64 flags_value);
extern __declspec(dllexport) bool igCheckboxFlags_U64Ptr(const char* label,ImU64* flags,ImU64 flags_value);
extern __declspec(dllexport) bool igCloseButton(ImGuiID id,const ImVec2 pos);
extern __declspec(dllexport) bool igCollapseButton(ImGuiID id,const ImVec2 pos,ImGuiDockNode* dock_node);
extern __declspec(dllexport) void igScrollbar(ImGuiAxis axis);
extern __declspec(dllexport) bool igScrollbarEx(const ImRect bb,ImGuiID id,ImGuiAxis axis,ImS64* p_scroll_v,ImS64 avail_v,ImS64 contents_v,ImDrawFlags flags);
extern __declspec(dllexport) void igGetWindowScrollbarRect(ImRect *pOut,ImGuiWindow* window,ImGuiAxis axis);
extern __declspec(dllexport) ImGuiID igGetWindowScrollbarID(ImGuiWindow* window,ImGuiAxis axis);
extern __declspec(dllexport) ImGuiID igGetWindowResizeCornerID(ImGuiWindow* window,int n);
extern __declspec(dllexport) ImGuiID igGetWindowResizeBorderID(ImGuiWindow* window,ImGuiDir dir);
extern __declspec(dllexport) bool igButtonBehavior(const ImRect bb,ImGuiID id,bool* out_hovered,bool* out_held,ImGuiButtonFlags flags);
extern __declspec(dllexport) bool igDragBehavior(ImGuiID id,ImGuiDataType data_type,void* p_v,float v_speed,const void* p_min,const void* p_max,const char* format,ImGuiSliderFlags flags);
extern __declspec(dllexport) bool igSliderBehavior(const ImRect bb,ImGuiID id,ImGuiDataType data_type,void* p_v,const void* p_min,const void* p_max,const char* format,ImGuiSliderFlags flags,ImRect* out_grab_bb);
extern __declspec(dllexport) bool igSplitterBehavior(const ImRect bb,ImGuiID id,ImGuiAxis axis,float* size1,float* size2,float min_size1,float min_size2,float hover_extend,float hover_visibility_delay,ImU32 bg_col);
extern __declspec(dllexport) bool igTreeNodeBehavior(ImGuiID id,ImGuiTreeNodeFlags flags,const char* label,const char* label_end);
extern __declspec(dllexport) void igTreePushOverrideID(ImGuiID id);
extern __declspec(dllexport) bool igTreeNodeGetOpen(ImGuiID storage_id);
extern __declspec(dllexport) void igTreeNodeSetOpen(ImGuiID storage_id,bool open);
extern __declspec(dllexport) bool igTreeNodeUpdateNextOpen(ImGuiID storage_id,ImGuiTreeNodeFlags flags);
extern __declspec(dllexport) const ImGuiDataTypeInfo* igDataTypeGetInfo(ImGuiDataType data_type);
extern __declspec(dllexport) int igDataTypeFormatString(char* buf,int buf_size,ImGuiDataType data_type,const void* p_data,const char* format);
extern __declspec(dllexport) void igDataTypeApplyOp(ImGuiDataType data_type,int op,void* output,const void* arg_1,const void* arg_2);
extern __declspec(dllexport) bool igDataTypeApplyFromText(const char* buf,ImGuiDataType data_type,void* p_data,const char* format,void* p_data_when_empty);
extern __declspec(dllexport) int igDataTypeCompare(ImGuiDataType data_type,const void* arg_1,const void* arg_2);
extern __declspec(dllexport) bool igDataTypeClamp(ImGuiDataType data_type,void* p_data,const void* p_min,const void* p_max);
extern __declspec(dllexport) bool igDataTypeIsZero(ImGuiDataType data_type,const void* p_data);
extern __declspec(dllexport) bool igInputTextEx(const char* label,const char* hint,char* buf,int buf_size,const ImVec2 size_arg,ImGuiInputTextFlags flags,ImGuiInputTextCallback callback,void* user_data);
extern __declspec(dllexport) void igInputTextDeactivateHook(ImGuiID id);
extern __declspec(dllexport) bool igTempInputText(const ImRect bb,ImGuiID id,const char* label,char* buf,int buf_size,ImGuiInputTextFlags flags);
extern __declspec(dllexport) bool igTempInputScalar(const ImRect bb,ImGuiID id,const char* label,ImGuiDataType data_type,void* p_data,const char* format,const void* p_clamp_min,const void* p_clamp_max);
extern __declspec(dllexport) bool igTempInputIsActive(ImGuiID id);
extern __declspec(dllexport) ImGuiInputTextState* igGetInputTextState(ImGuiID id);
extern __declspec(dllexport) void igSetNextItemRefVal(ImGuiDataType data_type,void* p_data);
extern __declspec(dllexport) void igColorTooltip(const char* text,const float* col,ImGuiColorEditFlags flags);
extern __declspec(dllexport) void igColorEditOptionsPopup(const float* col,ImGuiColorEditFlags flags);
extern __declspec(dllexport) void igColorPickerOptionsPopup(const float* ref_col,ImGuiColorEditFlags flags);
extern __declspec(dllexport) int igPlotEx(ImGuiPlotType plot_type,const char* label,float(*values_getter)(void* data,int idx),void* data,int values_count,int values_offset,const char* overlay_text,float scale_min,float scale_max,const ImVec2 size_arg);
extern __declspec(dllexport) void igShadeVertsLinearColorGradientKeepAlpha(ImDrawList* draw_list,int vert_start_idx,int vert_end_idx,ImVec2 gradient_p0,ImVec2 gradient_p1,ImU32 col0,ImU32 col1);
extern __declspec(dllexport) void igShadeVertsLinearUV(ImDrawList* draw_list,int vert_start_idx,int vert_end_idx,const ImVec2 a,const ImVec2 b,const ImVec2 uv_a,const ImVec2 uv_b,bool clamp);
extern __declspec(dllexport) void igShadeVertsTransformPos(ImDrawList* draw_list,int vert_start_idx,int vert_end_idx,const ImVec2 pivot_in,float cos_a,float sin_a,const ImVec2 pivot_out);
extern __declspec(dllexport) void igGcCompactTransientMiscBuffers(void);
extern __declspec(dllexport) void igGcCompactTransientWindowBuffers(ImGuiWindow* window);
extern __declspec(dllexport) void igGcAwakeTransientWindowBuffers(ImGuiWindow* window);
extern __declspec(dllexport) bool igErrorLog(const char* msg);
extern __declspec(dllexport) void igErrorRecoveryStoreState(ImGuiErrorRecoveryState* state_out);
extern __declspec(dllexport) void igErrorRecoveryTryToRecoverState(const ImGuiErrorRecoveryState* state_in);
extern __declspec(dllexport) void igErrorRecoveryTryToRecoverWindowState(const ImGuiErrorRecoveryState* state_in);
extern __declspec(dllexport) void igErrorCheckUsingSetCursorPosToExtendParentBoundaries(void);
extern __declspec(dllexport) void igErrorCheckEndFrameFinalizeErrorTooltip(void);
extern __declspec(dllexport) bool igBeginErrorTooltip(void);
extern __declspec(dllexport) void igEndErrorTooltip(void);
extern __declspec(dllexport) void igDebugAllocHook(ImGuiDebugAllocInfo* info,int frame_count,void* ptr,size_t size);
extern __declspec(dllexport) void igDebugDrawCursorPos(ImU32 col);
extern __declspec(dllexport) void igDebugDrawLineExtents(ImU32 col);
extern __declspec(dllexport) void igDebugDrawItemRect(ImU32 col);
extern __declspec(dllexport) void igDebugTextUnformattedWithLocateItem(const char* line_begin,const char* line_end);
extern __declspec(dllexport) void igDebugLocateItem(ImGuiID target_id);
extern __declspec(dllexport) void igDebugLocateItemOnHover(ImGuiID target_id);
extern __declspec(dllexport) void igDebugLocateItemResolveWithLastItem(void);
extern __declspec(dllexport) void igDebugBreakClearData(void);
extern __declspec(dllexport) bool igDebugBreakButton(const char* label,const char* description_of_location);
extern __declspec(dllexport) void igDebugBreakButtonTooltip(bool keyboard_only,const char* description_of_location);
extern __declspec(dllexport) void igShowFontAtlas(ImFontAtlas* atlas);
extern __declspec(dllexport) void igDebugHookIdInfo(ImGuiID id,ImGuiDataType data_type,const void* data_id,const void* data_id_end);
extern __declspec(dllexport) void igDebugNodeColumns(ImGuiOldColumns* columns);
extern __declspec(dllexport) void igDebugNodeDockNode(ImGuiDockNode* node,const char* label);
extern __declspec(dllexport) void igDebugNodeDrawList(ImGuiWindow* window,ImGuiViewportP* viewport,const ImDrawList* draw_list,const char* label);
extern __declspec(dllexport) void igDebugNodeDrawCmdShowMeshAndBoundingBox(ImDrawList* out_draw_list,const ImDrawList* draw_list,const ImDrawCmd* draw_cmd,bool show_mesh,bool show_aabb);
extern __declspec(dllexport) void igDebugNodeFont(ImFont* font);
extern __declspec(dllexport) void igDebugNodeFontGlyph(ImFont* font,const ImFontGlyph* glyph);
extern __declspec(dllexport) void igDebugNodeStorage(ImGuiStorage* storage,const char* label);
extern __declspec(dllexport) void igDebugNodeTabBar(ImGuiTabBar* tab_bar,const char* label);
extern __declspec(dllexport) void igDebugNodeTable(ImGuiTable* table);
extern __declspec(dllexport) void igDebugNodeTableSettings(ImGuiTableSettings* settings);
extern __declspec(dllexport) void igDebugNodeInputTextState(ImGuiInputTextState* state);
extern __declspec(dllexport) void igDebugNodeTypingSelectState(ImGuiTypingSelectState* state);
extern __declspec(dllexport) void igDebugNodeMultiSelectState(ImGuiMultiSelectState* state);
extern __declspec(dllexport) void igDebugNodeWindow(ImGuiWindow* window,const char* label);
extern __declspec(dllexport) void igDebugNodeWindowSettings(ImGuiWindowSettings* settings);
extern __declspec(dllexport) void igDebugNodeWindowsList(ImVector_ImGuiWindowPtr* windows,const char* label);
extern __declspec(dllexport) void igDebugNodeWindowsListByBeginStackParent(ImGuiWindow** windows,int windows_size,ImGuiWindow* parent_in_begin_stack);
extern __declspec(dllexport) void igDebugNodeViewport(ImGuiViewportP* viewport);
extern __declspec(dllexport) void igDebugNodePlatformMonitor(ImGuiPlatformMonitor* monitor,const char* label,int idx);
extern __declspec(dllexport) void igDebugRenderKeyboardPreview(ImDrawList* draw_list);
extern __declspec(dllexport) void igDebugRenderViewportThumbnail(ImDrawList* draw_list,ImGuiViewportP* viewport,const ImRect bb);
extern __declspec(dllexport) const ImFontBuilderIO* igImFontAtlasGetBuilderForStbTruetype(void);
extern __declspec(dllexport) void igImFontAtlasUpdateConfigDataPointers(ImFontAtlas* atlas);
extern __declspec(dllexport) void igImFontAtlasBuildInit(ImFontAtlas* atlas);
extern __declspec(dllexport) void igImFontAtlasBuildSetupFont(ImFontAtlas* atlas,ImFont* font,ImFontConfig* font_config,float ascent,float descent);
extern __declspec(dllexport) void igImFontAtlasBuildPackCustomRects(ImFontAtlas* atlas,void* stbrp_context_opaque);
extern __declspec(dllexport) void igImFontAtlasBuildFinish(ImFontAtlas* atlas);
extern __declspec(dllexport) void igImFontAtlasBuildRender8bppRectFromString(ImFontAtlas* atlas,int x,int y,int w,int h,const char* in_str,char in_marker_char,unsigned char in_marker_pixel_value);
extern __declspec(dllexport) void igImFontAtlasBuildRender32bppRectFromString(ImFontAtlas* atlas,int x,int y,int w,int h,const char* in_str,char in_marker_char,unsigned int in_marker_pixel_value);
extern __declspec(dllexport) void igImFontAtlasBuildMultiplyCalcLookupTable(unsigned char out_table[256],float in_multiply_factor);
extern __declspec(dllexport) void igImFontAtlasBuildMultiplyRectAlpha8(const unsigned char table[256],unsigned char* pixels,int x,int y,int w,int h,int stride);
extern __declspec(dllexport) void igLogText(const char *fmt, ...);
extern __declspec(dllexport) void ImGuiTextBuffer_appendf(struct ImGuiTextBuffer *buffer, const char *fmt, ...);
extern __declspec(dllexport) float igGET_FLT_MAX(void);
extern __declspec(dllexport) float igGET_FLT_MIN(void);
extern __declspec(dllexport) ImVector_ImWchar* ImVector_ImWchar_create(void);
extern __declspec(dllexport) void ImVector_ImWchar_destroy(ImVector_ImWchar* self);
extern __declspec(dllexport) void ImVector_ImWchar_Init(ImVector_ImWchar* p);
extern __declspec(dllexport) void ImVector_ImWchar_UnInit(ImVector_ImWchar* p);
extern __declspec(dllexport) void ImGuiPlatformIO_Set_Platform_GetWindowPos(ImGuiPlatformIO* platform_io, void(*user_callback)(ImGuiViewport* vp, ImVec2* out_pos));
extern __declspec(dllexport) void ImGuiPlatformIO_Set_Platform_GetWindowSize(ImGuiPlatformIO* platform_io, void(*user_callback)(ImGuiViewport* vp, ImVec2* out_size));
typedef uint64_t time_t;
typedef struct tm { char x[36]; } tm;
typedef struct tm tm;
typedef struct ImPlotContext ImPlotContext;
typedef struct ImPlotTick ImPlotTick;
typedef struct ImPlotAxis ImPlotAxis;
typedef struct ImPlotAxisColor ImPlotAxisColor;
typedef struct ImPlotItem ImPlotItem;
typedef struct ImPlotLegend ImPlotLegend;
typedef struct ImPlotPlot ImPlotPlot;
typedef struct ImPlotNextPlotData ImPlotNextPlotData;
typedef struct ImPlotTicker ImPlotTicker;
typedef struct ImVector_ImS16 {int Size;int Capacity;ImS16* Data;} ImVector_ImS16;
typedef struct ImVector_ImS32 {int Size;int Capacity;ImS32* Data;} ImVector_ImS32;
typedef struct ImVector_ImS64 {int Size;int Capacity;ImS64* Data;} ImVector_ImS64;
typedef struct ImVector_ImS8 {int Size;int Capacity;ImS8* Data;} ImVector_ImS8;
typedef struct ImVector_ImU16 {int Size;int Capacity;ImU16* Data;} ImVector_ImU16;
typedef struct ImVector_ImU64 {int Size;int Capacity;ImU64* Data;} ImVector_ImU64;
struct ImPlotContext;
typedef int ImAxis;
typedef int ImPlotFlags;
typedef int ImPlotAxisFlags;
typedef int ImPlotSubplotFlags;
typedef int ImPlotLegendFlags;
typedef int ImPlotMouseTextFlags;
typedef int ImPlotDragToolFlags;
typedef int ImPlotColormapScaleFlags;
typedef int ImPlotItemFlags;
typedef int ImPlotLineFlags;
typedef int ImPlotScatterFlags;
typedef int ImPlotStairsFlags;
typedef int ImPlotShadedFlags;
typedef int ImPlotBarsFlags;
typedef int ImPlotBarGroupsFlags;
typedef int ImPlotErrorBarsFlags;
typedef int ImPlotStemsFlags;
typedef int ImPlotInfLinesFlags;
typedef int ImPlotPieChartFlags;
typedef int ImPlotHeatmapFlags;
typedef int ImPlotHistogramFlags;
typedef int ImPlotDigitalFlags;
typedef int ImPlotImageFlags;
typedef int ImPlotTextFlags;
typedef int ImPlotDummyFlags;
typedef int ImPlotCond;
typedef int ImPlotCol;
typedef int ImPlotStyleVar;
typedef int ImPlotScale;
typedef int ImPlotMarker;
typedef int ImPlotColormap;
typedef int ImPlotLocation;
typedef int ImPlotBin;
typedef enum {
    ImAxis_X1 = 0,
    ImAxis_X2,
    ImAxis_X3,
    ImAxis_Y1,
    ImAxis_Y2,
    ImAxis_Y3,
    ImAxis_COUNT
}ImAxis_;
typedef enum {
    ImPlotFlags_None = 0,
    ImPlotFlags_NoTitle = 1 << 0,
    ImPlotFlags_NoLegend = 1 << 1,
    ImPlotFlags_NoMouseText = 1 << 2,
    ImPlotFlags_NoInputs = 1 << 3,
    ImPlotFlags_NoMenus = 1 << 4,
    ImPlotFlags_NoBoxSelect = 1 << 5,
    ImPlotFlags_NoFrame = 1 << 6,
    ImPlotFlags_Equal = 1 << 7,
    ImPlotFlags_Crosshairs = 1 << 8,
    ImPlotFlags_CanvasOnly = ImPlotFlags_NoTitle | ImPlotFlags_NoLegend | ImPlotFlags_NoMenus | ImPlotFlags_NoBoxSelect | ImPlotFlags_NoMouseText
}ImPlotFlags_;
typedef enum {
    ImPlotAxisFlags_None = 0,
    ImPlotAxisFlags_NoLabel = 1 << 0,
    ImPlotAxisFlags_NoGridLines = 1 << 1,
    ImPlotAxisFlags_NoTickMarks = 1 << 2,
    ImPlotAxisFlags_NoTickLabels = 1 << 3,
    ImPlotAxisFlags_NoInitialFit = 1 << 4,
    ImPlotAxisFlags_NoMenus = 1 << 5,
    ImPlotAxisFlags_NoSideSwitch = 1 << 6,
    ImPlotAxisFlags_NoHighlight = 1 << 7,
    ImPlotAxisFlags_Opposite = 1 << 8,
    ImPlotAxisFlags_Foreground = 1 << 9,
    ImPlotAxisFlags_Invert = 1 << 10,
    ImPlotAxisFlags_AutoFit = 1 << 11,
    ImPlotAxisFlags_RangeFit = 1 << 12,
    ImPlotAxisFlags_PanStretch = 1 << 13,
    ImPlotAxisFlags_LockMin = 1 << 14,
    ImPlotAxisFlags_LockMax = 1 << 15,
    ImPlotAxisFlags_Lock = ImPlotAxisFlags_LockMin | ImPlotAxisFlags_LockMax,
    ImPlotAxisFlags_NoDecorations = ImPlotAxisFlags_NoLabel | ImPlotAxisFlags_NoGridLines | ImPlotAxisFlags_NoTickMarks | ImPlotAxisFlags_NoTickLabels,
    ImPlotAxisFlags_AuxDefault = ImPlotAxisFlags_NoGridLines | ImPlotAxisFlags_Opposite
}ImPlotAxisFlags_;
typedef enum {
    ImPlotSubplotFlags_None = 0,
    ImPlotSubplotFlags_NoTitle = 1 << 0,
    ImPlotSubplotFlags_NoLegend = 1 << 1,
    ImPlotSubplotFlags_NoMenus = 1 << 2,
    ImPlotSubplotFlags_NoResize = 1 << 3,
    ImPlotSubplotFlags_NoAlign = 1 << 4,
    ImPlotSubplotFlags_ShareItems = 1 << 5,
    ImPlotSubplotFlags_LinkRows = 1 << 6,
    ImPlotSubplotFlags_LinkCols = 1 << 7,
    ImPlotSubplotFlags_LinkAllX = 1 << 8,
    ImPlotSubplotFlags_LinkAllY = 1 << 9,
    ImPlotSubplotFlags_ColMajor = 1 << 10
}ImPlotSubplotFlags_;
typedef enum {
    ImPlotLegendFlags_None = 0,
    ImPlotLegendFlags_NoButtons = 1 << 0,
    ImPlotLegendFlags_NoHighlightItem = 1 << 1,
    ImPlotLegendFlags_NoHighlightAxis = 1 << 2,
    ImPlotLegendFlags_NoMenus = 1 << 3,
    ImPlotLegendFlags_Outside = 1 << 4,
    ImPlotLegendFlags_Horizontal = 1 << 5,
    ImPlotLegendFlags_Sort = 1 << 6,
}ImPlotLegendFlags_;
typedef enum {
    ImPlotMouseTextFlags_None = 0,
    ImPlotMouseTextFlags_NoAuxAxes = 1 << 0,
    ImPlotMouseTextFlags_NoFormat = 1 << 1,
    ImPlotMouseTextFlags_ShowAlways = 1 << 2,
}ImPlotMouseTextFlags_;
typedef enum {
    ImPlotDragToolFlags_None = 0,
    ImPlotDragToolFlags_NoCursors = 1 << 0,
    ImPlotDragToolFlags_NoFit = 1 << 1,
    ImPlotDragToolFlags_NoInputs = 1 << 2,
    ImPlotDragToolFlags_Delayed = 1 << 3,
}ImPlotDragToolFlags_;
typedef enum {
    ImPlotColormapScaleFlags_None = 0,
    ImPlotColormapScaleFlags_NoLabel = 1 << 0,
    ImPlotColormapScaleFlags_Opposite = 1 << 1,
    ImPlotColormapScaleFlags_Invert = 1 << 2,
}ImPlotColormapScaleFlags_;
typedef enum {
    ImPlotItemFlags_None = 0,
    ImPlotItemFlags_NoLegend = 1 << 0,
    ImPlotItemFlags_NoFit = 1 << 1,
}ImPlotItemFlags_;
typedef enum {
    ImPlotLineFlags_None = 0,
    ImPlotLineFlags_Segments = 1 << 10,
    ImPlotLineFlags_Loop = 1 << 11,
    ImPlotLineFlags_SkipNaN = 1 << 12,
    ImPlotLineFlags_NoClip = 1 << 13,
    ImPlotLineFlags_Shaded = 1 << 14,
}ImPlotLineFlags_;
typedef enum {
    ImPlotScatterFlags_None = 0,
    ImPlotScatterFlags_NoClip = 1 << 10,
}ImPlotScatterFlags_;
typedef enum {
    ImPlotStairsFlags_None = 0,
    ImPlotStairsFlags_PreStep = 1 << 10,
    ImPlotStairsFlags_Shaded = 1 << 11
}ImPlotStairsFlags_;
typedef enum {
    ImPlotShadedFlags_None = 0
}ImPlotShadedFlags_;
typedef enum {
    ImPlotBarsFlags_None = 0,
    ImPlotBarsFlags_Horizontal = 1 << 10,
}ImPlotBarsFlags_;
typedef enum {
    ImPlotBarGroupsFlags_None = 0,
    ImPlotBarGroupsFlags_Horizontal = 1 << 10,
    ImPlotBarGroupsFlags_Stacked = 1 << 11,
}ImPlotBarGroupsFlags_;
typedef enum {
    ImPlotErrorBarsFlags_None = 0,
    ImPlotErrorBarsFlags_Horizontal = 1 << 10,
}ImPlotErrorBarsFlags_;
typedef enum {
    ImPlotStemsFlags_None = 0,
    ImPlotStemsFlags_Horizontal = 1 << 10,
}ImPlotStemsFlags_;
typedef enum {
    ImPlotInfLinesFlags_None = 0,
    ImPlotInfLinesFlags_Horizontal = 1 << 10
}ImPlotInfLinesFlags_;
typedef enum {
    ImPlotPieChartFlags_None = 0,
    ImPlotPieChartFlags_Normalize = 1 << 10,
    ImPlotPieChartFlags_IgnoreHidden = 1 << 11
}ImPlotPieChartFlags_;
typedef enum {
    ImPlotHeatmapFlags_None = 0,
    ImPlotHeatmapFlags_ColMajor = 1 << 10,
}ImPlotHeatmapFlags_;
typedef enum {
    ImPlotHistogramFlags_None = 0,
    ImPlotHistogramFlags_Horizontal = 1 << 10,
    ImPlotHistogramFlags_Cumulative = 1 << 11,
    ImPlotHistogramFlags_Density = 1 << 12,
    ImPlotHistogramFlags_NoOutliers = 1 << 13,
    ImPlotHistogramFlags_ColMajor = 1 << 14
}ImPlotHistogramFlags_;
typedef enum {
    ImPlotDigitalFlags_None = 0
}ImPlotDigitalFlags_;
typedef enum {
    ImPlotImageFlags_None = 0
}ImPlotImageFlags_;
typedef enum {
    ImPlotTextFlags_None = 0,
    ImPlotTextFlags_Vertical = 1 << 10
}ImPlotTextFlags_;
typedef enum {
    ImPlotDummyFlags_None = 0
}ImPlotDummyFlags_;
typedef enum {
    ImPlotCond_None = ImGuiCond_None,
    ImPlotCond_Always = ImGuiCond_Always,
    ImPlotCond_Once = ImGuiCond_Once,
}ImPlotCond_;
typedef enum {
    ImPlotCol_Line,
    ImPlotCol_Fill,
    ImPlotCol_MarkerOutline,
    ImPlotCol_MarkerFill,
    ImPlotCol_ErrorBar,
    ImPlotCol_FrameBg,
    ImPlotCol_PlotBg,
    ImPlotCol_PlotBorder,
    ImPlotCol_LegendBg,
    ImPlotCol_LegendBorder,
    ImPlotCol_LegendText,
    ImPlotCol_TitleText,
    ImPlotCol_InlayText,
    ImPlotCol_AxisText,
    ImPlotCol_AxisGrid,
    ImPlotCol_AxisTick,
    ImPlotCol_AxisBg,
    ImPlotCol_AxisBgHovered,
    ImPlotCol_AxisBgActive,
    ImPlotCol_Selection,
    ImPlotCol_Crosshairs,
    ImPlotCol_COUNT
}ImPlotCol_;
typedef enum {
    ImPlotStyleVar_LineWeight,
    ImPlotStyleVar_Marker,
    ImPlotStyleVar_MarkerSize,
    ImPlotStyleVar_MarkerWeight,
    ImPlotStyleVar_FillAlpha,
    ImPlotStyleVar_ErrorBarSize,
    ImPlotStyleVar_ErrorBarWeight,
    ImPlotStyleVar_DigitalBitHeight,
    ImPlotStyleVar_DigitalBitGap,
    ImPlotStyleVar_PlotBorderSize,
    ImPlotStyleVar_MinorAlpha,
    ImPlotStyleVar_MajorTickLen,
    ImPlotStyleVar_MinorTickLen,
    ImPlotStyleVar_MajorTickSize,
    ImPlotStyleVar_MinorTickSize,
    ImPlotStyleVar_MajorGridSize,
    ImPlotStyleVar_MinorGridSize,
    ImPlotStyleVar_PlotPadding,
    ImPlotStyleVar_LabelPadding,
    ImPlotStyleVar_LegendPadding,
    ImPlotStyleVar_LegendInnerPadding,
    ImPlotStyleVar_LegendSpacing,
    ImPlotStyleVar_MousePosPadding,
    ImPlotStyleVar_AnnotationPadding,
    ImPlotStyleVar_FitPadding,
    ImPlotStyleVar_PlotDefaultSize,
    ImPlotStyleVar_PlotMinSize,
    ImPlotStyleVar_COUNT
}ImPlotStyleVar_;
typedef enum {
    ImPlotScale_Linear = 0,
    ImPlotScale_Time,
    ImPlotScale_Log10,
    ImPlotScale_SymLog,
}ImPlotScale_;
typedef enum {
    ImPlotMarker_None = -1,
    ImPlotMarker_Circle,
    ImPlotMarker_Square,
    ImPlotMarker_Diamond,
    ImPlotMarker_Up,
    ImPlotMarker_Down,
    ImPlotMarker_Left,
    ImPlotMarker_Right,
    ImPlotMarker_Cross,
    ImPlotMarker_Plus,
    ImPlotMarker_Asterisk,
    ImPlotMarker_COUNT
}ImPlotMarker_;
typedef enum {
    ImPlotColormap_Deep = 0,
    ImPlotColormap_Dark = 1,
    ImPlotColormap_Pastel = 2,
    ImPlotColormap_Paired = 3,
    ImPlotColormap_Viridis = 4,
    ImPlotColormap_Plasma = 5,
    ImPlotColormap_Hot = 6,
    ImPlotColormap_Cool = 7,
    ImPlotColormap_Pink = 8,
    ImPlotColormap_Jet = 9,
    ImPlotColormap_Twilight = 10,
    ImPlotColormap_RdBu = 11,
    ImPlotColormap_BrBG = 12,
    ImPlotColormap_PiYG = 13,
    ImPlotColormap_Spectral = 14,
    ImPlotColormap_Greys = 15,
}ImPlotColormap_;
typedef enum {
    ImPlotLocation_Center = 0,
    ImPlotLocation_North = 1 << 0,
    ImPlotLocation_South = 1 << 1,
    ImPlotLocation_West = 1 << 2,
    ImPlotLocation_East = 1 << 3,
    ImPlotLocation_NorthWest = ImPlotLocation_North | ImPlotLocation_West,
    ImPlotLocation_NorthEast = ImPlotLocation_North | ImPlotLocation_East,
    ImPlotLocation_SouthWest = ImPlotLocation_South | ImPlotLocation_West,
    ImPlotLocation_SouthEast = ImPlotLocation_South | ImPlotLocation_East
}ImPlotLocation_;
typedef enum {
    ImPlotBin_Sqrt = -1,
    ImPlotBin_Sturges = -2,
    ImPlotBin_Rice = -3,
    ImPlotBin_Scott = -4,
}ImPlotBin_;
typedef struct ImPlotPoint ImPlotPoint;
struct ImPlotPoint
{
    double x, y;
};
typedef struct ImPlotRange ImPlotRange;
struct ImPlotRange
{
    double Min, Max;
};
typedef struct ImPlotRect ImPlotRect;
struct ImPlotRect
{
    ImPlotRange X, Y;
};
typedef struct ImPlotStyle ImPlotStyle;
struct ImPlotStyle
{
    float LineWeight;
    int Marker;
    float MarkerSize;
    float MarkerWeight;
    float FillAlpha;
    float ErrorBarSize;
    float ErrorBarWeight;
    float DigitalBitHeight;
    float DigitalBitGap;
    float PlotBorderSize;
    float MinorAlpha;
    ImVec2 MajorTickLen;
    ImVec2 MinorTickLen;
    ImVec2 MajorTickSize;
    ImVec2 MinorTickSize;
    ImVec2 MajorGridSize;
    ImVec2 MinorGridSize;
    ImVec2 PlotPadding;
    ImVec2 LabelPadding;
    ImVec2 LegendPadding;
    ImVec2 LegendInnerPadding;
    ImVec2 LegendSpacing;
    ImVec2 MousePosPadding;
    ImVec2 AnnotationPadding;
    ImVec2 FitPadding;
    ImVec2 PlotDefaultSize;
    ImVec2 PlotMinSize;
    ImVec4 Colors[ImPlotCol_COUNT];
    ImPlotColormap Colormap;
    bool UseLocalTime;
    bool UseISO8601;
    bool Use24HourClock;
};
typedef struct ImPlotInputMap ImPlotInputMap;
struct ImPlotInputMap
{
    ImGuiMouseButton Pan;
    int PanMod;
    ImGuiMouseButton Fit;
    ImGuiMouseButton Select;
    ImGuiMouseButton SelectCancel;
    int SelectMod;
    int SelectHorzMod;
    int SelectVertMod;
    ImGuiMouseButton Menu;
    int OverrideMod;
    int ZoomMod;
    float ZoomRate;
};
typedef int (*ImPlotFormatter)(double value, char* buff, int size, void* user_data);
typedef ImPlotPoint (*ImPlotGetter)(int idx, void* user_data);
typedef double (*ImPlotTransform)(double value, void* user_data);
struct ImPlotTick;
struct ImPlotAxis;
struct ImPlotAxisColor;
struct ImPlotItem;
struct ImPlotLegend;
struct ImPlotPlot;
struct ImPlotNextPlotData;
struct ImPlotTicker;
extern ImPlotContext* GImPlot;
typedef int ImPlotTimeUnit;
typedef int ImPlotDateFmt;
typedef int ImPlotTimeFmt;
typedef enum {
    ImPlotTimeUnit_Us,
    ImPlotTimeUnit_Ms,
    ImPlotTimeUnit_S,
    ImPlotTimeUnit_Min,
    ImPlotTimeUnit_Hr,
    ImPlotTimeUnit_Day,
    ImPlotTimeUnit_Mo,
    ImPlotTimeUnit_Yr,
    ImPlotTimeUnit_COUNT
}ImPlotTimeUnit_;
typedef enum {
    ImPlotDateFmt_None = 0,
    ImPlotDateFmt_DayMo,
    ImPlotDateFmt_DayMoYr,
    ImPlotDateFmt_MoYr,
    ImPlotDateFmt_Mo,
    ImPlotDateFmt_Yr
}ImPlotDateFmt_;
typedef enum {
    ImPlotTimeFmt_None = 0,
    ImPlotTimeFmt_Us,
    ImPlotTimeFmt_SUs,
    ImPlotTimeFmt_SMs,
    ImPlotTimeFmt_S,
    ImPlotTimeFmt_MinSMs,
    ImPlotTimeFmt_HrMinSMs,
    ImPlotTimeFmt_HrMinS,
    ImPlotTimeFmt_HrMin,
    ImPlotTimeFmt_Hr
}ImPlotTimeFmt_;
typedef void (*ImPlotLocator)(ImPlotTicker* ticker, const ImPlotRange range, float pixels, bool vertical, ImPlotFormatter formatter, void* formatter_data);
typedef struct ImPlotDateTimeSpec ImPlotDateTimeSpec;
struct ImPlotDateTimeSpec
{
    ImPlotDateFmt Date;
    ImPlotTimeFmt Time;
    bool UseISO8601;
    bool Use24HourClock;
};
typedef struct ImPlotTime ImPlotTime;
struct ImPlotTime
{
    time_t S;
    int Us;
};
typedef struct ImPlotColormapData ImPlotColormapData;
typedef struct ImVector_bool {int Size;int Capacity;bool* Data;} ImVector_bool;
struct ImPlotColormapData
{
    ImVector_ImU32 Keys;
    ImVector_int KeyCounts;
    ImVector_int KeyOffsets;
    ImVector_ImU32 Tables;
    ImVector_int TableSizes;
    ImVector_int TableOffsets;
    ImGuiTextBuffer Text;
    ImVector_int TextOffsets;
    ImVector_bool Quals;
    ImGuiStorage Map;
    int Count;
};
typedef struct ImPlotPointError ImPlotPointError;
struct ImPlotPointError
{
    double X, Y, Neg, Pos;
};
typedef struct ImPlotAnnotation ImPlotAnnotation;
struct ImPlotAnnotation
{
    ImVec2 Pos;
    ImVec2 Offset;
    ImU32 ColorBg;
    ImU32 ColorFg;
    int TextOffset;
    bool Clamp;
};
typedef struct ImPlotAnnotationCollection ImPlotAnnotationCollection;
typedef struct ImVector_ImPlotAnnotation {int Size;int Capacity;ImPlotAnnotation* Data;} ImVector_ImPlotAnnotation;
struct ImPlotAnnotationCollection
{
    ImVector_ImPlotAnnotation Annotations;
    ImGuiTextBuffer TextBuffer;
    int Size;
};
typedef struct ImPlotTag ImPlotTag;
struct ImPlotTag
{
    ImAxis Axis;
    double Value;
    ImU32 ColorBg;
    ImU32 ColorFg;
    int TextOffset;
};
typedef struct ImPlotTagCollection ImPlotTagCollection;
typedef struct ImVector_ImPlotTag {int Size;int Capacity;ImPlotTag* Data;} ImVector_ImPlotTag;
struct ImPlotTagCollection
{
    ImVector_ImPlotTag Tags;
    ImGuiTextBuffer TextBuffer;
    int Size;
};
struct ImPlotTick
{
    double PlotPos;
    float PixelPos;
    ImVec2 LabelSize;
    int TextOffset;
    bool Major;
    bool ShowLabel;
    int Level;
    int Idx;
};
typedef struct ImVector_ImPlotTick {int Size;int Capacity;ImPlotTick* Data;} ImVector_ImPlotTick;
struct ImPlotTicker
{
    ImVector_ImPlotTick Ticks;
    ImGuiTextBuffer TextBuffer;
    ImVec2 MaxSize;
    ImVec2 LateSize;
    int Levels;
};
struct ImPlotAxis
{
    ImGuiID ID;
    ImPlotAxisFlags Flags;
    ImPlotAxisFlags PreviousFlags;
    ImPlotRange Range;
    ImPlotCond RangeCond;
    ImPlotScale Scale;
    ImPlotRange FitExtents;
    ImPlotAxis* OrthoAxis;
    ImPlotRange ConstraintRange;
    ImPlotRange ConstraintZoom;
    ImPlotTicker Ticker;
    ImPlotFormatter Formatter;
    void* FormatterData;
    char FormatSpec[16];
    ImPlotLocator Locator;
    double* LinkedMin;
    double* LinkedMax;
    int PickerLevel;
    ImPlotTime PickerTimeMin, PickerTimeMax;
    ImPlotTransform TransformForward;
    ImPlotTransform TransformInverse;
    void* TransformData;
    float PixelMin, PixelMax;
    double ScaleMin, ScaleMax;
    double ScaleToPixel;
    float Datum1, Datum2;
    ImRect HoverRect;
    int LabelOffset;
    ImU32 ColorMaj, ColorMin, ColorTick, ColorTxt, ColorBg, ColorHov, ColorAct, ColorHiLi;
    bool Enabled;
    bool Vertical;
    bool FitThisFrame;
    bool HasRange;
    bool HasFormatSpec;
    bool ShowDefaultTicks;
    bool Hovered;
    bool Held;
};
typedef struct ImPlotAlignmentData ImPlotAlignmentData;
struct ImPlotAlignmentData
{
    bool Vertical;
    float PadA;
    float PadB;
    float PadAMax;
    float PadBMax;
};
struct ImPlotItem
{
    ImGuiID ID;
    ImU32 Color;
    ImRect LegendHoverRect;
    int NameOffset;
    bool Show;
    bool LegendHovered;
    bool SeenThisFrame;
};
struct ImPlotLegend
{
    ImPlotLegendFlags Flags;
    ImPlotLegendFlags PreviousFlags;
    ImPlotLocation Location;
    ImPlotLocation PreviousLocation;
    ImVec2 Scroll;
    ImVector_int Indices;
    ImGuiTextBuffer Labels;
    ImRect Rect;
    ImRect RectClamped;
    bool Hovered;
    bool Held;
    bool CanGoInside;
};
typedef struct ImPlotItemGroup ImPlotItemGroup;
typedef struct ImVector_ImPlotItem {int Size;int Capacity;ImPlotItem* Data;} ImVector_ImPlotItem;
typedef struct ImPool_ImPlotItem {ImVector_ImPlotItem Buf;ImGuiStorage Map;ImPoolIdx FreeIdx;ImPoolIdx AliveCount;} ImPool_ImPlotItem;
struct ImPlotItemGroup
{
    ImGuiID ID;
    ImPlotLegend Legend;
    ImPool_ImPlotItem ItemPool;
    int ColormapIdx;
};
struct ImPlotPlot
{
    ImGuiID ID;
    ImPlotFlags Flags;
    ImPlotFlags PreviousFlags;
    ImPlotLocation MouseTextLocation;
    ImPlotMouseTextFlags MouseTextFlags;
    ImPlotAxis Axes[ImAxis_COUNT];
    ImGuiTextBuffer TextBuffer;
    ImPlotItemGroup Items;
    ImAxis CurrentX;
    ImAxis CurrentY;
    ImRect FrameRect;
    ImRect CanvasRect;
    ImRect PlotRect;
    ImRect AxesRect;
    ImRect SelectRect;
    ImVec2 SelectStart;
    int TitleOffset;
    bool JustCreated;
    bool Initialized;
    bool SetupLocked;
    bool FitThisFrame;
    bool Hovered;
    bool Held;
    bool Selecting;
    bool Selected;
    bool ContextLocked;
};
typedef struct ImPlotSubplot ImPlotSubplot;
typedef struct ImVector_ImPlotAlignmentData {int Size;int Capacity;ImPlotAlignmentData* Data;} ImVector_ImPlotAlignmentData;
typedef struct ImVector_ImPlotRange {int Size;int Capacity;ImPlotRange* Data;} ImVector_ImPlotRange;
struct ImPlotSubplot
{
    ImGuiID ID;
    ImPlotSubplotFlags Flags;
    ImPlotSubplotFlags PreviousFlags;
    ImPlotItemGroup Items;
    int Rows;
    int Cols;
    int CurrentIdx;
    ImRect FrameRect;
    ImRect GridRect;
    ImVec2 CellSize;
    ImVector_ImPlotAlignmentData RowAlignmentData;
    ImVector_ImPlotAlignmentData ColAlignmentData;
    ImVector_float RowRatios;
    ImVector_float ColRatios;
    ImVector_ImPlotRange RowLinkData;
    ImVector_ImPlotRange ColLinkData;
    float TempSizes[2];
    bool FrameHovered;
    bool HasTitle;
};
struct ImPlotNextPlotData
{
    ImPlotCond RangeCond[ImAxis_COUNT];
    ImPlotRange Range[ImAxis_COUNT];
    bool HasRange[ImAxis_COUNT];
    bool Fit[ImAxis_COUNT];
    double* LinkedMin[ImAxis_COUNT];
    double* LinkedMax[ImAxis_COUNT];
};
typedef struct ImPlotNextItemData ImPlotNextItemData;
struct ImPlotNextItemData
{
    ImVec4 Colors[5];
    float LineWeight;
    ImPlotMarker Marker;
    float MarkerSize;
    float MarkerWeight;
    float FillAlpha;
    float ErrorBarSize;
    float ErrorBarWeight;
    float DigitalBitHeight;
    float DigitalBitGap;
    bool RenderLine;
    bool RenderFill;
    bool RenderMarkerLine;
    bool RenderMarkerFill;
    bool HasHidden;
    bool Hidden;
    ImPlotCond HiddenCond;
};
typedef struct ImVector_ImPlotPlot {int Size;int Capacity;ImPlotPlot* Data;} ImVector_ImPlotPlot;
typedef struct ImPool_ImPlotPlot {ImVector_ImPlotPlot Buf;ImGuiStorage Map;ImPoolIdx FreeIdx;ImPoolIdx AliveCount;} ImPool_ImPlotPlot;
typedef struct ImVector_ImPlotSubplot {int Size;int Capacity;ImPlotSubplot* Data;} ImVector_ImPlotSubplot;
typedef struct ImPool_ImPlotSubplot {ImVector_ImPlotSubplot Buf;ImGuiStorage Map;ImPoolIdx FreeIdx;ImPoolIdx AliveCount;} ImPool_ImPlotSubplot;
typedef struct ImVector_ImPlotColormap {int Size;int Capacity;ImPlotColormap* Data;} ImVector_ImPlotColormap;
typedef struct ImVector_double {int Size;int Capacity;double* Data;} ImVector_double;
typedef struct ImPool_ImPlotAlignmentData {ImVector_ImPlotAlignmentData Buf;ImGuiStorage Map;ImPoolIdx FreeIdx;ImPoolIdx AliveCount;} ImPool_ImPlotAlignmentData;
struct ImPlotContext
{
    ImPool_ImPlotPlot Plots;
    ImPool_ImPlotSubplot Subplots;
    ImPlotPlot* CurrentPlot;
    ImPlotSubplot* CurrentSubplot;
    ImPlotItemGroup* CurrentItems;
    ImPlotItem* CurrentItem;
    ImPlotItem* PreviousItem;
    ImPlotTicker CTicker;
    ImPlotAnnotationCollection Annotations;
    ImPlotTagCollection Tags;
    ImPlotStyle Style;
    ImVector_ImGuiColorMod ColorModifiers;
    ImVector_ImGuiStyleMod StyleModifiers;
    ImPlotColormapData ColormapData;
    ImVector_ImPlotColormap ColormapModifiers;
    tm Tm;
    ImVector_double TempDouble1, TempDouble2;
    ImVector_int TempInt1;
    int DigitalPlotItemCnt;
    int DigitalPlotOffset;
    ImPlotNextPlotData NextPlotData;
    ImPlotNextItemData NextItemData;
    ImPlotInputMap InputMap;
    bool OpenContextThisFrame;
    ImGuiTextBuffer MousePosStringBuilder;
    ImPlotItemGroup* SortItems;
    ImPool_ImPlotAlignmentData AlignmentData;
    ImPlotAlignmentData* CurrentAlignmentH;
    ImPlotAlignmentData* CurrentAlignmentV;
};
typedef struct Formatter_Time_Data Formatter_Time_Data;
struct Formatter_Time_Data
{
    ImPlotTime Time;
    ImPlotDateTimeSpec Spec;
    ImPlotFormatter UserFormatter;
    void* UserFormatterData;
};
typedef void *(*ImPlotPoint_getter)(void* data, int idx, ImPlotPoint *point);
extern __declspec(dllexport) ImPlotPoint* ImPlotPoint_ImPlotPoint_Nil(void);
extern __declspec(dllexport) void ImPlotPoint_destroy(ImPlotPoint* self);
extern __declspec(dllexport) ImPlotPoint* ImPlotPoint_ImPlotPoint_double(double _x,double _y);
extern __declspec(dllexport) ImPlotPoint* ImPlotPoint_ImPlotPoint_Vec2(const ImVec2 p);
extern __declspec(dllexport) ImPlotRange* ImPlotRange_ImPlotRange_Nil(void);
extern __declspec(dllexport) void ImPlotRange_destroy(ImPlotRange* self);
extern __declspec(dllexport) ImPlotRange* ImPlotRange_ImPlotRange_double(double _min,double _max);
extern __declspec(dllexport) bool ImPlotRange_Contains(ImPlotRange* self,double value);
extern __declspec(dllexport) double ImPlotRange_Size(ImPlotRange* self);
extern __declspec(dllexport) double ImPlotRange_Clamp(ImPlotRange* self,double value);
extern __declspec(dllexport) ImPlotRect* ImPlotRect_ImPlotRect_Nil(void);
extern __declspec(dllexport) void ImPlotRect_destroy(ImPlotRect* self);
extern __declspec(dllexport) ImPlotRect* ImPlotRect_ImPlotRect_double(double x_min,double x_max,double y_min,double y_max);
extern __declspec(dllexport) bool ImPlotRect_Contains_PlotPoInt(ImPlotRect* self,const ImPlotPoint p);
extern __declspec(dllexport) bool ImPlotRect_Contains_double(ImPlotRect* self,double x,double y);
extern __declspec(dllexport) void ImPlotRect_Size(ImPlotPoint *pOut,ImPlotRect* self);
extern __declspec(dllexport) void ImPlotRect_Clamp_PlotPoInt(ImPlotPoint *pOut,ImPlotRect* self,const ImPlotPoint p);
extern __declspec(dllexport) void ImPlotRect_Clamp_double(ImPlotPoint *pOut,ImPlotRect* self,double x,double y);
extern __declspec(dllexport) void ImPlotRect_Min(ImPlotPoint *pOut,ImPlotRect* self);
extern __declspec(dllexport) void ImPlotRect_Max(ImPlotPoint *pOut,ImPlotRect* self);
extern __declspec(dllexport) ImPlotStyle* ImPlotStyle_ImPlotStyle(void);
extern __declspec(dllexport) void ImPlotStyle_destroy(ImPlotStyle* self);
extern __declspec(dllexport) ImPlotInputMap* ImPlotInputMap_ImPlotInputMap(void);
extern __declspec(dllexport) void ImPlotInputMap_destroy(ImPlotInputMap* self);
extern __declspec(dllexport) ImPlotContext* ImPlot_CreateContext(void);
extern __declspec(dllexport) void ImPlot_DestroyContext(ImPlotContext* ctx);
extern __declspec(dllexport) ImPlotContext* ImPlot_GetCurrentContext(void);
extern __declspec(dllexport) void ImPlot_SetCurrentContext(ImPlotContext* ctx);
extern __declspec(dllexport) void ImPlot_SetImGuiContext(ImGuiContext* ctx);
extern __declspec(dllexport) bool ImPlot_BeginPlot(const char* title_id,const ImVec2 size,ImPlotFlags flags);
extern __declspec(dllexport) void ImPlot_EndPlot(void);
extern __declspec(dllexport) bool ImPlot_BeginSubplots(const char* title_id,int rows,int cols,const ImVec2 size,ImPlotSubplotFlags flags,float* row_ratios,float* col_ratios);
extern __declspec(dllexport) void ImPlot_EndSubplots(void);
extern __declspec(dllexport) void ImPlot_SetupAxis(ImAxis axis,const char* label,ImPlotAxisFlags flags);
extern __declspec(dllexport) void ImPlot_SetupAxisLimits(ImAxis axis,double v_min,double v_max,ImPlotCond cond);
extern __declspec(dllexport) void ImPlot_SetupAxisLinks(ImAxis axis,double* link_min,double* link_max);
extern __declspec(dllexport) void ImPlot_SetupAxisFormat_Str(ImAxis axis,const char* fmt);
extern __declspec(dllexport) void ImPlot_SetupAxisFormat_PlotFormatter(ImAxis axis,ImPlotFormatter formatter,void* data);
extern __declspec(dllexport) void ImPlot_SetupAxisTicks_doublePtr(ImAxis axis,const double* values,int n_ticks,const char* const labels[],bool keep_default);
extern __declspec(dllexport) void ImPlot_SetupAxisTicks_double(ImAxis axis,double v_min,double v_max,int n_ticks,const char* const labels[],bool keep_default);
extern __declspec(dllexport) void ImPlot_SetupAxisScale_PlotScale(ImAxis axis,ImPlotScale scale);
extern __declspec(dllexport) void ImPlot_SetupAxisScale_PlotTransform(ImAxis axis,ImPlotTransform forward,ImPlotTransform inverse,void* data);
extern __declspec(dllexport) void ImPlot_SetupAxisLimitsConstraints(ImAxis axis,double v_min,double v_max);
extern __declspec(dllexport) void ImPlot_SetupAxisZoomConstraints(ImAxis axis,double z_min,double z_max);
extern __declspec(dllexport) void ImPlot_SetupAxes(const char* x_label,const char* y_label,ImPlotAxisFlags x_flags,ImPlotAxisFlags y_flags);
extern __declspec(dllexport) void ImPlot_SetupAxesLimits(double x_min,double x_max,double y_min,double y_max,ImPlotCond cond);
extern __declspec(dllexport) void ImPlot_SetupLegend(ImPlotLocation location,ImPlotLegendFlags flags);
extern __declspec(dllexport) void ImPlot_SetupMouseText(ImPlotLocation location,ImPlotMouseTextFlags flags);
extern __declspec(dllexport) void ImPlot_SetupFinish(void);
extern __declspec(dllexport) void ImPlot_SetNextAxisLimits(ImAxis axis,double v_min,double v_max,ImPlotCond cond);
extern __declspec(dllexport) void ImPlot_SetNextAxisLinks(ImAxis axis,double* link_min,double* link_max);
extern __declspec(dllexport) void ImPlot_SetNextAxisToFit(ImAxis axis);
extern __declspec(dllexport) void ImPlot_SetNextAxesLimits(double x_min,double x_max,double y_min,double y_max,ImPlotCond cond);
extern __declspec(dllexport) void ImPlot_SetNextAxesToFit(void);
extern __declspec(dllexport) void ImPlot_PlotLine_FloatPtrInt(const char* label_id,const float* values,int count,double xscale,double xstart,ImPlotLineFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotLine_doublePtrInt(const char* label_id,const double* values,int count,double xscale,double xstart,ImPlotLineFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotLine_S8PtrInt(const char* label_id,const ImS8* values,int count,double xscale,double xstart,ImPlotLineFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotLine_U8PtrInt(const char* label_id,const ImU8* values,int count,double xscale,double xstart,ImPlotLineFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotLine_S16PtrInt(const char* label_id,const ImS16* values,int count,double xscale,double xstart,ImPlotLineFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotLine_U16PtrInt(const char* label_id,const ImU16* values,int count,double xscale,double xstart,ImPlotLineFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotLine_S32PtrInt(const char* label_id,const ImS32* values,int count,double xscale,double xstart,ImPlotLineFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotLine_U32PtrInt(const char* label_id,const ImU32* values,int count,double xscale,double xstart,ImPlotLineFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotLine_S64PtrInt(const char* label_id,const ImS64* values,int count,double xscale,double xstart,ImPlotLineFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotLine_U64PtrInt(const char* label_id,const ImU64* values,int count,double xscale,double xstart,ImPlotLineFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotLine_FloatPtrFloatPtr(const char* label_id,const float* xs,const float* ys,int count,ImPlotLineFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotLine_doublePtrdoublePtr(const char* label_id,const double* xs,const double* ys,int count,ImPlotLineFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotLine_S8PtrS8Ptr(const char* label_id,const ImS8* xs,const ImS8* ys,int count,ImPlotLineFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotLine_U8PtrU8Ptr(const char* label_id,const ImU8* xs,const ImU8* ys,int count,ImPlotLineFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotLine_S16PtrS16Ptr(const char* label_id,const ImS16* xs,const ImS16* ys,int count,ImPlotLineFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotLine_U16PtrU16Ptr(const char* label_id,const ImU16* xs,const ImU16* ys,int count,ImPlotLineFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotLine_S32PtrS32Ptr(const char* label_id,const ImS32* xs,const ImS32* ys,int count,ImPlotLineFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotLine_U32PtrU32Ptr(const char* label_id,const ImU32* xs,const ImU32* ys,int count,ImPlotLineFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotLine_S64PtrS64Ptr(const char* label_id,const ImS64* xs,const ImS64* ys,int count,ImPlotLineFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotLine_U64PtrU64Ptr(const char* label_id,const ImU64* xs,const ImU64* ys,int count,ImPlotLineFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotLineG(const char* label_id,ImPlotPoint_getter getter,void* data,int count,ImPlotLineFlags flags);
extern __declspec(dllexport) void ImPlot_PlotScatter_FloatPtrInt(const char* label_id,const float* values,int count,double xscale,double xstart,ImPlotScatterFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotScatter_doublePtrInt(const char* label_id,const double* values,int count,double xscale,double xstart,ImPlotScatterFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotScatter_S8PtrInt(const char* label_id,const ImS8* values,int count,double xscale,double xstart,ImPlotScatterFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotScatter_U8PtrInt(const char* label_id,const ImU8* values,int count,double xscale,double xstart,ImPlotScatterFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotScatter_S16PtrInt(const char* label_id,const ImS16* values,int count,double xscale,double xstart,ImPlotScatterFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotScatter_U16PtrInt(const char* label_id,const ImU16* values,int count,double xscale,double xstart,ImPlotScatterFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotScatter_S32PtrInt(const char* label_id,const ImS32* values,int count,double xscale,double xstart,ImPlotScatterFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotScatter_U32PtrInt(const char* label_id,const ImU32* values,int count,double xscale,double xstart,ImPlotScatterFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotScatter_S64PtrInt(const char* label_id,const ImS64* values,int count,double xscale,double xstart,ImPlotScatterFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotScatter_U64PtrInt(const char* label_id,const ImU64* values,int count,double xscale,double xstart,ImPlotScatterFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotScatter_FloatPtrFloatPtr(const char* label_id,const float* xs,const float* ys,int count,ImPlotScatterFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotScatter_doublePtrdoublePtr(const char* label_id,const double* xs,const double* ys,int count,ImPlotScatterFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotScatter_S8PtrS8Ptr(const char* label_id,const ImS8* xs,const ImS8* ys,int count,ImPlotScatterFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotScatter_U8PtrU8Ptr(const char* label_id,const ImU8* xs,const ImU8* ys,int count,ImPlotScatterFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotScatter_S16PtrS16Ptr(const char* label_id,const ImS16* xs,const ImS16* ys,int count,ImPlotScatterFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotScatter_U16PtrU16Ptr(const char* label_id,const ImU16* xs,const ImU16* ys,int count,ImPlotScatterFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotScatter_S32PtrS32Ptr(const char* label_id,const ImS32* xs,const ImS32* ys,int count,ImPlotScatterFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotScatter_U32PtrU32Ptr(const char* label_id,const ImU32* xs,const ImU32* ys,int count,ImPlotScatterFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotScatter_S64PtrS64Ptr(const char* label_id,const ImS64* xs,const ImS64* ys,int count,ImPlotScatterFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotScatter_U64PtrU64Ptr(const char* label_id,const ImU64* xs,const ImU64* ys,int count,ImPlotScatterFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotScatterG(const char* label_id,ImPlotPoint_getter getter,void* data,int count,ImPlotScatterFlags flags);
extern __declspec(dllexport) void ImPlot_PlotStairs_FloatPtrInt(const char* label_id,const float* values,int count,double xscale,double xstart,ImPlotStairsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotStairs_doublePtrInt(const char* label_id,const double* values,int count,double xscale,double xstart,ImPlotStairsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotStairs_S8PtrInt(const char* label_id,const ImS8* values,int count,double xscale,double xstart,ImPlotStairsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotStairs_U8PtrInt(const char* label_id,const ImU8* values,int count,double xscale,double xstart,ImPlotStairsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotStairs_S16PtrInt(const char* label_id,const ImS16* values,int count,double xscale,double xstart,ImPlotStairsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotStairs_U16PtrInt(const char* label_id,const ImU16* values,int count,double xscale,double xstart,ImPlotStairsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotStairs_S32PtrInt(const char* label_id,const ImS32* values,int count,double xscale,double xstart,ImPlotStairsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotStairs_U32PtrInt(const char* label_id,const ImU32* values,int count,double xscale,double xstart,ImPlotStairsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotStairs_S64PtrInt(const char* label_id,const ImS64* values,int count,double xscale,double xstart,ImPlotStairsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotStairs_U64PtrInt(const char* label_id,const ImU64* values,int count,double xscale,double xstart,ImPlotStairsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotStairs_FloatPtrFloatPtr(const char* label_id,const float* xs,const float* ys,int count,ImPlotStairsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotStairs_doublePtrdoublePtr(const char* label_id,const double* xs,const double* ys,int count,ImPlotStairsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotStairs_S8PtrS8Ptr(const char* label_id,const ImS8* xs,const ImS8* ys,int count,ImPlotStairsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotStairs_U8PtrU8Ptr(const char* label_id,const ImU8* xs,const ImU8* ys,int count,ImPlotStairsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotStairs_S16PtrS16Ptr(const char* label_id,const ImS16* xs,const ImS16* ys,int count,ImPlotStairsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotStairs_U16PtrU16Ptr(const char* label_id,const ImU16* xs,const ImU16* ys,int count,ImPlotStairsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotStairs_S32PtrS32Ptr(const char* label_id,const ImS32* xs,const ImS32* ys,int count,ImPlotStairsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotStairs_U32PtrU32Ptr(const char* label_id,const ImU32* xs,const ImU32* ys,int count,ImPlotStairsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotStairs_S64PtrS64Ptr(const char* label_id,const ImS64* xs,const ImS64* ys,int count,ImPlotStairsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotStairs_U64PtrU64Ptr(const char* label_id,const ImU64* xs,const ImU64* ys,int count,ImPlotStairsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotStairsG(const char* label_id,ImPlotPoint_getter getter,void* data,int count,ImPlotStairsFlags flags);
extern __declspec(dllexport) void ImPlot_PlotShaded_FloatPtrInt(const char* label_id,const float* values,int count,double yref,double xscale,double xstart,ImPlotShadedFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotShaded_doublePtrInt(const char* label_id,const double* values,int count,double yref,double xscale,double xstart,ImPlotShadedFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotShaded_S8PtrInt(const char* label_id,const ImS8* values,int count,double yref,double xscale,double xstart,ImPlotShadedFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotShaded_U8PtrInt(const char* label_id,const ImU8* values,int count,double yref,double xscale,double xstart,ImPlotShadedFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotShaded_S16PtrInt(const char* label_id,const ImS16* values,int count,double yref,double xscale,double xstart,ImPlotShadedFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotShaded_U16PtrInt(const char* label_id,const ImU16* values,int count,double yref,double xscale,double xstart,ImPlotShadedFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotShaded_S32PtrInt(const char* label_id,const ImS32* values,int count,double yref,double xscale,double xstart,ImPlotShadedFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotShaded_U32PtrInt(const char* label_id,const ImU32* values,int count,double yref,double xscale,double xstart,ImPlotShadedFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotShaded_S64PtrInt(const char* label_id,const ImS64* values,int count,double yref,double xscale,double xstart,ImPlotShadedFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotShaded_U64PtrInt(const char* label_id,const ImU64* values,int count,double yref,double xscale,double xstart,ImPlotShadedFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotShaded_FloatPtrFloatPtrInt(const char* label_id,const float* xs,const float* ys,int count,double yref,ImPlotShadedFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotShaded_doublePtrdoublePtrInt(const char* label_id,const double* xs,const double* ys,int count,double yref,ImPlotShadedFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotShaded_S8PtrS8PtrInt(const char* label_id,const ImS8* xs,const ImS8* ys,int count,double yref,ImPlotShadedFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotShaded_U8PtrU8PtrInt(const char* label_id,const ImU8* xs,const ImU8* ys,int count,double yref,ImPlotShadedFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotShaded_S16PtrS16PtrInt(const char* label_id,const ImS16* xs,const ImS16* ys,int count,double yref,ImPlotShadedFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotShaded_U16PtrU16PtrInt(const char* label_id,const ImU16* xs,const ImU16* ys,int count,double yref,ImPlotShadedFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotShaded_S32PtrS32PtrInt(const char* label_id,const ImS32* xs,const ImS32* ys,int count,double yref,ImPlotShadedFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotShaded_U32PtrU32PtrInt(const char* label_id,const ImU32* xs,const ImU32* ys,int count,double yref,ImPlotShadedFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotShaded_S64PtrS64PtrInt(const char* label_id,const ImS64* xs,const ImS64* ys,int count,double yref,ImPlotShadedFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotShaded_U64PtrU64PtrInt(const char* label_id,const ImU64* xs,const ImU64* ys,int count,double yref,ImPlotShadedFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotShaded_FloatPtrFloatPtrFloatPtr(const char* label_id,const float* xs,const float* ys1,const float* ys2,int count,ImPlotShadedFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotShaded_doublePtrdoublePtrdoublePtr(const char* label_id,const double* xs,const double* ys1,const double* ys2,int count,ImPlotShadedFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotShaded_S8PtrS8PtrS8Ptr(const char* label_id,const ImS8* xs,const ImS8* ys1,const ImS8* ys2,int count,ImPlotShadedFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotShaded_U8PtrU8PtrU8Ptr(const char* label_id,const ImU8* xs,const ImU8* ys1,const ImU8* ys2,int count,ImPlotShadedFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotShaded_S16PtrS16PtrS16Ptr(const char* label_id,const ImS16* xs,const ImS16* ys1,const ImS16* ys2,int count,ImPlotShadedFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotShaded_U16PtrU16PtrU16Ptr(const char* label_id,const ImU16* xs,const ImU16* ys1,const ImU16* ys2,int count,ImPlotShadedFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotShaded_S32PtrS32PtrS32Ptr(const char* label_id,const ImS32* xs,const ImS32* ys1,const ImS32* ys2,int count,ImPlotShadedFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotShaded_U32PtrU32PtrU32Ptr(const char* label_id,const ImU32* xs,const ImU32* ys1,const ImU32* ys2,int count,ImPlotShadedFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotShaded_S64PtrS64PtrS64Ptr(const char* label_id,const ImS64* xs,const ImS64* ys1,const ImS64* ys2,int count,ImPlotShadedFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotShaded_U64PtrU64PtrU64Ptr(const char* label_id,const ImU64* xs,const ImU64* ys1,const ImU64* ys2,int count,ImPlotShadedFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotShadedG(const char* label_id,ImPlotPoint_getter getter1,void* data1,ImPlotPoint_getter getter2,void* data2,int count,ImPlotShadedFlags flags);
extern __declspec(dllexport) void ImPlot_PlotBars_FloatPtrInt(const char* label_id,const float* values,int count,double bar_size,double shift,ImPlotBarsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotBars_doublePtrInt(const char* label_id,const double* values,int count,double bar_size,double shift,ImPlotBarsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotBars_S8PtrInt(const char* label_id,const ImS8* values,int count,double bar_size,double shift,ImPlotBarsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotBars_U8PtrInt(const char* label_id,const ImU8* values,int count,double bar_size,double shift,ImPlotBarsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotBars_S16PtrInt(const char* label_id,const ImS16* values,int count,double bar_size,double shift,ImPlotBarsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotBars_U16PtrInt(const char* label_id,const ImU16* values,int count,double bar_size,double shift,ImPlotBarsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotBars_S32PtrInt(const char* label_id,const ImS32* values,int count,double bar_size,double shift,ImPlotBarsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotBars_U32PtrInt(const char* label_id,const ImU32* values,int count,double bar_size,double shift,ImPlotBarsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotBars_S64PtrInt(const char* label_id,const ImS64* values,int count,double bar_size,double shift,ImPlotBarsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotBars_U64PtrInt(const char* label_id,const ImU64* values,int count,double bar_size,double shift,ImPlotBarsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotBars_FloatPtrFloatPtr(const char* label_id,const float* xs,const float* ys,int count,double bar_size,ImPlotBarsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotBars_doublePtrdoublePtr(const char* label_id,const double* xs,const double* ys,int count,double bar_size,ImPlotBarsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotBars_S8PtrS8Ptr(const char* label_id,const ImS8* xs,const ImS8* ys,int count,double bar_size,ImPlotBarsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotBars_U8PtrU8Ptr(const char* label_id,const ImU8* xs,const ImU8* ys,int count,double bar_size,ImPlotBarsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotBars_S16PtrS16Ptr(const char* label_id,const ImS16* xs,const ImS16* ys,int count,double bar_size,ImPlotBarsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotBars_U16PtrU16Ptr(const char* label_id,const ImU16* xs,const ImU16* ys,int count,double bar_size,ImPlotBarsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotBars_S32PtrS32Ptr(const char* label_id,const ImS32* xs,const ImS32* ys,int count,double bar_size,ImPlotBarsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotBars_U32PtrU32Ptr(const char* label_id,const ImU32* xs,const ImU32* ys,int count,double bar_size,ImPlotBarsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotBars_S64PtrS64Ptr(const char* label_id,const ImS64* xs,const ImS64* ys,int count,double bar_size,ImPlotBarsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotBars_U64PtrU64Ptr(const char* label_id,const ImU64* xs,const ImU64* ys,int count,double bar_size,ImPlotBarsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotBarsG(const char* label_id,ImPlotPoint_getter getter,void* data,int count,double bar_size,ImPlotBarsFlags flags);
extern __declspec(dllexport) void ImPlot_PlotBarGroups_FloatPtr(const char* const label_ids[],const float* values,int item_count,int group_count,double group_size,double shift,ImPlotBarGroupsFlags flags);
extern __declspec(dllexport) void ImPlot_PlotBarGroups_doublePtr(const char* const label_ids[],const double* values,int item_count,int group_count,double group_size,double shift,ImPlotBarGroupsFlags flags);
extern __declspec(dllexport) void ImPlot_PlotBarGroups_S8Ptr(const char* const label_ids[],const ImS8* values,int item_count,int group_count,double group_size,double shift,ImPlotBarGroupsFlags flags);
extern __declspec(dllexport) void ImPlot_PlotBarGroups_U8Ptr(const char* const label_ids[],const ImU8* values,int item_count,int group_count,double group_size,double shift,ImPlotBarGroupsFlags flags);
extern __declspec(dllexport) void ImPlot_PlotBarGroups_S16Ptr(const char* const label_ids[],const ImS16* values,int item_count,int group_count,double group_size,double shift,ImPlotBarGroupsFlags flags);
extern __declspec(dllexport) void ImPlot_PlotBarGroups_U16Ptr(const char* const label_ids[],const ImU16* values,int item_count,int group_count,double group_size,double shift,ImPlotBarGroupsFlags flags);
extern __declspec(dllexport) void ImPlot_PlotBarGroups_S32Ptr(const char* const label_ids[],const ImS32* values,int item_count,int group_count,double group_size,double shift,ImPlotBarGroupsFlags flags);
extern __declspec(dllexport) void ImPlot_PlotBarGroups_U32Ptr(const char* const label_ids[],const ImU32* values,int item_count,int group_count,double group_size,double shift,ImPlotBarGroupsFlags flags);
extern __declspec(dllexport) void ImPlot_PlotBarGroups_S64Ptr(const char* const label_ids[],const ImS64* values,int item_count,int group_count,double group_size,double shift,ImPlotBarGroupsFlags flags);
extern __declspec(dllexport) void ImPlot_PlotBarGroups_U64Ptr(const char* const label_ids[],const ImU64* values,int item_count,int group_count,double group_size,double shift,ImPlotBarGroupsFlags flags);
extern __declspec(dllexport) void ImPlot_PlotErrorBars_FloatPtrFloatPtrFloatPtrInt(const char* label_id,const float* xs,const float* ys,const float* err,int count,ImPlotErrorBarsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotErrorBars_doublePtrdoublePtrdoublePtrInt(const char* label_id,const double* xs,const double* ys,const double* err,int count,ImPlotErrorBarsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotErrorBars_S8PtrS8PtrS8PtrInt(const char* label_id,const ImS8* xs,const ImS8* ys,const ImS8* err,int count,ImPlotErrorBarsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotErrorBars_U8PtrU8PtrU8PtrInt(const char* label_id,const ImU8* xs,const ImU8* ys,const ImU8* err,int count,ImPlotErrorBarsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotErrorBars_S16PtrS16PtrS16PtrInt(const char* label_id,const ImS16* xs,const ImS16* ys,const ImS16* err,int count,ImPlotErrorBarsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotErrorBars_U16PtrU16PtrU16PtrInt(const char* label_id,const ImU16* xs,const ImU16* ys,const ImU16* err,int count,ImPlotErrorBarsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotErrorBars_S32PtrS32PtrS32PtrInt(const char* label_id,const ImS32* xs,const ImS32* ys,const ImS32* err,int count,ImPlotErrorBarsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotErrorBars_U32PtrU32PtrU32PtrInt(const char* label_id,const ImU32* xs,const ImU32* ys,const ImU32* err,int count,ImPlotErrorBarsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotErrorBars_S64PtrS64PtrS64PtrInt(const char* label_id,const ImS64* xs,const ImS64* ys,const ImS64* err,int count,ImPlotErrorBarsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotErrorBars_U64PtrU64PtrU64PtrInt(const char* label_id,const ImU64* xs,const ImU64* ys,const ImU64* err,int count,ImPlotErrorBarsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotErrorBars_FloatPtrFloatPtrFloatPtrFloatPtr(const char* label_id,const float* xs,const float* ys,const float* neg,const float* pos,int count,ImPlotErrorBarsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotErrorBars_doublePtrdoublePtrdoublePtrdoublePtr(const char* label_id,const double* xs,const double* ys,const double* neg,const double* pos,int count,ImPlotErrorBarsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotErrorBars_S8PtrS8PtrS8PtrS8Ptr(const char* label_id,const ImS8* xs,const ImS8* ys,const ImS8* neg,const ImS8* pos,int count,ImPlotErrorBarsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotErrorBars_U8PtrU8PtrU8PtrU8Ptr(const char* label_id,const ImU8* xs,const ImU8* ys,const ImU8* neg,const ImU8* pos,int count,ImPlotErrorBarsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotErrorBars_S16PtrS16PtrS16PtrS16Ptr(const char* label_id,const ImS16* xs,const ImS16* ys,const ImS16* neg,const ImS16* pos,int count,ImPlotErrorBarsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotErrorBars_U16PtrU16PtrU16PtrU16Ptr(const char* label_id,const ImU16* xs,const ImU16* ys,const ImU16* neg,const ImU16* pos,int count,ImPlotErrorBarsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotErrorBars_S32PtrS32PtrS32PtrS32Ptr(const char* label_id,const ImS32* xs,const ImS32* ys,const ImS32* neg,const ImS32* pos,int count,ImPlotErrorBarsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotErrorBars_U32PtrU32PtrU32PtrU32Ptr(const char* label_id,const ImU32* xs,const ImU32* ys,const ImU32* neg,const ImU32* pos,int count,ImPlotErrorBarsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotErrorBars_S64PtrS64PtrS64PtrS64Ptr(const char* label_id,const ImS64* xs,const ImS64* ys,const ImS64* neg,const ImS64* pos,int count,ImPlotErrorBarsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotErrorBars_U64PtrU64PtrU64PtrU64Ptr(const char* label_id,const ImU64* xs,const ImU64* ys,const ImU64* neg,const ImU64* pos,int count,ImPlotErrorBarsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotStems_FloatPtrInt(const char* label_id,const float* values,int count,double ref,double scale,double start,ImPlotStemsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotStems_doublePtrInt(const char* label_id,const double* values,int count,double ref,double scale,double start,ImPlotStemsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotStems_S8PtrInt(const char* label_id,const ImS8* values,int count,double ref,double scale,double start,ImPlotStemsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotStems_U8PtrInt(const char* label_id,const ImU8* values,int count,double ref,double scale,double start,ImPlotStemsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotStems_S16PtrInt(const char* label_id,const ImS16* values,int count,double ref,double scale,double start,ImPlotStemsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotStems_U16PtrInt(const char* label_id,const ImU16* values,int count,double ref,double scale,double start,ImPlotStemsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotStems_S32PtrInt(const char* label_id,const ImS32* values,int count,double ref,double scale,double start,ImPlotStemsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotStems_U32PtrInt(const char* label_id,const ImU32* values,int count,double ref,double scale,double start,ImPlotStemsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotStems_S64PtrInt(const char* label_id,const ImS64* values,int count,double ref,double scale,double start,ImPlotStemsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotStems_U64PtrInt(const char* label_id,const ImU64* values,int count,double ref,double scale,double start,ImPlotStemsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotStems_FloatPtrFloatPtr(const char* label_id,const float* xs,const float* ys,int count,double ref,ImPlotStemsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotStems_doublePtrdoublePtr(const char* label_id,const double* xs,const double* ys,int count,double ref,ImPlotStemsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotStems_S8PtrS8Ptr(const char* label_id,const ImS8* xs,const ImS8* ys,int count,double ref,ImPlotStemsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotStems_U8PtrU8Ptr(const char* label_id,const ImU8* xs,const ImU8* ys,int count,double ref,ImPlotStemsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotStems_S16PtrS16Ptr(const char* label_id,const ImS16* xs,const ImS16* ys,int count,double ref,ImPlotStemsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotStems_U16PtrU16Ptr(const char* label_id,const ImU16* xs,const ImU16* ys,int count,double ref,ImPlotStemsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotStems_S32PtrS32Ptr(const char* label_id,const ImS32* xs,const ImS32* ys,int count,double ref,ImPlotStemsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotStems_U32PtrU32Ptr(const char* label_id,const ImU32* xs,const ImU32* ys,int count,double ref,ImPlotStemsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotStems_S64PtrS64Ptr(const char* label_id,const ImS64* xs,const ImS64* ys,int count,double ref,ImPlotStemsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotStems_U64PtrU64Ptr(const char* label_id,const ImU64* xs,const ImU64* ys,int count,double ref,ImPlotStemsFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotInfLines_FloatPtr(const char* label_id,const float* values,int count,ImPlotInfLinesFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotInfLines_doublePtr(const char* label_id,const double* values,int count,ImPlotInfLinesFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotInfLines_S8Ptr(const char* label_id,const ImS8* values,int count,ImPlotInfLinesFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotInfLines_U8Ptr(const char* label_id,const ImU8* values,int count,ImPlotInfLinesFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotInfLines_S16Ptr(const char* label_id,const ImS16* values,int count,ImPlotInfLinesFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotInfLines_U16Ptr(const char* label_id,const ImU16* values,int count,ImPlotInfLinesFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotInfLines_S32Ptr(const char* label_id,const ImS32* values,int count,ImPlotInfLinesFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotInfLines_U32Ptr(const char* label_id,const ImU32* values,int count,ImPlotInfLinesFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotInfLines_S64Ptr(const char* label_id,const ImS64* values,int count,ImPlotInfLinesFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotInfLines_U64Ptr(const char* label_id,const ImU64* values,int count,ImPlotInfLinesFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotPieChart_FloatPtrPlotFormatter(const char* const label_ids[],const float* values,int count,double x,double y,double radius,ImPlotFormatter fmt,void* fmt_data,double angle0,ImPlotPieChartFlags flags);
extern __declspec(dllexport) void ImPlot_PlotPieChart_doublePtrPlotFormatter(const char* const label_ids[],const double* values,int count,double x,double y,double radius,ImPlotFormatter fmt,void* fmt_data,double angle0,ImPlotPieChartFlags flags);
extern __declspec(dllexport) void ImPlot_PlotPieChart_S8PtrPlotFormatter(const char* const label_ids[],const ImS8* values,int count,double x,double y,double radius,ImPlotFormatter fmt,void* fmt_data,double angle0,ImPlotPieChartFlags flags);
extern __declspec(dllexport) void ImPlot_PlotPieChart_U8PtrPlotFormatter(const char* const label_ids[],const ImU8* values,int count,double x,double y,double radius,ImPlotFormatter fmt,void* fmt_data,double angle0,ImPlotPieChartFlags flags);
extern __declspec(dllexport) void ImPlot_PlotPieChart_S16PtrPlotFormatter(const char* const label_ids[],const ImS16* values,int count,double x,double y,double radius,ImPlotFormatter fmt,void* fmt_data,double angle0,ImPlotPieChartFlags flags);
extern __declspec(dllexport) void ImPlot_PlotPieChart_U16PtrPlotFormatter(const char* const label_ids[],const ImU16* values,int count,double x,double y,double radius,ImPlotFormatter fmt,void* fmt_data,double angle0,ImPlotPieChartFlags flags);
extern __declspec(dllexport) void ImPlot_PlotPieChart_S32PtrPlotFormatter(const char* const label_ids[],const ImS32* values,int count,double x,double y,double radius,ImPlotFormatter fmt,void* fmt_data,double angle0,ImPlotPieChartFlags flags);
extern __declspec(dllexport) void ImPlot_PlotPieChart_U32PtrPlotFormatter(const char* const label_ids[],const ImU32* values,int count,double x,double y,double radius,ImPlotFormatter fmt,void* fmt_data,double angle0,ImPlotPieChartFlags flags);
extern __declspec(dllexport) void ImPlot_PlotPieChart_S64PtrPlotFormatter(const char* const label_ids[],const ImS64* values,int count,double x,double y,double radius,ImPlotFormatter fmt,void* fmt_data,double angle0,ImPlotPieChartFlags flags);
extern __declspec(dllexport) void ImPlot_PlotPieChart_U64PtrPlotFormatter(const char* const label_ids[],const ImU64* values,int count,double x,double y,double radius,ImPlotFormatter fmt,void* fmt_data,double angle0,ImPlotPieChartFlags flags);
extern __declspec(dllexport) void ImPlot_PlotPieChart_FloatPtrStr(const char* const label_ids[],const float* values,int count,double x,double y,double radius,const char* label_fmt,double angle0,ImPlotPieChartFlags flags);
extern __declspec(dllexport) void ImPlot_PlotPieChart_doublePtrStr(const char* const label_ids[],const double* values,int count,double x,double y,double radius,const char* label_fmt,double angle0,ImPlotPieChartFlags flags);
extern __declspec(dllexport) void ImPlot_PlotPieChart_S8PtrStr(const char* const label_ids[],const ImS8* values,int count,double x,double y,double radius,const char* label_fmt,double angle0,ImPlotPieChartFlags flags);
extern __declspec(dllexport) void ImPlot_PlotPieChart_U8PtrStr(const char* const label_ids[],const ImU8* values,int count,double x,double y,double radius,const char* label_fmt,double angle0,ImPlotPieChartFlags flags);
extern __declspec(dllexport) void ImPlot_PlotPieChart_S16PtrStr(const char* const label_ids[],const ImS16* values,int count,double x,double y,double radius,const char* label_fmt,double angle0,ImPlotPieChartFlags flags);
extern __declspec(dllexport) void ImPlot_PlotPieChart_U16PtrStr(const char* const label_ids[],const ImU16* values,int count,double x,double y,double radius,const char* label_fmt,double angle0,ImPlotPieChartFlags flags);
extern __declspec(dllexport) void ImPlot_PlotPieChart_S32PtrStr(const char* const label_ids[],const ImS32* values,int count,double x,double y,double radius,const char* label_fmt,double angle0,ImPlotPieChartFlags flags);
extern __declspec(dllexport) void ImPlot_PlotPieChart_U32PtrStr(const char* const label_ids[],const ImU32* values,int count,double x,double y,double radius,const char* label_fmt,double angle0,ImPlotPieChartFlags flags);
extern __declspec(dllexport) void ImPlot_PlotPieChart_S64PtrStr(const char* const label_ids[],const ImS64* values,int count,double x,double y,double radius,const char* label_fmt,double angle0,ImPlotPieChartFlags flags);
extern __declspec(dllexport) void ImPlot_PlotPieChart_U64PtrStr(const char* const label_ids[],const ImU64* values,int count,double x,double y,double radius,const char* label_fmt,double angle0,ImPlotPieChartFlags flags);
extern __declspec(dllexport) void ImPlot_PlotHeatmap_FloatPtr(const char* label_id,const float* values,int rows,int cols,double scale_min,double scale_max,const char* label_fmt,const ImPlotPoint bounds_min,const ImPlotPoint bounds_max,ImPlotHeatmapFlags flags);
extern __declspec(dllexport) void ImPlot_PlotHeatmap_doublePtr(const char* label_id,const double* values,int rows,int cols,double scale_min,double scale_max,const char* label_fmt,const ImPlotPoint bounds_min,const ImPlotPoint bounds_max,ImPlotHeatmapFlags flags);
extern __declspec(dllexport) void ImPlot_PlotHeatmap_S8Ptr(const char* label_id,const ImS8* values,int rows,int cols,double scale_min,double scale_max,const char* label_fmt,const ImPlotPoint bounds_min,const ImPlotPoint bounds_max,ImPlotHeatmapFlags flags);
extern __declspec(dllexport) void ImPlot_PlotHeatmap_U8Ptr(const char* label_id,const ImU8* values,int rows,int cols,double scale_min,double scale_max,const char* label_fmt,const ImPlotPoint bounds_min,const ImPlotPoint bounds_max,ImPlotHeatmapFlags flags);
extern __declspec(dllexport) void ImPlot_PlotHeatmap_S16Ptr(const char* label_id,const ImS16* values,int rows,int cols,double scale_min,double scale_max,const char* label_fmt,const ImPlotPoint bounds_min,const ImPlotPoint bounds_max,ImPlotHeatmapFlags flags);
extern __declspec(dllexport) void ImPlot_PlotHeatmap_U16Ptr(const char* label_id,const ImU16* values,int rows,int cols,double scale_min,double scale_max,const char* label_fmt,const ImPlotPoint bounds_min,const ImPlotPoint bounds_max,ImPlotHeatmapFlags flags);
extern __declspec(dllexport) void ImPlot_PlotHeatmap_S32Ptr(const char* label_id,const ImS32* values,int rows,int cols,double scale_min,double scale_max,const char* label_fmt,const ImPlotPoint bounds_min,const ImPlotPoint bounds_max,ImPlotHeatmapFlags flags);
extern __declspec(dllexport) void ImPlot_PlotHeatmap_U32Ptr(const char* label_id,const ImU32* values,int rows,int cols,double scale_min,double scale_max,const char* label_fmt,const ImPlotPoint bounds_min,const ImPlotPoint bounds_max,ImPlotHeatmapFlags flags);
extern __declspec(dllexport) void ImPlot_PlotHeatmap_S64Ptr(const char* label_id,const ImS64* values,int rows,int cols,double scale_min,double scale_max,const char* label_fmt,const ImPlotPoint bounds_min,const ImPlotPoint bounds_max,ImPlotHeatmapFlags flags);
extern __declspec(dllexport) void ImPlot_PlotHeatmap_U64Ptr(const char* label_id,const ImU64* values,int rows,int cols,double scale_min,double scale_max,const char* label_fmt,const ImPlotPoint bounds_min,const ImPlotPoint bounds_max,ImPlotHeatmapFlags flags);
extern __declspec(dllexport) double ImPlot_PlotHistogram_FloatPtr(const char* label_id,const float* values,int count,int bins,double bar_scale,ImPlotRange range,ImPlotHistogramFlags flags);
extern __declspec(dllexport) double ImPlot_PlotHistogram_doublePtr(const char* label_id,const double* values,int count,int bins,double bar_scale,ImPlotRange range,ImPlotHistogramFlags flags);
extern __declspec(dllexport) double ImPlot_PlotHistogram_S8Ptr(const char* label_id,const ImS8* values,int count,int bins,double bar_scale,ImPlotRange range,ImPlotHistogramFlags flags);
extern __declspec(dllexport) double ImPlot_PlotHistogram_U8Ptr(const char* label_id,const ImU8* values,int count,int bins,double bar_scale,ImPlotRange range,ImPlotHistogramFlags flags);
extern __declspec(dllexport) double ImPlot_PlotHistogram_S16Ptr(const char* label_id,const ImS16* values,int count,int bins,double bar_scale,ImPlotRange range,ImPlotHistogramFlags flags);
extern __declspec(dllexport) double ImPlot_PlotHistogram_U16Ptr(const char* label_id,const ImU16* values,int count,int bins,double bar_scale,ImPlotRange range,ImPlotHistogramFlags flags);
extern __declspec(dllexport) double ImPlot_PlotHistogram_S32Ptr(const char* label_id,const ImS32* values,int count,int bins,double bar_scale,ImPlotRange range,ImPlotHistogramFlags flags);
extern __declspec(dllexport) double ImPlot_PlotHistogram_U32Ptr(const char* label_id,const ImU32* values,int count,int bins,double bar_scale,ImPlotRange range,ImPlotHistogramFlags flags);
extern __declspec(dllexport) double ImPlot_PlotHistogram_S64Ptr(const char* label_id,const ImS64* values,int count,int bins,double bar_scale,ImPlotRange range,ImPlotHistogramFlags flags);
extern __declspec(dllexport) double ImPlot_PlotHistogram_U64Ptr(const char* label_id,const ImU64* values,int count,int bins,double bar_scale,ImPlotRange range,ImPlotHistogramFlags flags);
extern __declspec(dllexport) double ImPlot_PlotHistogram2D_FloatPtr(const char* label_id,const float* xs,const float* ys,int count,int x_bins,int y_bins,ImPlotRect range,ImPlotHistogramFlags flags);
extern __declspec(dllexport) double ImPlot_PlotHistogram2D_doublePtr(const char* label_id,const double* xs,const double* ys,int count,int x_bins,int y_bins,ImPlotRect range,ImPlotHistogramFlags flags);
extern __declspec(dllexport) double ImPlot_PlotHistogram2D_S8Ptr(const char* label_id,const ImS8* xs,const ImS8* ys,int count,int x_bins,int y_bins,ImPlotRect range,ImPlotHistogramFlags flags);
extern __declspec(dllexport) double ImPlot_PlotHistogram2D_U8Ptr(const char* label_id,const ImU8* xs,const ImU8* ys,int count,int x_bins,int y_bins,ImPlotRect range,ImPlotHistogramFlags flags);
extern __declspec(dllexport) double ImPlot_PlotHistogram2D_S16Ptr(const char* label_id,const ImS16* xs,const ImS16* ys,int count,int x_bins,int y_bins,ImPlotRect range,ImPlotHistogramFlags flags);
extern __declspec(dllexport) double ImPlot_PlotHistogram2D_U16Ptr(const char* label_id,const ImU16* xs,const ImU16* ys,int count,int x_bins,int y_bins,ImPlotRect range,ImPlotHistogramFlags flags);
extern __declspec(dllexport) double ImPlot_PlotHistogram2D_S32Ptr(const char* label_id,const ImS32* xs,const ImS32* ys,int count,int x_bins,int y_bins,ImPlotRect range,ImPlotHistogramFlags flags);
extern __declspec(dllexport) double ImPlot_PlotHistogram2D_U32Ptr(const char* label_id,const ImU32* xs,const ImU32* ys,int count,int x_bins,int y_bins,ImPlotRect range,ImPlotHistogramFlags flags);
extern __declspec(dllexport) double ImPlot_PlotHistogram2D_S64Ptr(const char* label_id,const ImS64* xs,const ImS64* ys,int count,int x_bins,int y_bins,ImPlotRect range,ImPlotHistogramFlags flags);
extern __declspec(dllexport) double ImPlot_PlotHistogram2D_U64Ptr(const char* label_id,const ImU64* xs,const ImU64* ys,int count,int x_bins,int y_bins,ImPlotRect range,ImPlotHistogramFlags flags);
extern __declspec(dllexport) void ImPlot_PlotDigital_FloatPtr(const char* label_id,const float* xs,const float* ys,int count,ImPlotDigitalFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotDigital_doublePtr(const char* label_id,const double* xs,const double* ys,int count,ImPlotDigitalFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotDigital_S8Ptr(const char* label_id,const ImS8* xs,const ImS8* ys,int count,ImPlotDigitalFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotDigital_U8Ptr(const char* label_id,const ImU8* xs,const ImU8* ys,int count,ImPlotDigitalFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotDigital_S16Ptr(const char* label_id,const ImS16* xs,const ImS16* ys,int count,ImPlotDigitalFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotDigital_U16Ptr(const char* label_id,const ImU16* xs,const ImU16* ys,int count,ImPlotDigitalFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotDigital_S32Ptr(const char* label_id,const ImS32* xs,const ImS32* ys,int count,ImPlotDigitalFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotDigital_U32Ptr(const char* label_id,const ImU32* xs,const ImU32* ys,int count,ImPlotDigitalFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotDigital_S64Ptr(const char* label_id,const ImS64* xs,const ImS64* ys,int count,ImPlotDigitalFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotDigital_U64Ptr(const char* label_id,const ImU64* xs,const ImU64* ys,int count,ImPlotDigitalFlags flags,int offset,int stride);
extern __declspec(dllexport) void ImPlot_PlotDigitalG(const char* label_id,ImPlotPoint_getter getter,void* data,int count,ImPlotDigitalFlags flags);
extern __declspec(dllexport) void ImPlot_PlotImage(const char* label_id,ImTextureID user_texture_id,const ImPlotPoint bounds_min,const ImPlotPoint bounds_max,const ImVec2 uv0,const ImVec2 uv1,const ImVec4 tint_col,ImPlotImageFlags flags);
extern __declspec(dllexport) void ImPlot_PlotText(const char* text,double x,double y,const ImVec2 pix_offset,ImPlotTextFlags flags);
extern __declspec(dllexport) void ImPlot_PlotDummy(const char* label_id,ImPlotDummyFlags flags);
extern __declspec(dllexport) bool ImPlot_DragPoint(int id,double* x,double* y,const ImVec4 col,float size,ImPlotDragToolFlags flags,bool* out_clicked,bool* out_hovered,bool* held);
extern __declspec(dllexport) bool ImPlot_DragLineX(int id,double* x,const ImVec4 col,float thickness,ImPlotDragToolFlags flags,bool* out_clicked,bool* out_hovered,bool* held);
extern __declspec(dllexport) bool ImPlot_DragLineY(int id,double* y,const ImVec4 col,float thickness,ImPlotDragToolFlags flags,bool* out_clicked,bool* out_hovered,bool* held);
extern __declspec(dllexport) bool ImPlot_DragRect(int id,double* x1,double* y1,double* x2,double* y2,const ImVec4 col,ImPlotDragToolFlags flags,bool* out_clicked,bool* out_hovered,bool* held);
extern __declspec(dllexport) void ImPlot_Annotation_Bool(double x,double y,const ImVec4 col,const ImVec2 pix_offset,bool clamp,bool round);
extern __declspec(dllexport) void ImPlot_Annotation_Str(double x,double y,const ImVec4 col,const ImVec2 pix_offset,bool clamp,const char* fmt,...);
extern __declspec(dllexport) void ImPlot_AnnotationV(double x,double y,const ImVec4 col,const ImVec2 pix_offset,bool clamp,const char* fmt,va_list args);
extern __declspec(dllexport) void ImPlot_TagX_Bool(double x,const ImVec4 col,bool round);
extern __declspec(dllexport) void ImPlot_TagX_Str(double x,const ImVec4 col,const char* fmt,...);
extern __declspec(dllexport) void ImPlot_TagXV(double x,const ImVec4 col,const char* fmt,va_list args);
extern __declspec(dllexport) void ImPlot_TagY_Bool(double y,const ImVec4 col,bool round);
extern __declspec(dllexport) void ImPlot_TagY_Str(double y,const ImVec4 col,const char* fmt,...);
extern __declspec(dllexport) void ImPlot_TagYV(double y,const ImVec4 col,const char* fmt,va_list args);
extern __declspec(dllexport) void ImPlot_SetAxis(ImAxis axis);
extern __declspec(dllexport) void ImPlot_SetAxes(ImAxis x_axis,ImAxis y_axis);
extern __declspec(dllexport) void ImPlot_PixelsToPlot_Vec2(ImPlotPoint *pOut,const ImVec2 pix,ImAxis x_axis,ImAxis y_axis);
extern __declspec(dllexport) void ImPlot_PixelsToPlot_Float(ImPlotPoint *pOut,float x,float y,ImAxis x_axis,ImAxis y_axis);
extern __declspec(dllexport) void ImPlot_PlotToPixels_PlotPoInt(ImVec2 *pOut,const ImPlotPoint plt,ImAxis x_axis,ImAxis y_axis);
extern __declspec(dllexport) void ImPlot_PlotToPixels_double(ImVec2 *pOut,double x,double y,ImAxis x_axis,ImAxis y_axis);
extern __declspec(dllexport) void ImPlot_GetPlotPos(ImVec2 *pOut);
extern __declspec(dllexport) void ImPlot_GetPlotSize(ImVec2 *pOut);
extern __declspec(dllexport) void ImPlot_GetPlotMousePos(ImPlotPoint *pOut,ImAxis x_axis,ImAxis y_axis);
extern __declspec(dllexport) void ImPlot_GetPlotLimits(ImPlotRect *pOut,ImAxis x_axis,ImAxis y_axis);
extern __declspec(dllexport) bool ImPlot_IsPlotHovered(void);
extern __declspec(dllexport) bool ImPlot_IsAxisHovered(ImAxis axis);
extern __declspec(dllexport) bool ImPlot_IsSubplotsHovered(void);
extern __declspec(dllexport) bool ImPlot_IsPlotSelected(void);
extern __declspec(dllexport) void ImPlot_GetPlotSelection(ImPlotRect *pOut,ImAxis x_axis,ImAxis y_axis);
extern __declspec(dllexport) void ImPlot_CancelPlotSelection(void);
extern __declspec(dllexport) void ImPlot_HideNextItem(bool hidden,ImPlotCond cond);
extern __declspec(dllexport) bool ImPlot_BeginAlignedPlots(const char* group_id,bool vertical);
extern __declspec(dllexport) void ImPlot_EndAlignedPlots(void);
extern __declspec(dllexport) bool ImPlot_BeginLegendPopup(const char* label_id,ImGuiMouseButton mouse_button);
extern __declspec(dllexport) void ImPlot_EndLegendPopup(void);
extern __declspec(dllexport) bool ImPlot_IsLegendEntryHovered(const char* label_id);
extern __declspec(dllexport) bool ImPlot_BeginDragDropTargetPlot(void);
extern __declspec(dllexport) bool ImPlot_BeginDragDropTargetAxis(ImAxis axis);
extern __declspec(dllexport) bool ImPlot_BeginDragDropTargetLegend(void);
extern __declspec(dllexport) void ImPlot_EndDragDropTarget(void);
extern __declspec(dllexport) bool ImPlot_BeginDragDropSourcePlot(ImGuiDragDropFlags flags);
extern __declspec(dllexport) bool ImPlot_BeginDragDropSourceAxis(ImAxis axis,ImGuiDragDropFlags flags);
extern __declspec(dllexport) bool ImPlot_BeginDragDropSourceItem(const char* label_id,ImGuiDragDropFlags flags);
extern __declspec(dllexport) void ImPlot_EndDragDropSource(void);
extern __declspec(dllexport) ImPlotStyle* ImPlot_GetStyle(void);
extern __declspec(dllexport) void ImPlot_StyleColorsAuto(ImPlotStyle* dst);
extern __declspec(dllexport) void ImPlot_StyleColorsClassic(ImPlotStyle* dst);
extern __declspec(dllexport) void ImPlot_StyleColorsDark(ImPlotStyle* dst);
extern __declspec(dllexport) void ImPlot_StyleColorsLight(ImPlotStyle* dst);
extern __declspec(dllexport) void ImPlot_PushStyleColor_U32(ImPlotCol idx,ImU32 col);
extern __declspec(dllexport) void ImPlot_PushStyleColor_Vec4(ImPlotCol idx,const ImVec4 col);
extern __declspec(dllexport) void ImPlot_PopStyleColor(int count);
extern __declspec(dllexport) void ImPlot_PushStyleVar_Float(ImPlotStyleVar idx,float val);
extern __declspec(dllexport) void ImPlot_PushStyleVar_Int(ImPlotStyleVar idx,int val);
extern __declspec(dllexport) void ImPlot_PushStyleVar_Vec2(ImPlotStyleVar idx,const ImVec2 val);
extern __declspec(dllexport) void ImPlot_PopStyleVar(int count);
extern __declspec(dllexport) void ImPlot_SetNextLineStyle(const ImVec4 col,float weight);
extern __declspec(dllexport) void ImPlot_SetNextFillStyle(const ImVec4 col,float alpha_mod);
extern __declspec(dllexport) void ImPlot_SetNextMarkerStyle(ImPlotMarker marker,float size,const ImVec4 fill,float weight,const ImVec4 outline);
extern __declspec(dllexport) void ImPlot_SetNextErrorBarStyle(const ImVec4 col,float size,float weight);
extern __declspec(dllexport) void ImPlot_GetLastItemColor(ImVec4 *pOut);
extern __declspec(dllexport) const char* ImPlot_GetStyleColorName(ImPlotCol idx);
extern __declspec(dllexport) const char* ImPlot_GetMarkerName(ImPlotMarker idx);
extern __declspec(dllexport) ImPlotColormap ImPlot_AddColormap_Vec4Ptr(const char* name,const ImVec4* cols,int size,bool qual);
extern __declspec(dllexport) ImPlotColormap ImPlot_AddColormap_U32Ptr(const char* name,const ImU32* cols,int size,bool qual);
extern __declspec(dllexport) int ImPlot_GetColormapCount(void);
extern __declspec(dllexport) const char* ImPlot_GetColormapName(ImPlotColormap cmap);
extern __declspec(dllexport) ImPlotColormap ImPlot_GetColormapIndex(const char* name);
extern __declspec(dllexport) void ImPlot_PushColormap_PlotColormap(ImPlotColormap cmap);
extern __declspec(dllexport) void ImPlot_PushColormap_Str(const char* name);
extern __declspec(dllexport) void ImPlot_PopColormap(int count);
extern __declspec(dllexport) void ImPlot_NextColormapColor(ImVec4 *pOut);
extern __declspec(dllexport) int ImPlot_GetColormapSize(ImPlotColormap cmap);
extern __declspec(dllexport) void ImPlot_GetColormapColor(ImVec4 *pOut,int idx,ImPlotColormap cmap);
extern __declspec(dllexport) void ImPlot_SampleColormap(ImVec4 *pOut,float t,ImPlotColormap cmap);
extern __declspec(dllexport) void ImPlot_ColormapScale(const char* label,double scale_min,double scale_max,const ImVec2 size,const char* format,ImPlotColormapScaleFlags flags,ImPlotColormap cmap);
extern __declspec(dllexport) bool ImPlot_ColormapSlider(const char* label,float* t,ImVec4* out,const char* format,ImPlotColormap cmap);
extern __declspec(dllexport) bool ImPlot_ColormapButton(const char* label,const ImVec2 size,ImPlotColormap cmap);
extern __declspec(dllexport) void ImPlot_BustColorCache(const char* plot_title_id);
extern __declspec(dllexport) ImPlotInputMap* ImPlot_GetInputMap(void);
extern __declspec(dllexport) void ImPlot_MapInputDefault(ImPlotInputMap* dst);
extern __declspec(dllexport) void ImPlot_MapInputReverse(ImPlotInputMap* dst);
extern __declspec(dllexport) void ImPlot_ItemIcon_Vec4(const ImVec4 col);
extern __declspec(dllexport) void ImPlot_ItemIcon_U32(ImU32 col);
extern __declspec(dllexport) void ImPlot_ColormapIcon(ImPlotColormap cmap);
extern __declspec(dllexport) ImDrawList* ImPlot_GetPlotDrawList(void);
extern __declspec(dllexport) void ImPlot_PushPlotClipRect(float expand);
extern __declspec(dllexport) void ImPlot_PopPlotClipRect(void);
extern __declspec(dllexport) bool ImPlot_ShowStyleSelector(const char* label);
extern __declspec(dllexport) bool ImPlot_ShowColormapSelector(const char* label);
extern __declspec(dllexport) bool ImPlot_ShowInputMapSelector(const char* label);
extern __declspec(dllexport) void ImPlot_ShowStyleEditor(ImPlotStyle* ref);
extern __declspec(dllexport) void ImPlot_ShowUserGuide(void);
extern __declspec(dllexport) void ImPlot_ShowMetricsWindow(bool* p_popen);
extern __declspec(dllexport) void ImPlot_ShowDemoWindow(bool* p_open);
extern __declspec(dllexport) float ImPlot_ImLog10_Float(float x);
extern __declspec(dllexport) double ImPlot_ImLog10_double(double x);
extern __declspec(dllexport) float ImPlot_ImSinh_Float(float x);
extern __declspec(dllexport) double ImPlot_ImSinh_double(double x);
extern __declspec(dllexport) float ImPlot_ImAsinh_Float(float x);
extern __declspec(dllexport) double ImPlot_ImAsinh_double(double x);
extern __declspec(dllexport) float ImPlot_ImRemap_Float(float x,float x0,float x1,float y0,float y1);
extern __declspec(dllexport) double ImPlot_ImRemap_double(double x,double x0,double x1,double y0,double y1);
extern __declspec(dllexport) ImS8 ImPlot_ImRemap_S8(ImS8 x,ImS8 x0,ImS8 x1,ImS8 y0,ImS8 y1);
extern __declspec(dllexport) ImU8 ImPlot_ImRemap_U8(ImU8 x,ImU8 x0,ImU8 x1,ImU8 y0,ImU8 y1);
extern __declspec(dllexport) ImS16 ImPlot_ImRemap_S16(ImS16 x,ImS16 x0,ImS16 x1,ImS16 y0,ImS16 y1);
extern __declspec(dllexport) ImU16 ImPlot_ImRemap_U16(ImU16 x,ImU16 x0,ImU16 x1,ImU16 y0,ImU16 y1);
extern __declspec(dllexport) ImS32 ImPlot_ImRemap_S32(ImS32 x,ImS32 x0,ImS32 x1,ImS32 y0,ImS32 y1);
extern __declspec(dllexport) ImU32 ImPlot_ImRemap_U32(ImU32 x,ImU32 x0,ImU32 x1,ImU32 y0,ImU32 y1);
extern __declspec(dllexport) ImS64 ImPlot_ImRemap_S64(ImS64 x,ImS64 x0,ImS64 x1,ImS64 y0,ImS64 y1);
extern __declspec(dllexport) ImU64 ImPlot_ImRemap_U64(ImU64 x,ImU64 x0,ImU64 x1,ImU64 y0,ImU64 y1);
extern __declspec(dllexport) float ImPlot_ImRemap01_Float(float x,float x0,float x1);
extern __declspec(dllexport) double ImPlot_ImRemap01_double(double x,double x0,double x1);
extern __declspec(dllexport) ImS8 ImPlot_ImRemap01_S8(ImS8 x,ImS8 x0,ImS8 x1);
extern __declspec(dllexport) ImU8 ImPlot_ImRemap01_U8(ImU8 x,ImU8 x0,ImU8 x1);
extern __declspec(dllexport) ImS16 ImPlot_ImRemap01_S16(ImS16 x,ImS16 x0,ImS16 x1);
extern __declspec(dllexport) ImU16 ImPlot_ImRemap01_U16(ImU16 x,ImU16 x0,ImU16 x1);
extern __declspec(dllexport) ImS32 ImPlot_ImRemap01_S32(ImS32 x,ImS32 x0,ImS32 x1);
extern __declspec(dllexport) ImU32 ImPlot_ImRemap01_U32(ImU32 x,ImU32 x0,ImU32 x1);
extern __declspec(dllexport) ImS64 ImPlot_ImRemap01_S64(ImS64 x,ImS64 x0,ImS64 x1);
extern __declspec(dllexport) ImU64 ImPlot_ImRemap01_U64(ImU64 x,ImU64 x0,ImU64 x1);
extern __declspec(dllexport) int ImPlot_ImPosMod(int l,int r);
extern __declspec(dllexport) bool ImPlot_ImNan(double val);
extern __declspec(dllexport) bool ImPlot_ImNanOrInf(double val);
extern __declspec(dllexport) double ImPlot_ImConstrainNan(double val);
extern __declspec(dllexport) double ImPlot_ImConstrainInf(double val);
extern __declspec(dllexport) double ImPlot_ImConstrainLog(double val);
extern __declspec(dllexport) double ImPlot_ImConstrainTime(double val);
extern __declspec(dllexport) bool ImPlot_ImAlmostEqual(double v1,double v2,int ulp);
extern __declspec(dllexport) float ImPlot_ImMinArray_FloatPtr(const float* values,int count);
extern __declspec(dllexport) double ImPlot_ImMinArray_doublePtr(const double* values,int count);
extern __declspec(dllexport) ImS8 ImPlot_ImMinArray_S8Ptr(const ImS8* values,int count);
extern __declspec(dllexport) ImU8 ImPlot_ImMinArray_U8Ptr(const ImU8* values,int count);
extern __declspec(dllexport) ImS16 ImPlot_ImMinArray_S16Ptr(const ImS16* values,int count);
extern __declspec(dllexport) ImU16 ImPlot_ImMinArray_U16Ptr(const ImU16* values,int count);
extern __declspec(dllexport) ImS32 ImPlot_ImMinArray_S32Ptr(const ImS32* values,int count);
extern __declspec(dllexport) ImU32 ImPlot_ImMinArray_U32Ptr(const ImU32* values,int count);
extern __declspec(dllexport) ImS64 ImPlot_ImMinArray_S64Ptr(const ImS64* values,int count);
extern __declspec(dllexport) ImU64 ImPlot_ImMinArray_U64Ptr(const ImU64* values,int count);
extern __declspec(dllexport) float ImPlot_ImMaxArray_FloatPtr(const float* values,int count);
extern __declspec(dllexport) double ImPlot_ImMaxArray_doublePtr(const double* values,int count);
extern __declspec(dllexport) ImS8 ImPlot_ImMaxArray_S8Ptr(const ImS8* values,int count);
extern __declspec(dllexport) ImU8 ImPlot_ImMaxArray_U8Ptr(const ImU8* values,int count);
extern __declspec(dllexport) ImS16 ImPlot_ImMaxArray_S16Ptr(const ImS16* values,int count);
extern __declspec(dllexport) ImU16 ImPlot_ImMaxArray_U16Ptr(const ImU16* values,int count);
extern __declspec(dllexport) ImS32 ImPlot_ImMaxArray_S32Ptr(const ImS32* values,int count);
extern __declspec(dllexport) ImU32 ImPlot_ImMaxArray_U32Ptr(const ImU32* values,int count);
extern __declspec(dllexport) ImS64 ImPlot_ImMaxArray_S64Ptr(const ImS64* values,int count);
extern __declspec(dllexport) ImU64 ImPlot_ImMaxArray_U64Ptr(const ImU64* values,int count);
extern __declspec(dllexport) void ImPlot_ImMinMaxArray_FloatPtr(const float* values,int count,float* min_out,float* max_out);
extern __declspec(dllexport) void ImPlot_ImMinMaxArray_doublePtr(const double* values,int count,double* min_out,double* max_out);
extern __declspec(dllexport) void ImPlot_ImMinMaxArray_S8Ptr(const ImS8* values,int count,ImS8* min_out,ImS8* max_out);
extern __declspec(dllexport) void ImPlot_ImMinMaxArray_U8Ptr(const ImU8* values,int count,ImU8* min_out,ImU8* max_out);
extern __declspec(dllexport) void ImPlot_ImMinMaxArray_S16Ptr(const ImS16* values,int count,ImS16* min_out,ImS16* max_out);
extern __declspec(dllexport) void ImPlot_ImMinMaxArray_U16Ptr(const ImU16* values,int count,ImU16* min_out,ImU16* max_out);
extern __declspec(dllexport) void ImPlot_ImMinMaxArray_S32Ptr(const ImS32* values,int count,ImS32* min_out,ImS32* max_out);
extern __declspec(dllexport) void ImPlot_ImMinMaxArray_U32Ptr(const ImU32* values,int count,ImU32* min_out,ImU32* max_out);
extern __declspec(dllexport) void ImPlot_ImMinMaxArray_S64Ptr(const ImS64* values,int count,ImS64* min_out,ImS64* max_out);
extern __declspec(dllexport) void ImPlot_ImMinMaxArray_U64Ptr(const ImU64* values,int count,ImU64* min_out,ImU64* max_out);
extern __declspec(dllexport) float ImPlot_ImSum_FloatPtr(const float* values,int count);
extern __declspec(dllexport) double ImPlot_ImSum_doublePtr(const double* values,int count);
extern __declspec(dllexport) ImS8 ImPlot_ImSum_S8Ptr(const ImS8* values,int count);
extern __declspec(dllexport) ImU8 ImPlot_ImSum_U8Ptr(const ImU8* values,int count);
extern __declspec(dllexport) ImS16 ImPlot_ImSum_S16Ptr(const ImS16* values,int count);
extern __declspec(dllexport) ImU16 ImPlot_ImSum_U16Ptr(const ImU16* values,int count);
extern __declspec(dllexport) ImS32 ImPlot_ImSum_S32Ptr(const ImS32* values,int count);
extern __declspec(dllexport) ImU32 ImPlot_ImSum_U32Ptr(const ImU32* values,int count);
extern __declspec(dllexport) ImS64 ImPlot_ImSum_S64Ptr(const ImS64* values,int count);
extern __declspec(dllexport) ImU64 ImPlot_ImSum_U64Ptr(const ImU64* values,int count);
extern __declspec(dllexport) double ImPlot_ImMean_FloatPtr(const float* values,int count);
extern __declspec(dllexport) double ImPlot_ImMean_doublePtr(const double* values,int count);
extern __declspec(dllexport) double ImPlot_ImMean_S8Ptr(const ImS8* values,int count);
extern __declspec(dllexport) double ImPlot_ImMean_U8Ptr(const ImU8* values,int count);
extern __declspec(dllexport) double ImPlot_ImMean_S16Ptr(const ImS16* values,int count);
extern __declspec(dllexport) double ImPlot_ImMean_U16Ptr(const ImU16* values,int count);
extern __declspec(dllexport) double ImPlot_ImMean_S32Ptr(const ImS32* values,int count);
extern __declspec(dllexport) double ImPlot_ImMean_U32Ptr(const ImU32* values,int count);
extern __declspec(dllexport) double ImPlot_ImMean_S64Ptr(const ImS64* values,int count);
extern __declspec(dllexport) double ImPlot_ImMean_U64Ptr(const ImU64* values,int count);
extern __declspec(dllexport) double ImPlot_ImStdDev_FloatPtr(const float* values,int count);
extern __declspec(dllexport) double ImPlot_ImStdDev_doublePtr(const double* values,int count);
extern __declspec(dllexport) double ImPlot_ImStdDev_S8Ptr(const ImS8* values,int count);
extern __declspec(dllexport) double ImPlot_ImStdDev_U8Ptr(const ImU8* values,int count);
extern __declspec(dllexport) double ImPlot_ImStdDev_S16Ptr(const ImS16* values,int count);
extern __declspec(dllexport) double ImPlot_ImStdDev_U16Ptr(const ImU16* values,int count);
extern __declspec(dllexport) double ImPlot_ImStdDev_S32Ptr(const ImS32* values,int count);
extern __declspec(dllexport) double ImPlot_ImStdDev_U32Ptr(const ImU32* values,int count);
extern __declspec(dllexport) double ImPlot_ImStdDev_S64Ptr(const ImS64* values,int count);
extern __declspec(dllexport) double ImPlot_ImStdDev_U64Ptr(const ImU64* values,int count);
extern __declspec(dllexport) ImU32 ImPlot_ImMixU32(ImU32 a,ImU32 b,ImU32 s);
extern __declspec(dllexport) ImU32 ImPlot_ImLerpU32(const ImU32* colors,int size,float t);
extern __declspec(dllexport) ImU32 ImPlot_ImAlphaU32(ImU32 col,float alpha);
extern __declspec(dllexport) bool ImPlot_ImOverlaps_Float(float min_a,float max_a,float min_b,float max_b);
extern __declspec(dllexport) bool ImPlot_ImOverlaps_double(double min_a,double max_a,double min_b,double max_b);
extern __declspec(dllexport) bool ImPlot_ImOverlaps_S8(ImS8 min_a,ImS8 max_a,ImS8 min_b,ImS8 max_b);
extern __declspec(dllexport) bool ImPlot_ImOverlaps_U8(ImU8 min_a,ImU8 max_a,ImU8 min_b,ImU8 max_b);
extern __declspec(dllexport) bool ImPlot_ImOverlaps_S16(ImS16 min_a,ImS16 max_a,ImS16 min_b,ImS16 max_b);
extern __declspec(dllexport) bool ImPlot_ImOverlaps_U16(ImU16 min_a,ImU16 max_a,ImU16 min_b,ImU16 max_b);
extern __declspec(dllexport) bool ImPlot_ImOverlaps_S32(ImS32 min_a,ImS32 max_a,ImS32 min_b,ImS32 max_b);
extern __declspec(dllexport) bool ImPlot_ImOverlaps_U32(ImU32 min_a,ImU32 max_a,ImU32 min_b,ImU32 max_b);
extern __declspec(dllexport) bool ImPlot_ImOverlaps_S64(ImS64 min_a,ImS64 max_a,ImS64 min_b,ImS64 max_b);
extern __declspec(dllexport) bool ImPlot_ImOverlaps_U64(ImU64 min_a,ImU64 max_a,ImU64 min_b,ImU64 max_b);
extern __declspec(dllexport) ImPlotDateTimeSpec* ImPlotDateTimeSpec_ImPlotDateTimeSpec_Nil(void);
extern __declspec(dllexport) void ImPlotDateTimeSpec_destroy(ImPlotDateTimeSpec* self);
extern __declspec(dllexport) ImPlotDateTimeSpec* ImPlotDateTimeSpec_ImPlotDateTimeSpec_PlotDateFmt(ImPlotDateFmt date_fmt,ImPlotTimeFmt time_fmt,bool use_24_hr_clk,bool use_iso_8601);
extern __declspec(dllexport) ImPlotTime* ImPlotTime_ImPlotTime_Nil(void);
extern __declspec(dllexport) void ImPlotTime_destroy(ImPlotTime* self);
extern __declspec(dllexport) ImPlotTime* ImPlotTime_ImPlotTime_time_t(time_t s,int us);
extern __declspec(dllexport) void ImPlotTime_RollOver(ImPlotTime* self);
extern __declspec(dllexport) double ImPlotTime_ToDouble(ImPlotTime* self);
extern __declspec(dllexport) void ImPlotTime_FromDouble(ImPlotTime *pOut,double t);
extern __declspec(dllexport) ImPlotColormapData* ImPlotColormapData_ImPlotColormapData(void);
extern __declspec(dllexport) void ImPlotColormapData_destroy(ImPlotColormapData* self);
extern __declspec(dllexport) int ImPlotColormapData_Append(ImPlotColormapData* self,const char* name,const ImU32* keys,int count,bool qual);
extern __declspec(dllexport) void ImPlotColormapData__AppendTable(ImPlotColormapData* self,ImPlotColormap cmap);
extern __declspec(dllexport) void ImPlotColormapData_RebuildTables(ImPlotColormapData* self);
extern __declspec(dllexport) bool ImPlotColormapData_IsQual(ImPlotColormapData* self,ImPlotColormap cmap);
extern __declspec(dllexport) const char* ImPlotColormapData_GetName(ImPlotColormapData* self,ImPlotColormap cmap);
extern __declspec(dllexport) ImPlotColormap ImPlotColormapData_GetIndex(ImPlotColormapData* self,const char* name);
extern __declspec(dllexport) const ImU32* ImPlotColormapData_GetKeys(ImPlotColormapData* self,ImPlotColormap cmap);
extern __declspec(dllexport) int ImPlotColormapData_GetKeyCount(ImPlotColormapData* self,ImPlotColormap cmap);
extern __declspec(dllexport) ImU32 ImPlotColormapData_GetKeyColor(ImPlotColormapData* self,ImPlotColormap cmap,int idx);
extern __declspec(dllexport) void ImPlotColormapData_SetKeyColor(ImPlotColormapData* self,ImPlotColormap cmap,int idx,ImU32 value);
extern __declspec(dllexport) const ImU32* ImPlotColormapData_GetTable(ImPlotColormapData* self,ImPlotColormap cmap);
extern __declspec(dllexport) int ImPlotColormapData_GetTableSize(ImPlotColormapData* self,ImPlotColormap cmap);
extern __declspec(dllexport) ImU32 ImPlotColormapData_GetTableColor(ImPlotColormapData* self,ImPlotColormap cmap,int idx);
extern __declspec(dllexport) ImU32 ImPlotColormapData_LerpTable(ImPlotColormapData* self,ImPlotColormap cmap,float t);
extern __declspec(dllexport) ImPlotPointError* ImPlotPointError_ImPlotPointError(double x,double y,double neg,double pos);
extern __declspec(dllexport) void ImPlotPointError_destroy(ImPlotPointError* self);
extern __declspec(dllexport) ImPlotAnnotation* ImPlotAnnotation_ImPlotAnnotation(void);
extern __declspec(dllexport) void ImPlotAnnotation_destroy(ImPlotAnnotation* self);
extern __declspec(dllexport) ImPlotAnnotationCollection* ImPlotAnnotationCollection_ImPlotAnnotationCollection(void);
extern __declspec(dllexport) void ImPlotAnnotationCollection_destroy(ImPlotAnnotationCollection* self);
extern __declspec(dllexport) void ImPlotAnnotationCollection_AppendV(ImPlotAnnotationCollection* self,const ImVec2 pos,const ImVec2 off,ImU32 bg,ImU32 fg,bool clamp,const char* fmt,va_list args);
extern __declspec(dllexport) void ImPlotAnnotationCollection_Append(ImPlotAnnotationCollection* self,const ImVec2 pos,const ImVec2 off,ImU32 bg,ImU32 fg,bool clamp,const char* fmt,...);
extern __declspec(dllexport) const char* ImPlotAnnotationCollection_GetText(ImPlotAnnotationCollection* self,int idx);
extern __declspec(dllexport) void ImPlotAnnotationCollection_Reset(ImPlotAnnotationCollection* self);
extern __declspec(dllexport) ImPlotTagCollection* ImPlotTagCollection_ImPlotTagCollection(void);
extern __declspec(dllexport) void ImPlotTagCollection_destroy(ImPlotTagCollection* self);
extern __declspec(dllexport) void ImPlotTagCollection_AppendV(ImPlotTagCollection* self,ImAxis axis,double value,ImU32 bg,ImU32 fg,const char* fmt,va_list args);
extern __declspec(dllexport) void ImPlotTagCollection_Append(ImPlotTagCollection* self,ImAxis axis,double value,ImU32 bg,ImU32 fg,const char* fmt,...);
extern __declspec(dllexport) const char* ImPlotTagCollection_GetText(ImPlotTagCollection* self,int idx);
extern __declspec(dllexport) void ImPlotTagCollection_Reset(ImPlotTagCollection* self);
extern __declspec(dllexport) ImPlotTick* ImPlotTick_ImPlotTick(double value,bool major,int level,bool show_label);
extern __declspec(dllexport) void ImPlotTick_destroy(ImPlotTick* self);
extern __declspec(dllexport) ImPlotTicker* ImPlotTicker_ImPlotTicker(void);
extern __declspec(dllexport) void ImPlotTicker_destroy(ImPlotTicker* self);
extern __declspec(dllexport) ImPlotTick* ImPlotTicker_AddTick_doubleStr(ImPlotTicker* self,double value,bool major,int level,bool show_label,const char* label);
extern __declspec(dllexport) ImPlotTick* ImPlotTicker_AddTick_doublePlotFormatter(ImPlotTicker* self,double value,bool major,int level,bool show_label,ImPlotFormatter formatter,void* data);
extern __declspec(dllexport) ImPlotTick* ImPlotTicker_AddTick_PlotTick(ImPlotTicker* self,ImPlotTick tick);
extern __declspec(dllexport) const char* ImPlotTicker_GetText_Int(ImPlotTicker* self,int idx);
extern __declspec(dllexport) const char* ImPlotTicker_GetText_PlotTick(ImPlotTicker* self,const ImPlotTick tick);
extern __declspec(dllexport) void ImPlotTicker_OverrideSizeLate(ImPlotTicker* self,const ImVec2 size);
extern __declspec(dllexport) void ImPlotTicker_Reset(ImPlotTicker* self);
extern __declspec(dllexport) int ImPlotTicker_TickCount(ImPlotTicker* self);
extern __declspec(dllexport) ImPlotAxis* ImPlotAxis_ImPlotAxis(void);
extern __declspec(dllexport) void ImPlotAxis_destroy(ImPlotAxis* self);
extern __declspec(dllexport) void ImPlotAxis_Reset(ImPlotAxis* self);
extern __declspec(dllexport) bool ImPlotAxis_SetMin(ImPlotAxis* self,double _min,bool force);
extern __declspec(dllexport) bool ImPlotAxis_SetMax(ImPlotAxis* self,double _max,bool force);
extern __declspec(dllexport) void ImPlotAxis_SetRange_double(ImPlotAxis* self,double v1,double v2);
extern __declspec(dllexport) void ImPlotAxis_SetRange_PlotRange(ImPlotAxis* self,const ImPlotRange range);
extern __declspec(dllexport) void ImPlotAxis_SetAspect(ImPlotAxis* self,double unit_per_pix);
extern __declspec(dllexport) float ImPlotAxis_PixelSize(ImPlotAxis* self);
extern __declspec(dllexport) double ImPlotAxis_GetAspect(ImPlotAxis* self);
extern __declspec(dllexport) void ImPlotAxis_Constrain(ImPlotAxis* self);
extern __declspec(dllexport) void ImPlotAxis_UpdateTransformCache(ImPlotAxis* self);
extern __declspec(dllexport) float ImPlotAxis_PlotToPixels(ImPlotAxis* self,double plt);
extern __declspec(dllexport) double ImPlotAxis_PixelsToPlot(ImPlotAxis* self,float pix);
extern __declspec(dllexport) void ImPlotAxis_ExtendFit(ImPlotAxis* self,double v);
extern __declspec(dllexport) void ImPlotAxis_ExtendFitWith(ImPlotAxis* self,ImPlotAxis* alt,double v,double v_alt);
extern __declspec(dllexport) void ImPlotAxis_ApplyFit(ImPlotAxis* self,float padding);
extern __declspec(dllexport) bool ImPlotAxis_HasLabel(ImPlotAxis* self);
extern __declspec(dllexport) bool ImPlotAxis_HasGridLines(ImPlotAxis* self);
extern __declspec(dllexport) bool ImPlotAxis_HasTickLabels(ImPlotAxis* self);
extern __declspec(dllexport) bool ImPlotAxis_HasTickMarks(ImPlotAxis* self);
extern __declspec(dllexport) bool ImPlotAxis_WillRender(ImPlotAxis* self);
extern __declspec(dllexport) bool ImPlotAxis_IsOpposite(ImPlotAxis* self);
extern __declspec(dllexport) bool ImPlotAxis_IsInverted(ImPlotAxis* self);
extern __declspec(dllexport) bool ImPlotAxis_IsForeground(ImPlotAxis* self);
extern __declspec(dllexport) bool ImPlotAxis_IsAutoFitting(ImPlotAxis* self);
extern __declspec(dllexport) bool ImPlotAxis_CanInitFit(ImPlotAxis* self);
extern __declspec(dllexport) bool ImPlotAxis_IsRangeLocked(ImPlotAxis* self);
extern __declspec(dllexport) bool ImPlotAxis_IsLockedMin(ImPlotAxis* self);
extern __declspec(dllexport) bool ImPlotAxis_IsLockedMax(ImPlotAxis* self);
extern __declspec(dllexport) bool ImPlotAxis_IsLocked(ImPlotAxis* self);
extern __declspec(dllexport) bool ImPlotAxis_IsInputLockedMin(ImPlotAxis* self);
extern __declspec(dllexport) bool ImPlotAxis_IsInputLockedMax(ImPlotAxis* self);
extern __declspec(dllexport) bool ImPlotAxis_IsInputLocked(ImPlotAxis* self);
extern __declspec(dllexport) bool ImPlotAxis_HasMenus(ImPlotAxis* self);
extern __declspec(dllexport) bool ImPlotAxis_IsPanLocked(ImPlotAxis* self,bool increasing);
extern __declspec(dllexport) void ImPlotAxis_PushLinks(ImPlotAxis* self);
extern __declspec(dllexport) void ImPlotAxis_PullLinks(ImPlotAxis* self);
extern __declspec(dllexport) ImPlotAlignmentData* ImPlotAlignmentData_ImPlotAlignmentData(void);
extern __declspec(dllexport) void ImPlotAlignmentData_destroy(ImPlotAlignmentData* self);
extern __declspec(dllexport) void ImPlotAlignmentData_Begin(ImPlotAlignmentData* self);
extern __declspec(dllexport) void ImPlotAlignmentData_Update(ImPlotAlignmentData* self,float* pad_a,float* pad_b,float* delta_a,float* delta_b);
extern __declspec(dllexport) void ImPlotAlignmentData_End(ImPlotAlignmentData* self);
extern __declspec(dllexport) void ImPlotAlignmentData_Reset(ImPlotAlignmentData* self);
extern __declspec(dllexport) ImPlotItem* ImPlotItem_ImPlotItem(void);
extern __declspec(dllexport) void ImPlotItem_destroy(ImPlotItem* self);
extern __declspec(dllexport) ImPlotLegend* ImPlotLegend_ImPlotLegend(void);
extern __declspec(dllexport) void ImPlotLegend_destroy(ImPlotLegend* self);
extern __declspec(dllexport) void ImPlotLegend_Reset(ImPlotLegend* self);
extern __declspec(dllexport) ImPlotItemGroup* ImPlotItemGroup_ImPlotItemGroup(void);
extern __declspec(dllexport) void ImPlotItemGroup_destroy(ImPlotItemGroup* self);
extern __declspec(dllexport) int ImPlotItemGroup_GetItemCount(ImPlotItemGroup* self);
extern __declspec(dllexport) ImGuiID ImPlotItemGroup_GetItemID(ImPlotItemGroup* self,const char* label_id);
extern __declspec(dllexport) ImPlotItem* ImPlotItemGroup_GetItem_ID(ImPlotItemGroup* self,ImGuiID id);
extern __declspec(dllexport) ImPlotItem* ImPlotItemGroup_GetItem_Str(ImPlotItemGroup* self,const char* label_id);
extern __declspec(dllexport) ImPlotItem* ImPlotItemGroup_GetOrAddItem(ImPlotItemGroup* self,ImGuiID id);
extern __declspec(dllexport) ImPlotItem* ImPlotItemGroup_GetItemByIndex(ImPlotItemGroup* self,int i);
extern __declspec(dllexport) int ImPlotItemGroup_GetItemIndex(ImPlotItemGroup* self,ImPlotItem* item);
extern __declspec(dllexport) int ImPlotItemGroup_GetLegendCount(ImPlotItemGroup* self);
extern __declspec(dllexport) ImPlotItem* ImPlotItemGroup_GetLegendItem(ImPlotItemGroup* self,int i);
extern __declspec(dllexport) const char* ImPlotItemGroup_GetLegendLabel(ImPlotItemGroup* self,int i);
extern __declspec(dllexport) void ImPlotItemGroup_Reset(ImPlotItemGroup* self);
extern __declspec(dllexport) ImPlotPlot* ImPlotPlot_ImPlotPlot(void);
extern __declspec(dllexport) void ImPlotPlot_destroy(ImPlotPlot* self);
extern __declspec(dllexport) bool ImPlotPlot_IsInputLocked(ImPlotPlot* self);
extern __declspec(dllexport) void ImPlotPlot_ClearTextBuffer(ImPlotPlot* self);
extern __declspec(dllexport) void ImPlotPlot_SetTitle(ImPlotPlot* self,const char* title);
extern __declspec(dllexport) bool ImPlotPlot_HasTitle(ImPlotPlot* self);
extern __declspec(dllexport) const char* ImPlotPlot_GetTitle(ImPlotPlot* self);
extern __declspec(dllexport) ImPlotAxis* ImPlotPlot_XAxis_Nil(ImPlotPlot* self,int i);
extern __declspec(dllexport) const ImPlotAxis* ImPlotPlot_XAxis__const(ImPlotPlot* self,int i);
extern __declspec(dllexport) ImPlotAxis* ImPlotPlot_YAxis_Nil(ImPlotPlot* self,int i);
extern __declspec(dllexport) const ImPlotAxis* ImPlotPlot_YAxis__const(ImPlotPlot* self,int i);
extern __declspec(dllexport) int ImPlotPlot_EnabledAxesX(ImPlotPlot* self);
extern __declspec(dllexport) int ImPlotPlot_EnabledAxesY(ImPlotPlot* self);
extern __declspec(dllexport) void ImPlotPlot_SetAxisLabel(ImPlotPlot* self,ImPlotAxis* axis,const char* label);
extern __declspec(dllexport) const char* ImPlotPlot_GetAxisLabel(ImPlotPlot* self,const ImPlotAxis axis);
extern __declspec(dllexport) ImPlotSubplot* ImPlotSubplot_ImPlotSubplot(void);
extern __declspec(dllexport) void ImPlotSubplot_destroy(ImPlotSubplot* self);
extern __declspec(dllexport) ImPlotNextPlotData* ImPlotNextPlotData_ImPlotNextPlotData(void);
extern __declspec(dllexport) void ImPlotNextPlotData_destroy(ImPlotNextPlotData* self);
extern __declspec(dllexport) void ImPlotNextPlotData_Reset(ImPlotNextPlotData* self);
extern __declspec(dllexport) ImPlotNextItemData* ImPlotNextItemData_ImPlotNextItemData(void);
extern __declspec(dllexport) void ImPlotNextItemData_destroy(ImPlotNextItemData* self);
extern __declspec(dllexport) void ImPlotNextItemData_Reset(ImPlotNextItemData* self);
extern __declspec(dllexport) void ImPlot_Initialize(ImPlotContext* ctx);
extern __declspec(dllexport) void ImPlot_ResetCtxForNextPlot(ImPlotContext* ctx);
extern __declspec(dllexport) void ImPlot_ResetCtxForNextAlignedPlots(ImPlotContext* ctx);
extern __declspec(dllexport) void ImPlot_ResetCtxForNextSubplot(ImPlotContext* ctx);
extern __declspec(dllexport) ImPlotPlot* ImPlot_GetPlot(const char* title);
extern __declspec(dllexport) ImPlotPlot* ImPlot_GetCurrentPlot(void);
extern __declspec(dllexport) void ImPlot_BustPlotCache(void);
extern __declspec(dllexport) void ImPlot_ShowPlotContextMenu(ImPlotPlot* plot);
extern __declspec(dllexport) void ImPlot_SetupLock(void);
extern __declspec(dllexport) void ImPlot_SubplotNextCell(void);
extern __declspec(dllexport) void ImPlot_ShowSubplotsContextMenu(ImPlotSubplot* subplot);
extern __declspec(dllexport) bool ImPlot_BeginItem(const char* label_id,ImPlotItemFlags flags,ImPlotCol recolor_from);
extern __declspec(dllexport) void ImPlot_EndItem(void);
extern __declspec(dllexport) ImPlotItem* ImPlot_RegisterOrGetItem(const char* label_id,ImPlotItemFlags flags,bool* just_created);
extern __declspec(dllexport) ImPlotItem* ImPlot_GetItem(const char* label_id);
extern __declspec(dllexport) ImPlotItem* ImPlot_GetCurrentItem(void);
extern __declspec(dllexport) void ImPlot_BustItemCache(void);
extern __declspec(dllexport) bool ImPlot_AnyAxesInputLocked(ImPlotAxis* axes,int count);
extern __declspec(dllexport) bool ImPlot_AllAxesInputLocked(ImPlotAxis* axes,int count);
extern __declspec(dllexport) bool ImPlot_AnyAxesHeld(ImPlotAxis* axes,int count);
extern __declspec(dllexport) bool ImPlot_AnyAxesHovered(ImPlotAxis* axes,int count);
extern __declspec(dllexport) bool ImPlot_FitThisFrame(void);
extern __declspec(dllexport) void ImPlot_FitPointX(double x);
extern __declspec(dllexport) void ImPlot_FitPointY(double y);
extern __declspec(dllexport) void ImPlot_FitPoint(const ImPlotPoint p);
extern __declspec(dllexport) bool ImPlot_RangesOverlap(const ImPlotRange r1,const ImPlotRange r2);
extern __declspec(dllexport) void ImPlot_ShowAxisContextMenu(ImPlotAxis* axis,ImPlotAxis* equal_axis,bool time_allowed);
extern __declspec(dllexport) void ImPlot_GetLocationPos(ImVec2 *pOut,const ImRect outer_rect,const ImVec2 inner_size,ImPlotLocation location,const ImVec2 pad);
extern __declspec(dllexport) void ImPlot_CalcLegendSize(ImVec2 *pOut,ImPlotItemGroup* items,const ImVec2 pad,const ImVec2 spacing,bool vertical);
extern __declspec(dllexport) bool ImPlot_ClampLegendRect(ImRect* legend_rect,const ImRect outer_rect,const ImVec2 pad);
extern __declspec(dllexport) bool ImPlot_ShowLegendEntries(ImPlotItemGroup* items,const ImRect legend_bb,bool interactable,const ImVec2 pad,const ImVec2 spacing,bool vertical,ImDrawList* DrawList);
extern __declspec(dllexport) void ImPlot_ShowAltLegend(const char* title_id,bool vertical,const ImVec2 size,bool interactable);
extern __declspec(dllexport) bool ImPlot_ShowLegendContextMenu(ImPlotLegend* legend,bool visible);
extern __declspec(dllexport) void ImPlot_LabelAxisValue(const ImPlotAxis axis,double value,char* buff,int size,bool round);
extern __declspec(dllexport) const ImPlotNextItemData* ImPlot_GetItemData(void);
extern __declspec(dllexport) bool ImPlot_IsColorAuto_Vec4(const ImVec4 col);
extern __declspec(dllexport) bool ImPlot_IsColorAuto_PlotCol(ImPlotCol idx);
extern __declspec(dllexport) void ImPlot_GetAutoColor(ImVec4 *pOut,ImPlotCol idx);
extern __declspec(dllexport) void ImPlot_GetStyleColorVec4(ImVec4 *pOut,ImPlotCol idx);
extern __declspec(dllexport) ImU32 ImPlot_GetStyleColorU32(ImPlotCol idx);
extern __declspec(dllexport) void ImPlot_AddTextVertical(ImDrawList* DrawList,ImVec2 pos,ImU32 col,const char* text_begin,const char* text_end);
extern __declspec(dllexport) void ImPlot_AddTextCentered(ImDrawList* DrawList,ImVec2 top_center,ImU32 col,const char* text_begin,const char* text_end);
extern __declspec(dllexport) void ImPlot_CalcTextSizeVertical(ImVec2 *pOut,const char* text);
extern __declspec(dllexport) ImU32 ImPlot_CalcTextColor_Vec4(const ImVec4 bg);
extern __declspec(dllexport) ImU32 ImPlot_CalcTextColor_U32(ImU32 bg);
extern __declspec(dllexport) ImU32 ImPlot_CalcHoverColor(ImU32 col);
extern __declspec(dllexport) void ImPlot_ClampLabelPos(ImVec2 *pOut,ImVec2 pos,const ImVec2 size,const ImVec2 Min,const ImVec2 Max);
extern __declspec(dllexport) ImU32 ImPlot_GetColormapColorU32(int idx,ImPlotColormap cmap);
extern __declspec(dllexport) ImU32 ImPlot_NextColormapColorU32(void);
extern __declspec(dllexport) ImU32 ImPlot_SampleColormapU32(float t,ImPlotColormap cmap);
extern __declspec(dllexport) void ImPlot_RenderColorBar(const ImU32* colors,int size,ImDrawList* DrawList,const ImRect bounds,bool vert,bool reversed,bool continuous);
extern __declspec(dllexport) double ImPlot_NiceNum(double x,bool round);
extern __declspec(dllexport) int ImPlot_OrderOfMagnitude(double val);
extern __declspec(dllexport) int ImPlot_OrderToPrecision(int order);
extern __declspec(dllexport) int ImPlot_Precision(double val);
extern __declspec(dllexport) double ImPlot_RoundTo(double val,int prec);
extern __declspec(dllexport) void ImPlot_Intersection(ImVec2 *pOut,const ImVec2 a1,const ImVec2 a2,const ImVec2 b1,const ImVec2 b2);
extern __declspec(dllexport) void ImPlot_FillRange_Vector_Float_Ptr(ImVector_float * buffer,int n,float vmin,float vmax);
extern __declspec(dllexport) void ImPlot_FillRange_Vector_double_Ptr(ImVector_double * buffer,int n,double vmin,double vmax);
extern __declspec(dllexport) void ImPlot_FillRange_Vector_S8_Ptr(ImVector_ImS8 * buffer,int n,ImS8 vmin,ImS8 vmax);
extern __declspec(dllexport) void ImPlot_FillRange_Vector_U8_Ptr(ImVector_ImU8 * buffer,int n,ImU8 vmin,ImU8 vmax);
extern __declspec(dllexport) void ImPlot_FillRange_Vector_S16_Ptr(ImVector_ImS16 * buffer,int n,ImS16 vmin,ImS16 vmax);
extern __declspec(dllexport) void ImPlot_FillRange_Vector_U16_Ptr(ImVector_ImU16 * buffer,int n,ImU16 vmin,ImU16 vmax);
extern __declspec(dllexport) void ImPlot_FillRange_Vector_S32_Ptr(ImVector_ImS32 * buffer,int n,ImS32 vmin,ImS32 vmax);
extern __declspec(dllexport) void ImPlot_FillRange_Vector_U32_Ptr(ImVector_ImU32 * buffer,int n,ImU32 vmin,ImU32 vmax);
extern __declspec(dllexport) void ImPlot_FillRange_Vector_S64_Ptr(ImVector_ImS64 * buffer,int n,ImS64 vmin,ImS64 vmax);
extern __declspec(dllexport) void ImPlot_FillRange_Vector_U64_Ptr(ImVector_ImU64 * buffer,int n,ImU64 vmin,ImU64 vmax);
extern __declspec(dllexport) void ImPlot_CalculateBins_FloatPtr(const float* values,int count,ImPlotBin meth,const ImPlotRange range,int* bins_out,double* width_out);
extern __declspec(dllexport) void ImPlot_CalculateBins_doublePtr(const double* values,int count,ImPlotBin meth,const ImPlotRange range,int* bins_out,double* width_out);
extern __declspec(dllexport) void ImPlot_CalculateBins_S8Ptr(const ImS8* values,int count,ImPlotBin meth,const ImPlotRange range,int* bins_out,double* width_out);
extern __declspec(dllexport) void ImPlot_CalculateBins_U8Ptr(const ImU8* values,int count,ImPlotBin meth,const ImPlotRange range,int* bins_out,double* width_out);
extern __declspec(dllexport) void ImPlot_CalculateBins_S16Ptr(const ImS16* values,int count,ImPlotBin meth,const ImPlotRange range,int* bins_out,double* width_out);
extern __declspec(dllexport) void ImPlot_CalculateBins_U16Ptr(const ImU16* values,int count,ImPlotBin meth,const ImPlotRange range,int* bins_out,double* width_out);
extern __declspec(dllexport) void ImPlot_CalculateBins_S32Ptr(const ImS32* values,int count,ImPlotBin meth,const ImPlotRange range,int* bins_out,double* width_out);
extern __declspec(dllexport) void ImPlot_CalculateBins_U32Ptr(const ImU32* values,int count,ImPlotBin meth,const ImPlotRange range,int* bins_out,double* width_out);
extern __declspec(dllexport) void ImPlot_CalculateBins_S64Ptr(const ImS64* values,int count,ImPlotBin meth,const ImPlotRange range,int* bins_out,double* width_out);
extern __declspec(dllexport) void ImPlot_CalculateBins_U64Ptr(const ImU64* values,int count,ImPlotBin meth,const ImPlotRange range,int* bins_out,double* width_out);
extern __declspec(dllexport) bool ImPlot_IsLeapYear(int year);
extern __declspec(dllexport) int ImPlot_GetDaysInMonth(int year,int month);
extern __declspec(dllexport) void ImPlot_MkGmtTime(ImPlotTime *pOut,struct tm* ptm);
extern __declspec(dllexport) tm* ImPlot_GetGmtTime(const ImPlotTime t,tm* ptm);
extern __declspec(dllexport) void ImPlot_MkLocTime(ImPlotTime *pOut,struct tm* ptm);
extern __declspec(dllexport) tm* ImPlot_GetLocTime(const ImPlotTime t,tm* ptm);
extern __declspec(dllexport) void ImPlot_MakeTime(ImPlotTime *pOut,int year,int month,int day,int hour,int min,int sec,int us);
extern __declspec(dllexport) int ImPlot_GetYear(const ImPlotTime t);
extern __declspec(dllexport) void ImPlot_AddTime(ImPlotTime *pOut,const ImPlotTime t,ImPlotTimeUnit unit,int count);
extern __declspec(dllexport) void ImPlot_FloorTime(ImPlotTime *pOut,const ImPlotTime t,ImPlotTimeUnit unit);
extern __declspec(dllexport) void ImPlot_CeilTime(ImPlotTime *pOut,const ImPlotTime t,ImPlotTimeUnit unit);
extern __declspec(dllexport) void ImPlot_RoundTime(ImPlotTime *pOut,const ImPlotTime t,ImPlotTimeUnit unit);
extern __declspec(dllexport) void ImPlot_CombineDateTime(ImPlotTime *pOut,const ImPlotTime date_part,const ImPlotTime time_part);
extern __declspec(dllexport) int ImPlot_FormatTime(const ImPlotTime t,char* buffer,int size,ImPlotTimeFmt fmt,bool use_24_hr_clk);
extern __declspec(dllexport) int ImPlot_FormatDate(const ImPlotTime t,char* buffer,int size,ImPlotDateFmt fmt,bool use_iso_8601);
extern __declspec(dllexport) int ImPlot_FormatDateTime(const ImPlotTime t,char* buffer,int size,ImPlotDateTimeSpec fmt);
extern __declspec(dllexport) bool ImPlot_ShowDatePicker(const char* id,int* level,ImPlotTime* t,const ImPlotTime* t1,const ImPlotTime* t2);
extern __declspec(dllexport) bool ImPlot_ShowTimePicker(const char* id,ImPlotTime* t);
extern __declspec(dllexport) double ImPlot_TransformForward_Log10(double v,void* noname1);
extern __declspec(dllexport) double ImPlot_TransformInverse_Log10(double v,void* noname1);
extern __declspec(dllexport) double ImPlot_TransformForward_SymLog(double v,void* noname1);
extern __declspec(dllexport) double ImPlot_TransformInverse_SymLog(double v,void* noname1);
extern __declspec(dllexport) double ImPlot_TransformForward_Logit(double v,void* noname1);
extern __declspec(dllexport) double ImPlot_TransformInverse_Logit(double v,void* noname1);
extern __declspec(dllexport) int ImPlot_Formatter_Default(double value,char* buff,int size,void* data);
extern __declspec(dllexport) int ImPlot_Formatter_Logit(double value,char* buff,int size,void* noname1);
extern __declspec(dllexport) int ImPlot_Formatter_Time(double noname1,char* buff,int size,void* data);
extern __declspec(dllexport) void ImPlot_Locator_Default(ImPlotTicker* ticker,const ImPlotRange range,float pixels,bool vertical,ImPlotFormatter formatter,void* formatter_data);
extern __declspec(dllexport) void ImPlot_Locator_Time(ImPlotTicker* ticker,const ImPlotRange range,float pixels,bool vertical,ImPlotFormatter formatter,void* formatter_data);
extern __declspec(dllexport) void ImPlot_Locator_Log10(ImPlotTicker* ticker,const ImPlotRange range,float pixels,bool vertical,ImPlotFormatter formatter,void* formatter_data);
extern __declspec(dllexport) void ImPlot_Locator_SymLog(ImPlotTicker* ticker,const ImPlotRange range,float pixels,bool vertical,ImPlotFormatter formatter,void* formatter_data);
enum
{
   STBI_default = 0, 
   STBI_grey       = 1,
   STBI_grey_alpha = 2,
   STBI_rgb        = 3,
   STBI_rgb_alpha  = 4
};
typedef unsigned char stbi_uc;
typedef unsigned short stbi_us;
typedef struct
{
   int      (*read)  (void *user,char *data,int size);   
   void     (*skip)  (void *user,int n);                 
   int      (*eof)   (void *user);                       
} stbi_io_callbacks;
extern stbi_uc *stbi_load_from_memory   (stbi_uc           const *buffer, int len   , int *x, int *y, int *channels_in_file, int desired_channels);
extern stbi_uc *stbi_load_from_callbacks(stbi_io_callbacks const *clbk  , void *user, int *x, int *y, int *channels_in_file, int desired_channels);
extern stbi_uc *stbi_load            (char const *filename, int *x, int *y, int *channels_in_file, int desired_channels);
extern stbi_uc *stbi_load_from_file  (FILE *f, int *x, int *y, int *channels_in_file, int desired_channels);
extern stbi_uc *stbi_load_gif_from_memory(stbi_uc const *buffer, int len, int **delays, int *x, int *y, int *z, int *comp, int req_comp);
extern stbi_us *stbi_load_16_from_memory   (stbi_uc const *buffer, int len, int *x, int *y, int *channels_in_file, int desired_channels);
extern stbi_us *stbi_load_16_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *channels_in_file, int desired_channels);
extern stbi_us *stbi_load_16          (char const *filename, int *x, int *y, int *channels_in_file, int desired_channels);
extern stbi_us *stbi_load_from_file_16(FILE *f, int *x, int *y, int *channels_in_file, int desired_channels);
   extern float *stbi_loadf_from_memory     (stbi_uc const *buffer, int len, int *x, int *y, int *channels_in_file, int desired_channels);
   extern float *stbi_loadf_from_callbacks  (stbi_io_callbacks const *clbk, void *user, int *x, int *y,  int *channels_in_file, int desired_channels);
   extern float *stbi_loadf            (char const *filename, int *x, int *y, int *channels_in_file, int desired_channels);
   extern float *stbi_loadf_from_file  (FILE *f, int *x, int *y, int *channels_in_file, int desired_channels);
   extern void   stbi_hdr_to_ldr_gamma(float gamma);
   extern void   stbi_hdr_to_ldr_scale(float scale);
   extern void   stbi_ldr_to_hdr_gamma(float gamma);
   extern void   stbi_ldr_to_hdr_scale(float scale);
extern int    stbi_is_hdr_from_callbacks(stbi_io_callbacks const *clbk, void *user);
extern int    stbi_is_hdr_from_memory(stbi_uc const *buffer, int len);
extern int      stbi_is_hdr          (char const *filename);
extern int      stbi_is_hdr_from_file(FILE *f);
extern const char *stbi_failure_reason  (void);
extern void     stbi_image_free      (void *retval_from_stbi_load);
extern int      stbi_info_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp);
extern int      stbi_info_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp);
extern int      stbi_is_16_bit_from_memory(stbi_uc const *buffer, int len);
extern int      stbi_is_16_bit_from_callbacks(stbi_io_callbacks const *clbk, void *user);
extern int      stbi_info               (char const *filename,     int *x, int *y, int *comp);
extern int      stbi_info_from_file     (FILE *f,                  int *x, int *y, int *comp);
extern int      stbi_is_16_bit          (char const *filename);
extern int      stbi_is_16_bit_from_file(FILE *f);
extern void stbi_set_unpremultiply_on_load(int flag_true_if_should_unpremultiply);
extern void stbi_convert_iphone_png_to_rgb(int flag_true_if_should_convert);
extern void stbi_set_flip_vertically_on_load(int flag_true_if_should_flip);
extern void stbi_set_unpremultiply_on_load_thread(int flag_true_if_should_unpremultiply);
extern void stbi_convert_iphone_png_to_rgb_thread(int flag_true_if_should_convert);
extern void stbi_set_flip_vertically_on_load_thread(int flag_true_if_should_flip);
extern char *stbi_zlib_decode_malloc_guesssize(const char *buffer, int len, int initial_size, int *outlen);
extern char *stbi_zlib_decode_malloc_guesssize_headerflag(const char *buffer, int len, int initial_size, int *outlen, int parse_header);
extern char *stbi_zlib_decode_malloc(const char *buffer, int len, int *outlen);
extern int   stbi_zlib_decode_buffer(char *obuffer, int olen, const char *ibuffer, int ilen);
extern char *stbi_zlib_decode_noheader_malloc(const char *buffer, int len, int *outlen);
extern int   stbi_zlib_decode_noheader_buffer(char *obuffer, int olen, const char *ibuffer, int ilen);
extern int stbi_write_tga_with_rle;
extern int stbi_write_png_compression_level;
extern int stbi_write_force_png_filter;
extern int stbi_write_png(char const *filename, int w, int h, int comp, const void  *data, int stride_in_bytes);
extern int stbi_write_bmp(char const *filename, int w, int h, int comp, const void  *data);
extern int stbi_write_tga(char const *filename, int w, int h, int comp, const void  *data);
extern int stbi_write_hdr(char const *filename, int w, int h, int comp, const float *data);
extern int stbi_write_jpg(char const *filename, int x, int y, int comp, const void  *data, int quality);
typedef void stbi_write_func(void *context, void *data, int size);
extern int stbi_write_png_to_func(stbi_write_func *func, void *context, int w, int h, int comp, const void  *data, int stride_in_bytes);
extern int stbi_write_bmp_to_func(stbi_write_func *func, void *context, int w, int h, int comp, const void  *data);
extern int stbi_write_tga_to_func(stbi_write_func *func, void *context, int w, int h, int comp, const void  *data);
extern int stbi_write_hdr_to_func(stbi_write_func *func, void *context, int w, int h, int comp, const float *data);
extern int stbi_write_jpg_to_func(stbi_write_func *func, void *context, int x, int y, int comp, const void  *data, int quality);
extern void stbi_flip_vertically_on_write(int flip_boolean);
typedef unsigned char    stbir_uint8;
typedef unsigned short   stbir_uint16;
typedef unsigned int     stbir_uint32;
typedef unsigned __int64 stbir_uint64;
typedef enum
{
  STBIR_1CHANNEL = 1,
  STBIR_2CHANNEL = 2,
  STBIR_RGB      = 3,               
  STBIR_BGR      = 0,               
  STBIR_4CHANNEL = 5,
  STBIR_RGBA = 4,                   
  STBIR_BGRA = 6,
  STBIR_ARGB = 7,
  STBIR_ABGR = 8,
  STBIR_RA   = 9,
  STBIR_AR   = 10,
  STBIR_RGBA_PM = 11,               
  STBIR_BGRA_PM = 12,
  STBIR_ARGB_PM = 13,
  STBIR_ABGR_PM = 14,
  STBIR_RA_PM   = 15,
  STBIR_AR_PM   = 16,
  STBIR_RGBA_NO_AW = 11,            
  STBIR_BGRA_NO_AW = 12,            
  STBIR_ARGB_NO_AW = 13,            
  STBIR_ABGR_NO_AW = 14,            
  STBIR_RA_NO_AW   = 15,
  STBIR_AR_NO_AW   = 16,
} stbir_pixel_layout;
extern unsigned char * stbir_resize_uint8_srgb( const unsigned char *input_pixels , int input_w , int input_h, int input_stride_in_bytes,
                                                        unsigned char *output_pixels, int output_w, int output_h, int output_stride_in_bytes,
                                                        stbir_pixel_layout pixel_type );
extern unsigned char * stbir_resize_uint8_linear( const unsigned char *input_pixels , int input_w , int input_h, int input_stride_in_bytes,
                                                          unsigned char *output_pixels, int output_w, int output_h, int output_stride_in_bytes,
                                                          stbir_pixel_layout pixel_type );
extern float * stbir_resize_float_linear( const float *input_pixels , int input_w , int input_h, int input_stride_in_bytes,
                                                  float *output_pixels, int output_w, int output_h, int output_stride_in_bytes,
                                                  stbir_pixel_layout pixel_type );
typedef enum
{
  STBIR_EDGE_CLAMP   = 0,
  STBIR_EDGE_REFLECT = 1,
  STBIR_EDGE_WRAP    = 2,  
  STBIR_EDGE_ZERO    = 3,
} stbir_edge;
typedef enum
{
  STBIR_FILTER_DEFAULT      = 0,  
  STBIR_FILTER_BOX          = 1,  
  STBIR_FILTER_TRIANGLE     = 2,  
  STBIR_FILTER_CUBICBSPLINE = 3,  
  STBIR_FILTER_CATMULLROM   = 4,  
  STBIR_FILTER_MITCHELL     = 5,  
  STBIR_FILTER_POINT_SAMPLE = 6,  
  STBIR_FILTER_OTHER        = 7,  
} stbir_filter;
typedef enum
{
  STBIR_TYPE_UINT8            = 0,
  STBIR_TYPE_UINT8_SRGB       = 1,
  STBIR_TYPE_UINT8_SRGB_ALPHA = 2,  
  STBIR_TYPE_UINT16           = 3,
  STBIR_TYPE_FLOAT            = 4,
  STBIR_TYPE_HALF_FLOAT       = 5
} stbir_datatype;
extern void *  stbir_resize( const void *input_pixels , int input_w , int input_h, int input_stride_in_bytes,
                                     void *output_pixels, int output_w, int output_h, int output_stride_in_bytes,
                               stbir_pixel_layout pixel_layout, stbir_datatype data_type,
                               stbir_edge edge, stbir_filter filter );
typedef void const * stbir_input_callback( void * optional_output, void const * input_ptr, int num_pixels, int x, int y, void * context );
typedef void stbir_output_callback( void const * output_ptr, int num_pixels, int y, void * context );
typedef float stbir__kernel_callback( float x, float scale, void * user_data ); 
typedef float stbir__support_callback( float scale, void * user_data );
typedef struct stbir__info stbir__info;
typedef struct STBIR_RESIZE  
{
  void * user_data;
  void const * input_pixels;
  int input_w, input_h;
  double input_s0, input_t0, input_s1, input_t1;
  stbir_input_callback * input_cb;
  void * output_pixels;
  int output_w, output_h;
  int output_subx, output_suby, output_subw, output_subh;
  stbir_output_callback * output_cb;
  int input_stride_in_bytes;
  int output_stride_in_bytes;
  int splits;
  int fast_alpha;
  int needs_rebuild;
  int called_alloc;
  stbir_pixel_layout input_pixel_layout_public;
  stbir_pixel_layout output_pixel_layout_public;
  stbir_datatype input_data_type;
  stbir_datatype output_data_type;
  stbir_filter horizontal_filter, vertical_filter;
  stbir_edge horizontal_edge, vertical_edge;
  stbir__kernel_callback * horizontal_filter_kernel; stbir__support_callback * horizontal_filter_support;
  stbir__kernel_callback * vertical_filter_kernel; stbir__support_callback * vertical_filter_support;
  stbir__info * samplers;
} STBIR_RESIZE;
extern void stbir_resize_init( STBIR_RESIZE * resize,
                                 const void *input_pixels,  int input_w,  int input_h, int input_stride_in_bytes, 
                                       void *output_pixels, int output_w, int output_h, int output_stride_in_bytes, 
                                 stbir_pixel_layout pixel_layout, stbir_datatype data_type );
extern void stbir_set_datatypes( STBIR_RESIZE * resize, stbir_datatype input_type, stbir_datatype output_type );
extern void stbir_set_pixel_callbacks( STBIR_RESIZE * resize, stbir_input_callback * input_cb, stbir_output_callback * output_cb );   
extern void stbir_set_user_data( STBIR_RESIZE * resize, void * user_data );                                               
extern void stbir_set_buffer_ptrs( STBIR_RESIZE * resize, const void * input_pixels, int input_stride_in_bytes, void * output_pixels, int output_stride_in_bytes );
extern int stbir_set_pixel_layouts( STBIR_RESIZE * resize, stbir_pixel_layout input_pixel_layout, stbir_pixel_layout output_pixel_layout );  
extern int stbir_set_edgemodes( STBIR_RESIZE * resize, stbir_edge horizontal_edge, stbir_edge vertical_edge );       
extern int stbir_set_filters( STBIR_RESIZE * resize, stbir_filter horizontal_filter, stbir_filter vertical_filter ); 
extern int stbir_set_filter_callbacks( STBIR_RESIZE * resize, stbir__kernel_callback * horizontal_filter, stbir__support_callback * horizontal_support, stbir__kernel_callback * vertical_filter, stbir__support_callback * vertical_support );
extern int stbir_set_pixel_subrect( STBIR_RESIZE * resize, int subx, int suby, int subw, int subh );        
extern int stbir_set_input_subrect( STBIR_RESIZE * resize, double s0, double t0, double s1, double t1 );    
extern int stbir_set_output_pixel_subrect( STBIR_RESIZE * resize, int subx, int suby, int subw, int subh ); 
extern int stbir_set_non_pm_alpha_speed_over_quality( STBIR_RESIZE * resize, int non_pma_alpha_speed_over_quality );
extern int stbir_build_samplers( STBIR_RESIZE * resize );
extern void stbir_free_samplers( STBIR_RESIZE * resize );
extern int stbir_resize_extended( STBIR_RESIZE * resize );
extern int stbir_build_samplers_with_splits( STBIR_RESIZE * resize, int try_splits );
extern int stbir_resize_extended_split( STBIR_RESIZE * resize, int split_start, int split_count );
typedef struct
{
   char *alloc_buffer;
   int   alloc_buffer_length_in_bytes;
} stb_vorbis_alloc;
typedef struct stb_vorbis stb_vorbis;
typedef struct
{
   unsigned int sample_rate;
   int channels;
   unsigned int setup_memory_required;
   unsigned int setup_temp_memory_required;
   unsigned int temp_memory_required;
   int max_frame_size;
} stb_vorbis_info;
typedef struct
{
   char *vendor;
   int comment_list_length;
   char **comment_list;
} stb_vorbis_comment;
extern stb_vorbis_info stb_vorbis_get_info(stb_vorbis *f);
extern stb_vorbis_comment stb_vorbis_get_comment(stb_vorbis *f);
extern int stb_vorbis_get_error(stb_vorbis *f);
extern void stb_vorbis_close(stb_vorbis *f);
extern int stb_vorbis_get_sample_offset(stb_vorbis *f);
extern unsigned int stb_vorbis_get_file_offset(stb_vorbis *f);
extern stb_vorbis *stb_vorbis_open_pushdata(
         const unsigned char * datablock, int datablock_length_in_bytes,
         int *datablock_memory_consumed_in_bytes,
         int *error,
         const stb_vorbis_alloc *alloc_buffer);
extern int stb_vorbis_decode_frame_pushdata(
         stb_vorbis *f,
         const unsigned char *datablock, int datablock_length_in_bytes,
         int *channels,             
         float ***output,           
         int *samples               
     );
extern void stb_vorbis_flush_pushdata(stb_vorbis *f);
extern int stb_vorbis_decode_filename(const char *filename, int *channels, int *sample_rate, short **output);
extern int stb_vorbis_decode_memory(const unsigned char *mem, int len, int *channels, int *sample_rate, short **output);
extern stb_vorbis * stb_vorbis_open_memory(const unsigned char *data, int len,
                                  int *error, const stb_vorbis_alloc *alloc_buffer);
extern stb_vorbis * stb_vorbis_open_filename(const char *filename,
                                  int *error, const stb_vorbis_alloc *alloc_buffer);
extern stb_vorbis * stb_vorbis_open_file(FILE *f, int close_handle_on_close,
                                  int *error, const stb_vorbis_alloc *alloc_buffer);
extern stb_vorbis * stb_vorbis_open_file_section(FILE *f, int close_handle_on_close,
                int *error, const stb_vorbis_alloc *alloc_buffer, unsigned int len);
extern int stb_vorbis_seek_frame(stb_vorbis *f, unsigned int sample_number);
extern int stb_vorbis_seek(stb_vorbis *f, unsigned int sample_number);
extern int stb_vorbis_seek_start(stb_vorbis *f);
extern unsigned int stb_vorbis_stream_length_in_samples(stb_vorbis *f);
extern float        stb_vorbis_stream_length_in_seconds(stb_vorbis *f);
extern int stb_vorbis_get_frame_float(stb_vorbis *f, int *channels, float ***output);
extern int stb_vorbis_get_frame_short_interleaved(stb_vorbis *f, int num_c, short *buffer, int num_shorts);
extern int stb_vorbis_get_frame_short            (stb_vorbis *f, int num_c, short **buffer, int num_samples);
extern int stb_vorbis_get_samples_float_interleaved(stb_vorbis *f, int channels, float *buffer, int num_floats);
extern int stb_vorbis_get_samples_float(stb_vorbis *f, int channels, float **buffer, int num_samples);
extern int stb_vorbis_get_samples_short_interleaved(stb_vorbis *f, int channels, short *buffer, int num_shorts);
extern int stb_vorbis_get_samples_short(stb_vorbis *f, int channels, short **buffer, int num_samples);
enum STBVorbisError
{
   VORBIS__no_error,
   VORBIS_need_more_data=1,             
   VORBIS_invalid_api_mixing,           
   VORBIS_outofmem,                     
   VORBIS_feature_not_supported,        
   VORBIS_too_many_channels,            
   VORBIS_file_open_failure,            
   VORBIS_seek_without_length,          
   VORBIS_unexpected_eof=10,            
   VORBIS_seek_invalid,                 
   VORBIS_invalid_setup=20,
   VORBIS_invalid_stream,
   VORBIS_missing_capture_pattern=30,
   VORBIS_invalid_stream_structure_version,
   VORBIS_continued_packet_flag_invalid,
   VORBIS_incorrect_stream_serial_number,
   VORBIS_invalid_first_page,
   VORBIS_bad_packet_type,
   VORBIS_cant_find_last_page,
   VORBIS_seek_failed,
   VORBIS_ogg_skeleton_not_supported
};
typedef struct stbrp_context stbrp_context;
typedef struct stbrp_node    stbrp_node;
typedef struct stbrp_rect    stbrp_rect;
typedef int            stbrp_coord;
extern int stbrp_pack_rects (stbrp_context *context, stbrp_rect *rects, int num_rects);
struct stbrp_rect
{
   int            id;
   stbrp_coord    w, h;
   stbrp_coord    x, y;
   int            was_packed;  
}; 
extern void stbrp_init_target (stbrp_context *context, int width, int height, stbrp_node *nodes, int num_nodes);
extern void stbrp_setup_allow_out_of_mem (stbrp_context *context, int allow_out_of_mem);
extern void stbrp_setup_heuristic (stbrp_context *context, int heuristic);
enum
{
   STBRP_HEURISTIC_Skyline_default=0,
   STBRP_HEURISTIC_Skyline_BL_sortHeight = STBRP_HEURISTIC_Skyline_default,
   STBRP_HEURISTIC_Skyline_BF_sortHeight
};
struct stbrp_node
{
   stbrp_coord  x,y;
   stbrp_node  *next;
};
struct stbrp_context
{
   int width;
   int height;
   int align;
   int init_mode;
   int heuristic;
   int num_nodes;
   stbrp_node *active_head;
   stbrp_node *free_head;
   stbrp_node extra[2]; 
};
typedef struct
{
   unsigned char *data;
   int cursor;
   int size;
} stbtt__buf;
typedef struct
{
   unsigned short x0,y0,x1,y1; 
   float xoff,yoff,xadvance;
} stbtt_bakedchar;
extern int stbtt_BakeFontBitmap(const unsigned char *data, int offset,  
                                float pixel_height,                     
                                unsigned char *pixels, int pw, int ph,  
                                int first_char, int num_chars,          
                                stbtt_bakedchar *chardata);             
typedef struct
{
   float x0,y0,s0,t0; 
   float x1,y1,s1,t1; 
} stbtt_aligned_quad;
extern void stbtt_GetBakedQuad(const stbtt_bakedchar *chardata, int pw, int ph,  
                               int char_index,             
                               float *xpos, float *ypos,   
                               stbtt_aligned_quad *q,      
                               int opengl_fillrule);       
extern void stbtt_GetScaledFontVMetrics(const unsigned char *fontdata, int index, float size, float *ascent, float *descent, float *lineGap);
typedef struct
{
   unsigned short x0,y0,x1,y1; 
   float xoff,yoff,xadvance;
   float xoff2,yoff2;
} stbtt_packedchar;
typedef struct stbtt_pack_context stbtt_pack_context;
typedef struct stbtt_fontinfo stbtt_fontinfo;
extern int  stbtt_PackBegin(stbtt_pack_context *spc, unsigned char *pixels, int width, int height, int stride_in_bytes, int padding, void *alloc_context);
extern void stbtt_PackEnd  (stbtt_pack_context *spc);
extern int  stbtt_PackFontRange(stbtt_pack_context *spc, const unsigned char *fontdata, int font_index, float font_size,
                                int first_unicode_char_in_range, int num_chars_in_range, stbtt_packedchar *chardata_for_range);
typedef struct
{
   float font_size;
   int first_unicode_codepoint_in_range;  
   int *array_of_unicode_codepoints;       
   int num_chars;
   stbtt_packedchar *chardata_for_range; 
   unsigned char h_oversample, v_oversample; 
} stbtt_pack_range;
extern int  stbtt_PackFontRanges(stbtt_pack_context *spc, const unsigned char *fontdata, int font_index, stbtt_pack_range *ranges, int num_ranges);
extern void stbtt_PackSetOversampling(stbtt_pack_context *spc, unsigned int h_oversample, unsigned int v_oversample);
extern void stbtt_PackSetSkipMissingCodepoints(stbtt_pack_context *spc, int skip);
extern void stbtt_GetPackedQuad(const stbtt_packedchar *chardata, int pw, int ph,  
                               int char_index,             
                               float *xpos, float *ypos,   
                               stbtt_aligned_quad *q,      
                               int align_to_integer);
extern int  stbtt_PackFontRangesGatherRects(stbtt_pack_context *spc, const stbtt_fontinfo *info, stbtt_pack_range *ranges, int num_ranges, stbrp_rect *rects);
extern void stbtt_PackFontRangesPackRects(stbtt_pack_context *spc, stbrp_rect *rects, int num_rects);
extern int  stbtt_PackFontRangesRenderIntoRects(stbtt_pack_context *spc, const stbtt_fontinfo *info, stbtt_pack_range *ranges, int num_ranges, stbrp_rect *rects);
struct stbtt_pack_context {
   void *user_allocator_context;
   void *pack_info;
   int   width;
   int   height;
   int   stride_in_bytes;
   int   padding;
   int   skip_missing;
   unsigned int   h_oversample, v_oversample;
   unsigned char *pixels;
   void  *nodes;
};
extern int stbtt_GetNumberOfFonts(const unsigned char *data);
extern int stbtt_GetFontOffsetForIndex(const unsigned char *data, int index);
struct stbtt_fontinfo
{
   void           * userdata;
   unsigned char  * data;              
   int              fontstart;         
   int numGlyphs;                     
   int loca,head,glyf,hhea,hmtx,kern,gpos,svg; 
   int index_map;                     
   int indexToLocFormat;              
   stbtt__buf cff;                    
   stbtt__buf charstrings;            
   stbtt__buf gsubrs;                 
   stbtt__buf subrs;                  
   stbtt__buf fontdicts;              
   stbtt__buf fdselect;               
};
extern int stbtt_InitFont(stbtt_fontinfo *info, const unsigned char *data, int offset);
extern int stbtt_FindGlyphIndex(const stbtt_fontinfo *info, int unicode_codepoint);
extern float stbtt_ScaleForPixelHeight(const stbtt_fontinfo *info, float pixels);
extern float stbtt_ScaleForMappingEmToPixels(const stbtt_fontinfo *info, float pixels);
extern void stbtt_GetFontVMetrics(const stbtt_fontinfo *info, int *ascent, int *descent, int *lineGap);
extern int  stbtt_GetFontVMetricsOS2(const stbtt_fontinfo *info, int *typoAscent, int *typoDescent, int *typoLineGap);
extern void stbtt_GetFontBoundingBox(const stbtt_fontinfo *info, int *x0, int *y0, int *x1, int *y1);
extern void stbtt_GetCodepointHMetrics(const stbtt_fontinfo *info, int codepoint, int *advanceWidth, int *leftSideBearing);
extern int  stbtt_GetCodepointKernAdvance(const stbtt_fontinfo *info, int ch1, int ch2);
extern int stbtt_GetCodepointBox(const stbtt_fontinfo *info, int codepoint, int *x0, int *y0, int *x1, int *y1);
extern void stbtt_GetGlyphHMetrics(const stbtt_fontinfo *info, int glyph_index, int *advanceWidth, int *leftSideBearing);
extern int  stbtt_GetGlyphKernAdvance(const stbtt_fontinfo *info, int glyph1, int glyph2);
extern int  stbtt_GetGlyphBox(const stbtt_fontinfo *info, int glyph_index, int *x0, int *y0, int *x1, int *y1);
typedef struct stbtt_kerningentry
{
   int glyph1; 
   int glyph2;
   int advance;
} stbtt_kerningentry;
extern int  stbtt_GetKerningTableLength(const stbtt_fontinfo *info);
extern int  stbtt_GetKerningTable(const stbtt_fontinfo *info, stbtt_kerningentry* table, int table_length);
   enum {
      STBTT_vmove=1,
      STBTT_vline,
      STBTT_vcurve,
      STBTT_vcubic
   };
   typedef struct
   {
      short x,y,cx,cy,cx1,cy1;
      unsigned char type,padding;
   } stbtt_vertex;
extern int stbtt_IsGlyphEmpty(const stbtt_fontinfo *info, int glyph_index);
extern int stbtt_GetCodepointShape(const stbtt_fontinfo *info, int unicode_codepoint, stbtt_vertex **vertices);
extern int stbtt_GetGlyphShape(const stbtt_fontinfo *info, int glyph_index, stbtt_vertex **vertices);
extern void stbtt_FreeShape(const stbtt_fontinfo *info, stbtt_vertex *vertices);
extern unsigned char *stbtt_FindSVGDoc(const stbtt_fontinfo *info, int gl);
extern int stbtt_GetCodepointSVG(const stbtt_fontinfo *info, int unicode_codepoint, const char **svg);
extern int stbtt_GetGlyphSVG(const stbtt_fontinfo *info, int gl, const char **svg);
extern void stbtt_FreeBitmap(unsigned char *bitmap, void *userdata);
extern unsigned char *stbtt_GetCodepointBitmap(const stbtt_fontinfo *info, float scale_x, float scale_y, int codepoint, int *width, int *height, int *xoff, int *yoff);
extern unsigned char *stbtt_GetCodepointBitmapSubpixel(const stbtt_fontinfo *info, float scale_x, float scale_y, float shift_x, float shift_y, int codepoint, int *width, int *height, int *xoff, int *yoff);
extern void stbtt_MakeCodepointBitmap(const stbtt_fontinfo *info, unsigned char *output, int out_w, int out_h, int out_stride, float scale_x, float scale_y, int codepoint);
extern void stbtt_MakeCodepointBitmapSubpixel(const stbtt_fontinfo *info, unsigned char *output, int out_w, int out_h, int out_stride, float scale_x, float scale_y, float shift_x, float shift_y, int codepoint);
extern void stbtt_MakeCodepointBitmapSubpixelPrefilter(const stbtt_fontinfo *info, unsigned char *output, int out_w, int out_h, int out_stride, float scale_x, float scale_y, float shift_x, float shift_y, int oversample_x, int oversample_y, float *sub_x, float *sub_y, int codepoint);
extern void stbtt_GetCodepointBitmapBox(const stbtt_fontinfo *font, int codepoint, float scale_x, float scale_y, int *ix0, int *iy0, int *ix1, int *iy1);
extern void stbtt_GetCodepointBitmapBoxSubpixel(const stbtt_fontinfo *font, int codepoint, float scale_x, float scale_y, float shift_x, float shift_y, int *ix0, int *iy0, int *ix1, int *iy1);
extern unsigned char *stbtt_GetGlyphBitmap(const stbtt_fontinfo *info, float scale_x, float scale_y, int glyph, int *width, int *height, int *xoff, int *yoff);
extern unsigned char *stbtt_GetGlyphBitmapSubpixel(const stbtt_fontinfo *info, float scale_x, float scale_y, float shift_x, float shift_y, int glyph, int *width, int *height, int *xoff, int *yoff);
extern void stbtt_MakeGlyphBitmap(const stbtt_fontinfo *info, unsigned char *output, int out_w, int out_h, int out_stride, float scale_x, float scale_y, int glyph);
extern void stbtt_MakeGlyphBitmapSubpixel(const stbtt_fontinfo *info, unsigned char *output, int out_w, int out_h, int out_stride, float scale_x, float scale_y, float shift_x, float shift_y, int glyph);
extern void stbtt_MakeGlyphBitmapSubpixelPrefilter(const stbtt_fontinfo *info, unsigned char *output, int out_w, int out_h, int out_stride, float scale_x, float scale_y, float shift_x, float shift_y, int oversample_x, int oversample_y, float *sub_x, float *sub_y, int glyph);
extern void stbtt_GetGlyphBitmapBox(const stbtt_fontinfo *font, int glyph, float scale_x, float scale_y, int *ix0, int *iy0, int *ix1, int *iy1);
extern void stbtt_GetGlyphBitmapBoxSubpixel(const stbtt_fontinfo *font, int glyph, float scale_x, float scale_y,float shift_x, float shift_y, int *ix0, int *iy0, int *ix1, int *iy1);
typedef struct
{
   int w,h,stride;
   unsigned char *pixels;
} stbtt__bitmap;
extern void stbtt_Rasterize(stbtt__bitmap *result,        
                               float flatness_in_pixels,     
                               stbtt_vertex *vertices,       
                               int num_verts,                
                               float scale_x, float scale_y, 
                               float shift_x, float shift_y, 
                               int x_off, int y_off,         
                               int invert,                   
                               void *userdata);              
extern void stbtt_FreeSDF(unsigned char *bitmap, void *userdata);
extern unsigned char * stbtt_GetGlyphSDF(const stbtt_fontinfo *info, float scale, int glyph, int padding, unsigned char onedge_value, float pixel_dist_scale, int *width, int *height, int *xoff, int *yoff);
extern unsigned char * stbtt_GetCodepointSDF(const stbtt_fontinfo *info, float scale, int codepoint, int padding, unsigned char onedge_value, float pixel_dist_scale, int *width, int *height, int *xoff, int *yoff);
extern int stbtt_FindMatchingFont(const unsigned char *fontdata, const char *name, int flags);
extern int stbtt_CompareUTF8toUTF16_bigendian(const char *s1, int len1, const char *s2, int len2);
extern const char *stbtt_GetFontNameString(const stbtt_fontinfo *font, int *length, int platformID, int encodingID, int languageID, int nameID);
enum { 
   STBTT_PLATFORM_ID_UNICODE   =0,
   STBTT_PLATFORM_ID_MAC       =1,
   STBTT_PLATFORM_ID_ISO       =2,
   STBTT_PLATFORM_ID_MICROSOFT =3
};
enum { 
   STBTT_UNICODE_EID_UNICODE_1_0    =0,
   STBTT_UNICODE_EID_UNICODE_1_1    =1,
   STBTT_UNICODE_EID_ISO_10646      =2,
   STBTT_UNICODE_EID_UNICODE_2_0_BMP=3,
   STBTT_UNICODE_EID_UNICODE_2_0_FULL=4
};
enum { 
   STBTT_MS_EID_SYMBOL        =0,
   STBTT_MS_EID_UNICODE_BMP   =1,
   STBTT_MS_EID_SHIFTJIS      =2,
   STBTT_MS_EID_UNICODE_FULL  =10
};
enum { 
   STBTT_MAC_EID_ROMAN        =0,   STBTT_MAC_EID_ARABIC       =4,
   STBTT_MAC_EID_JAPANESE     =1,   STBTT_MAC_EID_HEBREW       =5,
   STBTT_MAC_EID_CHINESE_TRAD =2,   STBTT_MAC_EID_GREEK        =6,
   STBTT_MAC_EID_KOREAN       =3,   STBTT_MAC_EID_RUSSIAN      =7
};
enum { 
   STBTT_MS_LANG_ENGLISH     =0x0409,   STBTT_MS_LANG_ITALIAN     =0x0410,
   STBTT_MS_LANG_CHINESE     =0x0804,   STBTT_MS_LANG_JAPANESE    =0x0411,
   STBTT_MS_LANG_DUTCH       =0x0413,   STBTT_MS_LANG_KOREAN      =0x0412,
   STBTT_MS_LANG_FRENCH      =0x040c,   STBTT_MS_LANG_RUSSIAN     =0x0419,
   STBTT_MS_LANG_GERMAN      =0x0407,   STBTT_MS_LANG_SPANISH     =0x0409,
   STBTT_MS_LANG_HEBREW      =0x040d,   STBTT_MS_LANG_SWEDISH     =0x041D
};
enum { 
   STBTT_MAC_LANG_ENGLISH      =0 ,   STBTT_MAC_LANG_JAPANESE     =11,
   STBTT_MAC_LANG_ARABIC       =12,   STBTT_MAC_LANG_KOREAN       =23,
   STBTT_MAC_LANG_DUTCH        =4 ,   STBTT_MAC_LANG_RUSSIAN      =32,
   STBTT_MAC_LANG_FRENCH       =1 ,   STBTT_MAC_LANG_SPANISH      =6 ,
   STBTT_MAC_LANG_GERMAN       =2 ,   STBTT_MAC_LANG_SWEDISH      =5 ,
   STBTT_MAC_LANG_HEBREW       =10,   STBTT_MAC_LANG_CHINESE_SIMPLIFIED =33,
   STBTT_MAC_LANG_ITALIAN      =3 ,   STBTT_MAC_LANG_CHINESE_TRAD =19
};
extern int tinyfd_winUtf8; 
char * tinyfd_utf8toMbcs(char const * aUtf8string);
char * tinyfd_utf16toMbcs(wchar_t const * aUtf16string);
wchar_t * tinyfd_mbcsTo16(char const * aMbcsString);
char * tinyfd_mbcsTo8(char const * aMbcsString);
wchar_t * tinyfd_utf8to16(char const * aUtf8string);
char * tinyfd_utf16to8(wchar_t const * aUtf16string);
char const * tinyfd_getGlobalChar(char const * aCharVariableName); 
int tinyfd_getGlobalInt(char const * aIntVariableName); 
int tinyfd_setGlobalInt(char const * aIntVariableName, int aValue); 
extern char tinyfd_version[8]; 
extern char tinyfd_needs[]; 
extern int tinyfd_verbose; 
extern int tinyfd_silent; 
extern int tinyfd_allowCursesDialogs; 
extern int tinyfd_forceConsole;  
extern int tinyfd_assumeGraphicDisplay; 
extern char tinyfd_response[1024];
void tinyfd_beep(void);
int tinyfd_notifyPopup(
        char const * aTitle, 
        char const * aMessage, 
        char const * aIconType); 
int tinyfd_messageBox(
        char const * aTitle , 
        char const * aMessage , 
        char const * aDialogType , 
        char const * aIconType , 
        int aDefaultButton ) ;
char * tinyfd_inputBox(
        char const * aTitle , 
        char const * aMessage , 
        char const * aDefaultInput ) ;  
char * tinyfd_saveFileDialog(
        char const * aTitle , 
        char const * aDefaultPathAndFile , 
        int aNumOfFilterPatterns , 
        char const * const * aFilterPatterns , 
        char const * aSingleFilterDescription ) ; 
char * tinyfd_openFileDialog(
        char const * aTitle, 
        char const * aDefaultPathAndFile, 
        int aNumOfFilterPatterns , 
        char const * const * aFilterPatterns, 
        char const * aSingleFilterDescription, 
        int aAllowMultipleSelects ) ; 
char * tinyfd_selectFolderDialog(
        char const * aTitle, 
        char const * aDefaultPath); 
char * tinyfd_colorChooser(
        char const * aTitle, 
        char const * aDefaultHexRGB, 
        unsigned char const aDefaultRGB[3] , 
        unsigned char aoResultRGB[3] ) ; 
int tinyfd_notifyPopupW(
        wchar_t const * aTitle, 
        wchar_t const * aMessage, 
        wchar_t const * aIconType); 
int tinyfd_messageBoxW(
        wchar_t const * aTitle, 
        wchar_t const * aMessage, 
        wchar_t const * aDialogType, 
        wchar_t const * aIconType, 
        int aDefaultButton ); 
wchar_t * tinyfd_inputBoxW(
        wchar_t const * aTitle, 
        wchar_t const * aMessage, 
        wchar_t const * aDefaultInput); 
wchar_t * tinyfd_saveFileDialogW(
        wchar_t const * aTitle, 
        wchar_t const * aDefaultPathAndFile, 
        int aNumOfFilterPatterns, 
        wchar_t const * const * aFilterPatterns, 
        wchar_t const * aSingleFilterDescription); 
wchar_t * tinyfd_openFileDialogW(
        wchar_t const * aTitle, 
        wchar_t const * aDefaultPathAndFile, 
        int aNumOfFilterPatterns , 
        wchar_t const * const * aFilterPatterns, 
        wchar_t const * aSingleFilterDescription, 
        int aAllowMultipleSelects ) ; 
wchar_t * tinyfd_selectFolderDialogW(
        wchar_t const * aTitle, 
        wchar_t const * aDefaultPath); 
wchar_t * tinyfd_colorChooserW(
        wchar_t const * aTitle, 
        wchar_t const * aDefaultHexRGB, 
        unsigned char const aDefaultRGB[3], 
        unsigned char aoResultRGB[3]); 
struct xmlatt {
    char name[40];
    char *value;
    struct xmlatt *next;
};
struct xml {
    char name[40];
    char *text;
    struct xmlatt *atts;
    struct xml *up, *down, *tail, *prev, *next;
};
struct xml *xml_parse(char *buf, int preserve_white, char **error);
void xml_free(struct xml *item);
struct xml *xml_prev(struct xml *item);
struct xml *xml_next(struct xml *item);
struct xml *xml_up(struct xml *item);
struct xml *xml_down(struct xml *item);
int xml_is_tag(struct xml *item, const char *name);
char *xml_tag(struct xml *item);
char *xml_att(struct xml *item, const char *att);
char *xml_att_name(struct xml *item, int index); 
char *xml_text(struct xml *item);
struct xml *xml_find(struct xml *item, const char *tag);
struct xml *xml_find_next(struct xml *item, const char *tag);
struct xml *xml_find_down(struct xml *item, const char *tag);
typedef enum json5_type {
    JSON5_UNDEFINED, 
    JSON5_NULL,      
    JSON5_BOOL,      
    JSON5_OBJECT,    
    JSON5_STRING,    
    JSON5_ARRAY,     
    JSON5_INTEGER,   
    JSON5_REAL,      
} json5_type;
typedef struct json5 {
    char*      name;
    json5_type type;
    unsigned   count : 29;
    union {
        struct json5* array;
        struct json5* nodes;
        int64_t   integer;
        double    real;
        char*     string;
        int       boolean;
    };
} json5;
char* json5_parse(json5 *root, char *source, int flags);
void  json5_write(FILE *fp, const json5 *root);
void  json5_free(json5 *root);
unsigned base64_bounds(unsigned size);
char*    base64_encode(const void *inp, unsigned inlen); 
char*    base64_decode(const char *inp, unsigned inlen); 
enum {
    RAW  = 0,
    PPP  = (1<<4),
    ULZ  = (2<<4),
    LZ4X = (3<<4),
    CRSH = (4<<4),
    DEFL = (5<<4),
    LZP1 = (6<<4),
    LZMA = (7<<4),
    BALZ = (8<<4),
    LZW3 = (9<<4),
    LZSS = (10<<4),
    BCM  = (11<<4),
    NUM_COMPRESSORS = 13
};
unsigned mem_bounds(unsigned inlen, unsigned compressor);
unsigned mem_encode(const void *in, unsigned inlen, void *out, unsigned outlen, unsigned compressor);
unsigned mem_excess(unsigned compressor);
unsigned mem_decode(const void *in, unsigned inlen, void *out, unsigned outlen);
unsigned file_encode(FILE* in, FILE* out, FILE *logfile, unsigned cnum, unsigned *clist);
unsigned file_decode(FILE* in, FILE* out, FILE *logfile);
unsigned balz_encode(const void *in, unsigned inlen, void *out, unsigned outlen, unsigned flags );
unsigned balz_decode(const void *in, unsigned inlen, void *out, unsigned outlen);
unsigned balz_bounds(unsigned inlen, unsigned flags);
unsigned balz_excess(unsigned flags);
unsigned bcm_encode(const void *in, unsigned inlen, void *out, unsigned outlen, unsigned flags);
unsigned bcm_decode(const void *in, unsigned inlen, void *out, unsigned outlen);
unsigned bcm_bounds(unsigned inlen, unsigned flags);
unsigned bcm_excess(unsigned flags);
unsigned crush_encode(const void* in, unsigned inlen, void* out, unsigned outlen, unsigned flags); 
unsigned crush_decode(const void* in, unsigned inlen, void* out, unsigned outlen);
unsigned crush_bounds(unsigned inlen, unsigned flags);
unsigned crush_excess(unsigned flags);
unsigned lz4x_encode(const void *in, unsigned inlen, void *out, unsigned outlen, unsigned flags); 
unsigned lz4x_decode(const void *in, unsigned inlen, void *out, unsigned outlen);
unsigned lz4x_bounds(unsigned inlen, unsigned flags);
unsigned lz4x_excess(unsigned flags);
unsigned lzma_encode(const void *in, unsigned inlen, void *out, unsigned outlen, unsigned flags); 
unsigned lzma_decode(const void *in, unsigned inlen, void *out, unsigned outlen);
unsigned lzma_bounds(unsigned inlen, unsigned flags);
unsigned lzma_excess(unsigned flags);
unsigned lzp1_encode(const void* in, unsigned inlen, void* out, unsigned outlen, unsigned flags);
unsigned lzp1_decode(const void* in, unsigned inlen, void* out, unsigned outlen);
unsigned lzp1_bounds(unsigned inlen, unsigned flags);
unsigned lzp1_excess(unsigned flags);
unsigned lzrw3a_encode(const void* in, unsigned inlen, void* out, unsigned outlen, unsigned flags);
unsigned lzrw3a_decode(const void* in, unsigned inlen, void* out, unsigned outlen);
unsigned lzrw3a_bounds(unsigned inlen, unsigned flags);
unsigned lzrw3a_excess(unsigned flags);
unsigned lzss_encode(const void *in, unsigned inlen, void *out, unsigned outlen, unsigned flags);
unsigned lzss_decode(const void *in, unsigned inlen, void *out, unsigned outlen);
unsigned lzss_bounds(unsigned bytes, unsigned flags);
unsigned lzss_excess(unsigned flags);
unsigned ppp_encode(const void *in, unsigned inlen, void *out, unsigned outlen, unsigned flags);
unsigned ppp_decode(const void *in, unsigned inlen, void *out, unsigned outlen);
unsigned ppp_bounds(unsigned inlen, unsigned flags);
unsigned ppp_excess(unsigned flags);
unsigned raw_encode(const void *in, unsigned inlen, void *out, unsigned outcap, unsigned flags);
unsigned raw_decode(const void *in, unsigned inlen, void *out, unsigned outcap);
unsigned raw_bounds(unsigned bytes, unsigned flags);
unsigned raw_excess(unsigned flags);
unsigned ulz_encode(const void *in, unsigned inlen, void *out, unsigned outlen, unsigned flags); 
unsigned ulz_decode(const void *in, unsigned inlen, void *out, unsigned outlen);
unsigned ulz_bounds(unsigned inlen, unsigned flags);
unsigned ulz_excess(unsigned flags);
unsigned deflate_encode(const void *in, unsigned inlen, void *out, unsigned outlen, unsigned flags); 
unsigned deflate_decode(const void *in, unsigned inlen, void *out, unsigned outlen);
unsigned deflatez_encode(const void *in, unsigned inlen, void *out, unsigned outlen, unsigned flags); 
unsigned deflatez_decode(const void *in, unsigned inlen, void *out, unsigned outlen);
unsigned deflate_bounds(unsigned inlen, unsigned flags);
unsigned deflate_excess(unsigned flags);
typedef struct dir dir;
dir *dir_open(const char *filename, const char *mode); 
    int dir_find(dir*, const char *entryname); 
    unsigned dir_count(dir*);
        char*    dir_name(dir*, unsigned index);
        unsigned dir_size(dir*, unsigned index);
        unsigned dir_file(dir*, unsigned index); 
        void*    dir_read(dir*, unsigned index); 
void dir_close(dir*);
typedef struct pak pak;
pak* pak_open(const char *fname, const char *mode );
    int pak_append_file(pak*, const char *filename, FILE *in);
    int pak_append_data(pak*, const char *filename, const void *in, unsigned inlen);
    int pak_find(pak*,const char *fname); 
    unsigned pak_count(pak*);
        unsigned pak_size(pak*,unsigned index);
        unsigned pak_offset(pak*, unsigned index);
        char *pak_name(pak*,unsigned index);
        void *pak_extract(pak*, unsigned index); 
void pak_close(pak*);
typedef struct tar tar;
tar *tar_open(const char *filename, const char *mode);
    int tar_find(tar*, const char *entryname); 
    unsigned tar_count(tar*);
        char*    tar_name(tar*, unsigned index);
        unsigned tar_size(tar*, unsigned index);
        unsigned tar_offset(tar*, unsigned index);
        void*    tar_extract(tar*, unsigned index); 
void tar_close(tar *t);
typedef struct zip zip;
zip* zip_open(const char *file, const char *mode );
zip* zip_open_handle(FILE*fp, const char *mode );
    bool zip_append_file(zip*, const char *entryname, const char *comment, FILE *in, unsigned compress_level);
    bool zip_append_file_timeinfo(zip*, const char *entryname, const char *comment, FILE *in, unsigned compress_level, struct tm *);
    bool zip_append_mem(zip*, const char *entryname, const char *comment, const void *in, unsigned inlen, unsigned compress_level);
    bool zip_append_mem_timeinfo(zip*, const char *entryname, const char *comment, const void *in, unsigned inlen, unsigned compress_level, struct tm *);
    int zip_find(zip*, const char *entryname); 
    unsigned zip_count(zip*);
        char*    zip_name(zip*, unsigned index);
        char*    zip_modt(zip*, unsigned index);
        unsigned zip_size(zip*, unsigned index);
        unsigned zip_hash(zip*, unsigned index);
        bool     zip_file(zip*, unsigned index); 
        bool     zip_test(zip*, unsigned index);
        char*    zip_comment(zip*, unsigned index);
        unsigned zip_codec(zip*, unsigned index);
        unsigned zip_offset(zip*, unsigned index);
        unsigned zip_excess(zip*, unsigned index);
        void*    zip_extract(zip*, unsigned index); 
        bool     zip_extract_file(zip*, unsigned index, FILE *out);
        unsigned zip_extract_inplace(zip*, unsigned index, void *out, unsigned outlen_with_excess);
void zip_close(zip*);
struct swrap_addr {
    char data[128]; 
};
extern int swrapInit();
extern int swrapSocket(int, int, char, const char*, const char*);
extern void swrapClose(int);
extern void swrapTerminate();
extern int swrapListen(int, int);
extern int swrapAccept(int, struct swrap_addr*);
extern int swrapAddress(int, struct swrap_addr*);
extern int swrapAddressInfo(struct swrap_addr*, char*, size_t, char*, size_t);
extern int swrapSend(int, const char*, size_t);
extern int swrapReceive(int, char*, size_t);
extern int swrapSendTo(int, struct swrap_addr*, const char*, size_t);
extern int swrapReceiveFrom(int, struct swrap_addr*, char*, size_t);
extern int swrapSelect(int, double);
extern int swrapMultiSelect(int*, size_t, double);
typedef struct lua_State lua_State;
typedef int (*lua_CFunction) (lua_State *L);
typedef const char * (*lua_Reader) (lua_State *L, void *ud, size_t *sz);
typedef int (*lua_Writer) (lua_State *L, const void* p, size_t sz, void* ud);
typedef void * (*lua_Alloc) (void *ud, void *ptr, size_t osize, size_t nsize);
typedef double lua_Number;
typedef ptrdiff_t lua_Integer;
extern lua_State *(lua_newstate) (lua_Alloc f, void *ud);
extern void       (lua_close) (lua_State *L);
extern lua_State *(lua_newthread) (lua_State *L);
extern lua_CFunction (lua_atpanic) (lua_State *L, lua_CFunction panicf);
extern int   (lua_gettop) (lua_State *L);
extern void  (lua_settop) (lua_State *L, int idx);
extern void  (lua_pushvalue) (lua_State *L, int idx);
extern void  (lua_remove) (lua_State *L, int idx);
extern void  (lua_insert) (lua_State *L, int idx);
extern void  (lua_replace) (lua_State *L, int idx);
extern int   (lua_checkstack) (lua_State *L, int sz);
extern void  (lua_xmove) (lua_State *from, lua_State *to, int n);
extern int             (lua_isnumber) (lua_State *L, int idx);
extern int             (lua_isstring) (lua_State *L, int idx);
extern int             (lua_iscfunction) (lua_State *L, int idx);
extern int             (lua_isuserdata) (lua_State *L, int idx);
extern int             (lua_type) (lua_State *L, int idx);
extern const char     *(lua_typename) (lua_State *L, int tp);
extern int            (lua_equal) (lua_State *L, int idx1, int idx2);
extern int            (lua_rawequal) (lua_State *L, int idx1, int idx2);
extern int            (lua_lessthan) (lua_State *L, int idx1, int idx2);
extern lua_Number      (lua_tonumber) (lua_State *L, int idx);
extern lua_Integer     (lua_tointeger) (lua_State *L, int idx);
extern int             (lua_toboolean) (lua_State *L, int idx);
extern const char     *(lua_tolstring) (lua_State *L, int idx, size_t *len);
extern size_t          (lua_objlen) (lua_State *L, int idx);
extern lua_CFunction   (lua_tocfunction) (lua_State *L, int idx);
extern void	       *(lua_touserdata) (lua_State *L, int idx);
extern lua_State      *(lua_tothread) (lua_State *L, int idx);
extern const void     *(lua_topointer) (lua_State *L, int idx);
extern void  (lua_pushnil) (lua_State *L);
extern void  (lua_pushnumber) (lua_State *L, lua_Number n);
extern void  (lua_pushinteger) (lua_State *L, lua_Integer n);
extern void  (lua_pushlstring) (lua_State *L, const char *s, size_t l);
extern void  (lua_pushstring) (lua_State *L, const char *s);
extern const char *(lua_pushvfstring) (lua_State *L, const char *fmt,
                                                      va_list argp);
extern const char *(lua_pushfstring) (lua_State *L, const char *fmt, ...);
extern void  (lua_pushcclosure) (lua_State *L, lua_CFunction fn, int n);
extern void  (lua_pushboolean) (lua_State *L, int b);
extern void  (lua_pushlightuserdata) (lua_State *L, void *p);
extern int   (lua_pushthread) (lua_State *L);
extern void  (lua_gettable) (lua_State *L, int idx);
extern void  (lua_getfield) (lua_State *L, int idx, const char *k);
extern void  (lua_rawget) (lua_State *L, int idx);
extern void  (lua_rawgeti) (lua_State *L, int idx, int n);
extern void  (lua_createtable) (lua_State *L, int narr, int nrec);
extern void *(lua_newuserdata) (lua_State *L, size_t sz);
extern int   (lua_getmetatable) (lua_State *L, int objindex);
extern void  (lua_getfenv) (lua_State *L, int idx);
extern void  (lua_settable) (lua_State *L, int idx);
extern void  (lua_setfield) (lua_State *L, int idx, const char *k);
extern void  (lua_rawset) (lua_State *L, int idx);
extern void  (lua_rawseti) (lua_State *L, int idx, int n);
extern int   (lua_setmetatable) (lua_State *L, int objindex);
extern int   (lua_setfenv) (lua_State *L, int idx);
extern void  (lua_call) (lua_State *L, int nargs, int nresults);
extern int   (lua_pcall) (lua_State *L, int nargs, int nresults, int errfunc);
extern int   (lua_cpcall) (lua_State *L, lua_CFunction func, void *ud);
extern int   (lua_load) (lua_State *L, lua_Reader reader, void *dt,
                                        const char *chunkname);
extern int (lua_dump) (lua_State *L, lua_Writer writer, void *data);
extern int  (lua_yield) (lua_State *L, int nresults);
extern int  (lua_resume) (lua_State *L, int narg);
extern int  (lua_status) (lua_State *L);
extern int (lua_gc) (lua_State *L, int what, int data);
extern int   (lua_error) (lua_State *L);
extern int   (lua_next) (lua_State *L, int idx);
extern void  (lua_concat) (lua_State *L, int n);
extern lua_Alloc (lua_getallocf) (lua_State *L, void **ud);
extern void lua_setallocf (lua_State *L, lua_Alloc f, void *ud);
extern void lua_setlevel	(lua_State *from, lua_State *to);
typedef struct lua_Debug lua_Debug;  
typedef void (*lua_Hook) (lua_State *L, lua_Debug *ar);
extern int lua_getstack (lua_State *L, int level, lua_Debug *ar);
extern int lua_getinfo (lua_State *L, const char *what, lua_Debug *ar);
extern const char *lua_getlocal (lua_State *L, const lua_Debug *ar, int n);
extern const char *lua_setlocal (lua_State *L, const lua_Debug *ar, int n);
extern const char *lua_getupvalue (lua_State *L, int funcindex, int n);
extern const char *lua_setupvalue (lua_State *L, int funcindex, int n);
extern int lua_sethook (lua_State *L, lua_Hook func, int mask, int count);
extern lua_Hook lua_gethook (lua_State *L);
extern int lua_gethookmask (lua_State *L);
extern int lua_gethookcount (lua_State *L);
extern void *lua_upvalueid (lua_State *L, int idx, int n);
extern void lua_upvaluejoin (lua_State *L, int idx1, int n1, int idx2, int n2);
extern int lua_loadx (lua_State *L, lua_Reader reader, void *dt,
		       const char *chunkname, const char *mode);
extern const lua_Number *lua_version (lua_State *L);
extern void lua_copy (lua_State *L, int fromidx, int toidx);
extern lua_Number lua_tonumberx (lua_State *L, int idx, int *isnum);
extern lua_Integer lua_tointegerx (lua_State *L, int idx, int *isnum);
extern int lua_isyieldable (lua_State *L);
struct lua_Debug {
  int event;
  const char *name;	
  const char *namewhat;	
  const char *what;	
  const char *source;	
  int currentline;	
  int nups;		
  int linedefined;	
  int lastlinedefined;	
  char short_src[60]; 
  int i_ci;  
};
typedef struct luaL_Reg {
  const char *name;
  lua_CFunction func;
} luaL_Reg;
extern void (luaL_openlib) (lua_State *L, const char *libname,
                                const luaL_Reg *l, int nup);
extern void (luaL_register) (lua_State *L, const char *libname,
                                const luaL_Reg *l);
extern int (luaL_getmetafield) (lua_State *L, int obj, const char *e);
extern int (luaL_callmeta) (lua_State *L, int obj, const char *e);
extern int (luaL_typerror) (lua_State *L, int narg, const char *tname);
extern int (luaL_argerror) (lua_State *L, int numarg, const char *extramsg);
extern const char *(luaL_checklstring) (lua_State *L, int numArg,
                                                          size_t *l);
extern const char *(luaL_optlstring) (lua_State *L, int numArg,
                                          const char *def, size_t *l);
extern lua_Number (luaL_checknumber) (lua_State *L, int numArg);
extern lua_Number (luaL_optnumber) (lua_State *L, int nArg, lua_Number def);
extern lua_Integer (luaL_checkinteger) (lua_State *L, int numArg);
extern lua_Integer (luaL_optinteger) (lua_State *L, int nArg,
                                          lua_Integer def);
extern void (luaL_checkstack) (lua_State *L, int sz, const char *msg);
extern void (luaL_checktype) (lua_State *L, int narg, int t);
extern void (luaL_checkany) (lua_State *L, int narg);
extern int   (luaL_newmetatable) (lua_State *L, const char *tname);
extern void *(luaL_checkudata) (lua_State *L, int ud, const char *tname);
extern void (luaL_where) (lua_State *L, int lvl);
extern int (luaL_error) (lua_State *L, const char *fmt, ...);
extern int (luaL_checkoption) (lua_State *L, int narg, const char *def,
                                   const char *const lst[]);
extern int (luaL_ref) (lua_State *L, int t);
extern void (luaL_unref) (lua_State *L, int t, int ref);
extern int (luaL_loadfile) (lua_State *L, const char *filename);
extern int (luaL_loadbuffer) (lua_State *L, const char *buff, size_t sz,
                                  const char *name);
extern int (luaL_loadstring) (lua_State *L, const char *s);
extern lua_State *(luaL_newstate) (void);
extern const char *(luaL_gsub) (lua_State *L, const char *s, const char *p,
                                                  const char *r);
extern const char *(luaL_findtable) (lua_State *L, int idx,
                                         const char *fname, int szhint);
extern int luaL_fileresult(lua_State *L, int stat, const char *fname);
extern int luaL_execresult(lua_State *L, int stat);
extern int (luaL_loadfilex) (lua_State *L, const char *filename,
				 const char *mode);
extern int (luaL_loadbufferx) (lua_State *L, const char *buff, size_t sz,
				   const char *name, const char *mode);
extern void luaL_traceback (lua_State *L, lua_State *L1, const char *msg,
				int level);
extern void (luaL_setfuncs) (lua_State *L, const luaL_Reg *l, int nup);
extern void (luaL_pushmodule) (lua_State *L, const char *modname,
				   int sizehint);
extern void *(luaL_testudata) (lua_State *L, int ud, const char *tname);
extern void (luaL_setmetatable) (lua_State *L, const char *tname);
typedef struct luaL_Buffer {
  char *p;			
  int lvl;  
  lua_State *L;
  char buffer[(512 > 16384 ? 8192 : 512)];
} luaL_Buffer;
extern void (luaL_buffinit) (lua_State *L, luaL_Buffer *B);
extern char *(luaL_prepbuffer) (luaL_Buffer *B);
extern void (luaL_addlstring) (luaL_Buffer *B, const char *s, size_t l);
extern void (luaL_addstring) (luaL_Buffer *B, const char *s);
extern void (luaL_addvalue) (luaL_Buffer *B);
extern void (luaL_pushresult) (luaL_Buffer *B);
extern int luaopen_base(lua_State *L);
extern int luaopen_math(lua_State *L);
extern int luaopen_string(lua_State *L);
extern int luaopen_table(lua_State *L);
extern int luaopen_io(lua_State *L);
extern int luaopen_os(lua_State *L);
extern int luaopen_package(lua_State *L);
extern int luaopen_debug(lua_State *L);
extern int luaopen_bit(lua_State *L);
extern int luaopen_jit(lua_State *L);
extern int luaopen_ffi(lua_State *L);
extern int luaopen_string_buffer(lua_State *L);
extern void luaL_openlibs(lua_State *L);
bool igKnob(const char *label, float *value, int steps);
void igTextWithHoverColor(ImU32 col, ImVec2 indents, const char* text);
 int igFileDialogOpen(const char *window_name, const char *info, const char *exts);
 int igFileDialogOpen1(const char *window_name, const char *info, const char *exts);
 int igFileDialogSave(const char *window_name, const char *info, const char *exts);
char **igFileDialogResults(const char *window_name, int *count);
void igFileDialogDemo();
void igNodeFlowDemo();
void igSequencerDemo();
void igGuizmoDemo();
void igInsertNotification(char type, const char *title, const char *message, float timeout);
void igShowImPlotDemoWindow(bool* p_open);
int igCurrentWindowStackSize(void);
    typedef SOCKET ENetSocket;
    typedef struct {
        size_t dataLength;
        void * data;
    } ENetBuffer;
    typedef fd_set ENetSocketSet;
    typedef uint8_t   enet_uint8;   
    typedef uint16_t enet_uint16;   
    typedef uint32_t enet_uint32;   
    typedef uint64_t enet_uint64;   
    typedef enet_uint32 ENetVersion;
    typedef struct _ENetPacket ENetPacket;
    typedef struct _ENetCallbacks {
        void *(__cdecl *malloc) (size_t size);
        void (__cdecl *free) (void *memory);
        void (__cdecl *no_memory) (void);
        ENetPacket *(__cdecl *packet_create)        (const void *data, size_t dataLength, enet_uint32 flags);
        void        (__cdecl *packet_destroy)       (ENetPacket *packet);
    } ENetCallbacks;
    extern void *enet_malloc(size_t);
    extern void enet_free(void *);
    extern ENetPacket* enet_packet_create(const void*,size_t,enet_uint32);
    extern int enet_packet_resize(ENetPacket*, size_t);
    extern ENetPacket* enet_packet_copy(ENetPacket*);
    extern void enet_packet_destroy(ENetPacket*);
    typedef struct _ENetListNode {
        struct _ENetListNode *next;
        struct _ENetListNode *previous;
    } ENetListNode;
    typedef ENetListNode *ENetListIterator;
    typedef struct _ENetList {
        ENetListNode sentinel;
    } ENetList;
    extern ENetListIterator enet_list_insert(ENetListIterator, void *);
    extern ENetListIterator enet_list_move(ENetListIterator, void *, void *);
    extern void *enet_list_remove(ENetListIterator);
    extern void enet_list_clear(ENetList *);
    extern size_t enet_list_size(ENetList *);
    enum {
        ENET_PROTOCOL_MINIMUM_MTU             = 576,
        ENET_PROTOCOL_MAXIMUM_MTU             = 4096,
        ENET_PROTOCOL_MAXIMUM_PACKET_COMMANDS = 32,
        ENET_PROTOCOL_MINIMUM_WINDOW_SIZE     = 4096,
        ENET_PROTOCOL_MAXIMUM_WINDOW_SIZE     = 65536,
        ENET_PROTOCOL_MINIMUM_CHANNEL_COUNT   = 1,
        ENET_PROTOCOL_MAXIMUM_CHANNEL_COUNT   = 255,
        ENET_PROTOCOL_MAXIMUM_PEER_ID         = 0xFFF,
        ENET_PROTOCOL_MAXIMUM_FRAGMENT_COUNT  = 1024 * 1024
    };
    typedef enum _ENetProtocolCommand {
        ENET_PROTOCOL_COMMAND_NONE                     = 0,
        ENET_PROTOCOL_COMMAND_ACKNOWLEDGE              = 1,
        ENET_PROTOCOL_COMMAND_CONNECT                  = 2,
        ENET_PROTOCOL_COMMAND_VERIFY_CONNECT           = 3,
        ENET_PROTOCOL_COMMAND_DISCONNECT               = 4,
        ENET_PROTOCOL_COMMAND_PING                     = 5,
        ENET_PROTOCOL_COMMAND_SEND_RELIABLE            = 6,
        ENET_PROTOCOL_COMMAND_SEND_UNRELIABLE          = 7,
        ENET_PROTOCOL_COMMAND_SEND_FRAGMENT            = 8,
        ENET_PROTOCOL_COMMAND_SEND_UNSEQUENCED         = 9,
        ENET_PROTOCOL_COMMAND_BANDWIDTH_LIMIT          = 10,
        ENET_PROTOCOL_COMMAND_THROTTLE_CONFIGURE       = 11,
        ENET_PROTOCOL_COMMAND_SEND_UNRELIABLE_FRAGMENT = 12,
        ENET_PROTOCOL_COMMAND_COUNT                    = 13,
        ENET_PROTOCOL_COMMAND_MASK                     = 0x0F
    } ENetProtocolCommand;
    typedef enum _ENetProtocolFlag {
        ENET_PROTOCOL_COMMAND_FLAG_ACKNOWLEDGE = (1 << 7),
        ENET_PROTOCOL_COMMAND_FLAG_UNSEQUENCED = (1 << 6),
        ENET_PROTOCOL_HEADER_FLAG_COMPRESSED   = (1 << 14),
        ENET_PROTOCOL_HEADER_FLAG_SENT_TIME    = (1 << 15),
        ENET_PROTOCOL_HEADER_FLAG_MASK         = ENET_PROTOCOL_HEADER_FLAG_COMPRESSED | ENET_PROTOCOL_HEADER_FLAG_SENT_TIME,
        ENET_PROTOCOL_HEADER_SESSION_MASK      = (3 << 12),
        ENET_PROTOCOL_HEADER_SESSION_SHIFT     = 12
    } ENetProtocolFlag;
    #pragma pack(push, 1)
    typedef struct _ENetProtocolHeader {
        enet_uint16 peerID;
        enet_uint16 sentTime;
    }  ENetProtocolHeader;
    typedef struct _ENetProtocolCommandHeader {
        enet_uint8  command;
        enet_uint8  channelID;
        enet_uint16 reliableSequenceNumber;
    }  ENetProtocolCommandHeader;
    typedef struct _ENetProtocolAcknowledge {
        ENetProtocolCommandHeader header;
        enet_uint16               receivedReliableSequenceNumber;
        enet_uint16               receivedSentTime;
    }  ENetProtocolAcknowledge;
    typedef struct _ENetProtocolConnect {
        ENetProtocolCommandHeader header;
        enet_uint16               outgoingPeerID;
        enet_uint8                incomingSessionID;
        enet_uint8                outgoingSessionID;
        enet_uint32               mtu;
        enet_uint32               windowSize;
        enet_uint32               channelCount;
        enet_uint32               incomingBandwidth;
        enet_uint32               outgoingBandwidth;
        enet_uint32               packetThrottleInterval;
        enet_uint32               packetThrottleAcceleration;
        enet_uint32               packetThrottleDeceleration;
        enet_uint32               connectID;
        enet_uint32               data;
    }  ENetProtocolConnect;
    typedef struct _ENetProtocolVerifyConnect {
        ENetProtocolCommandHeader header;
        enet_uint16               outgoingPeerID;
        enet_uint8                incomingSessionID;
        enet_uint8                outgoingSessionID;
        enet_uint32               mtu;
        enet_uint32               windowSize;
        enet_uint32               channelCount;
        enet_uint32               incomingBandwidth;
        enet_uint32               outgoingBandwidth;
        enet_uint32               packetThrottleInterval;
        enet_uint32               packetThrottleAcceleration;
        enet_uint32               packetThrottleDeceleration;
        enet_uint32               connectID;
    }  ENetProtocolVerifyConnect;
    typedef struct _ENetProtocolBandwidthLimit {
        ENetProtocolCommandHeader header;
        enet_uint32               incomingBandwidth;
        enet_uint32               outgoingBandwidth;
    }  ENetProtocolBandwidthLimit;
    typedef struct _ENetProtocolThrottleConfigure {
        ENetProtocolCommandHeader header;
        enet_uint32               packetThrottleInterval;
        enet_uint32               packetThrottleAcceleration;
        enet_uint32               packetThrottleDeceleration;
    }  ENetProtocolThrottleConfigure;
    typedef struct _ENetProtocolDisconnect {
        ENetProtocolCommandHeader header;
        enet_uint32               data;
    }  ENetProtocolDisconnect;
    typedef struct _ENetProtocolPing {
        ENetProtocolCommandHeader header;
    }  ENetProtocolPing;
    typedef struct _ENetProtocolSendReliable {
        ENetProtocolCommandHeader header;
        enet_uint16               dataLength;
    }  ENetProtocolSendReliable;
    typedef struct _ENetProtocolSendUnreliable {
        ENetProtocolCommandHeader header;
        enet_uint16               unreliableSequenceNumber;
        enet_uint16               dataLength;
    }  ENetProtocolSendUnreliable;
    typedef struct _ENetProtocolSendUnsequenced {
        ENetProtocolCommandHeader header;
        enet_uint16               unsequencedGroup;
        enet_uint16               dataLength;
    }  ENetProtocolSendUnsequenced;
    typedef struct _ENetProtocolSendFragment {
        ENetProtocolCommandHeader header;
        enet_uint16               startSequenceNumber;
        enet_uint16               dataLength;
        enet_uint32               fragmentCount;
        enet_uint32               fragmentNumber;
        enet_uint32               totalLength;
        enet_uint32               fragmentOffset;
    }  ENetProtocolSendFragment;
    typedef union _ENetProtocol {
        ENetProtocolCommandHeader     header;
        ENetProtocolAcknowledge       acknowledge;
        ENetProtocolConnect           connect;
        ENetProtocolVerifyConnect     verifyConnect;
        ENetProtocolDisconnect        disconnect;
        ENetProtocolPing              ping;
        ENetProtocolSendReliable      sendReliable;
        ENetProtocolSendUnreliable    sendUnreliable;
        ENetProtocolSendUnsequenced   sendUnsequenced;
        ENetProtocolSendFragment      sendFragment;
        ENetProtocolBandwidthLimit    bandwidthLimit;
        ENetProtocolThrottleConfigure throttleConfigure;
    }  ENetProtocol;
    #pragma pack(pop)
    typedef enum _ENetSocketType {
        ENET_SOCKET_TYPE_STREAM   = 1,
        ENET_SOCKET_TYPE_DATAGRAM = 2
    } ENetSocketType;
    typedef enum _ENetSocketWait {
        ENET_SOCKET_WAIT_NONE      = 0,
        ENET_SOCKET_WAIT_SEND      = (1 << 0),
        ENET_SOCKET_WAIT_RECEIVE   = (1 << 1),
        ENET_SOCKET_WAIT_INTERRUPT = (1 << 2)
    } ENetSocketWait;
    typedef enum _ENetSocketOption {
        ENET_SOCKOPT_NONBLOCK  = 1,
        ENET_SOCKOPT_BROADCAST = 2,
        ENET_SOCKOPT_RCVBUF    = 3,
        ENET_SOCKOPT_SNDBUF    = 4,
        ENET_SOCKOPT_REUSEADDR = 5,
        ENET_SOCKOPT_RCVTIMEO  = 6,
        ENET_SOCKOPT_SNDTIMEO  = 7,
        ENET_SOCKOPT_ERROR     = 8,
        ENET_SOCKOPT_NODELAY   = 9,
        ENET_SOCKOPT_IPV6_V6ONLY = 10,
    } ENetSocketOption;
    typedef enum _ENetSocketShutdown {
        ENET_SOCKET_SHUTDOWN_READ       = 0,
        ENET_SOCKET_SHUTDOWN_WRITE      = 1,
        ENET_SOCKET_SHUTDOWN_READ_WRITE = 2
    } ENetSocketShutdown;
    typedef struct _ENetAddress {
        struct in6_addr host;
        enet_uint16 port;
        enet_uint16 sin6_scope_id;
    } ENetAddress;
    typedef enum _ENetPacketFlag {
        ENET_PACKET_FLAG_RELIABLE            = (1 << 0), 
        ENET_PACKET_FLAG_UNSEQUENCED         = (1 << 1), 
        ENET_PACKET_FLAG_NO_ALLOCATE         = (1 << 2), 
        ENET_PACKET_FLAG_UNRELIABLE_FRAGMENT = (1 << 3), 
        ENET_PACKET_FLAG_SENT                = (1 << 8), 
    } ENetPacketFlag;
    typedef void (__cdecl *ENetPacketFreeCallback)(void *);
    typedef struct _ENetPacket {
        size_t                 referenceCount; 
        enet_uint32            flags;          
        enet_uint8 *           data;           
        size_t                 dataLength;     
        ENetPacketFreeCallback freeCallback;   
        void *                 userData;       
    } ENetPacket;
    typedef struct _ENetAcknowledgement {
        ENetListNode acknowledgementList;
        enet_uint32  sentTime;
        ENetProtocol command;
    } ENetAcknowledgement;
    typedef struct _ENetOutgoingCommand {
        ENetListNode outgoingCommandList;
        enet_uint16  reliableSequenceNumber;
        enet_uint16  unreliableSequenceNumber;
        enet_uint32  sentTime;
        enet_uint32  roundTripTimeout;
        enet_uint32  roundTripTimeoutLimit;
        enet_uint32  fragmentOffset;
        enet_uint16  fragmentLength;
        enet_uint16  sendAttempts;
        ENetProtocol command;
        ENetPacket * packet;
    } ENetOutgoingCommand;
    typedef struct _ENetIncomingCommand {
        ENetListNode incomingCommandList;
        enet_uint16  reliableSequenceNumber;
        enet_uint16  unreliableSequenceNumber;
        ENetProtocol command;
        enet_uint32  fragmentCount;
        enet_uint32  fragmentsRemaining;
        enet_uint32 *fragments;
        ENetPacket * packet;
    } ENetIncomingCommand;
    typedef enum _ENetPeerState {
        ENET_PEER_STATE_DISCONNECTED             = 0,
        ENET_PEER_STATE_CONNECTING               = 1,
        ENET_PEER_STATE_ACKNOWLEDGING_CONNECT    = 2,
        ENET_PEER_STATE_CONNECTION_PENDING       = 3,
        ENET_PEER_STATE_CONNECTION_SUCCEEDED     = 4,
        ENET_PEER_STATE_CONNECTED                = 5,
        ENET_PEER_STATE_DISCONNECT_LATER         = 6,
        ENET_PEER_STATE_DISCONNECTING            = 7,
        ENET_PEER_STATE_ACKNOWLEDGING_DISCONNECT = 8,
        ENET_PEER_STATE_ZOMBIE                   = 9
    } ENetPeerState;
    enum {
        ENET_HOST_RECEIVE_BUFFER_SIZE          = 256 * 1024,
        ENET_HOST_SEND_BUFFER_SIZE             = 256 * 1024,
        ENET_HOST_BANDWIDTH_THROTTLE_INTERVAL  = 1000,
        ENET_HOST_DEFAULT_MTU                  = 1392,
        ENET_HOST_DEFAULT_MAXIMUM_PACKET_SIZE  = 32 * 1024 * 1024,
        ENET_HOST_DEFAULT_MAXIMUM_WAITING_DATA = 32 * 1024 * 1024,
        ENET_PEER_DEFAULT_ROUND_TRIP_TIME      = 500,
        ENET_PEER_DEFAULT_PACKET_THROTTLE      = 32,
        ENET_PEER_PACKET_THROTTLE_SCALE        = 32,
        ENET_PEER_PACKET_THROTTLE_COUNTER      = 7,
        ENET_PEER_PACKET_THROTTLE_ACCELERATION = 2,
        ENET_PEER_PACKET_THROTTLE_DECELERATION = 2,
        ENET_PEER_PACKET_THROTTLE_INTERVAL     = 5000,
        ENET_PEER_PACKET_LOSS_SCALE            = (1 << 16),
        ENET_PEER_PACKET_LOSS_INTERVAL         = 10000,
        ENET_PEER_WINDOW_SIZE_SCALE            = 64 * 1024,
        ENET_PEER_TIMEOUT_LIMIT                = 32,
        ENET_PEER_TIMEOUT_MINIMUM              = 5000,
        ENET_PEER_TIMEOUT_MAXIMUM              = 30000,
        ENET_PEER_PING_INTERVAL                = 500,
        ENET_PEER_UNSEQUENCED_WINDOWS          = 64,
        ENET_PEER_UNSEQUENCED_WINDOW_SIZE      = 1024,
        ENET_PEER_FREE_UNSEQUENCED_WINDOWS     = 32,
        ENET_PEER_RELIABLE_WINDOWS             = 16,
        ENET_PEER_RELIABLE_WINDOW_SIZE         = 0x1000,
        ENET_PEER_FREE_RELIABLE_WINDOWS        = 8
    };
    typedef struct _ENetChannel {
        enet_uint16 outgoingReliableSequenceNumber;
        enet_uint16 outgoingUnreliableSequenceNumber;
        enet_uint16 usedReliableWindows;
        enet_uint16 reliableWindows[ENET_PEER_RELIABLE_WINDOWS];
        enet_uint16 incomingReliableSequenceNumber;
        enet_uint16 incomingUnreliableSequenceNumber;
        ENetList    incomingReliableCommands;
        ENetList    incomingUnreliableCommands;
    } ENetChannel;
    typedef struct _ENetPeer {
        ENetListNode      dispatchList;
        struct _ENetHost *host;
        enet_uint16       outgoingPeerID;
        enet_uint16       incomingPeerID;
        enet_uint32       connectID;
        enet_uint8        outgoingSessionID;
        enet_uint8        incomingSessionID;
        ENetAddress       address; 
        void *            data;    
        ENetPeerState     state;
        ENetChannel *     channels;
        size_t            channelCount;      
        enet_uint32       incomingBandwidth; 
        enet_uint32       outgoingBandwidth; 
        enet_uint32       incomingBandwidthThrottleEpoch;
        enet_uint32       outgoingBandwidthThrottleEpoch;
        enet_uint32       incomingDataTotal;
        enet_uint64       totalDataReceived;
        enet_uint32       outgoingDataTotal;
        enet_uint64       totalDataSent;
        enet_uint32       lastSendTime;
        enet_uint32       lastReceiveTime;
        enet_uint32       nextTimeout;
        enet_uint32       earliestTimeout;
        enet_uint32       packetLossEpoch;
        enet_uint32       packetsSent;
        enet_uint64       totalPacketsSent; 
        enet_uint32       packetsLost;
        enet_uint32       totalPacketsLost;     
        enet_uint32       packetLoss; 
        enet_uint32       packetLossVariance;
        enet_uint32       packetThrottle;
        enet_uint32       packetThrottleLimit;
        enet_uint32       packetThrottleCounter;
        enet_uint32       packetThrottleEpoch;
        enet_uint32       packetThrottleAcceleration;
        enet_uint32       packetThrottleDeceleration;
        enet_uint32       packetThrottleInterval;
        enet_uint32       pingInterval;
        enet_uint32       timeoutLimit;
        enet_uint32       timeoutMinimum;
        enet_uint32       timeoutMaximum;
        enet_uint32       lastRoundTripTime;
        enet_uint32       lowestRoundTripTime;
        enet_uint32       lastRoundTripTimeVariance;
        enet_uint32       highestRoundTripTimeVariance;
        enet_uint32       roundTripTime; 
        enet_uint32       roundTripTimeVariance;
        enet_uint32       mtu;
        enet_uint32       windowSize;
        enet_uint32       reliableDataInTransit;
        enet_uint16       outgoingReliableSequenceNumber;
        ENetList          acknowledgements;
        ENetList          sentReliableCommands;
        ENetList          sentUnreliableCommands;
        ENetList          outgoingReliableCommands;
        ENetList          outgoingUnreliableCommands;
        ENetList          dispatchedCommands;
        int               needsDispatch;
        enet_uint16       incomingUnsequencedGroup;
        enet_uint16       outgoingUnsequencedGroup;
        enet_uint32       unsequencedWindow[ENET_PEER_UNSEQUENCED_WINDOW_SIZE / 32];
        enet_uint32       eventData;
        size_t            totalWaitingData;
    } ENetPeer;
    typedef struct _ENetCompressor {
        void *context;
        size_t(__cdecl * compress) (void *context, const ENetBuffer * inBuffers, size_t inBufferCount, size_t inLimit, enet_uint8 * outData, size_t outLimit);
        size_t(__cdecl * decompress) (void *context, const enet_uint8 * inData, size_t inLimit, enet_uint8 * outData, size_t outLimit);
        void (__cdecl * destroy)(void *context);
    } ENetCompressor;
    typedef enet_uint32 (__cdecl * ENetChecksumCallback)(const ENetBuffer *buffers, size_t bufferCount);
    typedef int (__cdecl * ENetInterceptCallback)(struct _ENetHost *host, void *event);
    typedef struct _ENetHost {
        ENetSocket            socket;
        ENetAddress           address;           
        enet_uint32           incomingBandwidth; 
        enet_uint32           outgoingBandwidth; 
        enet_uint32           bandwidthThrottleEpoch;
        enet_uint32           mtu;
        enet_uint32           randomSeed;
        int                   recalculateBandwidthLimits;
        ENetPeer *            peers;        
        size_t                peerCount;    
        size_t                channelLimit; 
        enet_uint32           serviceTime;
        ENetList              dispatchQueue;
        int                   continueSending;
        size_t                packetSize;
        enet_uint16           headerFlags;
        ENetProtocol          commands[ENET_PROTOCOL_MAXIMUM_PACKET_COMMANDS];
        size_t                commandCount;
        ENetBuffer            buffers[(1 + 2 * ENET_PROTOCOL_MAXIMUM_PACKET_COMMANDS)];
        size_t                bufferCount;
        ENetChecksumCallback  checksum; 
        ENetCompressor        compressor;
        enet_uint8            packetData[2][ENET_PROTOCOL_MAXIMUM_MTU];
        ENetAddress           receivedAddress;
        enet_uint8 *          receivedData;
        size_t                receivedDataLength;
        enet_uint32           totalSentData;        
        enet_uint32           totalSentPackets;     
        enet_uint32           totalReceivedData;    
        enet_uint32           totalReceivedPackets; 
        ENetInterceptCallback intercept;            
        size_t                connectedPeers;
        size_t                bandwidthLimitedPeers;
        size_t                duplicatePeers;     
        size_t                maximumPacketSize;  
        size_t                maximumWaitingData; 
    } ENetHost;
    typedef enum _ENetEventType {
        ENET_EVENT_TYPE_NONE       = 0,
        ENET_EVENT_TYPE_CONNECT    = 1,
        ENET_EVENT_TYPE_DISCONNECT = 2,
        ENET_EVENT_TYPE_RECEIVE    = 3,
        ENET_EVENT_TYPE_DISCONNECT_TIMEOUT = 4,
    } ENetEventType;
    typedef struct _ENetEvent {
        ENetEventType type;      
        ENetPeer *    peer;      
        enet_uint8    channelID; 
        enet_uint32   data;      
        ENetPacket *  packet;    
    } ENetEvent;
    extern int enet_initialize(void);
    extern int enet_initialize_with_callbacks(ENetVersion version, const ENetCallbacks * inits);
    extern void enet_deinitialize(void);
    extern ENetVersion enet_linked_version(void);
    extern enet_uint32 enet_time_get(void);
    extern ENetSocket enet_socket_create(ENetSocketType);
    extern int        enet_socket_bind(ENetSocket, const ENetAddress *);
    extern int        enet_socket_get_address(ENetSocket, ENetAddress *);
    extern int        enet_socket_listen(ENetSocket, int);
    extern ENetSocket enet_socket_accept(ENetSocket, ENetAddress *);
    extern int        enet_socket_connect(ENetSocket, const ENetAddress *);
    extern int        enet_socket_send(ENetSocket, const ENetAddress *, const ENetBuffer *, size_t);
    extern int        enet_socket_receive(ENetSocket, ENetAddress *, ENetBuffer *, size_t);
    extern int        enet_socket_wait(ENetSocket, enet_uint32 *, enet_uint64);
    extern int        enet_socket_set_option(ENetSocket, ENetSocketOption, int);
    extern int        enet_socket_get_option(ENetSocket, ENetSocketOption, int *);
    extern int        enet_socket_shutdown(ENetSocket, ENetSocketShutdown);
    extern void       enet_socket_destroy(ENetSocket);
    extern int        enet_socketset_select(ENetSocket, ENetSocketSet *, ENetSocketSet *, enet_uint32);
    extern int enet_address_set_host_ip_old(ENetAddress * address, const char * hostName);
    extern int enet_address_set_host_old(ENetAddress * address, const char * hostName);
    extern int enet_address_get_host_ip_old(const ENetAddress * address, char * hostName, size_t nameLength);
    extern int enet_address_get_host_old(const ENetAddress * address, char * hostName, size_t nameLength);
    extern int enet_address_set_host_ip_new(ENetAddress * address, const char * hostName);
    extern int enet_address_set_host_new(ENetAddress * address, const char * hostName);
    extern int enet_address_get_host_ip_new(const ENetAddress * address, char * hostName, size_t nameLength);
    extern int enet_address_get_host_new(const ENetAddress * address, char * hostName, size_t nameLength);
    extern enet_uint32 enet_host_get_peers_count(ENetHost *);
    extern enet_uint32 enet_host_get_packets_sent(ENetHost *);
    extern enet_uint32 enet_host_get_packets_received(ENetHost *);
    extern enet_uint32 enet_host_get_bytes_sent(ENetHost *);
    extern enet_uint32 enet_host_get_bytes_received(ENetHost *);
    extern enet_uint32 enet_host_get_received_data(ENetHost *, enet_uint8** data);
    extern enet_uint32 enet_host_get_mtu(ENetHost *);
    extern enet_uint32 enet_peer_get_id(ENetPeer *);
    extern enet_uint32 enet_peer_get_ip(ENetPeer *, char * ip, size_t ipLength);
    extern enet_uint16 enet_peer_get_port(ENetPeer *);
    extern enet_uint32 enet_peer_get_rtt(ENetPeer *);
    extern enet_uint64 enet_peer_get_packets_sent(ENetPeer *);
    extern enet_uint32 enet_peer_get_packets_lost(ENetPeer *);
    extern enet_uint64 enet_peer_get_bytes_sent(ENetPeer *);
    extern enet_uint64 enet_peer_get_bytes_received(ENetPeer *);
    extern ENetPeerState enet_peer_get_state(ENetPeer *);
    extern void * enet_peer_get_data(ENetPeer *);
    extern void   enet_peer_set_data(ENetPeer *, const void *);
    extern void *      enet_packet_get_data(ENetPacket *);
    extern enet_uint32 enet_packet_get_length(ENetPacket *);
    extern void        enet_packet_set_free_callback(ENetPacket *, void *);
    extern ENetPacket * enet_packet_create_offset(const void *, size_t, size_t, enet_uint32);
    extern enet_uint32  enet_crc32(const ENetBuffer *, size_t);
    extern ENetHost * enet_host_create(const ENetAddress *, size_t, size_t, enet_uint32, enet_uint32);
    extern void       enet_host_destroy(ENetHost *);
    extern ENetPeer * enet_host_connect(ENetHost *, const ENetAddress *, size_t, enet_uint32);
    extern int        enet_host_check_events(ENetHost *, ENetEvent *);
    extern int        enet_host_service(ENetHost *, ENetEvent *, enet_uint32);
    extern int        enet_host_send_raw(ENetHost *, const ENetAddress *, enet_uint8 *, size_t);
    extern int        enet_host_send_raw_ex(ENetHost *host, const ENetAddress* address, enet_uint8* data, size_t skipBytes, size_t bytesToSend);
    extern void       enet_host_set_intercept(ENetHost *, const ENetInterceptCallback);
    extern void       enet_host_flush(ENetHost *);
    extern void       enet_host_broadcast(ENetHost *, enet_uint8, ENetPacket *);
    extern void       enet_host_compress(ENetHost *, const ENetCompressor *);
    extern void       enet_host_channel_limit(ENetHost *, size_t);
    extern void       enet_host_bandwidth_limit(ENetHost *, enet_uint32, enet_uint32);
    extern   void       enet_host_bandwidth_throttle(ENetHost *);
    extern  enet_uint64 enet_host_random_seed(void);
    extern int                 enet_peer_send(ENetPeer *, enet_uint8, ENetPacket *);
    extern ENetPacket *        enet_peer_receive(ENetPeer *, enet_uint8 * channelID);
    extern void                enet_peer_ping(ENetPeer *);
    extern void                enet_peer_ping_interval(ENetPeer *, enet_uint32);
    extern void                enet_peer_timeout(ENetPeer *, enet_uint32, enet_uint32, enet_uint32);
    extern void                enet_peer_reset(ENetPeer *);
    extern void                enet_peer_disconnect(ENetPeer *, enet_uint32);
    extern void                enet_peer_disconnect_now(ENetPeer *, enet_uint32);
    extern void                enet_peer_disconnect_later(ENetPeer *, enet_uint32);
    extern void                enet_peer_throttle_configure(ENetPeer *, enet_uint32, enet_uint32, enet_uint32);
    extern int                   enet_peer_throttle(ENetPeer *, enet_uint32);
    extern void                  enet_peer_reset_queues(ENetPeer *);
    extern void                  enet_peer_setup_outgoing_command(ENetPeer *, ENetOutgoingCommand *);
    extern ENetOutgoingCommand * enet_peer_queue_outgoing_command(ENetPeer *, const ENetProtocol *, ENetPacket *, enet_uint32, enet_uint16);
    extern ENetIncomingCommand * enet_peer_queue_incoming_command(ENetPeer *, const ENetProtocol *, const void *, size_t, enet_uint32, enet_uint32);
    extern ENetAcknowledgement * enet_peer_queue_acknowledgement(ENetPeer *, const ENetProtocol *, enet_uint16);
    extern void                  enet_peer_dispatch_incoming_unreliable_commands(ENetPeer *, ENetChannel *);
    extern void                  enet_peer_dispatch_incoming_reliable_commands(ENetPeer *, ENetChannel *);
    extern void                  enet_peer_on_connect(ENetPeer *);
    extern void                  enet_peer_on_disconnect(ENetPeer *);
    extern size_t enet_protocol_command_size (enet_uint8);
typedef struct guiskin_t {
    void (*drawrect)(void* userdata, const char *skin, const char *fallback, vec4 rect);
    void (*getskinsize)(void* userdata, const char *skin, const char *fallback, vec2 *size);
    void (*getskincolor)(void* userdata, const char *skin, const char *fallback, unsigned *color);
    void (*getscissorrect)(void* userdata, const char *skin, const char *fallback, vec4 rect, vec4 *dims);
    bool (*ismouseinrect)(void* userdata, const char *skin, const char *fallback, vec4 rect);
    void (*free)(void* userdata);
    void *userdata;
} guiskin_t;
 void    gui_pushskin(guiskin_t skin);
 void*       gui_userdata();
 vec2 gui_getskinsize(const char *skin, const char *fallback);
 unsigned    gui_getskincolor(const char *skin, const char *fallback);
 bool        gui_ismouseinrect(const char *skin, const char *fallback, vec4 rect);
 vec4 gui_getscissorrect(const char *skin, const char *fallback, vec4 rect);
 void        gui_panel_id(int id, vec4 rect, const char *skin);
 void            gui_rect_id(int id, vec4 rect, const char *skin);
 void            gui_label_id(int id, const char *skin, const char *text, vec4 rect);
 bool            gui_button_id(int id, vec4 rect, const char *skin);
 bool            gui_button_label_id(int id, const char *text, vec4 rect, const char *skin);
 bool            gui_slider_id(int id, vec4 rect, const char *skin, float min, float max, float step, float *value);
 bool            gui_slider_label_id(int id, const char *text, vec4 rect, const char *skin, float min, float max, float step, float *value);
 void        gui_panel_end();
 void    gui_popskin();
typedef struct skinned_t {
    atlas_t atlas;
    float scale;
} skinned_t;
 guiskin_t gui_skinned(const char *asefile, float scale);
typedef char ALboolean;
typedef char ALchar;
typedef signed char ALbyte;
typedef unsigned char ALubyte;
typedef short ALshort;
typedef unsigned short ALushort;
typedef int ALint;
typedef unsigned int ALuint;
typedef int ALsizei;
typedef int ALenum;
typedef float ALfloat;
typedef double ALdouble;
typedef void ALvoid;
__declspec(dllimport) void __cdecl alEnable(ALenum capability);
__declspec(dllimport) void __cdecl alDisable(ALenum capability);
__declspec(dllimport) ALboolean __cdecl alIsEnabled(ALenum capability);
__declspec(dllimport) void __cdecl alDopplerFactor(ALfloat value);
__declspec(dllimport) void __cdecl alDopplerVelocity(ALfloat value);
__declspec(dllimport) void __cdecl alSpeedOfSound(ALfloat value);
__declspec(dllimport) void __cdecl alDistanceModel(ALenum distanceModel);
__declspec(dllimport) const ALchar* __cdecl alGetString(ALenum param);
__declspec(dllimport) void __cdecl alGetBooleanv(ALenum param, ALboolean *values);
__declspec(dllimport) void __cdecl alGetIntegerv(ALenum param, ALint *values);
__declspec(dllimport) void __cdecl alGetFloatv(ALenum param, ALfloat *values);
__declspec(dllimport) void __cdecl alGetDoublev(ALenum param, ALdouble *values);
__declspec(dllimport) ALboolean __cdecl alGetBoolean(ALenum param);
__declspec(dllimport) ALint __cdecl alGetInteger(ALenum param);
__declspec(dllimport) ALfloat __cdecl alGetFloat(ALenum param);
__declspec(dllimport) ALdouble __cdecl alGetDouble(ALenum param);
__declspec(dllimport) ALenum __cdecl alGetError(void);
__declspec(dllimport) ALboolean __cdecl alIsExtensionPresent(const ALchar *extname);
__declspec(dllimport) void* __cdecl alGetProcAddress(const ALchar *fname);
__declspec(dllimport) ALenum __cdecl alGetEnumValue(const ALchar *ename);
__declspec(dllimport) void __cdecl alListenerf(ALenum param, ALfloat value);
__declspec(dllimport) void __cdecl alListener3f(ALenum param, ALfloat value1, ALfloat value2, ALfloat value3);
__declspec(dllimport) void __cdecl alListenerfv(ALenum param, const ALfloat *values);
__declspec(dllimport) void __cdecl alListeneri(ALenum param, ALint value);
__declspec(dllimport) void __cdecl alListener3i(ALenum param, ALint value1, ALint value2, ALint value3);
__declspec(dllimport) void __cdecl alListeneriv(ALenum param, const ALint *values);
__declspec(dllimport) void __cdecl alGetListenerf(ALenum param, ALfloat *value);
__declspec(dllimport) void __cdecl alGetListener3f(ALenum param, ALfloat *value1, ALfloat *value2, ALfloat *value3);
__declspec(dllimport) void __cdecl alGetListenerfv(ALenum param, ALfloat *values);
__declspec(dllimport) void __cdecl alGetListeneri(ALenum param, ALint *value);
__declspec(dllimport) void __cdecl alGetListener3i(ALenum param, ALint *value1, ALint *value2, ALint *value3);
__declspec(dllimport) void __cdecl alGetListeneriv(ALenum param, ALint *values);
__declspec(dllimport) void __cdecl alGenSources(ALsizei n, ALuint *sources);
__declspec(dllimport) void __cdecl alDeleteSources(ALsizei n, const ALuint *sources);
__declspec(dllimport) ALboolean __cdecl alIsSource(ALuint source);
__declspec(dllimport) void __cdecl alSourcef(ALuint source, ALenum param, ALfloat value);
__declspec(dllimport) void __cdecl alSource3f(ALuint source, ALenum param, ALfloat value1, ALfloat value2, ALfloat value3);
__declspec(dllimport) void __cdecl alSourcefv(ALuint source, ALenum param, const ALfloat *values);
__declspec(dllimport) void __cdecl alSourcei(ALuint source, ALenum param, ALint value);
__declspec(dllimport) void __cdecl alSource3i(ALuint source, ALenum param, ALint value1, ALint value2, ALint value3);
__declspec(dllimport) void __cdecl alSourceiv(ALuint source, ALenum param, const ALint *values);
__declspec(dllimport) void __cdecl alGetSourcef(ALuint source, ALenum param, ALfloat *value);
__declspec(dllimport) void __cdecl alGetSource3f(ALuint source, ALenum param, ALfloat *value1, ALfloat *value2, ALfloat *value3);
__declspec(dllimport) void __cdecl alGetSourcefv(ALuint source, ALenum param, ALfloat *values);
__declspec(dllimport) void __cdecl alGetSourcei(ALuint source,  ALenum param, ALint *value);
__declspec(dllimport) void __cdecl alGetSource3i(ALuint source, ALenum param, ALint *value1, ALint *value2, ALint *value3);
__declspec(dllimport) void __cdecl alGetSourceiv(ALuint source,  ALenum param, ALint *values);
__declspec(dllimport) void __cdecl alSourcePlay(ALuint source);
__declspec(dllimport) void __cdecl alSourceStop(ALuint source);
__declspec(dllimport) void __cdecl alSourceRewind(ALuint source);
__declspec(dllimport) void __cdecl alSourcePause(ALuint source);
__declspec(dllimport) void __cdecl alSourcePlayv(ALsizei n, const ALuint *sources);
__declspec(dllimport) void __cdecl alSourceStopv(ALsizei n, const ALuint *sources);
__declspec(dllimport) void __cdecl alSourceRewindv(ALsizei n, const ALuint *sources);
__declspec(dllimport) void __cdecl alSourcePausev(ALsizei n, const ALuint *sources);
__declspec(dllimport) void __cdecl alSourceQueueBuffers(ALuint source, ALsizei nb, const ALuint *buffers);
__declspec(dllimport) void __cdecl alSourceUnqueueBuffers(ALuint source, ALsizei nb, ALuint *buffers);
__declspec(dllimport) void __cdecl alGenBuffers(ALsizei n, ALuint *buffers);
__declspec(dllimport) void __cdecl alDeleteBuffers(ALsizei n, const ALuint *buffers);
__declspec(dllimport) ALboolean __cdecl alIsBuffer(ALuint buffer);
__declspec(dllimport) void __cdecl alBufferData(ALuint buffer, ALenum format, const ALvoid *data, ALsizei size, ALsizei samplerate);
__declspec(dllimport) void __cdecl alBufferf(ALuint buffer, ALenum param, ALfloat value);
__declspec(dllimport) void __cdecl alBuffer3f(ALuint buffer, ALenum param, ALfloat value1, ALfloat value2, ALfloat value3);
__declspec(dllimport) void __cdecl alBufferfv(ALuint buffer, ALenum param, const ALfloat *values);
__declspec(dllimport) void __cdecl alBufferi(ALuint buffer, ALenum param, ALint value);
__declspec(dllimport) void __cdecl alBuffer3i(ALuint buffer, ALenum param, ALint value1, ALint value2, ALint value3);
__declspec(dllimport) void __cdecl alBufferiv(ALuint buffer, ALenum param, const ALint *values);
__declspec(dllimport) void __cdecl alGetBufferf(ALuint buffer, ALenum param, ALfloat *value);
__declspec(dllimport) void __cdecl alGetBuffer3f(ALuint buffer, ALenum param, ALfloat *value1, ALfloat *value2, ALfloat *value3);
__declspec(dllimport) void __cdecl alGetBufferfv(ALuint buffer, ALenum param, ALfloat *values);
__declspec(dllimport) void __cdecl alGetBufferi(ALuint buffer, ALenum param, ALint *value);
__declspec(dllimport) void __cdecl alGetBuffer3i(ALuint buffer, ALenum param, ALint *value1, ALint *value2, ALint *value3);
__declspec(dllimport) void __cdecl alGetBufferiv(ALuint buffer, ALenum param, ALint *values);
typedef void          (__cdecl *LPALENABLE)(ALenum capability);
typedef void          (__cdecl *LPALDISABLE)(ALenum capability);
typedef ALboolean     (__cdecl *LPALISENABLED)(ALenum capability);
typedef const ALchar* (__cdecl *LPALGETSTRING)(ALenum param);
typedef void          (__cdecl *LPALGETBOOLEANV)(ALenum param, ALboolean *values);
typedef void          (__cdecl *LPALGETINTEGERV)(ALenum param, ALint *values);
typedef void          (__cdecl *LPALGETFLOATV)(ALenum param, ALfloat *values);
typedef void          (__cdecl *LPALGETDOUBLEV)(ALenum param, ALdouble *values);
typedef ALboolean     (__cdecl *LPALGETBOOLEAN)(ALenum param);
typedef ALint         (__cdecl *LPALGETINTEGER)(ALenum param);
typedef ALfloat       (__cdecl *LPALGETFLOAT)(ALenum param);
typedef ALdouble      (__cdecl *LPALGETDOUBLE)(ALenum param);
typedef ALenum        (__cdecl *LPALGETERROR)(void);
typedef ALboolean     (__cdecl *LPALISEXTENSIONPRESENT)(const ALchar *extname);
typedef void*         (__cdecl *LPALGETPROCADDRESS)(const ALchar *fname);
typedef ALenum        (__cdecl *LPALGETENUMVALUE)(const ALchar *ename);
typedef void          (__cdecl *LPALLISTENERF)(ALenum param, ALfloat value);
typedef void          (__cdecl *LPALLISTENER3F)(ALenum param, ALfloat value1, ALfloat value2, ALfloat value3);
typedef void          (__cdecl *LPALLISTENERFV)(ALenum param, const ALfloat *values);
typedef void          (__cdecl *LPALLISTENERI)(ALenum param, ALint value);
typedef void          (__cdecl *LPALLISTENER3I)(ALenum param, ALint value1, ALint value2, ALint value3);
typedef void          (__cdecl *LPALLISTENERIV)(ALenum param, const ALint *values);
typedef void          (__cdecl *LPALGETLISTENERF)(ALenum param, ALfloat *value);
typedef void          (__cdecl *LPALGETLISTENER3F)(ALenum param, ALfloat *value1, ALfloat *value2, ALfloat *value3);
typedef void          (__cdecl *LPALGETLISTENERFV)(ALenum param, ALfloat *values);
typedef void          (__cdecl *LPALGETLISTENERI)(ALenum param, ALint *value);
typedef void          (__cdecl *LPALGETLISTENER3I)(ALenum param, ALint *value1, ALint *value2, ALint *value3);
typedef void          (__cdecl *LPALGETLISTENERIV)(ALenum param, ALint *values);
typedef void          (__cdecl *LPALGENSOURCES)(ALsizei n, ALuint *sources);
typedef void          (__cdecl *LPALDELETESOURCES)(ALsizei n, const ALuint *sources);
typedef ALboolean     (__cdecl *LPALISSOURCE)(ALuint source);
typedef void          (__cdecl *LPALSOURCEF)(ALuint source, ALenum param, ALfloat value);
typedef void          (__cdecl *LPALSOURCE3F)(ALuint source, ALenum param, ALfloat value1, ALfloat value2, ALfloat value3);
typedef void          (__cdecl *LPALSOURCEFV)(ALuint source, ALenum param, const ALfloat *values);
typedef void          (__cdecl *LPALSOURCEI)(ALuint source, ALenum param, ALint value);
typedef void          (__cdecl *LPALSOURCE3I)(ALuint source, ALenum param, ALint value1, ALint value2, ALint value3);
typedef void          (__cdecl *LPALSOURCEIV)(ALuint source, ALenum param, const ALint *values);
typedef void          (__cdecl *LPALGETSOURCEF)(ALuint source, ALenum param, ALfloat *value);
typedef void          (__cdecl *LPALGETSOURCE3F)(ALuint source, ALenum param, ALfloat *value1, ALfloat *value2, ALfloat *value3);
typedef void          (__cdecl *LPALGETSOURCEFV)(ALuint source, ALenum param, ALfloat *values);
typedef void          (__cdecl *LPALGETSOURCEI)(ALuint source, ALenum param, ALint *value);
typedef void          (__cdecl *LPALGETSOURCE3I)(ALuint source, ALenum param, ALint *value1, ALint *value2, ALint *value3);
typedef void          (__cdecl *LPALGETSOURCEIV)(ALuint source, ALenum param, ALint *values);
typedef void          (__cdecl *LPALSOURCEPLAYV)(ALsizei n, const ALuint *sources);
typedef void          (__cdecl *LPALSOURCESTOPV)(ALsizei n, const ALuint *sources);
typedef void          (__cdecl *LPALSOURCEREWINDV)(ALsizei n, const ALuint *sources);
typedef void          (__cdecl *LPALSOURCEPAUSEV)(ALsizei n, const ALuint *sources);
typedef void          (__cdecl *LPALSOURCEPLAY)(ALuint source);
typedef void          (__cdecl *LPALSOURCESTOP)(ALuint source);
typedef void          (__cdecl *LPALSOURCEREWIND)(ALuint source);
typedef void          (__cdecl *LPALSOURCEPAUSE)(ALuint source);
typedef void          (__cdecl *LPALSOURCEQUEUEBUFFERS)(ALuint source, ALsizei nb, const ALuint *buffers);
typedef void          (__cdecl *LPALSOURCEUNQUEUEBUFFERS)(ALuint source, ALsizei nb, ALuint *buffers);
typedef void          (__cdecl *LPALGENBUFFERS)(ALsizei n, ALuint *buffers);
typedef void          (__cdecl *LPALDELETEBUFFERS)(ALsizei n, const ALuint *buffers);
typedef ALboolean     (__cdecl *LPALISBUFFER)(ALuint buffer);
typedef void          (__cdecl *LPALBUFFERDATA)(ALuint buffer, ALenum format, const ALvoid *data, ALsizei size, ALsizei samplerate);
typedef void          (__cdecl *LPALBUFFERF)(ALuint buffer, ALenum param, ALfloat value);
typedef void          (__cdecl *LPALBUFFER3F)(ALuint buffer, ALenum param, ALfloat value1, ALfloat value2, ALfloat value3);
typedef void          (__cdecl *LPALBUFFERFV)(ALuint buffer, ALenum param, const ALfloat *values);
typedef void          (__cdecl *LPALBUFFERI)(ALuint buffer, ALenum param, ALint value);
typedef void          (__cdecl *LPALBUFFER3I)(ALuint buffer, ALenum param, ALint value1, ALint value2, ALint value3);
typedef void          (__cdecl *LPALBUFFERIV)(ALuint buffer, ALenum param, const ALint *values);
typedef void          (__cdecl *LPALGETBUFFERF)(ALuint buffer, ALenum param, ALfloat *value);
typedef void          (__cdecl *LPALGETBUFFER3F)(ALuint buffer, ALenum param, ALfloat *value1, ALfloat *value2, ALfloat *value3);
typedef void          (__cdecl *LPALGETBUFFERFV)(ALuint buffer, ALenum param, ALfloat *values);
typedef void          (__cdecl *LPALGETBUFFERI)(ALuint buffer, ALenum param, ALint *value);
typedef void          (__cdecl *LPALGETBUFFER3I)(ALuint buffer, ALenum param, ALint *value1, ALint *value2, ALint *value3);
typedef void          (__cdecl *LPALGETBUFFERIV)(ALuint buffer, ALenum param, ALint *values);
typedef void          (__cdecl *LPALDOPPLERFACTOR)(ALfloat value);
typedef void          (__cdecl *LPALDOPPLERVELOCITY)(ALfloat value);
typedef void          (__cdecl *LPALSPEEDOFSOUND)(ALfloat value);
typedef void          (__cdecl *LPALDISTANCEMODEL)(ALenum distanceModel);
typedef struct ALCdevice ALCdevice;
typedef struct ALCcontext ALCcontext;
typedef char ALCboolean;
typedef char ALCchar;
typedef signed char ALCbyte;
typedef unsigned char ALCubyte;
typedef short ALCshort;
typedef unsigned short ALCushort;
typedef int ALCint;
typedef unsigned int ALCuint;
typedef int ALCsizei;
typedef int ALCenum;
typedef float ALCfloat;
typedef double ALCdouble;
typedef void ALCvoid;
__declspec(dllimport) ALCcontext* __cdecl alcCreateContext(ALCdevice *device, const ALCint *attrlist);
__declspec(dllimport) ALCboolean  __cdecl alcMakeContextCurrent(ALCcontext *context);
__declspec(dllimport) void        __cdecl alcProcessContext(ALCcontext *context);
__declspec(dllimport) void        __cdecl alcSuspendContext(ALCcontext *context);
__declspec(dllimport) void        __cdecl alcDestroyContext(ALCcontext *context);
__declspec(dllimport) ALCcontext* __cdecl alcGetCurrentContext(void);
__declspec(dllimport) ALCdevice*  __cdecl alcGetContextsDevice(ALCcontext *context);
__declspec(dllimport) ALCdevice* __cdecl alcOpenDevice(const ALCchar *devicename);
__declspec(dllimport) ALCboolean __cdecl alcCloseDevice(ALCdevice *device);
__declspec(dllimport) ALCenum __cdecl alcGetError(ALCdevice *device);
__declspec(dllimport) ALCboolean __cdecl alcIsExtensionPresent(ALCdevice *device, const ALCchar *extname);
__declspec(dllimport) ALCvoid*   __cdecl alcGetProcAddress(ALCdevice *device, const ALCchar *funcname);
__declspec(dllimport) ALCenum    __cdecl alcGetEnumValue(ALCdevice *device, const ALCchar *enumname);
__declspec(dllimport) const ALCchar* __cdecl alcGetString(ALCdevice *device, ALCenum param);
__declspec(dllimport) void           __cdecl alcGetIntegerv(ALCdevice *device, ALCenum param, ALCsizei size, ALCint *values);
__declspec(dllimport) ALCdevice* __cdecl alcCaptureOpenDevice(const ALCchar *devicename, ALCuint frequency, ALCenum format, ALCsizei buffersize);
__declspec(dllimport) ALCboolean __cdecl alcCaptureCloseDevice(ALCdevice *device);
__declspec(dllimport) void       __cdecl alcCaptureStart(ALCdevice *device);
__declspec(dllimport) void       __cdecl alcCaptureStop(ALCdevice *device);
__declspec(dllimport) void       __cdecl alcCaptureSamples(ALCdevice *device, ALCvoid *buffer, ALCsizei samples);
typedef ALCcontext*    (__cdecl *LPALCCREATECONTEXT)(ALCdevice *device, const ALCint *attrlist);
typedef ALCboolean     (__cdecl *LPALCMAKECONTEXTCURRENT)(ALCcontext *context);
typedef void           (__cdecl *LPALCPROCESSCONTEXT)(ALCcontext *context);
typedef void           (__cdecl *LPALCSUSPENDCONTEXT)(ALCcontext *context);
typedef void           (__cdecl *LPALCDESTROYCONTEXT)(ALCcontext *context);
typedef ALCcontext*    (__cdecl *LPALCGETCURRENTCONTEXT)(void);
typedef ALCdevice*     (__cdecl *LPALCGETCONTEXTSDEVICE)(ALCcontext *context);
typedef ALCdevice*     (__cdecl *LPALCOPENDEVICE)(const ALCchar *devicename);
typedef ALCboolean     (__cdecl *LPALCCLOSEDEVICE)(ALCdevice *device);
typedef ALCenum        (__cdecl *LPALCGETERROR)(ALCdevice *device);
typedef ALCboolean     (__cdecl *LPALCISEXTENSIONPRESENT)(ALCdevice *device, const ALCchar *extname);
typedef ALCvoid*       (__cdecl *LPALCGETPROCADDRESS)(ALCdevice *device, const ALCchar *funcname);
typedef ALCenum        (__cdecl *LPALCGETENUMVALUE)(ALCdevice *device, const ALCchar *enumname);
typedef const ALCchar* (__cdecl *LPALCGETSTRING)(ALCdevice *device, ALCenum param);
typedef void           (__cdecl *LPALCGETINTEGERV)(ALCdevice *device, ALCenum param, ALCsizei size, ALCint *values);
typedef ALCdevice*     (__cdecl *LPALCCAPTUREOPENDEVICE)(const ALCchar *devicename, ALCuint frequency, ALCenum format, ALCsizei buffersize);
typedef ALCboolean     (__cdecl *LPALCCAPTURECLOSEDEVICE)(ALCdevice *device);
typedef void           (__cdecl *LPALCCAPTURESTART)(ALCdevice *device);
typedef void           (__cdecl *LPALCCAPTURESTOP)(ALCdevice *device);
typedef void           (__cdecl *LPALCCAPTURESAMPLES)(ALCdevice *device, ALCvoid *buffer, ALCsizei samples);
 bool load_efx();
typedef struct spFloatArray { int size; int capacity; float* items; } spFloatArray;  spFloatArray* spFloatArray_create(int initialCapacity);  void spFloatArray_dispose(spFloatArray* self);  void spFloatArray_clear(spFloatArray* self);  spFloatArray* spFloatArray_setSize(spFloatArray* self, int newSize);  void spFloatArray_ensureCapacity(spFloatArray* self, int newCapacity);  void spFloatArray_add(spFloatArray* self, float value);  void spFloatArray_addAll(spFloatArray* self, spFloatArray* other);  void spFloatArray_addAllValues(spFloatArray* self, float* values, int offset, int count);  void spFloatArray_removeAt(spFloatArray* self, int index);  int spFloatArray_contains(spFloatArray* self, float value);  float spFloatArray_pop(spFloatArray* self);  float spFloatArray_peek(spFloatArray* self);
typedef struct spIntArray { int size; int capacity; int* items; } spIntArray;  spIntArray* spIntArray_create(int initialCapacity);  void spIntArray_dispose(spIntArray* self);  void spIntArray_clear(spIntArray* self);  spIntArray* spIntArray_setSize(spIntArray* self, int newSize);  void spIntArray_ensureCapacity(spIntArray* self, int newCapacity);  void spIntArray_add(spIntArray* self, int value);  void spIntArray_addAll(spIntArray* self, spIntArray* other);  void spIntArray_addAllValues(spIntArray* self, int* values, int offset, int count);  void spIntArray_removeAt(spIntArray* self, int index);  int spIntArray_contains(spIntArray* self, int value);  int spIntArray_pop(spIntArray* self);  int spIntArray_peek(spIntArray* self);
typedef struct spShortArray { int size; int capacity; short* items; } spShortArray;  spShortArray* spShortArray_create(int initialCapacity);  void spShortArray_dispose(spShortArray* self);  void spShortArray_clear(spShortArray* self);  spShortArray* spShortArray_setSize(spShortArray* self, int newSize);  void spShortArray_ensureCapacity(spShortArray* self, int newCapacity);  void spShortArray_add(spShortArray* self, short value);  void spShortArray_addAll(spShortArray* self, spShortArray* other);  void spShortArray_addAllValues(spShortArray* self, short* values, int offset, int count);  void spShortArray_removeAt(spShortArray* self, int index);  int spShortArray_contains(spShortArray* self, short value);  short spShortArray_pop(spShortArray* self);  short spShortArray_peek(spShortArray* self);
typedef struct spUnsignedShortArray { int size; int capacity; unsigned short* items; } spUnsignedShortArray;  spUnsignedShortArray* spUnsignedShortArray_create(int initialCapacity);  void spUnsignedShortArray_dispose(spUnsignedShortArray* self);  void spUnsignedShortArray_clear(spUnsignedShortArray* self);  spUnsignedShortArray* spUnsignedShortArray_setSize(spUnsignedShortArray* self, int newSize);  void spUnsignedShortArray_ensureCapacity(spUnsignedShortArray* self, int newCapacity);  void spUnsignedShortArray_add(spUnsignedShortArray* self, unsigned short value);  void spUnsignedShortArray_addAll(spUnsignedShortArray* self, spUnsignedShortArray* other);  void spUnsignedShortArray_addAllValues(spUnsignedShortArray* self, unsigned short* values, int offset, int count);  void spUnsignedShortArray_removeAt(spUnsignedShortArray* self, int index);  int spUnsignedShortArray_contains(spUnsignedShortArray* self, unsigned short value);  unsigned short spUnsignedShortArray_pop(spUnsignedShortArray* self);  unsigned short spUnsignedShortArray_peek(spUnsignedShortArray* self);
typedef struct spArrayFloatArray { int size; int capacity; spFloatArray** items; } spArrayFloatArray;  spArrayFloatArray* spArrayFloatArray_create(int initialCapacity);  void spArrayFloatArray_dispose(spArrayFloatArray* self);  void spArrayFloatArray_clear(spArrayFloatArray* self);  spArrayFloatArray* spArrayFloatArray_setSize(spArrayFloatArray* self, int newSize);  void spArrayFloatArray_ensureCapacity(spArrayFloatArray* self, int newCapacity);  void spArrayFloatArray_add(spArrayFloatArray* self, spFloatArray* value);  void spArrayFloatArray_addAll(spArrayFloatArray* self, spArrayFloatArray* other);  void spArrayFloatArray_addAllValues(spArrayFloatArray* self, spFloatArray** values, int offset, int count);  void spArrayFloatArray_removeAt(spArrayFloatArray* self, int index);  int spArrayFloatArray_contains(spArrayFloatArray* self, spFloatArray* value);  spFloatArray* spArrayFloatArray_pop(spArrayFloatArray* self);  spFloatArray* spArrayFloatArray_peek(spArrayFloatArray* self);
typedef struct spArrayShortArray { int size; int capacity; spShortArray** items; } spArrayShortArray;  spArrayShortArray* spArrayShortArray_create(int initialCapacity);  void spArrayShortArray_dispose(spArrayShortArray* self);  void spArrayShortArray_clear(spArrayShortArray* self);  spArrayShortArray* spArrayShortArray_setSize(spArrayShortArray* self, int newSize);  void spArrayShortArray_ensureCapacity(spArrayShortArray* self, int newCapacity);  void spArrayShortArray_add(spArrayShortArray* self, spShortArray* value);  void spArrayShortArray_addAll(spArrayShortArray* self, spArrayShortArray* other);  void spArrayShortArray_addAllValues(spArrayShortArray* self, spShortArray** values, int offset, int count);  void spArrayShortArray_removeAt(spArrayShortArray* self, int index);  int spArrayShortArray_contains(spArrayShortArray* self, spShortArray* value);  spShortArray* spArrayShortArray_pop(spArrayShortArray* self);  spShortArray* spArrayShortArray_peek(spArrayShortArray* self);
typedef struct spEventData {
	char *name;
	int intValue;
	float floatValue;
	char *stringValue;
	char *audioPath;
	float volume;
	float balance;
} spEventData;
 spEventData *spEventData_create(const char *name);
 void spEventData_dispose(spEventData *self);
typedef struct spEvent {
	spEventData *data;
	float time;
	int intValue;
	float floatValue;
	char *stringValue;
	float volume;
	float balance;
} spEvent;
 spEvent *spEvent_create(float time, spEventData *data);
 void spEvent_dispose(spEvent *self);
struct spAttachmentLoader;
typedef enum {
	SP_ATTACHMENT_REGION,
	SP_ATTACHMENT_BOUNDING_BOX,
	SP_ATTACHMENT_MESH,
	SP_ATTACHMENT_LINKED_MESH,
	SP_ATTACHMENT_PATH,
	SP_ATTACHMENT_POINT,
	SP_ATTACHMENT_CLIPPING
} spAttachmentType;
typedef struct spAttachment {
	char *name;
	spAttachmentType type;
	const void *vtable;
	int refCount;
	struct spAttachmentLoader *attachmentLoader;
} spAttachment;
void spAttachment_dispose(spAttachment *self);
spAttachment *spAttachment_copy(spAttachment *self);
typedef struct spColor {
	float r, g, b, a;
} spColor;
 spColor *spColor_create(void);
 void spColor_dispose(spColor *self);
 void spColor_setFromFloats(spColor *color, float r, float g, float b, float a);
 void spColor_setFromFloats3(spColor *self, float r, float g, float b);
 void spColor_setFromColor(spColor *color, spColor *otherColor);
 void spColor_setFromColor3(spColor *self, spColor *otherColor);
 void spColor_addFloats(spColor *color, float r, float g, float b, float a);
 void spColor_addFloats3(spColor *color, float r, float g, float b);
 void spColor_addColor(spColor *color, spColor *otherColor);
 void spColor_clamp(spColor *color);
typedef enum {
	SP_INHERIT_NORMAL,
	SP_INHERIT_ONLYTRANSLATION,
	SP_INHERIT_NOROTATIONORREFLECTION,
	SP_INHERIT_NOSCALE,
	SP_INHERIT_NOSCALEORREFLECTION
} spInherit;
typedef struct spBoneData spBoneData;
struct spBoneData {
	int index;
	char *name;
	spBoneData *parent;
	float length;
	float x, y, rotation, scaleX, scaleY, shearX, shearY;
	spInherit inherit;
	int  skinRequired;
	spColor color;
    const char *icon;
    int  visible;
};
 spBoneData *spBoneData_create(int index, const char *name, spBoneData *parent);
 void spBoneData_dispose(spBoneData *self);
typedef enum {
  SP_PHYSICS_NONE,
  SP_PHYSICS_RESET,
  SP_PHYSICS_UPDATE,
  SP_PHYSICS_POSE
} spPhysics;
struct spSkeleton;
typedef struct spBone spBone;
struct spBone {
	spBoneData *data;
	struct spSkeleton *skeleton;
	spBone *parent;
	int childrenCount;
	spBone **children;
	float x, y, rotation, scaleX, scaleY, shearX, shearY;
	float ax, ay, arotation, ascaleX, ascaleY, ashearX, ashearY;
	float a, b, worldX;
	float c, d, worldY;
	int  sorted;
	int  active;
    spInherit inherit;
};
 void spBone_setYDown(int yDown);
 int spBone_isYDown(void);
 spBone *spBone_create(spBoneData *data, struct spSkeleton *skeleton, spBone *parent);
 void spBone_dispose(spBone *self);
 void spBone_setToSetupPose(spBone *self);
 void spBone_update(spBone *self);
 void spBone_updateWorldTransform(spBone *self);
 void spBone_updateWorldTransformWith(spBone *self, float x, float y, float rotation, float scaleX, float scaleY,
											float shearX, float shearY);
 float spBone_getWorldRotationX(spBone *self);
 float spBone_getWorldRotationY(spBone *self);
 float spBone_getWorldScaleX(spBone *self);
 float spBone_getWorldScaleY(spBone *self);
 void spBone_updateAppliedTransform(spBone *self);
 void spBone_worldToLocal(spBone *self, float worldX, float worldY, float *localX, float *localY);
 void spBone_worldToParent(spBone *self, float worldX, float worldY, float *parentX, float *parentY);
 void spBone_localToWorld(spBone *self, float localX, float localY, float *worldX, float *worldY);
 void spBone_localToParent(spBone *self, float localX, float localY, float *parentX, float *parentY);
 float spBone_worldToLocalRotation(spBone *self, float worldRotation);
 float spBone_localToWorldRotation(spBone *self, float localRotation);
 void spBone_rotateWorld(spBone *self, float degrees);
typedef enum {
	SP_BLEND_MODE_NORMAL, SP_BLEND_MODE_ADDITIVE, SP_BLEND_MODE_MULTIPLY, SP_BLEND_MODE_SCREEN
} spBlendMode;
typedef struct spSlotData {
	int index;
	char *name;
	spBoneData *boneData;
	char *attachmentName;
	spColor color;
	spColor *darkColor;
	spBlendMode blendMode;
    int  visible;
} spSlotData;
 spSlotData *spSlotData_create(const int index, const char *name, spBoneData *boneData);
 void spSlotData_dispose(spSlotData *self);
 void spSlotData_setAttachmentName(spSlotData *self, const char *attachmentName);
typedef struct spSlot {
	spSlotData *data;
	spBone *bone;
	spColor color;
	spColor *darkColor;
	spAttachment *attachment;
	int attachmentState;
	int deformCapacity;
	int deformCount;
	float *deform;
	int sequenceIndex;
} spSlot;
 spSlot *spSlot_create(spSlotData *data, spBone *bone);
 void spSlot_dispose(spSlot *self);
 void spSlot_setAttachment(spSlot *self, spAttachment *attachment);
 void spSlot_setToSetupPose(spSlot *self);
typedef struct spVertexAttachment spVertexAttachment;
struct spVertexAttachment {
	spAttachment super;
	int bonesCount;
	int *bones;
	int verticesCount;
	float *vertices;
	int worldVerticesLength;
	spAttachment *timelineAttachment;
	int id;
};
 void spVertexAttachment_computeWorldVertices(spVertexAttachment *self, spSlot *slot, int start, int count,
													float *worldVertices, int offset, int stride);
void spVertexAttachment_copyTo(spVertexAttachment *self, spVertexAttachment *other);
typedef struct spTextureRegion {
	void *rendererObject;
	float u, v, u2, v2;
	int degrees;
	float offsetX, offsetY;
	int width, height;
	int originalWidth, originalHeight;
} spTextureRegion;
typedef struct spAtlas spAtlas;
typedef enum {
	SP_ATLAS_UNKNOWN_FORMAT,
	SP_ATLAS_ALPHA,
	SP_ATLAS_INTENSITY,
	SP_ATLAS_LUMINANCE_ALPHA,
	SP_ATLAS_RGB565,
	SP_ATLAS_RGBA4444,
	SP_ATLAS_RGB888,
	SP_ATLAS_RGBA8888
} spAtlasFormat;
typedef enum {
	SP_ATLAS_UNKNOWN_FILTER,
	SP_ATLAS_NEAREST,
	SP_ATLAS_LINEAR,
	SP_ATLAS_MIPMAP,
	SP_ATLAS_MIPMAP_NEAREST_NEAREST,
	SP_ATLAS_MIPMAP_LINEAR_NEAREST,
	SP_ATLAS_MIPMAP_NEAREST_LINEAR,
	SP_ATLAS_MIPMAP_LINEAR_LINEAR
} spAtlasFilter;
typedef enum {
	SP_ATLAS_MIRROREDREPEAT,
	SP_ATLAS_CLAMPTOEDGE,
	SP_ATLAS_REPEAT
} spAtlasWrap;
typedef struct spAtlasPage spAtlasPage;
struct spAtlasPage {
	spAtlas *atlas;
	char *name;
	spAtlasFormat format;
	spAtlasFilter minFilter, magFilter;
	spAtlasWrap uWrap, vWrap;
	void *rendererObject;
	int width, height;
	int  pma;
	spAtlasPage *next;
};
 spAtlasPage *spAtlasPage_create(spAtlas *atlas, const char *name);
 void spAtlasPage_dispose(spAtlasPage *self);
typedef struct spKeyValue {
	char *name;
	float values[5];
} spKeyValue;
typedef struct spKeyValueArray { int size; int capacity; spKeyValue* items; } spKeyValueArray;  spKeyValueArray* spKeyValueArray_create(int initialCapacity);  void spKeyValueArray_dispose(spKeyValueArray* self);  void spKeyValueArray_clear(spKeyValueArray* self);  spKeyValueArray* spKeyValueArray_setSize(spKeyValueArray* self, int newSize);  void spKeyValueArray_ensureCapacity(spKeyValueArray* self, int newCapacity);  void spKeyValueArray_add(spKeyValueArray* self, spKeyValue value);  void spKeyValueArray_addAll(spKeyValueArray* self, spKeyValueArray* other);  void spKeyValueArray_addAllValues(spKeyValueArray* self, spKeyValue* values, int offset, int count);  void spKeyValueArray_removeAt(spKeyValueArray* self, int index);  int spKeyValueArray_contains(spKeyValueArray* self, spKeyValue value);  spKeyValue spKeyValueArray_pop(spKeyValueArray* self);  spKeyValue spKeyValueArray_peek(spKeyValueArray* self);
typedef struct spAtlasRegion spAtlasRegion;
struct spAtlasRegion {
	spTextureRegion super;
	const char *name;
	int x, y;
	int index;
	int *splits;
	int *pads;
	spKeyValueArray *keyValues;
	spAtlasPage *page;
	spAtlasRegion *next;
};
 spAtlasRegion *spAtlasRegion_create(void);
 void spAtlasRegion_dispose(spAtlasRegion *self);
struct spAtlas {
	spAtlasPage *pages;
	spAtlasRegion *regions;
	void *rendererObject;
};
 spAtlas *spAtlas_create(const char *data, int length, const char *dir, void *rendererObject);
 spAtlas *spAtlas_createFromFile(const char *path, void *rendererObject);
 void spAtlas_dispose(spAtlas *atlas);
 spAtlasRegion *spAtlas_findRegion(const spAtlas *self, const char *name);
typedef struct spTextureRegionArray { int size; int capacity; spTextureRegion** items; } spTextureRegionArray;  spTextureRegionArray* spTextureRegionArray_create(int initialCapacity);  void spTextureRegionArray_dispose(spTextureRegionArray* self);  void spTextureRegionArray_clear(spTextureRegionArray* self);  spTextureRegionArray* spTextureRegionArray_setSize(spTextureRegionArray* self, int newSize);  void spTextureRegionArray_ensureCapacity(spTextureRegionArray* self, int newCapacity);  void spTextureRegionArray_add(spTextureRegionArray* self, spTextureRegion* value);  void spTextureRegionArray_addAll(spTextureRegionArray* self, spTextureRegionArray* other);  void spTextureRegionArray_addAllValues(spTextureRegionArray* self, spTextureRegion** values, int offset, int count);  void spTextureRegionArray_removeAt(spTextureRegionArray* self, int index);  int spTextureRegionArray_contains(spTextureRegionArray* self, spTextureRegion* value);  spTextureRegion* spTextureRegionArray_pop(spTextureRegionArray* self);  spTextureRegion* spTextureRegionArray_peek(spTextureRegionArray* self);
typedef struct spSequence {
	int id;
	int start;
	int digits;
	int setupIndex;
	spTextureRegionArray *regions;
} spSequence;
 spSequence *spSequence_create(int numRegions);
 void spSequence_dispose(spSequence *self);
 spSequence *spSequence_copy(spSequence *self);
 void spSequence_apply(spSequence *self, spSlot *slot, spAttachment *attachment);
 void spSequence_getPath(spSequence *self, const char *basePath, int index, char *path);
typedef struct spTimeline spTimeline;
struct spSkeleton;
typedef uint64_t spPropertyId;
typedef struct spPropertyIdArray { int size; int capacity; spPropertyId* items; } spPropertyIdArray;  spPropertyIdArray* spPropertyIdArray_create(int initialCapacity);  void spPropertyIdArray_dispose(spPropertyIdArray* self);  void spPropertyIdArray_clear(spPropertyIdArray* self);  spPropertyIdArray* spPropertyIdArray_setSize(spPropertyIdArray* self, int newSize);  void spPropertyIdArray_ensureCapacity(spPropertyIdArray* self, int newCapacity);  void spPropertyIdArray_add(spPropertyIdArray* self, spPropertyId value);  void spPropertyIdArray_addAll(spPropertyIdArray* self, spPropertyIdArray* other);  void spPropertyIdArray_addAllValues(spPropertyIdArray* self, spPropertyId* values, int offset, int count);  void spPropertyIdArray_removeAt(spPropertyIdArray* self, int index);  int spPropertyIdArray_contains(spPropertyIdArray* self, spPropertyId value);  spPropertyId spPropertyIdArray_pop(spPropertyIdArray* self);  spPropertyId spPropertyIdArray_peek(spPropertyIdArray* self);
typedef struct spTimelineArray { int size; int capacity; spTimeline** items; } spTimelineArray;  spTimelineArray* spTimelineArray_create(int initialCapacity);  void spTimelineArray_dispose(spTimelineArray* self);  void spTimelineArray_clear(spTimelineArray* self);  spTimelineArray* spTimelineArray_setSize(spTimelineArray* self, int newSize);  void spTimelineArray_ensureCapacity(spTimelineArray* self, int newCapacity);  void spTimelineArray_add(spTimelineArray* self, spTimeline* value);  void spTimelineArray_addAll(spTimelineArray* self, spTimelineArray* other);  void spTimelineArray_addAllValues(spTimelineArray* self, spTimeline** values, int offset, int count);  void spTimelineArray_removeAt(spTimelineArray* self, int index);  int spTimelineArray_contains(spTimelineArray* self, spTimeline* value);  spTimeline* spTimelineArray_pop(spTimelineArray* self);  spTimeline* spTimelineArray_peek(spTimelineArray* self);
typedef struct spAnimation {
	char *name;
	float duration;
	spTimelineArray *timelines;
	spPropertyIdArray *timelineIds;
} spAnimation;
typedef enum {
	SP_MIX_BLEND_SETUP,
	SP_MIX_BLEND_FIRST,
	SP_MIX_BLEND_REPLACE,
	SP_MIX_BLEND_ADD
} spMixBlend;
typedef enum {
	SP_MIX_DIRECTION_IN,
	SP_MIX_DIRECTION_OUT
} spMixDirection;
 spAnimation *spAnimation_create(const char *name, spTimelineArray *timelines, float duration);
 void spAnimation_dispose(spAnimation *self);
 int   spAnimation_hasTimeline(spAnimation *self, spPropertyId *ids, int idsCount);
 void
spAnimation_apply(const spAnimation *self, struct spSkeleton *skeleton, float lastTime, float time, int loop,
				  spEvent **events, int *eventsCount, float alpha, spMixBlend blend, spMixDirection direction);
typedef enum {
	SP_TIMELINE_ATTACHMENT,
	SP_TIMELINE_ALPHA,
	SP_TIMELINE_PATHCONSTRAINTPOSITION,
	SP_TIMELINE_PATHCONSTRAINTSPACING,
	SP_TIMELINE_ROTATE,
	SP_TIMELINE_SCALEX,
	SP_TIMELINE_SCALEY,
	SP_TIMELINE_SHEARX,
	SP_TIMELINE_SHEARY,
	SP_TIMELINE_TRANSLATEX,
	SP_TIMELINE_TRANSLATEY,
	SP_TIMELINE_SCALE,
	SP_TIMELINE_SHEAR,
	SP_TIMELINE_TRANSLATE,
	SP_TIMELINE_DEFORM,
	SP_TIMELINE_SEQUENCE,
    SP_TIMELINE_INHERIT,
	SP_TIMELINE_IKCONSTRAINT,
	SP_TIMELINE_PATHCONSTRAINTMIX,
    SP_TIMELINE_PHYSICSCONSTRAINT_INERTIA,
    SP_TIMELINE_PHYSICSCONSTRAINT_STRENGTH,
    SP_TIMELINE_PHYSICSCONSTRAINT_DAMPING,
    SP_TIMELINE_PHYSICSCONSTRAINT_MASS,
    SP_TIMELINE_PHYSICSCONSTRAINT_WIND,
    SP_TIMELINE_PHYSICSCONSTRAINT_GRAVITY,
    SP_TIMELINE_PHYSICSCONSTRAINT_MIX,
    SP_TIMELINE_PHYSICSCONSTRAINT_RESET,
	SP_TIMELINE_RGB2,
	SP_TIMELINE_RGBA2,
	SP_TIMELINE_RGBA,
	SP_TIMELINE_RGB,
	SP_TIMELINE_TRANSFORMCONSTRAINT,
	SP_TIMELINE_DRAWORDER,
	SP_TIMELINE_EVENT
} spTimelineType;
typedef enum {
	SP_PROPERTY_ROTATE = 1 << 0,
	SP_PROPERTY_X = 1 << 1,
	SP_PROPERTY_Y = 1 << 2,
	SP_PROPERTY_SCALEX = 1 << 3,
	SP_PROPERTY_SCALEY = 1 << 4,
	SP_PROPERTY_SHEARX = 1 << 5,
	SP_PROPERTY_SHEARY = 1 << 6,
    SP_PROPERTY_INHERIT = 1 << 7,
	SP_PROPERTY_RGB = 1 << 8,
	SP_PROPERTY_ALPHA = 1 << 9,
	SP_PROPERTY_RGB2 = 1 << 10,
	SP_PROPERTY_ATTACHMENT = 1 << 11,
	SP_PROPERTY_DEFORM = 1 << 12,
	SP_PROPERTY_EVENT = 1 << 13,
	SP_PROPERTY_DRAWORDER = 1 << 14,
	SP_PROPERTY_IKCONSTRAINT = 1 << 15,
	SP_PROPERTY_TRANSFORMCONSTRAINT = 1 << 16,
	SP_PROPERTY_PATHCONSTRAINT_POSITION = 1 << 17,
	SP_PROPERTY_PATHCONSTRAINT_SPACING = 1 << 18,
	SP_PROPERTY_PATHCONSTRAINT_MIX = 1 << 19,
    SP_PROPERTY_PHYSICSCONSTRAINT_INERTIA = 1 << 20,
    SP_PROPERTY_PHYSICSCONSTRAINT_STRENGTH = 1 << 21,
    SP_PROPERTY_PHYSICSCONSTRAINT_DAMPING = 1 << 22,
    SP_PROPERTY_PHYSICSCONSTRAINT_MASS = 1 << 23,
    SP_PROPERTY_PHYSICSCONSTRAINT_WIND = 1 << 24,
    SP_PROPERTY_PHYSICSCONSTRAINT_GRAVITY = 1 << 25,
    SP_PROPERTY_PHYSICSCONSTRAINT_MIX = 1 << 26,
    SP_PROPERTY_PHYSICSCONSTRAINT_RESET = 1 << 27,
	SP_PROPERTY_SEQUENCE = 1 << 28
} spProperty;
typedef struct _spTimelineVtable {
	void (*apply)(spTimeline *self, struct spSkeleton *skeleton, float lastTime, float time, spEvent **firedEvents,
				  int *eventsCount, float alpha, spMixBlend blend, spMixDirection direction);
	void (*dispose)(spTimeline *self);
	void
	(*setBezier)(spTimeline *self, int bezier, int frame, float value, float time1, float value1, float cx1, float cy1,
				 float cx2, float cy2, float time2, float value2);
} _spTimelineVtable;
struct spTimeline {
	_spTimelineVtable vtable;
	spPropertyId propertyIds[3];
	int propertyIdsCount;
	spFloatArray *frames;
	int frameCount;
	int frameEntries;
	spTimelineType type;
};
 void spTimeline_dispose(spTimeline *self);
 void
spTimeline_apply(spTimeline *self, struct spSkeleton *skeleton, float lastTime, float time, spEvent **firedEvents,
				 int *eventsCount, float alpha, spMixBlend blend, spMixDirection direction);
 void
spTimeline_setBezier(spTimeline *self, int bezier, int frame, float value, float time1, float value1, float cx1,
					 float cy1, float cx2, float cy2, float time2, float value2);
 float spTimeline_getDuration(const spTimeline *self);
typedef struct spCurveTimeline {
	spTimeline super;
	spFloatArray *curves; 
} spCurveTimeline;
 void spCurveTimeline_setLinear(spCurveTimeline *self, int frameIndex);
 void spCurveTimeline_setStepped(spCurveTimeline *self, int frameIndex);
 void spCurveTimeline_setCurve(spCurveTimeline *self, int frameIndex, float cx1, float cy1, float cx2, float cy2);
 float spCurveTimeline_getCurvePercent(const spCurveTimeline *self, int frameIndex, float percent);
typedef struct spCurveTimeline spCurveTimeline1;
 void spCurveTimeline1_setFrame(spCurveTimeline1 *self, int frame, float time, float value);
 float spCurveTimeline1_getCurveValue(spCurveTimeline1 *self, float time);
 float spCurveTimeline1_getRelativeValue(spCurveTimeline1 *timeline, float time, float alpha, spMixBlend blend, float current, float setup);
 float spCurveTimeline1_getAbsoluteValue(spCurveTimeline1 *timeline, float time, float alpha, spMixBlend blend, float current, float setup);
 float spCurveTimeline1_getAbsoluteValue2(spCurveTimeline1 *timeline, float time, float alpha, spMixBlend blend, float current, float setup, float value);
 float spCurveTimeline1_getScaleValue (spCurveTimeline1 *timeline, float time, float alpha, spMixBlend blend, spMixDirection direction, float current, float setup);
typedef struct spCurveTimeline spCurveTimeline2;
 void spCurveTimeline2_setFrame(spCurveTimeline1 *self, int frame, float time, float value1, float value2);
typedef struct spRotateTimeline {
	spCurveTimeline1 super;
	int boneIndex;
} spRotateTimeline;
 spRotateTimeline *spRotateTimeline_create(int frameCount, int bezierCount, int boneIndex);
 void spRotateTimeline_setFrame(spRotateTimeline *self, int frameIndex, float time, float angle);
typedef struct spTranslateTimeline {
	spCurveTimeline2 super;
	int boneIndex;
} spTranslateTimeline;
 spTranslateTimeline *spTranslateTimeline_create(int frameCount, int bezierCount, int boneIndex);
 void spTranslateTimeline_setFrame(spTranslateTimeline *self, int frameIndex, float time, float x, float y);
typedef struct spTranslateXTimeline {
	spCurveTimeline1 super;
	int boneIndex;
} spTranslateXTimeline;
 spTranslateXTimeline *spTranslateXTimeline_create(int frameCount, int bezierCount, int boneIndex);
 void spTranslateXTimeline_setFrame(spTranslateXTimeline *self, int frame, float time, float x);
typedef struct spTranslateYTimeline {
	spCurveTimeline1 super;
	int boneIndex;
} spTranslateYTimeline;
 spTranslateYTimeline *spTranslateYTimeline_create(int frameCount, int bezierCount, int boneIndex);
 void spTranslateYTimeline_setFrame(spTranslateYTimeline *self, int frame, float time, float y);
typedef struct spScaleTimeline {
	spCurveTimeline2 super;
	int boneIndex;
} spScaleTimeline;
 spScaleTimeline *spScaleTimeline_create(int frameCount, int bezierCount, int boneIndex);
 void spScaleTimeline_setFrame(spScaleTimeline *self, int frameIndex, float time, float x, float y);
typedef struct spScaleXTimeline {
	spCurveTimeline1 super;
	int boneIndex;
} spScaleXTimeline;
 spScaleXTimeline *spScaleXTimeline_create(int frameCount, int bezierCount, int boneIndex);
 void spScaleXTimeline_setFrame(spScaleXTimeline *self, int frame, float time, float x);
typedef struct spScaleYTimeline {
	spCurveTimeline1 super;
	int boneIndex;
} spScaleYTimeline;
 spScaleYTimeline *spScaleYTimeline_create(int frameCount, int bezierCount, int boneIndex);
 void spScaleYTimeline_setFrame(spScaleYTimeline *self, int frame, float time, float y);
typedef struct spShearTimeline {
	spCurveTimeline2 super;
	int boneIndex;
} spShearTimeline;
 spShearTimeline *spShearTimeline_create(int frameCount, int bezierCount, int boneIndex);
 void spShearTimeline_setFrame(spShearTimeline *self, int frameIndex, float time, float x, float y);
typedef struct spShearXTimeline {
	spCurveTimeline1 super;
	int boneIndex;
} spShearXTimeline;
 spShearXTimeline *spShearXTimeline_create(int frameCount, int bezierCount, int boneIndex);
 void spShearXTimeline_setFrame(spShearXTimeline *self, int frame, float time, float x);
typedef struct spShearYTimeline {
	spCurveTimeline1 super;
	int boneIndex;
} spShearYTimeline;
 spShearYTimeline *spShearYTimeline_create(int frameCount, int bezierCount, int boneIndex);
 void spShearYTimeline_setFrame(spShearYTimeline *self, int frame, float time, float x);
typedef struct spRGBATimeline {
	spCurveTimeline2 super;
	int slotIndex;
} spRGBATimeline;
 spRGBATimeline *spRGBATimeline_create(int framesCount, int bezierCount, int slotIndex);
 void
spRGBATimeline_setFrame(spRGBATimeline *self, int frameIndex, float time, float r, float g, float b, float a);
typedef struct spRGBTimeline {
	spCurveTimeline2 super;
	int slotIndex;
} spRGBTimeline;
 spRGBTimeline *spRGBTimeline_create(int framesCount, int bezierCount, int slotIndex);
 void spRGBTimeline_setFrame(spRGBTimeline *self, int frameIndex, float time, float r, float g, float b);
typedef struct spAlphaTimeline {
	spCurveTimeline1 super;
	int slotIndex;
} spAlphaTimeline;
 spAlphaTimeline *spAlphaTimeline_create(int frameCount, int bezierCount, int slotIndex);
 void spAlphaTimeline_setFrame(spAlphaTimeline *self, int frame, float time, float x);
typedef struct spRGBA2Timeline {
	spCurveTimeline super;
	int slotIndex;
} spRGBA2Timeline;
 spRGBA2Timeline *spRGBA2Timeline_create(int framesCount, int bezierCount, int slotIndex);
 void
spRGBA2Timeline_setFrame(spRGBA2Timeline *self, int frameIndex, float time, float r, float g, float b, float a,
						 float r2, float g2, float b2);
typedef struct spRGB2Timeline {
	spCurveTimeline super;
	int slotIndex;
} spRGB2Timeline;
 spRGB2Timeline *spRGB2Timeline_create(int framesCount, int bezierCount, int slotIndex);
 void
spRGB2Timeline_setFrame(spRGB2Timeline *self, int frameIndex, float time, float r, float g, float b, float r2, float g2,
						float b2);
typedef struct spAttachmentTimeline {
	spTimeline super;
	int slotIndex;
	char **attachmentNames;
} spAttachmentTimeline;
 spAttachmentTimeline *spAttachmentTimeline_create(int framesCount, int SlotIndex);
 void
spAttachmentTimeline_setFrame(spAttachmentTimeline *self, int frameIndex, float time, const char *attachmentName);
typedef struct spDeformTimeline {
	spCurveTimeline super;
	int frameVerticesCount;
	float **frameVertices;
	int slotIndex;
	spAttachment *attachment;
} spDeformTimeline;
 spDeformTimeline *
spDeformTimeline_create(int framesCount, int frameVerticesCount, int bezierCount, int slotIndex,
						spVertexAttachment *attachment);
 void spDeformTimeline_setFrame(spDeformTimeline *self, int frameIndex, float time, float *vertices);
typedef struct spSequenceTimeline {
	spTimeline super;
	int slotIndex;
	spAttachment *attachment;
} spSequenceTimeline;
 spSequenceTimeline *spSequenceTimeline_create(int framesCount, int slotIndex, spAttachment *attachment);
 void spSequenceTimeline_setFrame(spSequenceTimeline *self, int frameIndex, float time, int mode, int index, float delay);
typedef struct spEventTimeline {
	spTimeline super;
	spEvent **events;
} spEventTimeline;
 spEventTimeline *spEventTimeline_create(int framesCount);
 void spEventTimeline_setFrame(spEventTimeline *self, int frameIndex, spEvent *event);
typedef struct spDrawOrderTimeline {
	spTimeline super;
	int **drawOrders;
	int slotsCount;
} spDrawOrderTimeline;
 spDrawOrderTimeline *spDrawOrderTimeline_create(int framesCount, int slotsCount);
 void spDrawOrderTimeline_setFrame(spDrawOrderTimeline *self, int frameIndex, float time, const int *drawOrder);
typedef struct spInheritTimeline {
    spTimeline super;
    int boneIndex;
} spInheritTimeline;
 spInheritTimeline *spInheritTimeline_create(int framesCount, int boneIndex);
 void spInheritTimeline_setFrame(spInheritTimeline *self, int frameIndex, float time, spInherit inherit);
typedef struct spIkConstraintTimeline {
	spCurveTimeline super;
	int ikConstraintIndex;
} spIkConstraintTimeline;
 spIkConstraintTimeline *
spIkConstraintTimeline_create(int framesCount, int bezierCount, int transformConstraintIndex);
 void
spIkConstraintTimeline_setFrame(spIkConstraintTimeline *self, int frameIndex, float time, float mix, float softness,
								int bendDirection, int  compress, int  stretch);
typedef struct spTransformConstraintTimeline {
	spCurveTimeline super;
	int transformConstraintIndex;
} spTransformConstraintTimeline;
 spTransformConstraintTimeline *
spTransformConstraintTimeline_create(int framesCount, int bezierCount, int transformConstraintIndex);
 void
spTransformConstraintTimeline_setFrame(spTransformConstraintTimeline *self, int frameIndex, float time, float mixRotate,
									   float mixX, float mixY, float mixScaleX, float mixScaleY, float mixShearY);
typedef struct spPathConstraintPositionTimeline {
	spCurveTimeline super;
	int pathConstraintIndex;
} spPathConstraintPositionTimeline;
 spPathConstraintPositionTimeline *
spPathConstraintPositionTimeline_create(int framesCount, int bezierCount, int pathConstraintIndex);
 void
spPathConstraintPositionTimeline_setFrame(spPathConstraintPositionTimeline *self, int frameIndex, float time,
										  float value);
typedef struct spPathConstraintSpacingTimeline {
	spCurveTimeline super;
	int pathConstraintIndex;
} spPathConstraintSpacingTimeline;
 spPathConstraintSpacingTimeline *
spPathConstraintSpacingTimeline_create(int framesCount, int bezierCount, int pathConstraintIndex);
 void spPathConstraintSpacingTimeline_setFrame(spPathConstraintSpacingTimeline *self, int frameIndex, float time,
													 float value);
typedef struct spPathConstraintMixTimeline {
	spCurveTimeline super;
	int pathConstraintIndex;
} spPathConstraintMixTimeline;
 spPathConstraintMixTimeline *
spPathConstraintMixTimeline_create(int framesCount, int bezierCount, int pathConstraintIndex);
 void
spPathConstraintMixTimeline_setFrame(spPathConstraintMixTimeline *self, int frameIndex, float time, float mixRotate,
									 float mixX, float mixY);
typedef struct spPhysicsConstraintTimeline {
    spCurveTimeline super;
    int physicsConstraintIndex;
} spPhysicsConstraintTimeline;
 spPhysicsConstraintTimeline *
spPhysicsConstraintTimeline_create(int framesCount, int bezierCount, int physicsConstraintIndex, spTimelineType type);
 void spPhysicsConstraintTimeline_setFrame(spPhysicsConstraintTimeline *self, int frame, float time, float value);
typedef struct spPhysicsConstraintResetTimeline {
    spTimeline super;
    int physicsConstraintIndex;
} spPhysicsConstraintResetTimeline;
 spPhysicsConstraintResetTimeline *spPhysicsConstraintResetTimeline_create(int framesCount, int boneIndex);
 void spPhysicsConstraintResetTimeline_setFrame(spPhysicsConstraintResetTimeline *self, int frameIndex, float time);
typedef struct spIkConstraintData {
	char *name;
	int order;
	int  skinRequired;
	int bonesCount;
	spBoneData **bones;
	spBoneData *target;
	int bendDirection;
	int  compress;
	int  stretch;
	int  uniform;
	float mix;
	float softness;
} spIkConstraintData;
 spIkConstraintData *spIkConstraintData_create(const char *name);
 void spIkConstraintData_dispose(spIkConstraintData *self);
typedef struct spTransformConstraintData {
	char *name;
	int order;
	int  skinRequired;
	int bonesCount;
	spBoneData **bones;
	spBoneData *target;
	float mixRotate, mixX, mixY, mixScaleX, mixScaleY, mixShearY;
	float offsetRotation, offsetX, offsetY, offsetScaleX, offsetScaleY, offsetShearY;
	int  relative;
	int  local;
} spTransformConstraintData;
 spTransformConstraintData *spTransformConstraintData_create(const char *name);
 void spTransformConstraintData_dispose(spTransformConstraintData *self);
typedef enum {
	SP_POSITION_MODE_FIXED, SP_POSITION_MODE_PERCENT
} spPositionMode;
typedef enum {
	SP_SPACING_MODE_LENGTH, SP_SPACING_MODE_FIXED, SP_SPACING_MODE_PERCENT, SP_SPACING_MODE_PROPORTIONAL
} spSpacingMode;
typedef enum {
	SP_ROTATE_MODE_TANGENT, SP_ROTATE_MODE_CHAIN, SP_ROTATE_MODE_CHAIN_SCALE
} spRotateMode;
typedef struct spPathConstraintData {
	char *name;
	int order;
	int  skinRequired;
	int bonesCount;
	spBoneData **bones;
	spSlotData *target;
	spPositionMode positionMode;
	spSpacingMode spacingMode;
	spRotateMode rotateMode;
	float offsetRotation;
	float position, spacing;
	float mixRotate, mixX, mixY;
} spPathConstraintData;
 spPathConstraintData *spPathConstraintData_create(const char *name);
 void spPathConstraintData_dispose(spPathConstraintData *self);
typedef struct spPhysicsConstraintData {
	char *name;
	int order;
	int  skinRequired;
    spBoneData *bone;
    float x, y, rotate, scaleX, shearX, limit;
    float step, inertia, strength, damping, massInverse, wind, gravity, mix;
    int  inertiaGlobal, strengthGlobal, dampingGlobal, massGlobal, windGlobal, gravityGlobal, mixGlobal;
} spPhysicsConstraintData;
 spPhysicsConstraintData *spPhysicsConstraintData_create(const char *name);
 void spPhysicsConstraintData_dispose(spPhysicsConstraintData *self);
struct spSkeleton;
typedef struct spBoneDataArray { int size; int capacity; spBoneData** items; } spBoneDataArray;  spBoneDataArray* spBoneDataArray_create(int initialCapacity);  void spBoneDataArray_dispose(spBoneDataArray* self);  void spBoneDataArray_clear(spBoneDataArray* self);  spBoneDataArray* spBoneDataArray_setSize(spBoneDataArray* self, int newSize);  void spBoneDataArray_ensureCapacity(spBoneDataArray* self, int newCapacity);  void spBoneDataArray_add(spBoneDataArray* self, spBoneData* value);  void spBoneDataArray_addAll(spBoneDataArray* self, spBoneDataArray* other);  void spBoneDataArray_addAllValues(spBoneDataArray* self, spBoneData** values, int offset, int count);  void spBoneDataArray_removeAt(spBoneDataArray* self, int index);  int spBoneDataArray_contains(spBoneDataArray* self, spBoneData* value);  spBoneData* spBoneDataArray_pop(spBoneDataArray* self);  spBoneData* spBoneDataArray_peek(spBoneDataArray* self);
typedef struct spIkConstraintDataArray { int size; int capacity; spIkConstraintData** items; } spIkConstraintDataArray;  spIkConstraintDataArray* spIkConstraintDataArray_create(int initialCapacity);  void spIkConstraintDataArray_dispose(spIkConstraintDataArray* self);  void spIkConstraintDataArray_clear(spIkConstraintDataArray* self);  spIkConstraintDataArray* spIkConstraintDataArray_setSize(spIkConstraintDataArray* self, int newSize);  void spIkConstraintDataArray_ensureCapacity(spIkConstraintDataArray* self, int newCapacity);  void spIkConstraintDataArray_add(spIkConstraintDataArray* self, spIkConstraintData* value);  void spIkConstraintDataArray_addAll(spIkConstraintDataArray* self, spIkConstraintDataArray* other);  void spIkConstraintDataArray_addAllValues(spIkConstraintDataArray* self, spIkConstraintData** values, int offset, int count);  void spIkConstraintDataArray_removeAt(spIkConstraintDataArray* self, int index);  int spIkConstraintDataArray_contains(spIkConstraintDataArray* self, spIkConstraintData* value);  spIkConstraintData* spIkConstraintDataArray_pop(spIkConstraintDataArray* self);  spIkConstraintData* spIkConstraintDataArray_peek(spIkConstraintDataArray* self);
typedef struct spTransformConstraintDataArray { int size; int capacity; spTransformConstraintData** items; } spTransformConstraintDataArray;  spTransformConstraintDataArray* spTransformConstraintDataArray_create(int initialCapacity);  void spTransformConstraintDataArray_dispose(spTransformConstraintDataArray* self);  void spTransformConstraintDataArray_clear(spTransformConstraintDataArray* self);  spTransformConstraintDataArray* spTransformConstraintDataArray_setSize(spTransformConstraintDataArray* self, int newSize);  void spTransformConstraintDataArray_ensureCapacity(spTransformConstraintDataArray* self, int newCapacity);  void spTransformConstraintDataArray_add(spTransformConstraintDataArray* self, spTransformConstraintData* value);  void spTransformConstraintDataArray_addAll(spTransformConstraintDataArray* self, spTransformConstraintDataArray* other);  void spTransformConstraintDataArray_addAllValues(spTransformConstraintDataArray* self, spTransformConstraintData** values, int offset, int count);  void spTransformConstraintDataArray_removeAt(spTransformConstraintDataArray* self, int index);  int spTransformConstraintDataArray_contains(spTransformConstraintDataArray* self, spTransformConstraintData* value);  spTransformConstraintData* spTransformConstraintDataArray_pop(spTransformConstraintDataArray* self);  spTransformConstraintData* spTransformConstraintDataArray_peek(spTransformConstraintDataArray* self);
typedef struct spPathConstraintDataArray { int size; int capacity; spPathConstraintData** items; } spPathConstraintDataArray;  spPathConstraintDataArray* spPathConstraintDataArray_create(int initialCapacity);  void spPathConstraintDataArray_dispose(spPathConstraintDataArray* self);  void spPathConstraintDataArray_clear(spPathConstraintDataArray* self);  spPathConstraintDataArray* spPathConstraintDataArray_setSize(spPathConstraintDataArray* self, int newSize);  void spPathConstraintDataArray_ensureCapacity(spPathConstraintDataArray* self, int newCapacity);  void spPathConstraintDataArray_add(spPathConstraintDataArray* self, spPathConstraintData* value);  void spPathConstraintDataArray_addAll(spPathConstraintDataArray* self, spPathConstraintDataArray* other);  void spPathConstraintDataArray_addAllValues(spPathConstraintDataArray* self, spPathConstraintData** values, int offset, int count);  void spPathConstraintDataArray_removeAt(spPathConstraintDataArray* self, int index);  int spPathConstraintDataArray_contains(spPathConstraintDataArray* self, spPathConstraintData* value);  spPathConstraintData* spPathConstraintDataArray_pop(spPathConstraintDataArray* self);  spPathConstraintData* spPathConstraintDataArray_peek(spPathConstraintDataArray* self);
typedef struct spPhysicsConstraintDataArray { int size; int capacity; spPhysicsConstraintData** items; } spPhysicsConstraintDataArray;  spPhysicsConstraintDataArray* spPhysicsConstraintDataArray_create(int initialCapacity);  void spPhysicsConstraintDataArray_dispose(spPhysicsConstraintDataArray* self);  void spPhysicsConstraintDataArray_clear(spPhysicsConstraintDataArray* self);  spPhysicsConstraintDataArray* spPhysicsConstraintDataArray_setSize(spPhysicsConstraintDataArray* self, int newSize);  void spPhysicsConstraintDataArray_ensureCapacity(spPhysicsConstraintDataArray* self, int newCapacity);  void spPhysicsConstraintDataArray_add(spPhysicsConstraintDataArray* self, spPhysicsConstraintData* value);  void spPhysicsConstraintDataArray_addAll(spPhysicsConstraintDataArray* self, spPhysicsConstraintDataArray* other);  void spPhysicsConstraintDataArray_addAllValues(spPhysicsConstraintDataArray* self, spPhysicsConstraintData** values, int offset, int count);  void spPhysicsConstraintDataArray_removeAt(spPhysicsConstraintDataArray* self, int index);  int spPhysicsConstraintDataArray_contains(spPhysicsConstraintDataArray* self, spPhysicsConstraintData* value);  spPhysicsConstraintData* spPhysicsConstraintDataArray_pop(spPhysicsConstraintDataArray* self);  spPhysicsConstraintData* spPhysicsConstraintDataArray_peek(spPhysicsConstraintDataArray* self);
typedef struct spSkin {
	char *name;
	spBoneDataArray *bones;
	spIkConstraintDataArray *ikConstraints;
	spTransformConstraintDataArray *transformConstraints;
	spPathConstraintDataArray *pathConstraints;
    spPhysicsConstraintDataArray *physicsConstraints;
    spColor color;
} spSkin;
typedef struct _Entry _Entry;
typedef struct _Entry spSkinEntry;
struct _Entry {
	int slotIndex;
	char *name;
	spAttachment *attachment;
	_Entry *next;
};
typedef struct _SkinHashTableEntry _SkinHashTableEntry;
struct _SkinHashTableEntry {
	_Entry *entry;
	_SkinHashTableEntry *next;
};
typedef struct {
	spSkin super;
	_Entry *entries; 
	_SkinHashTableEntry *entriesHashTable[100]; 
} _spSkin;
 spSkin *spSkin_create(const char *name);
 void spSkin_dispose(spSkin *self);
 void spSkin_setAttachment(spSkin *self, int slotIndex, const char *name, spAttachment *attachment);
 spAttachment *spSkin_getAttachment(const spSkin *self, int slotIndex, const char *name);
 const char *spSkin_getAttachmentName(const spSkin *self, int slotIndex, int attachmentIndex);
 void spSkin_attachAll(const spSkin *self, struct spSkeleton *skeleton, const spSkin *oldspSkin);
 void spSkin_addSkin(spSkin *self, const spSkin *other);
 void spSkin_copySkin(spSkin *self, const spSkin *other);
 spSkinEntry *spSkin_getAttachments(const spSkin *self);
 void spSkin_clear(spSkin *self);
typedef struct spSkeletonData {
	char *version;
	char *hash;
	float x, y, width, height;
    float referenceScale;
	float fps;
	const char *imagesPath;
	const char *audioPath;
	int stringsCount;
	char **strings;
	int bonesCount;
	spBoneData **bones;
	int slotsCount;
	spSlotData **slots;
	int skinsCount;
	spSkin **skins;
	spSkin *defaultSkin;
	int eventsCount;
	spEventData **events;
	int animationsCount;
	spAnimation **animations;
	int ikConstraintsCount;
	spIkConstraintData **ikConstraints;
	int transformConstraintsCount;
	spTransformConstraintData **transformConstraints;
	int pathConstraintsCount;
	spPathConstraintData **pathConstraints;
    int physicsConstraintsCount;
    spPhysicsConstraintData **physicsConstraints;
} spSkeletonData;
 spSkeletonData *spSkeletonData_create(void);
 void spSkeletonData_dispose(spSkeletonData *self);
 spBoneData *spSkeletonData_findBone(const spSkeletonData *self, const char *boneName);
 spSlotData *spSkeletonData_findSlot(const spSkeletonData *self, const char *slotName);
 spSkin *spSkeletonData_findSkin(const spSkeletonData *self, const char *skinName);
 spEventData *spSkeletonData_findEvent(const spSkeletonData *self, const char *eventName);
 spAnimation *spSkeletonData_findAnimation(const spSkeletonData *self, const char *animationName);
 spIkConstraintData *spSkeletonData_findIkConstraint(const spSkeletonData *self, const char *constraintName);
 spTransformConstraintData *
spSkeletonData_findTransformConstraint(const spSkeletonData *self, const char *constraintName);
 spPathConstraintData *spSkeletonData_findPathConstraint(const spSkeletonData *self, const char *constraintName);
 spPhysicsConstraintData *spSkeletonData_findPhysicsConstraint(const spSkeletonData *self, const char *constraintName);
typedef struct spAnimationStateData {
	spSkeletonData *skeletonData;
	float defaultMix;
	const void *entries;
} spAnimationStateData;
 spAnimationStateData *spAnimationStateData_create(spSkeletonData *skeletonData);
 void spAnimationStateData_dispose(spAnimationStateData *self);
 void
spAnimationStateData_setMixByName(spAnimationStateData *self, const char *fromName, const char *toName, float duration);
 void spAnimationStateData_setMix(spAnimationStateData *self, spAnimation *from, spAnimation *to, float duration);
 float spAnimationStateData_getMix(spAnimationStateData *self, spAnimation *from, spAnimation *to);
typedef enum {
	SP_ANIMATION_START,
	SP_ANIMATION_INTERRUPT,
	SP_ANIMATION_END,
	SP_ANIMATION_COMPLETE,
	SP_ANIMATION_DISPOSE,
	SP_ANIMATION_EVENT
} spEventType;
typedef struct spAnimationState spAnimationState;
typedef struct spTrackEntry spTrackEntry;
typedef void (*spAnimationStateListener)(spAnimationState *state, spEventType type, spTrackEntry *entry,
										 spEvent *event);
typedef struct spTrackEntryArray { int size; int capacity; spTrackEntry** items; } spTrackEntryArray;  spTrackEntryArray* spTrackEntryArray_create(int initialCapacity);  void spTrackEntryArray_dispose(spTrackEntryArray* self);  void spTrackEntryArray_clear(spTrackEntryArray* self);  spTrackEntryArray* spTrackEntryArray_setSize(spTrackEntryArray* self, int newSize);  void spTrackEntryArray_ensureCapacity(spTrackEntryArray* self, int newCapacity);  void spTrackEntryArray_add(spTrackEntryArray* self, spTrackEntry* value);  void spTrackEntryArray_addAll(spTrackEntryArray* self, spTrackEntryArray* other);  void spTrackEntryArray_addAllValues(spTrackEntryArray* self, spTrackEntry** values, int offset, int count);  void spTrackEntryArray_removeAt(spTrackEntryArray* self, int index);  int spTrackEntryArray_contains(spTrackEntryArray* self, spTrackEntry* value);  spTrackEntry* spTrackEntryArray_pop(spTrackEntryArray* self);  spTrackEntry* spTrackEntryArray_peek(spTrackEntryArray* self);
struct spTrackEntry {
	spAnimation *animation;
	spTrackEntry *previous;
	spTrackEntry *next;
	spTrackEntry *mixingFrom;
	spTrackEntry *mixingTo;
	spAnimationStateListener listener;
	int trackIndex;
	int  loop;
	int  holdPrevious;
	int  reverse;
	int  shortestRotation;
	float eventThreshold, mixAttachmentThreshold, alphaAttachmentThreshold, mixDrawOrderThreshold;
	float animationStart, animationEnd, animationLast, nextAnimationLast;
	float delay, trackTime, trackLast, nextTrackLast, trackEnd, timeScale;
	float alpha, mixTime, mixDuration, interruptAlpha, totalAlpha;
	spMixBlend mixBlend;
	spIntArray *timelineMode;
	spTrackEntryArray *timelineHoldMix;
	float *timelinesRotation;
	int timelinesRotationCount;
	void *rendererObject;
	void *userData;
};
struct spAnimationState {
	spAnimationStateData *data;
	int tracksCount;
	spTrackEntry **tracks;
	spAnimationStateListener listener;
	float timeScale;
	void *rendererObject;
	void *userData;
	int unkeyedState;
};
 spAnimationState *spAnimationState_create(spAnimationStateData *data);
 void spAnimationState_dispose(spAnimationState *self);
 void spAnimationState_update(spAnimationState *self, float delta);
 int  spAnimationState_apply(spAnimationState *self, struct spSkeleton *skeleton);
 void spAnimationState_clearTracks(spAnimationState *self);
 void spAnimationState_clearTrack(spAnimationState *self, int trackIndex);
 spTrackEntry *
spAnimationState_setAnimationByName(spAnimationState *self, int trackIndex, const char *animationName,
									int loop);
 spTrackEntry *
spAnimationState_setAnimation(spAnimationState *self, int trackIndex, spAnimation *animation, int loop);
 spTrackEntry *
spAnimationState_addAnimationByName(spAnimationState *self, int trackIndex, const char *animationName,
									int loop, float delay);
 spTrackEntry *
spAnimationState_addAnimation(spAnimationState *self, int trackIndex, spAnimation *animation, int loop,
							  float delay);
 spTrackEntry *spAnimationState_setEmptyAnimation(spAnimationState *self, int trackIndex, float mixDuration);
 spTrackEntry *
spAnimationState_addEmptyAnimation(spAnimationState *self, int trackIndex, float mixDuration, float delay);
 void spAnimationState_setEmptyAnimations(spAnimationState *self, float mixDuration);
 spTrackEntry *spAnimationState_getCurrent(spAnimationState *self, int trackIndex);
 void spAnimationState_clearListenerNotifications(spAnimationState *self);
 float spTrackEntry_getAnimationTime(spTrackEntry *entry);
 void spTrackEntry_resetRotationDirections(spTrackEntry *entry);
 float spTrackEntry_getTrackComplete(spTrackEntry *entry);
 void spTrackEntry_setMixDuration(spTrackEntry *entry, float mixDuration, float delay);
 int  spTrackEntry_wasApplied(spTrackEntry *entry);
 int  spTrackEntry_isNextReady(spTrackEntry *entry);
 void spAnimationState_clearNext(spAnimationState *self, spTrackEntry *entry);
 void spAnimationState_disposeStatics(void);
typedef struct spAttachmentLoader {
	char *error1;
	char *error2;
	const void *vtable;
} spAttachmentLoader;
 void spAttachmentLoader_dispose(spAttachmentLoader *self);
 spAttachment *
spAttachmentLoader_createAttachment(spAttachmentLoader *self, spSkin *skin, spAttachmentType type, const char *name,
									const char *path, spSequence *sequence);
 void spAttachmentLoader_configureAttachment(spAttachmentLoader *self, spAttachment *attachment);
 void spAttachmentLoader_disposeAttachment(spAttachmentLoader *self, spAttachment *attachment);
typedef struct spAtlasAttachmentLoader {
	spAttachmentLoader super;
	spAtlas *atlas;
} spAtlasAttachmentLoader;
 spAtlasAttachmentLoader *spAtlasAttachmentLoader_create(spAtlas *atlas);
typedef struct spRegionAttachment {
	spAttachment super;
	char *path;
	float x, y, scaleX, scaleY, rotation, width, height;
	spColor color;
	void *rendererObject;
	spTextureRegion *region;
	spSequence *sequence;
	float offset[8];
	float uvs[8];
} spRegionAttachment;
 spRegionAttachment *spRegionAttachment_create(const char *name);
 void spRegionAttachment_updateRegion(spRegionAttachment *self);
 void spRegionAttachment_computeWorldVertices(spRegionAttachment *self, spSlot *slot, float *vertices, int offset,
													int stride);
typedef struct spMeshAttachment spMeshAttachment;
struct spMeshAttachment {
	spVertexAttachment super;
	void *rendererObject;
	spTextureRegion *region;
	spSequence *sequence;
	char *path;
	float *regionUVs;
	float *uvs;
	int trianglesCount;
	unsigned short *triangles;
	spColor color;
	int hullLength;
	spMeshAttachment *parentMesh;
	
	int edgesCount;
	unsigned short *edges;
	float width, height;
};
 spMeshAttachment *spMeshAttachment_create(const char *name);
 void spMeshAttachment_updateRegion(spMeshAttachment *self);
 void spMeshAttachment_setParentMesh(spMeshAttachment *self, spMeshAttachment *parentMesh);
 spMeshAttachment *spMeshAttachment_newLinkedMesh(spMeshAttachment *self);
typedef struct spBoundingBoxAttachment {
	spVertexAttachment super;
	spColor color;
} spBoundingBoxAttachment;
 spBoundingBoxAttachment *spBoundingBoxAttachment_create(const char *name);
typedef struct spClippingAttachment {
	spVertexAttachment super;
	spSlotData *endSlot;
	spColor color;
} spClippingAttachment;
 void _spClippingAttachment_dispose(spAttachment *self);
 spClippingAttachment *spClippingAttachment_create(const char *name);
typedef struct spPointAttachment {
	spAttachment super;
	float x, y, rotation;
	spColor color;
} spPointAttachment;
 spPointAttachment *spPointAttachment_create(const char *name);
 void spPointAttachment_computeWorldPosition(spPointAttachment *self, spBone *bone, float *x, float *y);
 float spPointAttachment_computeWorldRotation(spPointAttachment *self, spBone *bone);
struct spSkeleton;
typedef struct spIkConstraint {
	spIkConstraintData *data;
	int bonesCount;
	spBone **bones;
	spBone *target;
	int bendDirection;
	int  compress;
	int  stretch;
	float mix;
	float softness;
	int  active;
} spIkConstraint;
 spIkConstraint *spIkConstraint_create(spIkConstraintData *data, const struct spSkeleton *skeleton);
 void spIkConstraint_dispose(spIkConstraint *self);
 void spIkConstraint_update(spIkConstraint *self);
 void spIkConstraint_setToSetupPose(spIkConstraint *self);
 void
spIkConstraint_apply1(spBone *bone, float targetX, float targetY, int  compress, int  stretch,
					  int  uniform, float alpha);
 void spIkConstraint_apply2(spBone *parent, spBone *child, float targetX, float targetY, int bendDirection,
								  int  stretch, int  uniform, float softness, float alpha);
struct spSkeleton;
typedef struct spTransformConstraint {
	spTransformConstraintData *data;
	int bonesCount;
	spBone **bones;
	spBone *target;
	float mixRotate, mixX, mixY, mixScaleX, mixScaleY, mixShearY;
	int  active;
} spTransformConstraint;
 spTransformConstraint *
spTransformConstraint_create(spTransformConstraintData *data, const struct spSkeleton *skeleton);
 void spTransformConstraint_dispose(spTransformConstraint *self);
 void spTransformConstraint_update(spTransformConstraint *self);
 void spTransformConstraint_setToSetupPose(spTransformConstraint *self);
typedef struct spPathAttachment {
	spVertexAttachment super;
	int lengthsLength;
	float *lengths;
	int  closed, constantSpeed;
	spColor color;
} spPathAttachment;
 spPathAttachment *spPathAttachment_create(const char *name);
struct spSkeleton;
typedef struct spPathConstraint {
	spPathConstraintData *data;
	int bonesCount;
	spBone **bones;
	spSlot *target;
	float position, spacing;
	float mixRotate, mixX, mixY;
	int spacesCount;
	float *spaces;
	int positionsCount;
	float *positions;
	int worldCount;
	float *world;
	int curvesCount;
	float *curves;
	int lengthsCount;
	float *lengths;
	float segments[10];
	int  active;
} spPathConstraint;
 spPathConstraint *spPathConstraint_create(spPathConstraintData *data, const struct spSkeleton *skeleton);
 void spPathConstraint_dispose(spPathConstraint *self);
 void spPathConstraint_update(spPathConstraint *self);
 void spPathConstraint_setToSetupPose(spPathConstraint *self);
 float *spPathConstraint_computeWorldPositions(spPathConstraint *self, spPathAttachment *path, int spacesCount,
													 int  tangents);
typedef struct spPhysicsConstraint {
    spPhysicsConstraintData *data;
    spBone* bone;
    float inertia;
    float strength;
    float damping;
    float massInverse;
    float wind;
    float gravity;
    float mix;
    int  reset;
    float ux;
    float uy;
    float cx;
    float cy;
    float tx;
    float ty;
    float xOffset;
    float xVelocity;
    float yOffset;
    float yVelocity;
    float rotateOffset;
    float rotateVelocity;
    float scaleOffset;
    float scaleVelocity;
    int  active;
    struct spSkeleton *skeleton;
    float remaining;
    float lastTime;
} spPhysicsConstraint;
 spPhysicsConstraint *
spPhysicsConstraint_create(spPhysicsConstraintData *data, struct spSkeleton *skeleton);
 void spPhysicsConstraint_dispose(spPhysicsConstraint *self);
 void spPhysicsConstraint_reset(spPhysicsConstraint *self);
 void spPhysicsConstraint_setToSetupPose(spPhysicsConstraint *self);
 void spPhysicsConstraint_update(spPhysicsConstraint *self, spPhysics physics);
 void spPhysicsConstraint_rotate(spPhysicsConstraint *self, float x, float y, float degrees);
 void spPhysicsConstraint_translate(spPhysicsConstraint *self, float x, float y);
typedef struct spSkeleton {
	spSkeletonData *data;
	int bonesCount;
	spBone **bones;
	spBone *root;
	int slotsCount;
	spSlot **slots;
	spSlot **drawOrder;
	int ikConstraintsCount;
	spIkConstraint **ikConstraints;
	int transformConstraintsCount;
	spTransformConstraint **transformConstraints;
	int pathConstraintsCount;
	spPathConstraint **pathConstraints;
    int physicsConstraintsCount;
    spPhysicsConstraint **physicsConstraints;
	spSkin *skin;
	spColor color;
	float scaleX, scaleY;
	float x, y;
    float time;
} spSkeleton;
 spSkeleton *spSkeleton_create(spSkeletonData *data);
 void spSkeleton_dispose(spSkeleton *self);
 void spSkeleton_updateCache(spSkeleton *self);
 void spSkeleton_updateWorldTransform(const spSkeleton *self, spPhysics physics);
 void spSkeleton_update(spSkeleton *self, float delta);
 void spSkeleton_setToSetupPose(const spSkeleton *self);
 void spSkeleton_setBonesToSetupPose(const spSkeleton *self);
 void spSkeleton_setSlotsToSetupPose(const spSkeleton *self);
 spBone *spSkeleton_findBone(const spSkeleton *self, const char *boneName);
 spSlot *spSkeleton_findSlot(const spSkeleton *self, const char *slotName);
 void spSkeleton_setSkin(spSkeleton *self, spSkin *skin);
 int spSkeleton_setSkinByName(spSkeleton *self, const char *skinName);
 spAttachment *
spSkeleton_getAttachmentForSlotName(const spSkeleton *self, const char *slotName, const char *attachmentName);
 spAttachment *
spSkeleton_getAttachmentForSlotIndex(const spSkeleton *self, int slotIndex, const char *attachmentName);
 int spSkeleton_setAttachment(spSkeleton *self, const char *slotName, const char *attachmentName);
 spIkConstraint *spSkeleton_findIkConstraint(const spSkeleton *self, const char *constraintName);
 spTransformConstraint *spSkeleton_findTransformConstraint(const spSkeleton *self, const char *constraintName);
 spPathConstraint *spSkeleton_findPathConstraint(const spSkeleton *self, const char *constraintName);
 spPhysicsConstraint *spSkeleton_findPhysicsConstraint(const spSkeleton *self, const char *constraintName);
 void spSkeleton_physicsTranslate(spSkeleton *self, float x, float y);
 void spSkeleton_physicsRotate(spSkeleton *self, float x, float y, float degrees);
typedef struct spPolygon {
	float *vertices;
	int count;
	int capacity;
} spPolygon;
 spPolygon *spPolygon_create(int capacity);
 void spPolygon_dispose(spPolygon *self);
 int spPolygon_containsPoint(spPolygon *polygon, float x, float y);
 int spPolygon_intersectsSegment(spPolygon *polygon, float x1, float y1, float x2, float y2);
typedef struct spSkeletonBounds {
	int count;
	spBoundingBoxAttachment **boundingBoxes;
	spPolygon **polygons;
	float minX, minY, maxX, maxY;
} spSkeletonBounds;
 spSkeletonBounds *spSkeletonBounds_create(void);
 void spSkeletonBounds_dispose(spSkeletonBounds *self);
 void spSkeletonBounds_update(spSkeletonBounds *self, spSkeleton *skeleton, int updateAabb);
 int spSkeletonBounds_aabbContainsPoint(spSkeletonBounds *self, float x, float y);
 int 
spSkeletonBounds_aabbIntersectsSegment(spSkeletonBounds *self, float x1, float y1, float x2, float y2);
 int spSkeletonBounds_aabbIntersectsSkeleton(spSkeletonBounds *self, spSkeletonBounds *bounds);
 spBoundingBoxAttachment *spSkeletonBounds_containsPoint(spSkeletonBounds *self, float x, float y);
 spBoundingBoxAttachment *
spSkeletonBounds_intersectsSegment(spSkeletonBounds *self, float x1, float y1, float x2, float y2);
 spPolygon *spSkeletonBounds_getPolygon(spSkeletonBounds *self, spBoundingBoxAttachment *boundingBox);
struct spAtlasAttachmentLoader;
typedef struct spSkeletonBinary {
	float scale;
	spAttachmentLoader *attachmentLoader;
	char *error;
} spSkeletonBinary;
 spSkeletonBinary *spSkeletonBinary_createWithLoader(spAttachmentLoader *attachmentLoader);
 spSkeletonBinary *spSkeletonBinary_create(spAtlas *atlas);
 void spSkeletonBinary_dispose(spSkeletonBinary *self);
 spSkeletonData *
spSkeletonBinary_readSkeletonData(spSkeletonBinary *self, const unsigned char *binary, const int length);
 spSkeletonData *spSkeletonBinary_readSkeletonDataFile(spSkeletonBinary *self, const char *path);
struct spAtlasAttachmentLoader;
typedef struct spSkeletonJson {
	float scale;
	spAttachmentLoader *attachmentLoader;
	char *error;
} spSkeletonJson;
 spSkeletonJson *spSkeletonJson_createWithLoader(spAttachmentLoader *attachmentLoader);
 spSkeletonJson *spSkeletonJson_create(spAtlas *atlas);
 void spSkeletonJson_dispose(spSkeletonJson *self);
 spSkeletonData *spSkeletonJson_readSkeletonData(spSkeletonJson *self, const char *json);
 spSkeletonData *spSkeletonJson_readSkeletonDataFile(spSkeletonJson *self, const char *path);
typedef struct spTriangulator {
	spArrayFloatArray *convexPolygons;
	spArrayShortArray *convexPolygonsIndices;
	spShortArray *indicesArray;
	spIntArray *isConcaveArray;
	spShortArray *triangles;
	spArrayFloatArray *polygonPool;
	spArrayShortArray *polygonIndicesPool;
} spTriangulator;
 spTriangulator *spTriangulator_create(void);
 spShortArray *spTriangulator_triangulate(spTriangulator *self, spFloatArray *verticesArray);
 spArrayFloatArray *
spTriangulator_decompose(spTriangulator *self, spFloatArray *verticesArray, spShortArray *triangles);
 void spTriangulator_dispose(spTriangulator *self);
typedef struct spSkeletonClipping {
	spTriangulator *triangulator;
	spFloatArray *clippingPolygon;
	spFloatArray *clipOutput;
	spFloatArray *clippedVertices;
	spFloatArray *clippedUVs;
	spUnsignedShortArray *clippedTriangles;
	spFloatArray *scratch;
	spClippingAttachment *clipAttachment;
	spArrayFloatArray *clippingPolygons;
} spSkeletonClipping;
 spSkeletonClipping *spSkeletonClipping_create(void);
 int spSkeletonClipping_clipStart(spSkeletonClipping *self, spSlot *slot, spClippingAttachment *clip);
 void spSkeletonClipping_clipEnd(spSkeletonClipping *self, spSlot *slot);
 void spSkeletonClipping_clipEnd2(spSkeletonClipping *self);
 int  spSkeletonClipping_isClipping(spSkeletonClipping *self);
 void spSkeletonClipping_clipTriangles(spSkeletonClipping *self, float *vertices, int verticesLength,
											 unsigned short *triangles, int trianglesLength, float *uvs, int stride);
 void spSkeletonClipping_dispose(spSkeletonClipping *self);
typedef unsigned char uint8;
typedef signed char int8;
typedef short int16;
typedef unsigned short uint16;
typedef int int32;
typedef unsigned int uint32;
typedef long long int64;
typedef unsigned long long uint64;
typedef int64 lint64;
typedef uint64 ulint64;
typedef long long intp;
typedef unsigned long long uintp;
typedef uint64 CSteamID;
typedef uint8 Salt_t[8];
typedef uint64 GID_t;
typedef uint64 JobID_t;
typedef GID_t TxnID_t;
typedef uint32 PackageId_t;
typedef uint32 BundleId_t;
typedef uint32 AppId_t;
typedef uint64 AssetClassId_t;
typedef uint32 PhysicalItemId_t;
typedef uint32 DepotId_t;
typedef uint32 RTime32;
typedef uint32 CellID_t;
typedef uint64 SteamAPICall_t;
typedef uint32 AccountID_t;
typedef uint32 PartnerId_t;
typedef uint64 ManifestId_t;
typedef uint64 SiteId_t;
typedef uint32 HAuthTicket;
typedef void (*PFNLegacyKeyRegistration)(const char *, const char *);
typedef _Bool (*PFNLegacyKeyInstalled)(void);
typedef void (*PFNPreMinidumpCallback)(void *);
typedef void * BREAKPAD_HANDLE;
typedef int32 HSteamPipe;
typedef int32 HSteamUser;
typedef void (*SteamAPIWarningMessageHook_t)(int, const char *);
typedef uint32 (*SteamAPI_CheckCallbackRegistered_t)(int) ;
typedef int16 FriendsGroupID_t;
typedef void (*SteamAPIWarningMessageHook_t)(int, const char *);
typedef void * HServerListRequest;
typedef int HServerQuery;
typedef uint64 UGCHandle_t;
typedef uint64 PublishedFileUpdateHandle_t;
typedef uint64 PublishedFileId_t;
typedef uint64 UGCFileWriteStreamHandle_t;
typedef uint64 SteamLeaderboard_t;
typedef uint64 SteamLeaderboardEntries_t;
typedef uint32 SNetSocket_t;
typedef uint32 SNetListenSocket_t;
typedef uint32 ScreenshotHandle;
typedef uint32 HTTPRequestHandle;
typedef uint32 HTTPCookieContainerHandle;
typedef uint64 ControllerHandle_t;
typedef uint64 ControllerActionSetHandle_t;
typedef uint64 ControllerDigitalActionHandle_t;
typedef uint64 ControllerAnalogActionHandle_t;
typedef uint64 UGCQueryHandle_t;
typedef uint64 UGCUpdateHandle_t;
typedef uint32 HHTMLBrowser;
typedef uint64 SteamItemInstanceID_t;
typedef int32 SteamItemDef_t;
typedef int32 SteamInventoryResult_t;
typedef uint64 SteamInventoryUpdateHandle_t;
typedef enum EUniverse {
	k_EUniverseInvalid = 0,
	k_EUniversePublic = 1,
	k_EUniverseBeta = 2,
	k_EUniverseInternal = 3,
	k_EUniverseDev = 4,
	k_EUniverseMax = 5
} EUniverse;
typedef enum EResult {
	k_EResultOK = 1,
	k_EResultFail = 2,
	k_EResultNoConnection = 3,
	k_EResultInvalidPassword = 5,
	k_EResultLoggedInElsewhere = 6,
	k_EResultInvalidProtocolVer = 7,
	k_EResultInvalidParam = 8,
	k_EResultFileNotFound = 9,
	k_EResultBusy = 10,
	k_EResultInvalidState = 11,
	k_EResultInvalidName = 12,
	k_EResultInvalidEmail = 13,
	k_EResultDuplicateName = 14,
	k_EResultAccessDenied = 15,
	k_EResultTimeout = 16,
	k_EResultBanned = 17,
	k_EResultAccountNotFound = 18,
	k_EResultInvalidSteamID = 19,
	k_EResultServiceUnavailable = 20,
	k_EResultNotLoggedOn = 21,
	k_EResultPending = 22,
	k_EResultEncryptionFailure = 23,
	k_EResultInsufficientPrivilege = 24,
	k_EResultLimitExceeded = 25,
	k_EResultRevoked = 26,
	k_EResultExpired = 27,
	k_EResultAlreadyRedeemed = 28,
	k_EResultDuplicateRequest = 29,
	k_EResultAlreadyOwned = 30,
	k_EResultIPNotFound = 31,
	k_EResultPersistFailed = 32,
	k_EResultLockingFailed = 33,
	k_EResultLogonSessionReplaced = 34,
	k_EResultConnectFailed = 35,
	k_EResultHandshakeFailed = 36,
	k_EResultIOFailure = 37,
	k_EResultRemoteDisconnect = 38,
	k_EResultShoppingCartNotFound = 39,
	k_EResultBlocked = 40,
	k_EResultIgnored = 41,
	k_EResultNoMatch = 42,
	k_EResultAccountDisabled = 43,
	k_EResultServiceReadOnly = 44,
	k_EResultAccountNotFeatured = 45,
	k_EResultAdministratorOK = 46,
	k_EResultContentVersion = 47,
	k_EResultTryAnotherCM = 48,
	k_EResultPasswordRequiredToKickSession = 49,
	k_EResultAlreadyLoggedInElsewhere = 50,
	k_EResultSuspended = 51,
	k_EResultCancelled = 52,
	k_EResultDataCorruption = 53,
	k_EResultDiskFull = 54,
	k_EResultRemoteCallFailed = 55,
	k_EResultPasswordUnset = 56,
	k_EResultExternalAccountUnlinked = 57,
	k_EResultPSNTicketInvalid = 58,
	k_EResultExternalAccountAlreadyLinked = 59,
	k_EResultRemoteFileConflict = 60,
	k_EResultIllegalPassword = 61,
	k_EResultSameAsPreviousValue = 62,
	k_EResultAccountLogonDenied = 63,
	k_EResultCannotUseOldPassword = 64,
	k_EResultInvalidLoginAuthCode = 65,
	k_EResultAccountLogonDeniedNoMail = 66,
	k_EResultHardwareNotCapableOfIPT = 67,
	k_EResultIPTInitError = 68,
	k_EResultParentalControlRestricted = 69,
	k_EResultFacebookQueryError = 70,
	k_EResultExpiredLoginAuthCode = 71,
	k_EResultIPLoginRestrictionFailed = 72,
	k_EResultAccountLockedDown = 73,
	k_EResultAccountLogonDeniedVerifiedEmailRequired = 74,
	k_EResultNoMatchingURL = 75,
	k_EResultBadResponse = 76,
	k_EResultRequirePasswordReEntry = 77,
	k_EResultValueOutOfRange = 78,
	k_EResultUnexpectedError = 79,
	k_EResultDisabled = 80,
	k_EResultInvalidCEGSubmission = 81,
	k_EResultRestrictedDevice = 82,
	k_EResultRegionLocked = 83,
	k_EResultRateLimitExceeded = 84,
	k_EResultAccountLoginDeniedNeedTwoFactor = 85,
	k_EResultItemDeleted = 86,
	k_EResultAccountLoginDeniedThrottle = 87,
	k_EResultTwoFactorCodeMismatch = 88,
	k_EResultTwoFactorActivationCodeMismatch = 89,
	k_EResultAccountAssociatedToMultiplePartners = 90,
	k_EResultNotModified = 91,
	k_EResultNoMobileDevice = 92,
	k_EResultTimeNotSynced = 93,
	k_EResultSmsCodeFailed = 94,
	k_EResultAccountLimitExceeded = 95,
	k_EResultAccountActivityLimitExceeded = 96,
	k_EResultPhoneActivityLimitExceeded = 97,
	k_EResultRefundToWallet = 98,
	k_EResultEmailSendFailure = 99,
	k_EResultNotSettled = 100,
	k_EResultNeedCaptcha = 101,
	k_EResultGSLTDenied = 102,
	k_EResultGSOwnerDenied = 103,
	k_EResultInvalidItemType = 104,
	k_EResultIPBanned = 105,
	k_EResultGSLTExpired = 106,
	k_EResultInsufficientFunds = 107,
	k_EResultTooManyPending = 108,
	k_EResultNoSiteLicensesFound = 109,
	k_EResultWGNetworkSendExceeded = 110,
	k_EResultAccountNotFriends = 111,
	k_EResultLimitedUserAccount = 112,
} EResult;
typedef enum EVoiceResult {
	k_EVoiceResultOK = 0,
	k_EVoiceResultNotInitialized = 1,
	k_EVoiceResultNotRecording = 2,
	k_EVoiceResultNoData = 3,
	k_EVoiceResultBufferTooSmall = 4,
	k_EVoiceResultDataCorrupted = 5,
	k_EVoiceResultRestricted = 6,
	k_EVoiceResultUnsupportedCodec = 7,
	k_EVoiceResultReceiverOutOfDate = 8,
	k_EVoiceResultReceiverDidNotAnswer = 9,
} EVoiceResult;
typedef enum EDenyReason {
	k_EDenyInvalid = 0,
	k_EDenyInvalidVersion = 1,
	k_EDenyGeneric = 2,
	k_EDenyNotLoggedOn = 3,
	k_EDenyNoLicense = 4,
	k_EDenyCheater = 5,
	k_EDenyLoggedInElseWhere = 6,
	k_EDenyUnknownText = 7,
	k_EDenyIncompatibleAnticheat = 8,
	k_EDenyMemoryCorruption = 9,
	k_EDenyIncompatibleSoftware = 10,
	k_EDenySteamConnectionLost = 11,
	k_EDenySteamConnectionError = 12,
	k_EDenySteamResponseTimedOut = 13,
	k_EDenySteamValidationStalled = 14,
	k_EDenySteamOwnerLeftGuestUser = 15,
} EDenyReason;
typedef enum EBeginAuthSessionResult {
	k_EBeginAuthSessionResultOK = 0,
	k_EBeginAuthSessionResultInvalidTicket = 1,
	k_EBeginAuthSessionResultDuplicateRequest = 2,
	k_EBeginAuthSessionResultInvalidVersion = 3,
	k_EBeginAuthSessionResultGameMismatch = 4,
	k_EBeginAuthSessionResultExpiredTicket = 5,
} EBeginAuthSessionResult;
typedef enum EAuthSessionResponse {
	k_EAuthSessionResponseOK = 0,
	k_EAuthSessionResponseUserNotConnectedToSteam = 1,
	k_EAuthSessionResponseNoLicenseOrExpired = 2,
	k_EAuthSessionResponseVACBanned = 3,
	k_EAuthSessionResponseLoggedInElseWhere = 4,
	k_EAuthSessionResponseVACCheckTimedOut = 5,
	k_EAuthSessionResponseAuthTicketCanceled = 6,
	k_EAuthSessionResponseAuthTicketInvalidAlreadyUsed = 7,
	k_EAuthSessionResponseAuthTicketInvalid = 8,
	k_EAuthSessionResponsePublisherIssuedBan = 9,
} EAuthSessionResponse;
typedef enum EUserHasLicenseForAppResult {
	k_EUserHasLicenseResultHasLicense = 0,
	k_EUserHasLicenseResultDoesNotHaveLicense = 1,
	k_EUserHasLicenseResultNoAuth = 2,
} EUserHasLicenseForAppResult;
typedef enum EAccountType {
	k_EAccountTypeInvalid = 0,
	k_EAccountTypeIndividual = 1,
	k_EAccountTypeMultiseat = 2,
	k_EAccountTypeGameServer = 3,
	k_EAccountTypeAnonGameServer = 4,
	k_EAccountTypePending = 5,
	k_EAccountTypeContentServer = 6,
	k_EAccountTypeClan = 7,
	k_EAccountTypeChat = 8,
	k_EAccountTypeConsoleUser = 9,
	k_EAccountTypeAnonUser = 10,
	k_EAccountTypeMax = 11,
} EAccountType;
typedef enum EAppReleaseState {
	k_EAppReleaseState_Unknown = 0,
	k_EAppReleaseState_Unavailable = 1,
	k_EAppReleaseState_Prerelease = 2,
	k_EAppReleaseState_PreloadOnly = 3,
	k_EAppReleaseState_Released = 4,
} EAppReleaseState;
typedef enum EAppOwnershipFlags {
	k_EAppOwnershipFlags_None = 0,
	k_EAppOwnershipFlags_OwnsLicense = 1,
	k_EAppOwnershipFlags_FreeLicense = 2,
	k_EAppOwnershipFlags_RegionRestricted = 4,
	k_EAppOwnershipFlags_LowViolence = 8,
	k_EAppOwnershipFlags_InvalidPlatform = 16,
	k_EAppOwnershipFlags_SharedLicense = 32,
	k_EAppOwnershipFlags_FreeWeekend = 64,
	k_EAppOwnershipFlags_RetailLicense = 128,
	k_EAppOwnershipFlags_LicenseLocked = 256,
	k_EAppOwnershipFlags_LicensePending = 512,
	k_EAppOwnershipFlags_LicenseExpired = 1024,
	k_EAppOwnershipFlags_LicensePermanent = 2048,
	k_EAppOwnershipFlags_LicenseRecurring = 4096,
	k_EAppOwnershipFlags_LicenseCanceled = 8192,
	k_EAppOwnershipFlags_AutoGrant = 16384,
	k_EAppOwnershipFlags_PendingGift = 32768,
	k_EAppOwnershipFlags_RentalNotActivated = 65536,
	k_EAppOwnershipFlags_Rental = 131072,
	k_EAppOwnershipFlags_SiteLicense = 262144,
} EAppOwnershipFlags;
typedef enum EAppType {
	k_EAppType_Invalid = 0,
	k_EAppType_Game = 1,
	k_EAppType_Application = 2,
	k_EAppType_Tool = 4,
	k_EAppType_Demo = 8,
	k_EAppType_Media_DEPRECATED = 16,
	k_EAppType_DLC = 32,
	k_EAppType_Guide = 64,
	k_EAppType_Driver = 128,
	k_EAppType_Config = 256,
	k_EAppType_Hardware = 512,
	k_EAppType_Franchise = 1024,
	k_EAppType_Video = 2048,
	k_EAppType_Plugin = 4096,
	k_EAppType_Music = 8192,
	k_EAppType_Series = 16384,
	k_EAppType_Comic = 32768,
	k_EAppType_Shortcut = 1073741824,
	k_EAppType_DepotOnly = -2147483648,
} EAppType;
typedef enum ESteamUserStatType {
	k_ESteamUserStatTypeINVALID = 0,
	k_ESteamUserStatTypeINT = 1,
	k_ESteamUserStatTypeFLOAT = 2,
	k_ESteamUserStatTypeAVGRATE = 3,
	k_ESteamUserStatTypeACHIEVEMENTS = 4,
	k_ESteamUserStatTypeGROUPACHIEVEMENTS = 5,
	k_ESteamUserStatTypeMAX = 6,
} ESteamUserStatType;
typedef enum EChatEntryType {
	k_EChatEntryTypeInvalid = 0,
	k_EChatEntryTypeChatMsg = 1,
	k_EChatEntryTypeTyping = 2,
	k_EChatEntryTypeInviteGame = 3,
	k_EChatEntryTypeEmote = 4,
	k_EChatEntryTypeLeftConversation = 6,
	k_EChatEntryTypeEntered = 7,
	k_EChatEntryTypeWasKicked = 8,
	k_EChatEntryTypeWasBanned = 9,
	k_EChatEntryTypeDisconnected = 10,
	k_EChatEntryTypeHistoricalChat = 11,
	k_EChatEntryTypeLinkBlocked = 14,
} EChatEntryType;
typedef enum EChatRoomEnterResponse {
	k_EChatRoomEnterResponseSuccess = 1,
	k_EChatRoomEnterResponseDoesntExist = 2,
	k_EChatRoomEnterResponseNotAllowed = 3,
	k_EChatRoomEnterResponseFull = 4,
	k_EChatRoomEnterResponseError = 5,
	k_EChatRoomEnterResponseBanned = 6,
	k_EChatRoomEnterResponseLimited = 7,
	k_EChatRoomEnterResponseClanDisabled = 8,
	k_EChatRoomEnterResponseCommunityBan = 9,
	k_EChatRoomEnterResponseMemberBlockedYou = 10,
	k_EChatRoomEnterResponseYouBlockedMember = 11,
	k_EChatRoomEnterResponseRatelimitExceeded = 15,
} EChatRoomEnterResponse;
typedef enum EChatSteamIDInstanceFlags {
	k_EChatAccountInstanceMask = 4095,
	k_EChatInstanceFlagClan = 524288,
	k_EChatInstanceFlagLobby = 262144,
	k_EChatInstanceFlagMMSLobby = 131072,
} EChatSteamIDInstanceFlags;
typedef enum EMarketingMessageFlags {
	k_EMarketingMessageFlagsNone = 0,
	k_EMarketingMessageFlagsHighPriority = 1,
	k_EMarketingMessageFlagsPlatformWindows = 2,
	k_EMarketingMessageFlagsPlatformMac = 4,
	k_EMarketingMessageFlagsPlatformLinux = 8,
	k_EMarketingMessageFlagsPlatformRestrictions = 14,
} EMarketingMessageFlags;
typedef enum ENotificationPosition {
	k_EPositionTopLeft = 0,
	k_EPositionTopRight = 1,
	k_EPositionBottomLeft = 2,
	k_EPositionBottomRight = 3,
} ENotificationPosition;
typedef enum EBroadcastUploadResult {
	k_EBroadcastUploadResultNone = 0,
	k_EBroadcastUploadResultOK = 1,
	k_EBroadcastUploadResultInitFailed = 2,
	k_EBroadcastUploadResultFrameFailed = 3,
	k_EBroadcastUploadResultTimeout = 4,
	k_EBroadcastUploadResultBandwidthExceeded = 5,
	k_EBroadcastUploadResultLowFPS = 6,
	k_EBroadcastUploadResultMissingKeyFrames = 7,
	k_EBroadcastUploadResultNoConnection = 8,
	k_EBroadcastUploadResultRelayFailed = 9,
	k_EBroadcastUploadResultSettingsChanged = 10,
	k_EBroadcastUploadResultMissingAudio = 11,
	k_EBroadcastUploadResultTooFarBehind = 12,
	k_EBroadcastUploadResultTranscodeBehind = 13,
} EBroadcastUploadResult;
typedef enum ELaunchOptionType {
	k_ELaunchOptionType_None = 0,
	k_ELaunchOptionType_Default = 1,
	k_ELaunchOptionType_SafeMode = 2,
	k_ELaunchOptionType_Multiplayer = 3,
	k_ELaunchOptionType_Config = 4,
	k_ELaunchOptionType_OpenVR = 5,
	k_ELaunchOptionType_Server = 6,
	k_ELaunchOptionType_Editor = 7,
	k_ELaunchOptionType_Manual = 8,
	k_ELaunchOptionType_Benchmark = 9,
	k_ELaunchOptionType_Option1 = 10,
	k_ELaunchOptionType_Option2 = 11,
	k_ELaunchOptionType_Option3 = 12,
	k_ELaunchOptionType_OculusVR = 13,
	k_ELaunchOptionType_OpenVROverlay = 14,
	k_ELaunchOptionType_OSVR = 15,
	k_ELaunchOptionType_Dialog = 1000,
} ELaunchOptionType;
typedef enum EVRHMDType {
	k_eEVRHMDType_None = -1,
	k_eEVRHMDType_Unknown = 0,
	k_eEVRHMDType_HTC_Dev = 1,
	k_eEVRHMDType_HTC_VivePre = 2,
	k_eEVRHMDType_HTC_Vive = 3,
	k_eEVRHMDType_HTC_Unknown = 20,
	k_eEVRHMDType_Oculus_DK1 = 21,
	k_eEVRHMDType_Oculus_DK2 = 22,
	k_eEVRHMDType_Oculus_Rift = 23,
	k_eEVRHMDType_Oculus_Unknown = 40,
	k_eEVRHMDType_Acer_Unknown = 50,
	k_eEVRHMDType_Acer_WindowsMR = 51,
	k_eEVRHMDType_Dell_Unknown = 60,
	k_eEVRHMDType_Dell_Visor = 61,
	k_eEVRHMDType_Lenovo_Unknown = 70,
	k_eEVRHMDType_Lenovo_Explorer = 71,
	k_eEVRHMDType_HP_Unknown = 80,
	k_eEVRHMDType_HP_WindowsMR = 81,
	k_eEVRHMDType_Samsung_Unknown = 90,
	k_eEVRHMDType_Samsung_Odyssey = 91,
	k_eEVRHMDType_Unannounced_Unknown = 100,
	k_eEVRHMDType_Unannounced_WindowsMR = 101,
} EVRHMDType;
typedef enum EGameIDType {
	k_EGameIDTypeApp = 0,
	k_EGameIDTypeGameMod = 1,
	k_EGameIDTypeShortcut = 2,
	k_EGameIDTypeP2P = 3,
} EGameIDType;
typedef enum EFailureType {
	k_EFailureFlushedCallbackQueue = 0,
	k_EFailurePipeFail = 1,
} EFailureType;
typedef enum EFriendRelationship {
	k_EFriendRelationshipNone = 0,
	k_EFriendRelationshipBlocked = 1,
	k_EFriendRelationshipRequestRecipient = 2,
	k_EFriendRelationshipFriend = 3,
	k_EFriendRelationshipRequestInitiator = 4,
	k_EFriendRelationshipIgnored = 5,
	k_EFriendRelationshipIgnoredFriend = 6,
	k_EFriendRelationshipSuggested_DEPRECATED = 7,
	k_EFriendRelationshipMax = 8,
} EFriendRelationship;
typedef enum EPersonaState {
	k_EPersonaStateOffline = 0,
	k_EPersonaStateOnline = 1,
	k_EPersonaStateBusy = 2,
	k_EPersonaStateAway = 3,
	k_EPersonaStateSnooze = 4,
	k_EPersonaStateLookingToTrade = 5,
	k_EPersonaStateLookingToPlay = 6,
	k_EPersonaStateMax = 7,
} EPersonaState;
typedef enum EFriendFlags {
	k_EFriendFlagNone = 0,
	k_EFriendFlagBlocked = 1,
	k_EFriendFlagFriendshipRequested = 2,
	k_EFriendFlagImmediate = 4,
	k_EFriendFlagClanMember = 8,
	k_EFriendFlagOnGameServer = 16,
	k_EFriendFlagRequestingFriendship = 128,
	k_EFriendFlagRequestingInfo = 256,
	k_EFriendFlagIgnored = 512,
	k_EFriendFlagIgnoredFriend = 1024,
	k_EFriendFlagChatMember = 4096,
	k_EFriendFlagAll = 65535,
} EFriendFlags;
typedef enum EUserRestriction {
	k_nUserRestrictionNone = 0,
	k_nUserRestrictionUnknown = 1,
	k_nUserRestrictionAnyChat = 2,
	k_nUserRestrictionVoiceChat = 4,
	k_nUserRestrictionGroupChat = 8,
	k_nUserRestrictionRating = 16,
	k_nUserRestrictionGameInvites = 32,
	k_nUserRestrictionTrading = 64,
} EUserRestriction;
typedef enum EOverlayToStoreFlag {
	k_EOverlayToStoreFlag_None = 0,
	k_EOverlayToStoreFlag_AddToCart = 1,
	k_EOverlayToStoreFlag_AddToCartAndShow = 2,
} EOverlayToStoreFlag;
typedef enum EPersonaChange {
	k_EPersonaChangeName = 1,
	k_EPersonaChangeStatus = 2,
	k_EPersonaChangeComeOnline = 4,
	k_EPersonaChangeGoneOffline = 8,
	k_EPersonaChangeGamePlayed = 16,
	k_EPersonaChangeGameServer = 32,
	k_EPersonaChangeAvatar = 64,
	k_EPersonaChangeJoinedSource = 128,
	k_EPersonaChangeLeftSource = 256,
	k_EPersonaChangeRelationshipChanged = 512,
	k_EPersonaChangeNameFirstSet = 1024,
	k_EPersonaChangeFacebookInfo = 2048,
	k_EPersonaChangeNickname = 4096,
	k_EPersonaChangeSteamLevel = 8192,
} EPersonaChange;
typedef enum ESteamAPICallFailure {
	k_ESteamAPICallFailureNone = -1,
	k_ESteamAPICallFailureSteamGone = 0,
	k_ESteamAPICallFailureNetworkFailure = 1,
	k_ESteamAPICallFailureInvalidHandle = 2,
	k_ESteamAPICallFailureMismatchedCallback = 3,
} ESteamAPICallFailure;
typedef enum EGamepadTextInputMode {
	k_EGamepadTextInputModeNormal = 0,
	k_EGamepadTextInputModePassword = 1,
} EGamepadTextInputMode;
typedef enum EGamepadTextInputLineMode {
	k_EGamepadTextInputLineModeSingleLine = 0,
	k_EGamepadTextInputLineModeMultipleLines = 1,
} EGamepadTextInputLineMode;
typedef enum ECheckFileSignature {
	k_ECheckFileSignatureInvalidSignature = 0,
	k_ECheckFileSignatureValidSignature = 1,
	k_ECheckFileSignatureFileNotFound = 2,
	k_ECheckFileSignatureNoSignaturesFoundForThisApp = 3,
	k_ECheckFileSignatureNoSignaturesFoundForThisFile = 4,
} ECheckFileSignature;
typedef enum EMatchMakingServerResponse {
	eServerResponded = 0,
	eServerFailedToRespond = 1,
	eNoServersListedOnMasterServer = 2,
} EMatchMakingServerResponse;
typedef enum ELobbyType {
	k_ELobbyTypePrivate = 0,
	k_ELobbyTypeFriendsOnly = 1,
	k_ELobbyTypePublic = 2,
	k_ELobbyTypeInvisible = 3,
} ELobbyType;
typedef enum ELobbyComparison {
	k_ELobbyComparisonEqualToOrLessThan = -2,
	k_ELobbyComparisonLessThan = -1,
	k_ELobbyComparisonEqual = 0,
	k_ELobbyComparisonGreaterThan = 1,
	k_ELobbyComparisonEqualToOrGreaterThan = 2,
	k_ELobbyComparisonNotEqual = 3,
} ELobbyComparison;
typedef enum ELobbyDistanceFilter {
	k_ELobbyDistanceFilterClose = 0,
	k_ELobbyDistanceFilterDefault = 1,
	k_ELobbyDistanceFilterFar = 2,
	k_ELobbyDistanceFilterWorldwide = 3,
} ELobbyDistanceFilter;
typedef enum EChatMemberStateChange {
	k_EChatMemberStateChangeEntered = 1,
	k_EChatMemberStateChangeLeft = 2,
	k_EChatMemberStateChangeDisconnected = 4,
	k_EChatMemberStateChangeKicked = 8,
	k_EChatMemberStateChangeBanned = 16,
} EChatMemberStateChange;
typedef enum ERemoteStoragePlatform {
	k_ERemoteStoragePlatformNone = 0,
	k_ERemoteStoragePlatformWindows = 1,
	k_ERemoteStoragePlatformOSX = 2,
	k_ERemoteStoragePlatformPS3 = 4,
	k_ERemoteStoragePlatformLinux = 8,
	k_ERemoteStoragePlatformReserved2 = 16,
	k_ERemoteStoragePlatformAll = -1,
} ERemoteStoragePlatform;
typedef enum ERemoteStoragePublishedFileVisibility {
	k_ERemoteStoragePublishedFileVisibilityPublic = 0,
	k_ERemoteStoragePublishedFileVisibilityFriendsOnly = 1,
	k_ERemoteStoragePublishedFileVisibilityPrivate = 2,
} ERemoteStoragePublishedFileVisibility;
typedef enum EWorkshopFileType {
	k_EWorkshopFileTypeFirst = 0,
	k_EWorkshopFileTypeCommunity = 0,
	k_EWorkshopFileTypeMicrotransaction = 1,
	k_EWorkshopFileTypeCollection = 2,
	k_EWorkshopFileTypeArt = 3,
	k_EWorkshopFileTypeVideo = 4,
	k_EWorkshopFileTypeScreenshot = 5,
	k_EWorkshopFileTypeGame = 6,
	k_EWorkshopFileTypeSoftware = 7,
	k_EWorkshopFileTypeConcept = 8,
	k_EWorkshopFileTypeWebGuide = 9,
	k_EWorkshopFileTypeIntegratedGuide = 10,
	k_EWorkshopFileTypeMerch = 11,
	k_EWorkshopFileTypeControllerBinding = 12,
	k_EWorkshopFileTypeSteamworksAccessInvite = 13,
	k_EWorkshopFileTypeSteamVideo = 14,
	k_EWorkshopFileTypeGameManagedItem = 15,
	k_EWorkshopFileTypeMax = 16,
} EWorkshopFileType;
typedef enum EWorkshopVote {
	k_EWorkshopVoteUnvoted = 0,
	k_EWorkshopVoteFor = 1,
	k_EWorkshopVoteAgainst = 2,
	k_EWorkshopVoteLater = 3,
} EWorkshopVote;
typedef enum EWorkshopFileAction {
	k_EWorkshopFileActionPlayed = 0,
	k_EWorkshopFileActionCompleted = 1,
} EWorkshopFileAction;
typedef enum EWorkshopEnumerationType {
	k_EWorkshopEnumerationTypeRankedByVote = 0,
	k_EWorkshopEnumerationTypeRecent = 1,
	k_EWorkshopEnumerationTypeTrending = 2,
	k_EWorkshopEnumerationTypeFavoritesOfFriends = 3,
	k_EWorkshopEnumerationTypeVotedByFriends = 4,
	k_EWorkshopEnumerationTypeContentByFriends = 5,
	k_EWorkshopEnumerationTypeRecentFromFollowedUsers = 6,
} EWorkshopEnumerationType;
typedef enum EWorkshopVideoProvider {
	k_EWorkshopVideoProviderNone = 0,
	k_EWorkshopVideoProviderYoutube = 1,
} EWorkshopVideoProvider;
typedef enum EUGCReadAction {
	k_EUGCRead_ContinueReadingUntilFinished = 0,
	k_EUGCRead_ContinueReading = 1,
	k_EUGCRead_Close = 2,
} EUGCReadAction;
typedef enum ELeaderboardDataRequest {
	k_ELeaderboardDataRequestGlobal = 0,
	k_ELeaderboardDataRequestGlobalAroundUser = 1,
	k_ELeaderboardDataRequestFriends = 2,
	k_ELeaderboardDataRequestUsers = 3,
} ELeaderboardDataRequest;
typedef enum ELeaderboardSortMethod {
	k_ELeaderboardSortMethodNone = 0,
	k_ELeaderboardSortMethodAscending = 1,
	k_ELeaderboardSortMethodDescending = 2,
} ELeaderboardSortMethod;
typedef enum ELeaderboardDisplayType {
	k_ELeaderboardDisplayTypeNone = 0,
	k_ELeaderboardDisplayTypeNumeric = 1,
	k_ELeaderboardDisplayTypeTimeSeconds = 2,
	k_ELeaderboardDisplayTypeTimeMilliSeconds = 3,
} ELeaderboardDisplayType;
typedef enum ELeaderboardUploadScoreMethod {
	k_ELeaderboardUploadScoreMethodNone = 0,
	k_ELeaderboardUploadScoreMethodKeepBest = 1,
	k_ELeaderboardUploadScoreMethodForceUpdate = 2,
} ELeaderboardUploadScoreMethod;
typedef enum ERegisterActivationCodeResult {
	k_ERegisterActivationCodeResultOK = 0,
	k_ERegisterActivationCodeResultFail = 1,
	k_ERegisterActivationCodeResultAlreadyRegistered = 2,
	k_ERegisterActivationCodeResultTimeout = 3,
	k_ERegisterActivationCodeAlreadyOwned = 4,
} ERegisterActivationCodeResult;
typedef enum EP2PSessionError {
	k_EP2PSessionErrorNone = 0,
	k_EP2PSessionErrorNotRunningApp = 1,
	k_EP2PSessionErrorNoRightsToApp = 2,
	k_EP2PSessionErrorDestinationNotLoggedIn = 3,
	k_EP2PSessionErrorTimeout = 4,
	k_EP2PSessionErrorMax = 5,
} EP2PSessionError;
typedef enum EP2PSend {
	k_EP2PSendUnreliable = 0,
	k_EP2PSendUnreliableNoDelay = 1,
	k_EP2PSendReliable = 2,
	k_EP2PSendReliableWithBuffering = 3,
} EP2PSend;
typedef enum ESNetSocketState {
	k_ESNetSocketStateInvalid = 0,
	k_ESNetSocketStateConnected = 1,
	k_ESNetSocketStateInitiated = 10,
	k_ESNetSocketStateLocalCandidatesFound = 11,
	k_ESNetSocketStateReceivedRemoteCandidates = 12,
	k_ESNetSocketStateChallengeHandshake = 15,
	k_ESNetSocketStateDisconnecting = 21,
	k_ESNetSocketStateLocalDisconnect = 22,
	k_ESNetSocketStateTimeoutDuringConnect = 23,
	k_ESNetSocketStateRemoteEndDisconnected = 24,
	k_ESNetSocketStateConnectionBroken = 25,
} ESNetSocketState;
typedef enum ESNetSocketConnectionType {
	k_ESNetSocketConnectionTypeNotConnected = 0,
	k_ESNetSocketConnectionTypeUDP = 1,
	k_ESNetSocketConnectionTypeUDPRelay = 2,
} ESNetSocketConnectionType;
typedef enum EVRScreenshotType {
	k_EVRScreenshotType_None = 0,
	k_EVRScreenshotType_Mono = 1,
	k_EVRScreenshotType_Stereo = 2,
	k_EVRScreenshotType_MonoCubemap = 3,
	k_EVRScreenshotType_MonoPanorama = 4,
	k_EVRScreenshotType_StereoPanorama = 5,
} EVRScreenshotType;
typedef enum AudioPlayback_Status {
	AudioPlayback_Undefined = 0,
	AudioPlayback_Playing = 1,
	AudioPlayback_Paused = 2,
	AudioPlayback_Idle = 3,
} AudioPlayback_Status;
typedef enum EHTTPMethod {
	k_EHTTPMethodInvalid = 0,
	k_EHTTPMethodGET = 1,
	k_EHTTPMethodHEAD = 2,
	k_EHTTPMethodPOST = 3,
	k_EHTTPMethodPUT = 4,
	k_EHTTPMethodDELETE = 5,
	k_EHTTPMethodOPTIONS = 6,
	k_EHTTPMethodPATCH = 7,
} EHTTPMethod;
typedef enum EHTTPStatusCode {
	k_EHTTPStatusCodeInvalid = 0,
	k_EHTTPStatusCode100Continue = 100,
	k_EHTTPStatusCode101SwitchingProtocols = 101,
	k_EHTTPStatusCode200OK = 200,
	k_EHTTPStatusCode201Created = 201,
	k_EHTTPStatusCode202Accepted = 202,
	k_EHTTPStatusCode203NonAuthoritative = 203,
	k_EHTTPStatusCode204NoContent = 204,
	k_EHTTPStatusCode205ResetContent = 205,
	k_EHTTPStatusCode206PartialContent = 206,
	k_EHTTPStatusCode300MultipleChoices = 300,
	k_EHTTPStatusCode301MovedPermanently = 301,
	k_EHTTPStatusCode302Found = 302,
	k_EHTTPStatusCode303SeeOther = 303,
	k_EHTTPStatusCode304NotModified = 304,
	k_EHTTPStatusCode305UseProxy = 305,
	k_EHTTPStatusCode307TemporaryRedirect = 307,
	k_EHTTPStatusCode400BadRequest = 400,
	k_EHTTPStatusCode401Unauthorized = 401,
	k_EHTTPStatusCode402PaymentRequired = 402,
	k_EHTTPStatusCode403Forbidden = 403,
	k_EHTTPStatusCode404NotFound = 404,
	k_EHTTPStatusCode405MethodNotAllowed = 405,
	k_EHTTPStatusCode406NotAcceptable = 406,
	k_EHTTPStatusCode407ProxyAuthRequired = 407,
	k_EHTTPStatusCode408RequestTimeout = 408,
	k_EHTTPStatusCode409Conflict = 409,
	k_EHTTPStatusCode410Gone = 410,
	k_EHTTPStatusCode411LengthRequired = 411,
	k_EHTTPStatusCode412PreconditionFailed = 412,
	k_EHTTPStatusCode413RequestEntityTooLarge = 413,
	k_EHTTPStatusCode414RequestURITooLong = 414,
	k_EHTTPStatusCode415UnsupportedMediaType = 415,
	k_EHTTPStatusCode416RequestedRangeNotSatisfiable = 416,
	k_EHTTPStatusCode417ExpectationFailed = 417,
	k_EHTTPStatusCode4xxUnknown = 418,
	k_EHTTPStatusCode429TooManyRequests = 429,
	k_EHTTPStatusCode500InternalServerError = 500,
	k_EHTTPStatusCode501NotImplemented = 501,
	k_EHTTPStatusCode502BadGateway = 502,
	k_EHTTPStatusCode503ServiceUnavailable = 503,
	k_EHTTPStatusCode504GatewayTimeout = 504,
	k_EHTTPStatusCode505HTTPVersionNotSupported = 505,
	k_EHTTPStatusCode5xxUnknown = 599,
} EHTTPStatusCode;
typedef enum ESteamControllerPad {
	k_ESteamControllerPad_Left = 0,
	k_ESteamControllerPad_Right = 1,
} ESteamControllerPad;
typedef enum EControllerSource {
	k_EControllerSource_None = 0,
	k_EControllerSource_LeftTrackpad = 1,
	k_EControllerSource_RightTrackpad = 2,
	k_EControllerSource_Joystick = 3,
	k_EControllerSource_ABXY = 4,
	k_EControllerSource_Switch = 5,
	k_EControllerSource_LeftTrigger = 6,
	k_EControllerSource_RightTrigger = 7,
	k_EControllerSource_Gyro = 8,
	k_EControllerSource_CenterTrackpad = 9,
	k_EControllerSource_RightJoystick = 10,
	k_EControllerSource_DPad = 11,
	k_EControllerSource_Key = 12,
	k_EControllerSource_Mouse = 13,
	k_EControllerSource_Count = 14,
} EControllerSource;
typedef enum EControllerSourceMode {
	k_EControllerSourceMode_None = 0,
	k_EControllerSourceMode_Dpad = 1,
	k_EControllerSourceMode_Buttons = 2,
	k_EControllerSourceMode_FourButtons = 3,
	k_EControllerSourceMode_AbsoluteMouse = 4,
	k_EControllerSourceMode_RelativeMouse = 5,
	k_EControllerSourceMode_JoystickMove = 6,
	k_EControllerSourceMode_JoystickMouse = 7,
	k_EControllerSourceMode_JoystickCamera = 8,
	k_EControllerSourceMode_ScrollWheel = 9,
	k_EControllerSourceMode_Trigger = 10,
	k_EControllerSourceMode_TouchMenu = 11,
	k_EControllerSourceMode_MouseJoystick = 12,
	k_EControllerSourceMode_MouseRegion = 13,
	k_EControllerSourceMode_RadialMenu = 14,
	k_EControllerSourceMode_SingleButton = 15,
	k_EControllerSourceMode_Switches = 16,
} EControllerSourceMode;
typedef enum EControllerActionOrigin {
	k_EControllerActionOrigin_None = 0,
	k_EControllerActionOrigin_A = 1,
	k_EControllerActionOrigin_B = 2,
	k_EControllerActionOrigin_X = 3,
	k_EControllerActionOrigin_Y = 4,
	k_EControllerActionOrigin_LeftBumper = 5,
	k_EControllerActionOrigin_RightBumper = 6,
	k_EControllerActionOrigin_LeftGrip = 7,
	k_EControllerActionOrigin_RightGrip = 8,
	k_EControllerActionOrigin_Start = 9,
	k_EControllerActionOrigin_Back = 10,
	k_EControllerActionOrigin_LeftPad_Touch = 11,
	k_EControllerActionOrigin_LeftPad_Swipe = 12,
	k_EControllerActionOrigin_LeftPad_Click = 13,
	k_EControllerActionOrigin_LeftPad_DPadNorth = 14,
	k_EControllerActionOrigin_LeftPad_DPadSouth = 15,
	k_EControllerActionOrigin_LeftPad_DPadWest = 16,
	k_EControllerActionOrigin_LeftPad_DPadEast = 17,
	k_EControllerActionOrigin_RightPad_Touch = 18,
	k_EControllerActionOrigin_RightPad_Swipe = 19,
	k_EControllerActionOrigin_RightPad_Click = 20,
	k_EControllerActionOrigin_RightPad_DPadNorth = 21,
	k_EControllerActionOrigin_RightPad_DPadSouth = 22,
	k_EControllerActionOrigin_RightPad_DPadWest = 23,
	k_EControllerActionOrigin_RightPad_DPadEast = 24,
	k_EControllerActionOrigin_LeftTrigger_Pull = 25,
	k_EControllerActionOrigin_LeftTrigger_Click = 26,
	k_EControllerActionOrigin_RightTrigger_Pull = 27,
	k_EControllerActionOrigin_RightTrigger_Click = 28,
	k_EControllerActionOrigin_LeftStick_Move = 29,
	k_EControllerActionOrigin_LeftStick_Click = 30,
	k_EControllerActionOrigin_LeftStick_DPadNorth = 31,
	k_EControllerActionOrigin_LeftStick_DPadSouth = 32,
	k_EControllerActionOrigin_LeftStick_DPadWest = 33,
	k_EControllerActionOrigin_LeftStick_DPadEast = 34,
	k_EControllerActionOrigin_Gyro_Move = 35,
	k_EControllerActionOrigin_Gyro_Pitch = 36,
	k_EControllerActionOrigin_Gyro_Yaw = 37,
	k_EControllerActionOrigin_Gyro_Roll = 38,
	k_EControllerActionOrigin_PS4_X = 39,
	k_EControllerActionOrigin_PS4_Circle = 40,
	k_EControllerActionOrigin_PS4_Triangle = 41,
	k_EControllerActionOrigin_PS4_Square = 42,
	k_EControllerActionOrigin_PS4_LeftBumper = 43,
	k_EControllerActionOrigin_PS4_RightBumper = 44,
	k_EControllerActionOrigin_PS4_Options = 45,
	k_EControllerActionOrigin_PS4_Share = 46,
	k_EControllerActionOrigin_PS4_LeftPad_Touch = 47,
	k_EControllerActionOrigin_PS4_LeftPad_Swipe = 48,
	k_EControllerActionOrigin_PS4_LeftPad_Click = 49,
	k_EControllerActionOrigin_PS4_LeftPad_DPadNorth = 50,
	k_EControllerActionOrigin_PS4_LeftPad_DPadSouth = 51,
	k_EControllerActionOrigin_PS4_LeftPad_DPadWest = 52,
	k_EControllerActionOrigin_PS4_LeftPad_DPadEast = 53,
	k_EControllerActionOrigin_PS4_RightPad_Touch = 54,
	k_EControllerActionOrigin_PS4_RightPad_Swipe = 55,
	k_EControllerActionOrigin_PS4_RightPad_Click = 56,
	k_EControllerActionOrigin_PS4_RightPad_DPadNorth = 57,
	k_EControllerActionOrigin_PS4_RightPad_DPadSouth = 58,
	k_EControllerActionOrigin_PS4_RightPad_DPadWest = 59,
	k_EControllerActionOrigin_PS4_RightPad_DPadEast = 60,
	k_EControllerActionOrigin_PS4_CenterPad_Touch = 61,
	k_EControllerActionOrigin_PS4_CenterPad_Swipe = 62,
	k_EControllerActionOrigin_PS4_CenterPad_Click = 63,
	k_EControllerActionOrigin_PS4_CenterPad_DPadNorth = 64,
	k_EControllerActionOrigin_PS4_CenterPad_DPadSouth = 65,
	k_EControllerActionOrigin_PS4_CenterPad_DPadWest = 66,
	k_EControllerActionOrigin_PS4_CenterPad_DPadEast = 67,
	k_EControllerActionOrigin_PS4_LeftTrigger_Pull = 68,
	k_EControllerActionOrigin_PS4_LeftTrigger_Click = 69,
	k_EControllerActionOrigin_PS4_RightTrigger_Pull = 70,
	k_EControllerActionOrigin_PS4_RightTrigger_Click = 71,
	k_EControllerActionOrigin_PS4_LeftStick_Move = 72,
	k_EControllerActionOrigin_PS4_LeftStick_Click = 73,
	k_EControllerActionOrigin_PS4_LeftStick_DPadNorth = 74,
	k_EControllerActionOrigin_PS4_LeftStick_DPadSouth = 75,
	k_EControllerActionOrigin_PS4_LeftStick_DPadWest = 76,
	k_EControllerActionOrigin_PS4_LeftStick_DPadEast = 77,
	k_EControllerActionOrigin_PS4_RightStick_Move = 78,
	k_EControllerActionOrigin_PS4_RightStick_Click = 79,
	k_EControllerActionOrigin_PS4_RightStick_DPadNorth = 80,
	k_EControllerActionOrigin_PS4_RightStick_DPadSouth = 81,
	k_EControllerActionOrigin_PS4_RightStick_DPadWest = 82,
	k_EControllerActionOrigin_PS4_RightStick_DPadEast = 83,
	k_EControllerActionOrigin_PS4_DPad_North = 84,
	k_EControllerActionOrigin_PS4_DPad_South = 85,
	k_EControllerActionOrigin_PS4_DPad_West = 86,
	k_EControllerActionOrigin_PS4_DPad_East = 87,
	k_EControllerActionOrigin_PS4_Gyro_Move = 88,
	k_EControllerActionOrigin_PS4_Gyro_Pitch = 89,
	k_EControllerActionOrigin_PS4_Gyro_Yaw = 90,
	k_EControllerActionOrigin_PS4_Gyro_Roll = 91,
	k_EControllerActionOrigin_XBoxOne_A = 92,
	k_EControllerActionOrigin_XBoxOne_B = 93,
	k_EControllerActionOrigin_XBoxOne_X = 94,
	k_EControllerActionOrigin_XBoxOne_Y = 95,
	k_EControllerActionOrigin_XBoxOne_LeftBumper = 96,
	k_EControllerActionOrigin_XBoxOne_RightBumper = 97,
	k_EControllerActionOrigin_XBoxOne_Menu = 98,
	k_EControllerActionOrigin_XBoxOne_View = 99,
	k_EControllerActionOrigin_XBoxOne_LeftTrigger_Pull = 100,
	k_EControllerActionOrigin_XBoxOne_LeftTrigger_Click = 101,
	k_EControllerActionOrigin_XBoxOne_RightTrigger_Pull = 102,
	k_EControllerActionOrigin_XBoxOne_RightTrigger_Click = 103,
	k_EControllerActionOrigin_XBoxOne_LeftStick_Move = 104,
	k_EControllerActionOrigin_XBoxOne_LeftStick_Click = 105,
	k_EControllerActionOrigin_XBoxOne_LeftStick_DPadNorth = 106,
	k_EControllerActionOrigin_XBoxOne_LeftStick_DPadSouth = 107,
	k_EControllerActionOrigin_XBoxOne_LeftStick_DPadWest = 108,
	k_EControllerActionOrigin_XBoxOne_LeftStick_DPadEast = 109,
	k_EControllerActionOrigin_XBoxOne_RightStick_Move = 110,
	k_EControllerActionOrigin_XBoxOne_RightStick_Click = 111,
	k_EControllerActionOrigin_XBoxOne_RightStick_DPadNorth = 112,
	k_EControllerActionOrigin_XBoxOne_RightStick_DPadSouth = 113,
	k_EControllerActionOrigin_XBoxOne_RightStick_DPadWest = 114,
	k_EControllerActionOrigin_XBoxOne_RightStick_DPadEast = 115,
	k_EControllerActionOrigin_XBoxOne_DPad_North = 116,
	k_EControllerActionOrigin_XBoxOne_DPad_South = 117,
	k_EControllerActionOrigin_XBoxOne_DPad_West = 118,
	k_EControllerActionOrigin_XBoxOne_DPad_East = 119,
	k_EControllerActionOrigin_XBox360_A = 120,
	k_EControllerActionOrigin_XBox360_B = 121,
	k_EControllerActionOrigin_XBox360_X = 122,
	k_EControllerActionOrigin_XBox360_Y = 123,
	k_EControllerActionOrigin_XBox360_LeftBumper = 124,
	k_EControllerActionOrigin_XBox360_RightBumper = 125,
	k_EControllerActionOrigin_XBox360_Start = 126,
	k_EControllerActionOrigin_XBox360_Back = 127,
	k_EControllerActionOrigin_XBox360_LeftTrigger_Pull = 128,
	k_EControllerActionOrigin_XBox360_LeftTrigger_Click = 129,
	k_EControllerActionOrigin_XBox360_RightTrigger_Pull = 130,
	k_EControllerActionOrigin_XBox360_RightTrigger_Click = 131,
	k_EControllerActionOrigin_XBox360_LeftStick_Move = 132,
	k_EControllerActionOrigin_XBox360_LeftStick_Click = 133,
	k_EControllerActionOrigin_XBox360_LeftStick_DPadNorth = 134,
	k_EControllerActionOrigin_XBox360_LeftStick_DPadSouth = 135,
	k_EControllerActionOrigin_XBox360_LeftStick_DPadWest = 136,
	k_EControllerActionOrigin_XBox360_LeftStick_DPadEast = 137,
	k_EControllerActionOrigin_XBox360_RightStick_Move = 138,
	k_EControllerActionOrigin_XBox360_RightStick_Click = 139,
	k_EControllerActionOrigin_XBox360_RightStick_DPadNorth = 140,
	k_EControllerActionOrigin_XBox360_RightStick_DPadSouth = 141,
	k_EControllerActionOrigin_XBox360_RightStick_DPadWest = 142,
	k_EControllerActionOrigin_XBox360_RightStick_DPadEast = 143,
	k_EControllerActionOrigin_XBox360_DPad_North = 144,
	k_EControllerActionOrigin_XBox360_DPad_South = 145,
	k_EControllerActionOrigin_XBox360_DPad_West = 146,
	k_EControllerActionOrigin_XBox360_DPad_East = 147,
	k_EControllerActionOrigin_SteamV2_A = 148,
	k_EControllerActionOrigin_SteamV2_B = 149,
	k_EControllerActionOrigin_SteamV2_X = 150,
	k_EControllerActionOrigin_SteamV2_Y = 151,
	k_EControllerActionOrigin_SteamV2_LeftBumper = 152,
	k_EControllerActionOrigin_SteamV2_RightBumper = 153,
	k_EControllerActionOrigin_SteamV2_LeftGrip = 154,
	k_EControllerActionOrigin_SteamV2_RightGrip = 155,
	k_EControllerActionOrigin_SteamV2_LeftGrip_Upper = 156,
	k_EControllerActionOrigin_SteamV2_RightGrip_Upper = 157,
	k_EControllerActionOrigin_SteamV2_LeftBumper_Pressure = 158,
	k_EControllerActionOrigin_SteamV2_RightBumper_Pressure = 159,
	k_EControllerActionOrigin_SteamV2_LeftGrip_Pressure = 160,
	k_EControllerActionOrigin_SteamV2_RightGrip_Pressure = 161,
	k_EControllerActionOrigin_SteamV2_LeftGrip_Upper_Pressure = 162,
	k_EControllerActionOrigin_SteamV2_RightGrip_Upper_Pressure = 163,
	k_EControllerActionOrigin_SteamV2_Start = 164,
	k_EControllerActionOrigin_SteamV2_Back = 165,
	k_EControllerActionOrigin_SteamV2_LeftPad_Touch = 166,
	k_EControllerActionOrigin_SteamV2_LeftPad_Swipe = 167,
	k_EControllerActionOrigin_SteamV2_LeftPad_Click = 168,
	k_EControllerActionOrigin_SteamV2_LeftPad_Pressure = 169,
	k_EControllerActionOrigin_SteamV2_LeftPad_DPadNorth = 170,
	k_EControllerActionOrigin_SteamV2_LeftPad_DPadSouth = 171,
	k_EControllerActionOrigin_SteamV2_LeftPad_DPadWest = 172,
	k_EControllerActionOrigin_SteamV2_LeftPad_DPadEast = 173,
	k_EControllerActionOrigin_SteamV2_RightPad_Touch = 174,
	k_EControllerActionOrigin_SteamV2_RightPad_Swipe = 175,
	k_EControllerActionOrigin_SteamV2_RightPad_Click = 176,
	k_EControllerActionOrigin_SteamV2_RightPad_Pressure = 177,
	k_EControllerActionOrigin_SteamV2_RightPad_DPadNorth = 178,
	k_EControllerActionOrigin_SteamV2_RightPad_DPadSouth = 179,
	k_EControllerActionOrigin_SteamV2_RightPad_DPadWest = 180,
	k_EControllerActionOrigin_SteamV2_RightPad_DPadEast = 181,
	k_EControllerActionOrigin_SteamV2_LeftTrigger_Pull = 182,
	k_EControllerActionOrigin_SteamV2_LeftTrigger_Click = 183,
	k_EControllerActionOrigin_SteamV2_RightTrigger_Pull = 184,
	k_EControllerActionOrigin_SteamV2_RightTrigger_Click = 185,
	k_EControllerActionOrigin_SteamV2_LeftStick_Move = 186,
	k_EControllerActionOrigin_SteamV2_LeftStick_Click = 187,
	k_EControllerActionOrigin_SteamV2_LeftStick_DPadNorth = 188,
	k_EControllerActionOrigin_SteamV2_LeftStick_DPadSouth = 189,
	k_EControllerActionOrigin_SteamV2_LeftStick_DPadWest = 190,
	k_EControllerActionOrigin_SteamV2_LeftStick_DPadEast = 191,
	k_EControllerActionOrigin_SteamV2_Gyro_Move = 192,
	k_EControllerActionOrigin_SteamV2_Gyro_Pitch = 193,
	k_EControllerActionOrigin_SteamV2_Gyro_Yaw = 194,
	k_EControllerActionOrigin_SteamV2_Gyro_Roll = 195,
	k_EControllerActionOrigin_Count = 196,
} EControllerActionOrigin;
typedef enum ESteamControllerLEDFlag {
	k_ESteamControllerLEDFlag_SetColor = 0,
	k_ESteamControllerLEDFlag_RestoreUserDefault = 1,
} ESteamControllerLEDFlag;
typedef enum ESteamInputType {
	k_ESteamInputType_Unknown = 0,
	k_ESteamInputType_SteamController = 1,
	k_ESteamInputType_XBox360Controller = 2,
	k_ESteamInputType_XBoxOneController = 3,
	k_ESteamInputType_GenericXInput = 4,
	k_ESteamInputType_PS4Controller = 5,
} ESteamInputType;
typedef enum EUGCMatchingUGCType {
	k_EUGCMatchingUGCType_Items = 0,
	k_EUGCMatchingUGCType_Items_Mtx = 1,
	k_EUGCMatchingUGCType_Items_ReadyToUse = 2,
	k_EUGCMatchingUGCType_Collections = 3,
	k_EUGCMatchingUGCType_Artwork = 4,
	k_EUGCMatchingUGCType_Videos = 5,
	k_EUGCMatchingUGCType_Screenshots = 6,
	k_EUGCMatchingUGCType_AllGuides = 7,
	k_EUGCMatchingUGCType_WebGuides = 8,
	k_EUGCMatchingUGCType_IntegratedGuides = 9,
	k_EUGCMatchingUGCType_UsableInGame = 10,
	k_EUGCMatchingUGCType_ControllerBindings = 11,
	k_EUGCMatchingUGCType_GameManagedItems = 12,
	k_EUGCMatchingUGCType_All = -1,
} EUGCMatchingUGCType;
typedef enum EUserUGCList {
	k_EUserUGCList_Published = 0,
	k_EUserUGCList_VotedOn = 1,
	k_EUserUGCList_VotedUp = 2,
	k_EUserUGCList_VotedDown = 3,
	k_EUserUGCList_WillVoteLater = 4,
	k_EUserUGCList_Favorited = 5,
	k_EUserUGCList_Subscribed = 6,
	k_EUserUGCList_UsedOrPlayed = 7,
	k_EUserUGCList_Followed = 8,
} EUserUGCList;
typedef enum EUserUGCListSortOrder {
	k_EUserUGCListSortOrder_CreationOrderDesc = 0,
	k_EUserUGCListSortOrder_CreationOrderAsc = 1,
	k_EUserUGCListSortOrder_TitleAsc = 2,
	k_EUserUGCListSortOrder_LastUpdatedDesc = 3,
	k_EUserUGCListSortOrder_SubscriptionDateDesc = 4,
	k_EUserUGCListSortOrder_VoteScoreDesc = 5,
	k_EUserUGCListSortOrder_ForModeration = 6,
} EUserUGCListSortOrder;
typedef enum EUGCQuery {
	k_EUGCQuery_RankedByVote = 0,
	k_EUGCQuery_RankedByPublicationDate = 1,
	k_EUGCQuery_AcceptedForGameRankedByAcceptanceDate = 2,
	k_EUGCQuery_RankedByTrend = 3,
	k_EUGCQuery_FavoritedByFriendsRankedByPublicationDate = 4,
	k_EUGCQuery_CreatedByFriendsRankedByPublicationDate = 5,
	k_EUGCQuery_RankedByNumTimesReported = 6,
	k_EUGCQuery_CreatedByFollowedUsersRankedByPublicationDate = 7,
	k_EUGCQuery_NotYetRated = 8,
	k_EUGCQuery_RankedByTotalVotesAsc = 9,
	k_EUGCQuery_RankedByVotesUp = 10,
	k_EUGCQuery_RankedByTextSearch = 11,
	k_EUGCQuery_RankedByTotalUniqueSubscriptions = 12,
	k_EUGCQuery_RankedByPlaytimeTrend = 13,
	k_EUGCQuery_RankedByTotalPlaytime = 14,
	k_EUGCQuery_RankedByAveragePlaytimeTrend = 15,
	k_EUGCQuery_RankedByLifetimeAveragePlaytime = 16,
	k_EUGCQuery_RankedByPlaytimeSessionsTrend = 17,
	k_EUGCQuery_RankedByLifetimePlaytimeSessions = 18,
} EUGCQuery;
typedef enum EItemUpdateStatus {
	k_EItemUpdateStatusInvalid = 0,
	k_EItemUpdateStatusPreparingConfig = 1,
	k_EItemUpdateStatusPreparingContent = 2,
	k_EItemUpdateStatusUploadingContent = 3,
	k_EItemUpdateStatusUploadingPreviewFile = 4,
	k_EItemUpdateStatusCommittingChanges = 5,
} EItemUpdateStatus;
typedef enum EItemState {
	k_EItemStateNone = 0,
	k_EItemStateSubscribed = 1,
	k_EItemStateLegacyItem = 2,
	k_EItemStateInstalled = 4,
	k_EItemStateNeedsUpdate = 8,
	k_EItemStateDownloading = 16,
	k_EItemStateDownloadPending = 32,
} EItemState;
typedef enum EItemStatistic {
	k_EItemStatistic_NumSubscriptions = 0,
	k_EItemStatistic_NumFavorites = 1,
	k_EItemStatistic_NumFollowers = 2,
	k_EItemStatistic_NumUniqueSubscriptions = 3,
	k_EItemStatistic_NumUniqueFavorites = 4,
	k_EItemStatistic_NumUniqueFollowers = 5,
	k_EItemStatistic_NumUniqueWebsiteViews = 6,
	k_EItemStatistic_ReportScore = 7,
	k_EItemStatistic_NumSecondsPlayed = 8,
	k_EItemStatistic_NumPlaytimeSessions = 9,
	k_EItemStatistic_NumComments = 10,
	k_EItemStatistic_NumSecondsPlayedDuringTimePeriod = 11,
	k_EItemStatistic_NumPlaytimeSessionsDuringTimePeriod = 12,
} EItemStatistic;
typedef enum EItemPreviewType {
	k_EItemPreviewType_Image = 0,
	k_EItemPreviewType_YouTubeVideo = 1,
	k_EItemPreviewType_Sketchfab = 2,
	k_EItemPreviewType_EnvironmentMap_HorizontalCross = 3,
	k_EItemPreviewType_EnvironmentMap_LatLong = 4,
	k_EItemPreviewType_ReservedMax = 255,
} EItemPreviewType;
typedef enum EHTMLMouseButton {
	eHTMLMouseButton_Left = 0,
	eHTMLMouseButton_Right = 1,
	eHTMLMouseButton_Middle = 2,
} EHTMLMouseButton;
typedef enum EMouseCursor {
	dc_user = 0,
	dc_none = 1,
	dc_arrow = 2,
	dc_ibeam = 3,
	dc_hourglass = 4,
	dc_waitarrow = 5,
	dc_crosshair = 6,
	dc_up = 7,
	dc_sizenw = 8,
	dc_sizese = 9,
	dc_sizene = 10,
	dc_sizesw = 11,
	dc_sizew = 12,
	dc_sizee = 13,
	dc_sizen = 14,
	dc_sizes = 15,
	dc_sizewe = 16,
	dc_sizens = 17,
	dc_sizeall = 18,
	dc_no = 19,
	dc_hand = 20,
	dc_blank = 21,
	dc_middle_pan = 22,
	dc_north_pan = 23,
	dc_north_east_pan = 24,
	dc_east_pan = 25,
	dc_south_east_pan = 26,
	dc_south_pan = 27,
	dc_south_west_pan = 28,
	dc_west_pan = 29,
	dc_north_west_pan = 30,
	dc_alias = 31,
	dc_cell = 32,
	dc_colresize = 33,
	dc_copycur = 34,
	dc_verticaltext = 35,
	dc_rowresize = 36,
	dc_zoomin = 37,
	dc_zoomout = 38,
	dc_help = 39,
	dc_custom = 40,
	dc_last = 41,
} EMouseCursor;
typedef enum EHTMLKeyModifiers {
	k_eHTMLKeyModifier_None = 0,
	k_eHTMLKeyModifier_AltDown = 1,
	k_eHTMLKeyModifier_CtrlDown = 2,
	k_eHTMLKeyModifier_ShiftDown = 4,
} EHTMLKeyModifiers;
typedef enum ESteamItemFlags {
	k_ESteamItemNoTrade = 1,
	k_ESteamItemRemoved = 256,
	k_ESteamItemConsumed = 512,
} ESteamItemFlags;
typedef enum EParentalFeature {
	k_EFeatureInvalid = 0,
	k_EFeatureStore = 1,
	k_EFeatureCommunity = 2,
	k_EFeatureProfile = 3,
	k_EFeatureFriends = 4,
	k_EFeatureNews = 5,
	k_EFeatureTrading = 6,
	k_EFeatureSettings = 7,
	k_EFeatureConsole = 8,
	k_EFeatureBrowser = 9,
	k_EFeatureParentalSetup = 10,
	k_EFeatureLibrary = 11,
	k_EFeatureTest = 12,
	k_EFeatureMax = 13,
} EParentalFeature;
typedef struct {
	uint32 m_unAccountID;
	unsigned int m_unAccountInstance;
	unsigned int m_EAccountType;
	enum EUniverse m_EUniverse;
} SteamIDComponent_t;
typedef struct {
	SteamIDComponent_t m_comp;
	uint64 m_unAll64Bits;
} SteamID_t;
typedef struct {
	unsigned int m_nAppID;
	unsigned int m_nType;
	unsigned int m_nModID;
} GameID_t;
typedef struct {
	HSteamUser m_hSteamUser;
	int m_iCallback;
	uint8 * m_pubParam;
	int m_cubParam;
} CallbackMsg_t;
typedef struct { 
	enum EResult m_eResult;
	_Bool m_bStillRetrying;
} SteamServerConnectFailure_t;
typedef struct {
	enum EResult m_eResult;
} SteamServersDisconnected_t;
typedef struct {
	uint32 m_uAppID;
	uint32 m_unGameServerIP;
	uint16 m_usGameServerPort;
	uint16 m_bSecure;
	uint32 m_uReason;
} ClientGameServerDeny_t;
typedef struct {
	CSteamID m_SteamID;
	enum EAuthSessionResponse m_eAuthSessionResponse;
	CSteamID m_OwnerSteamID;
} ValidateAuthTicketResponse_t;
typedef struct {
	uint32 m_unAppID;
	uint64 m_ulOrderID;
	uint8 m_bAuthorized;
} MicroTxnAuthorizationResponse_t;
typedef struct {
	enum EResult m_eResult;
} EncryptedAppTicketResponse_t;
typedef struct {
	HAuthTicket m_hAuthTicket;
	enum EResult m_eResult;
} GetAuthSessionTicketResponse_t;
typedef struct {
	char m_szURL[256];
} GameWebCallback_t;
typedef struct {
	char m_szURL[512];
} StoreAuthURLResponse_t;
typedef struct CGameID {
	unsigned int m_nAppID;
	unsigned int m_nType;
	unsigned int m_nModID;
	
	
	
} CGameID;
typedef struct {
	CGameID m_gameID;
	uint32 m_unGameIP;
	uint16 m_usGamePort;
	uint16 m_usQueryPort;
	CSteamID m_steamIDLobby;
} FriendGameInfo_t;
typedef struct {
	uint32 m_uiOnlineSessionInstances;
	uint8 m_uiPublishedToFriendsSessionInstance;
} FriendSessionStateInfo_t;
typedef struct {
	uint64 m_ulSteamID;
	int m_nChangeFlags;
} PersonaStateChange_t;
typedef struct {
	uint8 m_bActive;
} GameOverlayActivated_t;
typedef struct {
	char m_rgchServer[64];
	char m_rgchPassword[64];
} GameServerChangeRequested_t;
typedef struct {
	CSteamID m_steamIDLobby;
	CSteamID m_steamIDFriend;
} GameLobbyJoinRequested_t;
typedef struct {
	CSteamID m_steamID;
	int m_iImage;
	int m_iWide;
	int m_iTall;
} AvatarImageLoaded_t;
typedef struct {
	CSteamID m_steamIDClan;
	int m_cOfficers;
	uint8 m_bSuccess;
} ClanOfficerListResponse_t;
typedef struct {
	CSteamID m_steamIDFriend;
	AppId_t m_nAppID;
} FriendRichPresenceUpdate_t;
typedef struct {
	CSteamID m_steamIDFriend;
	char m_rgchConnect[256];
} GameRichPresenceJoinRequested_t;
typedef struct {
	CSteamID m_steamIDClanChat;
	CSteamID m_steamIDUser;
	int m_iMessageID;
} GameConnectedClanChatMsg_t;
typedef struct {
	CSteamID m_steamIDClanChat;
	CSteamID m_steamIDUser;
} GameConnectedChatJoin_t;
typedef struct {
	CSteamID m_steamIDClanChat;
	CSteamID m_steamIDUser;
	_Bool m_bKicked;
	_Bool m_bDropped;
} GameConnectedChatLeave_t;
typedef struct {
	_Bool m_bSuccess;
} DownloadClanActivityCountsResult_t;
typedef struct {
	CSteamID m_steamIDClanChat;
	enum EChatRoomEnterResponse m_eChatRoomEnterResponse;
} JoinClanChatRoomCompletionResult_t;
typedef struct {
	CSteamID m_steamIDUser;
	int m_iMessageID;
} GameConnectedFriendChatMsg_t;
typedef struct {
	enum EResult m_eResult;
	CSteamID m_steamID;
	int m_nCount;
} FriendsGetFollowerCount_t;
typedef struct {
	enum EResult m_eResult;
	CSteamID m_steamID;
	_Bool m_bIsFollowing;
} FriendsIsFollowing_t;
typedef struct {
	enum EResult m_eResult;
	CSteamID m_rgSteamID[50];
	int32 m_nResultsReturned;
	int32 m_nTotalResultCount;
} FriendsEnumerateFollowingList_t;
typedef struct {
	_Bool m_bSuccess;
	_Bool m_bLocalSuccess;
	enum EResult m_result;
} SetPersonaNameResponse_t;
typedef struct {
	uint8 m_nMinutesBatteryLeft;
} LowBatteryPower_t;
typedef struct {
	SteamAPICall_t m_hAsyncCall;
	int m_iCallback;
	uint32 m_cubParam;
} SteamAPICallCompleted_t;
typedef struct {
	enum ECheckFileSignature m_eCheckFileSignature;
} CheckFileSignature_t;
typedef struct {
	_Bool m_bSubmitted;
	uint32 m_unSubmittedText;
} GamepadTextInputDismissed_t;
typedef struct {
	char m_szKey[256];
	char m_szValue[256];
} MatchMakingKeyValuePair_t;
typedef struct {
	uint16 m_usConnectionPort;
	uint16 m_usQueryPort;
	uint32 m_unIP;
} servernetadr_t;
typedef struct {
	servernetadr_t m_NetAdr;
	int m_nPing;
	_Bool m_bHadSuccessfulResponse;
	_Bool m_bDoNotRefresh;
	char m_szGameDir[32];
	char m_szMap[32];
	char m_szGameDescription[64];
	uint32 m_nAppID;
	int m_nPlayers;
	int m_nMaxPlayers;
	int m_nBotPlayers;
	_Bool m_bPassword;
	_Bool m_bSecure;
	uint32 m_ulTimeLastPlayed;
	int m_nServerVersion;
	char m_szServerName[64];
	char m_szGameTags[128];
	CSteamID m_steamID;
} gameserveritem_t;
typedef struct {
	uint32 m_nIP;
	uint32 m_nQueryPort;
	uint32 m_nConnPort;
	uint32 m_nAppID;
	uint32 m_nFlags;
	_Bool m_bAdd;
	AccountID_t m_unAccountId;
} FavoritesListChanged_t;
typedef struct {
	uint64 m_ulSteamIDUser;
	uint64 m_ulSteamIDLobby;
	uint64 m_ulGameID;
} LobbyInvite_t;
typedef struct {
	uint64 m_ulSteamIDLobby;
	uint32 m_rgfChatPermissions;
	_Bool m_bLocked;
	uint32 m_EChatRoomEnterResponse;
} LobbyEnter_t;
typedef struct {
	uint64 m_ulSteamIDLobby;
	uint64 m_ulSteamIDMember;
	uint8 m_bSuccess;
} LobbyDataUpdate_t;
typedef struct {
	uint64 m_ulSteamIDLobby;
	uint64 m_ulSteamIDUserChanged;
	uint64 m_ulSteamIDMakingChange;
	uint32 m_rgfChatMemberStateChange;
} LobbyChatUpdate_t;
typedef struct {
	uint64 m_ulSteamIDLobby;
	uint64 m_ulSteamIDUser;
	uint8 m_eChatEntryType;
	uint32 m_iChatID;
} LobbyChatMsg_t;
typedef struct {
	uint64 m_ulSteamIDLobby;
	uint64 m_ulSteamIDGameServer;
	uint32 m_unIP;
	uint16 m_usPort;
} LobbyGameCreated_t;
typedef struct {
	uint32 m_nLobbiesMatching;
} LobbyMatchList_t;
typedef struct {
	uint64 m_ulSteamIDLobby;
	uint64 m_ulSteamIDAdmin;
	uint8 m_bKickedDueToDisconnect;
} LobbyKicked_t;
typedef struct {
	enum EResult m_eResult;
	uint64 m_ulSteamIDLobby;
} LobbyCreated_t;
typedef struct {
	_Bool m_bGameBootInviteExists;
	CSteamID m_steamIDLobby;
} PSNGameBootInviteResult_t;
typedef struct {
	enum EResult m_eResult;
} FavoritesListAccountsUpdated_t;
typedef struct {
	const char ** m_ppStrings;
	int32 m_nNumStrings;
} SteamParamStringArray_t;
typedef struct {
	AppId_t m_nAppID;
	enum EResult m_eResult;
	int m_unNumDownloads;
} RemoteStorageAppSyncedClient_t;
typedef struct {
	AppId_t m_nAppID;
	enum EResult m_eResult;
	int m_unNumUploads;
} RemoteStorageAppSyncedServer_t;
typedef struct {
	char m_rgchCurrentFile[260];
	AppId_t m_nAppID;
	uint32 m_uBytesTransferredThisChunk;
	double m_dAppPercentComplete;
	_Bool m_bUploading;
} RemoteStorageAppSyncProgress_t;
typedef struct {
	AppId_t m_nAppID;
	enum EResult m_eResult;
} RemoteStorageAppSyncStatusCheck_t;
typedef struct {
	enum EResult m_eResult;
	UGCHandle_t m_hFile;
	char m_rgchFilename[260];
} RemoteStorageFileShareResult_t;
typedef struct {
	enum EResult m_eResult;
	PublishedFileId_t m_nPublishedFileId;
	_Bool m_bUserNeedsToAcceptWorkshopLegalAgreement;
} RemoteStoragePublishFileResult_t;
typedef struct {
	enum EResult m_eResult;
	PublishedFileId_t m_nPublishedFileId;
} RemoteStorageDeletePublishedFileResult_t;
typedef struct {
	enum EResult m_eResult;
	int32 m_nResultsReturned;
	int32 m_nTotalResultCount;
	PublishedFileId_t m_rgPublishedFileId[50];
} RemoteStorageEnumerateUserPublishedFilesResult_t;
typedef struct {
	enum EResult m_eResult;
	PublishedFileId_t m_nPublishedFileId;
} RemoteStorageSubscribePublishedFileResult_t;
typedef struct {
	enum EResult m_eResult;
	int32 m_nResultsReturned;
	int32 m_nTotalResultCount;
	PublishedFileId_t m_rgPublishedFileId[50];
	uint32 m_rgRTimeSubscribed[50];
} RemoteStorageEnumerateUserSubscribedFilesResult_t;
typedef struct {
	enum EResult m_eResult;
	PublishedFileId_t m_nPublishedFileId;
} RemoteStorageUnsubscribePublishedFileResult_t;
typedef struct {
	enum EResult m_eResult;
	PublishedFileId_t m_nPublishedFileId;
	_Bool m_bUserNeedsToAcceptWorkshopLegalAgreement;
} RemoteStorageUpdatePublishedFileResult_t;
typedef struct {
	enum EResult m_eResult;
	UGCHandle_t m_hFile;
	AppId_t m_nAppID;
	int32 m_nSizeInBytes;
	char m_pchFileName[260];
	uint64 m_ulSteamIDOwner;
} RemoteStorageDownloadUGCResult_t;
typedef struct {
	enum EResult m_eResult;
	PublishedFileId_t m_nPublishedFileId;
	AppId_t m_nCreatorAppID;
	AppId_t m_nConsumerAppID;
	char m_rgchTitle[129];
	char m_rgchDescription[8000];
	UGCHandle_t m_hFile;
	UGCHandle_t m_hPreviewFile;
	uint64 m_ulSteamIDOwner;
	uint32 m_rtimeCreated;
	uint32 m_rtimeUpdated;
	enum ERemoteStoragePublishedFileVisibility m_eVisibility;
	_Bool m_bBanned;
	char m_rgchTags[1025];
	_Bool m_bTagsTruncated;
	char m_pchFileName[260];
	int32 m_nFileSize;
	int32 m_nPreviewFileSize;
	char m_rgchURL[256];
	enum EWorkshopFileType m_eFileType;
	_Bool m_bAcceptedForUse;
} RemoteStorageGetPublishedFileDetailsResult_t;
typedef struct {
	enum EResult m_eResult;
	int32 m_nResultsReturned;
	int32 m_nTotalResultCount;
	PublishedFileId_t m_rgPublishedFileId[50] ;
	float m_rgScore[50];
	AppId_t m_nAppId;
	uint32 m_unStartIndex;
} RemoteStorageEnumerateWorkshopFilesResult_t;
typedef struct {
	enum EResult m_eResult;
	PublishedFileId_t m_unPublishedFileId;
	int32 m_nVotesFor;
	int32 m_nVotesAgainst;
	int32 m_nReports;
	float m_fScore;
} RemoteStorageGetPublishedItemVoteDetailsResult_t;
typedef struct {
	PublishedFileId_t m_nPublishedFileId;
	AppId_t m_nAppID;
} RemoteStoragePublishedFileSubscribed_t;
typedef struct {
	PublishedFileId_t m_nPublishedFileId;
	AppId_t m_nAppID;
} RemoteStoragePublishedFileUnsubscribed_t;
typedef struct {
	PublishedFileId_t m_nPublishedFileId;
	AppId_t m_nAppID;
} RemoteStoragePublishedFileDeleted_t;
typedef struct {
	enum EResult m_eResult;
	PublishedFileId_t m_nPublishedFileId;
} RemoteStorageUpdateUserPublishedItemVoteResult_t;
typedef struct {
	enum EResult m_eResult;
	PublishedFileId_t m_nPublishedFileId;
	enum EWorkshopVote m_eVote;
} RemoteStorageUserVoteDetails_t;
typedef struct {
	enum EResult m_eResult;
	int32 m_nResultsReturned;
	int32 m_nTotalResultCount;
	PublishedFileId_t m_rgPublishedFileId[50];
} RemoteStorageEnumerateUserSharedWorkshopFilesResult_t;
typedef struct {
	enum EResult m_eResult;
	PublishedFileId_t m_nPublishedFileId;
	enum EWorkshopFileAction m_eAction;
} RemoteStorageSetUserPublishedFileActionResult_t;
typedef struct {
	enum EResult m_eResult;
	enum EWorkshopFileAction m_eAction;
	int32 m_nResultsReturned;
	int32 m_nTotalResultCount;
	PublishedFileId_t m_rgPublishedFileId[50];
	uint32 m_rgRTimeUpdated[50];
} RemoteStorageEnumeratePublishedFilesByUserActionResult_t;
typedef struct {
	double m_dPercentFile;
	_Bool m_bPreview;
} RemoteStoragePublishFileProgress_t;
typedef struct {
	PublishedFileId_t m_nPublishedFileId;
	AppId_t m_nAppID;
	uint64 m_ulUnused;
} RemoteStoragePublishedFileUpdated_t;
typedef struct {
	enum EResult m_eResult;
} RemoteStorageFileWriteAsyncComplete_t;
typedef struct {
	SteamAPICall_t m_hFileReadAsync;
	enum EResult m_eResult;
	uint32 m_nOffset;
	uint32 m_cubRead;
} RemoteStorageFileReadAsyncComplete_t;
typedef struct {
	CSteamID m_steamIDUser;
	int32 m_nGlobalRank;
	int32 m_nScore;
	int32 m_cDetails;
	UGCHandle_t m_hUGC;
} LeaderboardEntry_t;
typedef struct {
	uint64 m_nGameID;
	enum EResult m_eResult;
	CSteamID m_steamIDUser;
} UserStatsReceived_t;
typedef struct {
	uint64 m_nGameID;
	enum EResult m_eResult;
} UserStatsStored_t;
typedef struct {
	uint64 m_nGameID;
	_Bool m_bGroupAchievement;
	char m_rgchAchievementName[128];
	uint32 m_nCurProgress;
	uint32 m_nMaxProgress;
} UserAchievementStored_t;
typedef struct {
	SteamLeaderboard_t m_hSteamLeaderboard;
	uint8 m_bLeaderboardFound;
} LeaderboardFindResult_t;
typedef struct {
	SteamLeaderboard_t m_hSteamLeaderboard;
	SteamLeaderboardEntries_t m_hSteamLeaderboardEntries;
	int m_cEntryCount;
} LeaderboardScoresDownloaded_t;
typedef struct {
	uint8 m_bSuccess;
	SteamLeaderboard_t m_hSteamLeaderboard;
	int32 m_nScore;
	uint8 m_bScoreChanged;
	int m_nGlobalRankNew;
	int m_nGlobalRankPrevious;
} LeaderboardScoreUploaded_t;
typedef struct {
	uint8 m_bSuccess;
	int32 m_cPlayers;
} NumberOfCurrentPlayers_t;
typedef struct {
	CSteamID m_steamIDUser;
} UserStatsUnloaded_t;
typedef struct {
	CGameID m_nGameID;
	char m_rgchAchievementName[128];
	_Bool m_bAchieved;
	int m_nIconHandle;
} UserAchievementIconFetched_t;
typedef struct {
	uint64 m_nGameID;
	enum EResult m_eResult;
} GlobalAchievementPercentagesReady_t;
typedef struct {
	enum EResult m_eResult;
	SteamLeaderboard_t m_hSteamLeaderboard;
} LeaderboardUGCSet_t;
typedef struct {
	uint64 m_nGameID;
	enum EResult m_eResult;
	uint64 m_ulRequiredDiskSpace;
} PS3TrophiesInstalled_t;
typedef struct {
	uint64 m_nGameID;
	enum EResult m_eResult;
} GlobalStatsReceived_t;
typedef struct {
	AppId_t m_nAppID;
} DlcInstalled_t;
typedef struct {
	enum ERegisterActivationCodeResult m_eResult;
	uint32 m_unPackageRegistered;
} RegisterActivationCodeResponse_t;
typedef struct {
	enum EResult m_eResult;
	uint32 m_nAppID;
	uint32 m_cchKeyLength;
	char m_rgchKey[240];
} AppProofOfPurchaseKeyResponse_t;
typedef struct {
	enum EResult m_eResult;
	uint64 m_ulFileSize;
	uint8 m_FileSHA[20] ;
	uint32 m_unFlags;
} FileDetailsResult_t;
typedef struct {
	uint8 m_bConnectionActive;
	uint8 m_bConnecting;
	uint8 m_eP2PSessionError;
	uint8 m_bUsingRelay;
	int32 m_nBytesQueuedForSend;
	int32 m_nPacketsQueuedForSend;
	uint32 m_nRemoteIP;
	uint16 m_nRemotePort;
} P2PSessionState_t;
typedef struct {
	CSteamID m_steamIDRemote;
} P2PSessionRequest_t;
typedef struct {
	CSteamID m_steamIDRemote;
	uint8 m_eP2PSessionError;
} P2PSessionConnectFail_t;
typedef struct {
	SNetSocket_t m_hSocket;
	SNetListenSocket_t m_hListenSocket;
	CSteamID m_steamIDRemote;
	int m_eSNetSocketState;
} SocketStatusCallback_t;
typedef struct {
	ScreenshotHandle m_hLocal;
	enum EResult m_eResult;
} ScreenshotReady_t;
typedef struct {
	float m_flNewVolume;
} VolumeHasChanged_t;
typedef struct {
	_Bool m_bShuffled;
} MusicPlayerWantsShuffled_t;
typedef struct {
	_Bool m_bLooped;
} MusicPlayerWantsLooped_t;
typedef struct {
	float m_flNewVolume;
} MusicPlayerWantsVolume_t;
typedef struct {
	int nID;
} MusicPlayerSelectsQueueEntry_t;
typedef struct {
	int nID;
} MusicPlayerSelectsPlaylistEntry_t;
typedef struct {
	int m_nPlayingRepeatStatus;
} MusicPlayerWantsPlayingRepeatStatus_t;
typedef struct {
	HTTPRequestHandle m_hRequest;
	uint64 m_ulContextValue;
	_Bool m_bRequestSuccessful;
	enum EHTTPStatusCode m_eStatusCode;
	uint32 m_unBodySize;
} HTTPRequestCompleted_t;
typedef struct {
	HTTPRequestHandle m_hRequest;
	uint64 m_ulContextValue;
} HTTPRequestHeadersReceived_t;
typedef struct {
	HTTPRequestHandle m_hRequest;
	uint64 m_ulContextValue;
	uint32 m_cOffset;
	uint32 m_cBytesReceived;
} HTTPRequestDataReceived_t;
typedef struct {
	enum EControllerSourceMode eMode;
	float x;
	float y;
	_Bool bActive;
} ControllerAnalogActionData_t;
typedef struct {
	_Bool bState;
	_Bool bActive;
} ControllerDigitalActionData_t;
typedef struct {
	float rotQuatX;
	float rotQuatY;
	float rotQuatZ;
	float rotQuatW;
	float posAccelX;
	float posAccelY;
	float posAccelZ;
	float rotVelX;
	float rotVelY;
	float rotVelZ;
} ControllerMotionData_t;
typedef struct {
	PublishedFileId_t m_nPublishedFileId;
	enum EResult m_eResult;
	enum EWorkshopFileType m_eFileType;
	AppId_t m_nCreatorAppID;
	AppId_t m_nConsumerAppID;
	char m_rgchTitle[129];
	char m_rgchDescription[8000];
	uint64 m_ulSteamIDOwner;
	uint32 m_rtimeCreated;
	uint32 m_rtimeUpdated;
	uint32 m_rtimeAddedToUserList;
	enum ERemoteStoragePublishedFileVisibility m_eVisibility;
	_Bool m_bBanned;
	_Bool m_bAcceptedForUse;
	_Bool m_bTagsTruncated;
	char m_rgchTags[1025];
	UGCHandle_t m_hFile;
	UGCHandle_t m_hPreviewFile;
	char m_pchFileName[260];
	int32 m_nFileSize;
	int32 m_nPreviewFileSize;
	char m_rgchURL[256];
	uint32 m_unVotesUp;
	uint32 m_unVotesDown;
	float m_flScore;
	uint32 m_unNumChildren;
} SteamUGCDetails_t;
typedef struct {
	UGCQueryHandle_t m_handle;
	enum EResult m_eResult;
	uint32 m_unNumResultsReturned;
	uint32 m_unTotalMatchingResults;
	_Bool m_bCachedData;
} SteamUGCQueryCompleted_t;
typedef struct {
	SteamUGCDetails_t m_details;
	_Bool m_bCachedData;
} SteamUGCRequestUGCDetailsResult_t;
typedef struct {
	enum EResult m_eResult;
	PublishedFileId_t m_nPublishedFileId;
	_Bool m_bUserNeedsToAcceptWorkshopLegalAgreement;
} CreateItemResult_t;
typedef struct {
	enum EResult m_eResult;
	_Bool m_bUserNeedsToAcceptWorkshopLegalAgreement;
	PublishedFileId_t m_nPublishedFileId;
} SubmitItemUpdateResult_t;
typedef struct {
	AppId_t m_unAppID;
	PublishedFileId_t m_nPublishedFileId;
	enum EResult m_eResult;
} DownloadItemResult_t;
typedef struct {
	PublishedFileId_t m_nPublishedFileId;
	enum EResult m_eResult;
	_Bool m_bWasAddRequest;
} UserFavoriteItemsListChanged_t;
typedef struct {
	PublishedFileId_t m_nPublishedFileId;
	enum EResult m_eResult;
	_Bool m_bVoteUp;
} SetUserItemVoteResult_t;
typedef struct {
	PublishedFileId_t m_nPublishedFileId;
	enum EResult m_eResult;
	_Bool m_bVotedUp;
	_Bool m_bVotedDown;
	_Bool m_bVoteSkipped;
} GetUserItemVoteResult_t;
typedef struct {
	enum EResult m_eResult;
} StartPlaytimeTrackingResult_t;
typedef struct {
	enum EResult m_eResult;
} StopPlaytimeTrackingResult_t;
typedef struct {
	enum EResult m_eResult;
	PublishedFileId_t m_nPublishedFileId;
	PublishedFileId_t m_nChildPublishedFileId;
} AddUGCDependencyResult_t;
typedef struct {
	enum EResult m_eResult;
	PublishedFileId_t m_nPublishedFileId;
	PublishedFileId_t m_nChildPublishedFileId;
} RemoveUGCDependencyResult_t;
typedef struct {
	enum EResult m_eResult;
	PublishedFileId_t m_nPublishedFileId;
	AppId_t m_nAppID;
} AddAppDependencyResult_t;
typedef struct {
	enum EResult m_eResult;
	PublishedFileId_t m_nPublishedFileId;
	AppId_t m_nAppID;
} RemoveAppDependencyResult_t;
typedef struct {
	enum EResult m_eResult;
	PublishedFileId_t m_nPublishedFileId;
	AppId_t m_rgAppIDs[32];
	uint32 m_nNumAppDependencies;
	uint32 m_nTotalNumAppDependencies;
} GetAppDependenciesResult_t;
typedef struct {
	enum EResult m_eResult;
	PublishedFileId_t m_nPublishedFileId;
} DeleteItemResult_t;
typedef struct {
	AppId_t m_nAppID;
} SteamAppInstalled_t;
typedef struct {
	AppId_t m_nAppID;
} SteamAppUninstalled_t;
typedef struct {
	HHTMLBrowser unBrowserHandle;
} HTML_BrowserReady_t;
typedef struct {
	HHTMLBrowser unBrowserHandle;
	const char * pBGRA;
	uint32 unWide;
	uint32 unTall;
	uint32 unUpdateX;
	uint32 unUpdateY;
	uint32 unUpdateWide;
	uint32 unUpdateTall;
	uint32 unScrollX;
	uint32 unScrollY;
	float flPageScale;
	uint32 unPageSerial;
} HTML_NeedsPaint_t;
typedef struct {
	HHTMLBrowser unBrowserHandle;
	const char * pchURL;
	const char * pchTarget;
	const char * pchPostData;
	_Bool bIsRedirect;
} HTML_StartRequest_t;
typedef struct {
	HHTMLBrowser unBrowserHandle;
} HTML_CloseBrowser_t;
typedef struct {
	HHTMLBrowser unBrowserHandle;
	const char * pchURL;
	const char * pchPostData;
	_Bool bIsRedirect;
	const char * pchPageTitle;
	_Bool bNewNavigation;
} HTML_URLChanged_t;
typedef struct {
	HHTMLBrowser unBrowserHandle;
	const char * pchURL;
	const char * pchPageTitle;
} HTML_FinishedRequest_t;
typedef struct {
	HHTMLBrowser unBrowserHandle;
	const char * pchURL;
} HTML_OpenLinkInNewTab_t;
typedef struct {
	HHTMLBrowser unBrowserHandle;
	const char * pchTitle;
} HTML_ChangedTitle_t;
typedef struct {
	HHTMLBrowser unBrowserHandle;
	uint32 unResults;
	uint32 unCurrentMatch;
} HTML_SearchResults_t;
typedef struct {
	HHTMLBrowser unBrowserHandle;
	_Bool bCanGoBack;
	_Bool bCanGoForward;
} HTML_CanGoBackAndForward_t;
typedef struct {
	HHTMLBrowser unBrowserHandle;
	uint32 unScrollMax;
	uint32 unScrollCurrent;
	float flPageScale;
	_Bool bVisible;
	uint32 unPageSize;
} HTML_HorizontalScroll_t;
typedef struct {
	HHTMLBrowser unBrowserHandle;
	uint32 unScrollMax;
	uint32 unScrollCurrent;
	float flPageScale;
	_Bool bVisible;
	uint32 unPageSize;
} HTML_VerticalScroll_t;
typedef struct {
	HHTMLBrowser unBrowserHandle;
	uint32 x;
	uint32 y;
	const char * pchURL;
	_Bool bInput;
	_Bool bLiveLink;
} HTML_LinkAtPosition_t;
typedef struct {
	HHTMLBrowser unBrowserHandle;
	const char * pchMessage;
} HTML_JSAlert_t;
typedef struct {
	HHTMLBrowser unBrowserHandle;
	const char * pchMessage;
} HTML_JSConfirm_t;
typedef struct {
	HHTMLBrowser unBrowserHandle;
	const char * pchTitle;
	const char * pchInitialFile;
} HTML_FileOpenDialog_t;
typedef struct {
	HHTMLBrowser unBrowserHandle;
	const char * pchURL;
	uint32 unX;
	uint32 unY;
	uint32 unWide;
	uint32 unTall;
	HHTMLBrowser unNewWindow_BrowserHandle;
} HTML_NewWindow_t;
typedef struct {
	HHTMLBrowser unBrowserHandle;
	uint32 eMouseCursor;
} HTML_SetCursor_t;
typedef struct {
	HHTMLBrowser unBrowserHandle;
	const char * pchMsg;
} HTML_StatusText_t;
typedef struct {
	HHTMLBrowser unBrowserHandle;
	const char * pchMsg;
} HTML_ShowToolTip_t;
typedef struct {
	HHTMLBrowser unBrowserHandle;
	const char * pchMsg;
} HTML_UpdateToolTip_t;
typedef struct {
	HHTMLBrowser unBrowserHandle;
} HTML_HideToolTip_t;
typedef struct {
	HHTMLBrowser unBrowserHandle;
	HHTMLBrowser unOldBrowserHandle;
} HTML_BrowserRestarted_t;
typedef struct {
	SteamItemInstanceID_t m_itemId;
	SteamItemDef_t m_iDefinition;
	uint16 m_unQuantity;
	uint16 m_unFlags;
} SteamItemDetails_t;
typedef struct {
	SteamInventoryResult_t m_handle;
	enum EResult m_result;
} SteamInventoryResultReady_t;
typedef struct {
	SteamInventoryResult_t m_handle;
} SteamInventoryFullUpdate_t;
typedef struct {
	enum EResult m_result;
	CSteamID m_steamID;
	int m_numEligiblePromoItemDefs;
	_Bool m_bCachedData;
} SteamInventoryEligiblePromoItemDefIDs_t;
typedef struct {
	enum EResult m_result;
	uint64 m_ulOrderID;
	uint64 m_ulTransID;
} SteamInventoryStartPurchaseResult_t;
typedef struct {
	enum EResult m_result;
	char m_rgchCurrency[4];
} SteamInventoryRequestPricesResult_t;
typedef struct {
	enum EBroadcastUploadResult m_eResult;
} BroadcastUploadStop_t;
typedef struct {
	enum EResult m_eResult;
	AppId_t m_unVideoAppID;
	char m_rgchURL[256];
} GetVideoURLResult_t;
typedef struct {
	enum EResult m_eResult;
	AppId_t m_unVideoAppID;
} GetOPFSettingsResult_t;
typedef struct {
	uint8 m_nCallbackFlags;
	int m_iCallback;
} CCallbackBase;
typedef struct {
	SteamAPICall_t m_hAPICall;
	void * m_pObj;
	void(*m_func)(void *, _Bool);
} CCallResult;
typedef struct {
	void * m_pObj;
	void(*m_func)(void *);
} CCallback;
typedef struct {
	CSteamID m_SteamID;
	CSteamID m_OwnerSteamID;
} GSClientApprove_t;
typedef struct {
	CSteamID m_SteamID;
	enum EDenyReason m_eDenyReason;
	char m_rgchOptionalText[128];
} GSClientDeny_t;
typedef struct {
	CSteamID m_SteamID;
	enum EDenyReason m_eDenyReason;
} GSClientKick_t;
typedef struct {
	uint64 m_SteamID;
	char m_pchAchievement[128];
	_Bool m_bUnlocked;
} GSClientAchievementStatus_t;
typedef struct {
	uint8 m_bSecure;
} GSPolicyResponse_t;
typedef struct {
	enum EResult m_eResult;
	int32 m_nRank;
	uint32 m_unTotalConnects;
	uint32 m_unTotalMinutesPlayed;
} GSGameplayStats_t;
typedef struct {
	CSteamID m_SteamIDUser;
	CSteamID m_SteamIDGroup;
	_Bool m_bMember;
	_Bool m_bOfficer;
} GSClientGroupStatus_t;
typedef struct {
	enum EResult m_eResult;
	uint32 m_unReputationScore;
	_Bool m_bBanned;
	uint32 m_unBannedIP;
	uint16 m_usBannedPort;
	uint64 m_ulBannedGameID;
	uint32 m_unBanExpires;
} GSReputation_t;
typedef struct {
	enum EResult m_eResult;
} AssociateWithClanResult_t;
typedef struct {
	enum EResult m_eResult;
	int m_cPlayersThatDontLikeCandidate;
	int m_cPlayersThatCandidateDoesntLike;
	int m_cClanPlayersThatDontLikeCandidate;
	CSteamID m_SteamIDCandidate;
} ComputeNewPlayerCompatibilityResult_t;
typedef struct {
	enum EResult m_eResult;
	CSteamID m_steamIDUser;
} GSStatsReceived_t;
typedef struct {
	enum EResult m_eResult;
	CSteamID m_steamIDUser;
} GSStatsStored_t;
typedef struct {
	CSteamID m_steamIDUser;
} GSStatsUnloaded_t;
	
	
	
	
	
	
	
	
	
	
	
	
intptr_t SteamClient();
 bool steam_init(unsigned app_id);
 void steam_tick();
 void steam_trophy(const char *trophy_id, bool redeem);
 void steam_screenshot();
 void steam_destroy();
 int  ui_steam();
struct TCCState;
typedef struct TCCState TCCState;
 extern TCCState *(*tcc_new)(void); 
 extern int (*tcc_set_output_type)(TCCState *s, int output_type); 
 extern int (*tcc_compile_string)(TCCState *s, const char *buf); 
 extern int (*tcc_relocate)(TCCState *s1, void *ptr); 
 extern void *(*tcc_get_symbol)(TCCState *s, const char *name); 
 extern void (*tcc_delete)(TCCState *s); 
enum { TCC_OUTPUT_MEMORY =     1 }; 
enum { TCC_OUTPUT_EXE =        2 }; 
enum { TCC_OUTPUT_DLL =        3 }; 
enum { TCC_OUTPUT_OBJ =        4 }; 
enum { TCC_OUTPUT_PREPROCESS = 5 }; 
 bool       record_start(const char *outfile_mp4);
 bool        record_active();
 void       record_stop(void);
 texture_t* webcam(bool enabled); 
typedef struct bqws_socket bqws_socket;
typedef enum bqws_error {
    BQWS_OK = 0,
    BQWS_ERR_UNKNOWN,
    BQWS_ERR_SERVER_REJECT,
    BQWS_ERR_LIMIT_MAX_MEMORY_USED,
    BQWS_ERR_LIMIT_MAX_RECV_MSG_SIZE,
    BQWS_ERR_LIMIT_MAX_HANDSHAKE_SIZE,
    BQWS_ERR_LIMIT_MAX_PARTIAL_MESSAGE_PARTS,
    BQWS_ERR_CONNECT_TIMEOUT,
    BQWS_ERR_PING_TIMEOUT,
    BQWS_ERR_CLOSE_TIMEOUT,
    BQWS_ERR_ALLOCATOR,
    BQWS_ERR_BAD_CONTINUATION,
    BQWS_ERR_UNFINISHED_PARTIAL,
    BQWS_ERR_PARTIAL_CONTROL,
    BQWS_ERR_BAD_OPCODE,
    BQWS_ERR_RESERVED_BIT,
    BQWS_ERR_IO_WRITE,
    BQWS_ERR_IO_READ,
    BQWS_ERR_BAD_HANDSHAKE,
    BQWS_ERR_UNSUPPORTED_VERSION,
    BQWS_ERR_TOO_MANY_HEADERS,
    BQWS_ERR_TOO_MANY_PROTOCOLS,
    BQWS_ERR_HEADER_KEY_TOO_LONG,
    BQWS_ERR_HEADER_BAD_ACCEPT,
    BQWS_ERR_HEADER_PARSE,
} bqws_error;
typedef enum bqws_state {
    BQWS_STATE_INVALID,
    BQWS_STATE_CONNECTING,
    BQWS_STATE_OPEN,
    BQWS_STATE_CLOSING,
    BQWS_STATE_CLOSED,
} bqws_state;
typedef enum bqws_close_reason {
    BQWS_CLOSE_INVALID = 0,
    BQWS_CLOSE_NORMAL            = 1000,
    BQWS_CLOSE_GOING_AWAY        = 1001,
    BQWS_CLOSE_PROTOCOL_ERROR    = 1002,
    BQWS_CLOSE_UNSUPPORTED_TYPE  = 1003,
    BQWS_CLOSE_NO_REASON         = 1005,
    BQWS_CLOSE_ABNORMAL          = 1006,
    BQWS_CLOSE_BAD_DATA          = 1007,
    BQWS_CLOSE_GENERIC_ERROR     = 1008,
    BQWS_CLOSE_MESSAGE_TOO_BIG   = 1009,
    BQWS_CLOSE_EXTENSION_MISSING = 1010,
    BQWS_CLOSE_SERVER_ERROR      = 1011,
} bqws_close_reason;
typedef enum bqws_msg_type {
    BQWS_MSG_INVALID = 0,
    BQWS_MSG_TEXT = 0x0001,
    BQWS_MSG_BINARY = 0x0002,
    BQWS_MSG_PARTIAL_TEXT = 0x0011,
    BQWS_MSG_PARTIAL_BINARY = 0x0012,
    BQWS_MSG_FINAL_TEXT   = 0x0111,
    BQWS_MSG_FINAL_BINARY   = 0x0112,
    BQWS_MSG_CONTROL_CLOSE     = 0x1000,
    BQWS_MSG_CONTROL_PING      = 0x2000,
    BQWS_MSG_CONTROL_PONG      = 0x3000,
    BQWS_MSG_TYPE_MASK    = 0x000f,
    BQWS_MSG_PARTIAL_BIT  = 0x0010,
    BQWS_MSG_FINAL_BIT    = 0x0100,
    BQWS_MSG_CONTROL_MASK = 0xf000,
} bqws_msg_type;
typedef struct bqws_msg {
    bqws_socket *socket;
    bqws_msg_type type;
    size_t size;
    size_t capacity;
    char data[0];
} bqws_msg;
typedef void *bqws_alloc_fn(void *user, size_t size);
typedef void *bqws_realloc_fn(void *user, void *ptr, size_t old_size, size_t new_size);
typedef void bqws_free_fn(void *user, void *ptr, size_t size);
typedef void bqws_io_init_fn(void *user, bqws_socket *ws);
typedef size_t bqws_io_send_fn(void *user, bqws_socket *ws, const void *data, size_t size);
typedef size_t bqws_io_recv_fn(void *user, bqws_socket *ws, void *data, size_t max_size, size_t min_size);
typedef void bqws_io_notify_fn(void *user, bqws_socket *ws);
typedef bool bqws_io_flush_fn(void *user, bqws_socket *ws);
typedef void bqws_io_close_fn(void *user, bqws_socket *ws);
typedef bool bqws_message_fn(void *user, bqws_socket *ws, bqws_msg *msg);
typedef bool bqws_send_message_fn(void *user, bqws_socket *ws, bqws_msg *msg);
typedef void bqws_peek_fn(void *user, bqws_socket *ws, bqws_msg *msg, bool received);
typedef void bqws_log_fn(void *user, bqws_socket *ws, const char *line);
typedef void bqws_error_fn(void *user, bqws_socket *ws, bqws_error error);
typedef struct bqws_allocator {
    void *user;
    bqws_alloc_fn *alloc_fn;
    bqws_realloc_fn *realloc_fn;
    bqws_free_fn *free_fn;
} bqws_allocator;
typedef struct bqws_io {
    void *user;
    bqws_io_init_fn *init_fn;
    bqws_io_send_fn *send_fn;
    bqws_io_recv_fn *recv_fn;
    bqws_io_notify_fn *notify_fn;
    bqws_io_flush_fn *flush_fn;
    bqws_io_close_fn *close_fn;
} bqws_io;
typedef struct bqws_limits {
    size_t max_memory_used;
    size_t max_recv_msg_size;
    size_t max_handshake_size;
    size_t max_recv_queue_messages;
    size_t max_recv_queue_size;
    size_t max_partial_message_parts;
} bqws_limits;
typedef struct bqws_opts {
    const char *name;
    bqws_io io;
    bqws_allocator allocator;
    bqws_limits limits;
    bqws_message_fn *message_fn;
    void *message_user;
    bqws_peek_fn *peek_fn;
    void *peek_user;
    bqws_log_fn *log_fn;
    void *log_user;
    bool log_send;
    bool log_recv;
    bqws_error_fn *error_fn;
    void *error_user;
    bqws_send_message_fn *send_message_fn;
    void *send_message_user;
    void *user_data;
    size_t user_size;
    size_t connect_timeout;
    size_t ping_interval;
    size_t close_timeout;
    size_t ping_response_timeout;
    bool recv_partial_messages;
    bool recv_control_messages;
    bool mask_server;
    bool unsafe_dont_mask_client;
    bool skip_handshake;
} bqws_opts;
typedef struct bqws_header {
    const char *name;
    const char *value;
} bqws_header;
typedef struct bqws_client_opts {
    const char *path;
    const char *host;
    const char *origin;
    const char *protocols[64];
    size_t num_protocols;
    bqws_header headers[64];
    size_t num_headers;
    bool use_random_key;
    uint8_t random_key[16];
} bqws_client_opts;
typedef void bqws_verify_fn(void *user, bqws_socket *ws, const bqws_client_opts *opts);
typedef struct bqws_server_opts {
    bqws_client_opts *verify_filter;
    bqws_verify_fn *verify_fn;
    void *verify_user;
} bqws_server_opts;
typedef struct bqws_url {
    bool secure;
    uint16_t port;
    char scheme[16];
    char host[256];
    const char *path;
} bqws_url;
typedef struct bqws_io_stats {
    uint64_t total_messages;
    uint64_t total_bytes;
    size_t queued_messages;
    size_t queued_bytes;
} bqws_io_stats;
typedef struct bqws_stats {
    bqws_io_stats recv;
    bqws_io_stats send;
} bqws_stats;
bqws_socket *bqws_new_client(const bqws_opts *opts, const bqws_client_opts *client_opts);
bqws_socket *bqws_new_server(const bqws_opts *opts, const bqws_server_opts *server_opts);
void bqws_free_socket(bqws_socket *ws);
void bqws_close(bqws_socket *ws, bqws_close_reason reason, const void *data, size_t size);
void bqws_queue_close(bqws_socket *ws, bqws_close_reason reason, const void *data, size_t size);
bqws_client_opts *bqws_server_get_client_opts(bqws_socket *ws);
void bqws_server_accept(bqws_socket *ws, const char *protocol);
void bqws_server_reject(bqws_socket *ws);
bqws_state bqws_get_state(const bqws_socket *ws);
bqws_error bqws_get_error(const bqws_socket *ws);
bool bqws_is_connecting(const bqws_socket *ws);
bool bqws_is_closed(const bqws_socket *ws);
size_t bqws_get_memory_used(const bqws_socket *ws);
bool bqws_is_server(const bqws_socket *ws);
void *bqws_user_data(const bqws_socket *ws);
size_t bqws_user_data_size(const bqws_socket *ws);
const char *bqws_get_name(const bqws_socket *ws);
bqws_stats bqws_get_stats(const bqws_socket *ws);
void *bqws_get_io_user(const bqws_socket *ws);
bool bqws_get_io_closed(const bqws_socket *ws);
bqws_limits bqws_get_limits(const bqws_socket *ws);
void bqws_set_limits(bqws_socket *ws, const bqws_limits *limits);
bqws_close_reason bqws_get_peer_close_reason(const bqws_socket *ws);
bqws_error bqws_get_peer_error(const bqws_socket *ws);
const char *bqws_get_protocol(const bqws_socket *ws);
bqws_msg *bqws_recv(bqws_socket *ws);
void bqws_free_msg(bqws_msg *msg);
void bqws_send(bqws_socket *ws, bqws_msg_type type, const void *data, size_t size);
void bqws_send_binary(bqws_socket *ws, const void *data, size_t size);
void bqws_send_text(bqws_socket *ws, const char *str);
void bqws_send_text_len(bqws_socket *ws, const void *str, size_t len);
bqws_msg *bqws_allocate_msg(bqws_socket *ws, bqws_msg_type type, size_t size);
void bqws_send_msg(bqws_socket *ws, bqws_msg *msg);
void bqws_send_begin(bqws_socket *ws, bqws_msg_type type);
void bqws_send_append(bqws_socket *ws, const void *data, size_t size);
void bqws_send_append_str(bqws_socket *ws, const char *str);
void bqws_send_append_msg(bqws_socket *ws, bqws_msg *msg);
void bqws_send_finish(bqws_socket *ws);
void bqws_send_ping(bqws_socket *ws, const void *data, size_t size);
void bqws_send_pong(bqws_socket *ws, const void *data, size_t size);
void bqws_update(bqws_socket *ws);
void bqws_update_state(bqws_socket *ws);
void bqws_update_io(bqws_socket *ws);
void bqws_update_io_read(bqws_socket *ws);
void bqws_update_io_write(bqws_socket *ws);
size_t bqws_read_from(bqws_socket *ws, const void *data, size_t size);
size_t bqws_write_to(bqws_socket *ws, void *data, size_t size);
void bqws_direct_push_msg(bqws_socket *ws, bqws_msg *msg);
void bqws_direct_set_override_state(bqws_socket *ws, bqws_state state);
void bqws_direct_fail(bqws_socket *ws, bqws_error err);
bool bqws_parse_url(bqws_url *url, const char *str);
const char *bqws_error_str(bqws_error error);
const char *bqws_msg_type_str(bqws_msg_type type);
const char *bqws_state_str(bqws_state state);
void *bqws_allocator_alloc(const bqws_allocator *at, size_t size);
void *bqws_allocator_realloc(const bqws_allocator *at, void *ptr, size_t old_size, size_t new_size);
void bqws_allocator_free(const bqws_allocator *at, void *ptr, size_t size);
typedef struct bqws_pt_server bqws_pt_server;
typedef enum bqws_pt_error_type {
    BQWS_PT_ERRTYPE_NONE,
    BQWS_PT_ERRTYPE_PT,
    BQWS_PT_ERRTYPE_WSA,
    BQWS_PT_ERRTYPE_POSIX,
    BQWS_PT_ERRTYPE_GETADDRINFO,
    BQWS_PT_ERRTYPE_OPENSSL,
} bqws_pt_error_type;
typedef enum bqws_pt_error_code {
    BQWS_PT_OK,
    BQWS_PT_ERR_NO_TLS,
    BQWS_PT_ERR_NO_SERVER_SUPPORT,
    BQWS_PT_ERR_OUT_OF_MEMORY,
    BQWS_PT_ERR_BAD_URL,
} bqws_pt_error_code;
typedef struct bqws_pt_error {
    const char *function;
    bqws_pt_error_type type;
    int64_t data;
} bqws_pt_error;
typedef enum bqws_pt_address_type {
    BQWS_PT_ADDRESS_UNKNOWN,
    BQWS_PT_ADDRESS_WEBSOCKET,
    BQWS_PT_ADDRESS_IPV4,
    BQWS_PT_ADDRESS_IPV6,
} bqws_pt_address_type;
typedef struct bqws_pt_address {
    bqws_pt_address_type type;
    uint16_t port;
    uint8_t address[16];
} bqws_pt_address;
typedef struct bqws_pt_init_opts {
    const char *ca_filename;
} bqws_pt_init_opts;
typedef struct bqws_pt_connect_opts {
    bool insecure_no_verify_host;
} bqws_pt_connect_opts;
typedef struct bqws_pt_listen_opts {
    bool secure;
    const char *certificate_file; 
    const char *private_key_file; 
    uint16_t port;
    size_t backlog;
    bool reuse_port;
    bqws_allocator allocator;
} bqws_pt_listen_opts;
bool bqws_pt_init(const bqws_pt_init_opts *opts);
void bqws_pt_shutdown();
void bqws_pt_clear_error();
bool bqws_pt_get_error(bqws_pt_error *err);
bqws_socket *bqws_pt_connect(const char *url, const bqws_pt_connect_opts *pt_opts, const bqws_opts *opts, const bqws_client_opts *client_opts);
bqws_socket *bqws_pt_connect_url(const bqws_url *url, const bqws_pt_connect_opts *pt_opts, const bqws_opts *opts, const bqws_client_opts *client_opts);
bqws_pt_server *bqws_pt_listen(const bqws_pt_listen_opts *pt_opts);
void bqws_pt_free_server(bqws_pt_server *sv);
bqws_socket *bqws_pt_accept(bqws_pt_server *sv, const bqws_opts *opts, const bqws_server_opts *server_opts);
bqws_pt_address bqws_pt_get_address(const bqws_socket *ws);
void bqws_pt_format_address(char *dst, size_t size, const bqws_pt_address *addr);
void bqws_pt_get_error_desc(char *dst, size_t size, const bqws_pt_error *err);
void bqws_pt_sleep_ms(uint32_t ms);
const char *bqws_pt_error_type_str(bqws_pt_error_type type);
const char *bqws_pt_error_code_str(bqws_pt_error_code err);
